
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024350  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c578  080244d8  080244d8  000254d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030a50  08030a50  000322e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08030a50  08030a50  00031a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030a58  08030a58  000322e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030a58  08030a58  00031a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08030a5c  08030a5c  00031a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  08030a60  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bdc0  200002e8  08030d48  000322e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000c0a8  08030d48  000330a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000322e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e24d  00000000  00000000  00032311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000aa76  00000000  00000000  0007055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029b8  00000000  00000000  0007afd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002098  00000000  00000000  0007d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b7db  00000000  00000000  0007fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004fc7f  00000000  00000000  000bb203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edd49  00000000  00000000  0010ae82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f8bcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf5c  00000000  00000000  001f8c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00204b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002e8 	.word	0x200002e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080244c0 	.word	0x080244c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002ec 	.word	0x200002ec
 80001c4:	080244c0 	.word	0x080244c0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fmul>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d06f      	beq.n	8000ec8 <__aeabi_fmul+0xf8>
 8000de8:	441a      	add	r2, r3
 8000dea:	ea80 0c01 	eor.w	ip, r0, r1
 8000dee:	0240      	lsls	r0, r0, #9
 8000df0:	bf18      	it	ne
 8000df2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df6:	d01e      	beq.n	8000e36 <__aeabi_fmul+0x66>
 8000df8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e04:	fba0 3101 	umull	r3, r1, r0, r1
 8000e08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e10:	bf3e      	ittt	cc
 8000e12:	0049      	lslcc	r1, r1, #1
 8000e14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e18:	005b      	lslcc	r3, r3, #1
 8000e1a:	ea40 0001 	orr.w	r0, r0, r1
 8000e1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e22:	2afd      	cmp	r2, #253	@ 0xfd
 8000e24:	d81d      	bhi.n	8000e62 <__aeabi_fmul+0x92>
 8000e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2e:	bf08      	it	eq
 8000e30:	f020 0001 	biceq.w	r0, r0, #1
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3e:	bf08      	it	eq
 8000e40:	0249      	lsleq	r1, r1, #9
 8000e42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e4c:	bfc2      	ittt	gt
 8000e4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e56:	4770      	bxgt	lr
 8000e58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	dc5d      	bgt.n	8000f20 <__aeabi_fmul+0x150>
 8000e64:	f112 0f19 	cmn.w	r2, #25
 8000e68:	bfdc      	itt	le
 8000e6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6e:	4770      	bxle	lr
 8000e70:	f1c2 0200 	rsb	r2, r2, #0
 8000e74:	0041      	lsls	r1, r0, #1
 8000e76:	fa21 f102 	lsr.w	r1, r1, r2
 8000e7a:	f1c2 0220 	rsb	r2, r2, #32
 8000e7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e86:	f140 0000 	adc.w	r0, r0, #0
 8000e8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8e:	bf08      	it	eq
 8000e90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e94:	4770      	bx	lr
 8000e96:	f092 0f00 	teq	r2, #0
 8000e9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0040      	lsleq	r0, r0, #1
 8000ea2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea6:	3a01      	subeq	r2, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xce>
 8000eaa:	ea40 000c 	orr.w	r0, r0, ip
 8000eae:	f093 0f00 	teq	r3, #0
 8000eb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0049      	lsleq	r1, r1, #1
 8000eba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ebe:	3b01      	subeq	r3, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xe6>
 8000ec2:	ea41 010c 	orr.w	r1, r1, ip
 8000ec6:	e78f      	b.n	8000de8 <__aeabi_fmul+0x18>
 8000ec8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	bf18      	it	ne
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d00a      	beq.n	8000eee <__aeabi_fmul+0x11e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ee2:	d1d8      	bne.n	8000e96 <__aeabi_fmul+0xc6>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f090 0f00 	teq	r0, #0
 8000ef2:	bf17      	itett	ne
 8000ef4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef8:	4608      	moveq	r0, r1
 8000efa:	f091 0f00 	teqne	r1, #0
 8000efe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f02:	d014      	beq.n	8000f2e <__aeabi_fmul+0x15e>
 8000f04:	ea92 0f0c 	teq	r2, ip
 8000f08:	d101      	bne.n	8000f0e <__aeabi_fmul+0x13e>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	d10f      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f0e:	ea93 0f0c 	teq	r3, ip
 8000f12:	d103      	bne.n	8000f1c <__aeabi_fmul+0x14c>
 8000f14:	024b      	lsls	r3, r1, #9
 8000f16:	bf18      	it	ne
 8000f18:	4608      	movne	r0, r1
 8000f1a:	d108      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f1c:	ea80 0001 	eor.w	r0, r0, r1
 8000f20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f2c:	4770      	bx	lr
 8000f2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fdiv>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d069      	beq.n	8001024 <__aeabi_fdiv+0xec>
 8000f50:	eba2 0203 	sub.w	r2, r2, r3
 8000f54:	ea80 0c01 	eor.w	ip, r0, r1
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5e:	d037      	beq.n	8000fd0 <__aeabi_fdiv+0x98>
 8000f60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf38      	it	cc
 8000f74:	005b      	lslcc	r3, r3, #1
 8000f76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	bf24      	itt	cs
 8000f82:	1a5b      	subcs	r3, r3, r1
 8000f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f9a:	bf24      	itt	cs
 8000f9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa8:	bf24      	itt	cs
 8000faa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	bf18      	it	ne
 8000fb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fba:	d1e0      	bne.n	8000f7e <__aeabi_fdiv+0x46>
 8000fbc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fbe:	f63f af50 	bhi.w	8000e62 <__aeabi_fmul+0x92>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc8:	bf08      	it	eq
 8000fca:	f020 0001 	biceq.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd8:	327f      	adds	r2, #127	@ 0x7f
 8000fda:	bfc2      	ittt	gt
 8000fdc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fe0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe4:	4770      	bxgt	lr
 8000fe6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	3a01      	subs	r2, #1
 8000ff0:	e737      	b.n	8000e62 <__aeabi_fmul+0x92>
 8000ff2:	f092 0f00 	teq	r2, #0
 8000ff6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0040      	lsleq	r0, r0, #1
 8000ffe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001002:	3a01      	subeq	r2, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xc2>
 8001006:	ea40 000c 	orr.w	r0, r0, ip
 800100a:	f093 0f00 	teq	r3, #0
 800100e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0049      	lsleq	r1, r1, #1
 8001016:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800101a:	3b01      	subeq	r3, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xda>
 800101e:	ea41 010c 	orr.w	r1, r1, ip
 8001022:	e795      	b.n	8000f50 <__aeabi_fdiv+0x18>
 8001024:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001028:	ea92 0f0c 	teq	r2, ip
 800102c:	d108      	bne.n	8001040 <__aeabi_fdiv+0x108>
 800102e:	0242      	lsls	r2, r0, #9
 8001030:	f47f af7d 	bne.w	8000f2e <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	f47f af70 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 800103c:	4608      	mov	r0, r1
 800103e:	e776      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001040:	ea93 0f0c 	teq	r3, ip
 8001044:	d104      	bne.n	8001050 <__aeabi_fdiv+0x118>
 8001046:	024b      	lsls	r3, r1, #9
 8001048:	f43f af4c 	beq.w	8000ee4 <__aeabi_fmul+0x114>
 800104c:	4608      	mov	r0, r1
 800104e:	e76e      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001050:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001054:	bf18      	it	ne
 8001056:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800105a:	d1ca      	bne.n	8000ff2 <__aeabi_fdiv+0xba>
 800105c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001060:	f47f af5c 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 8001064:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001068:	f47f af3c 	bne.w	8000ee4 <__aeabi_fmul+0x114>
 800106c:	e75f      	b.n	8000f2e <__aeabi_fmul+0x15e>
 800106e:	bf00      	nop

08001070 <__gesf2>:
 8001070:	f04f 3cff 	mov.w	ip, #4294967295
 8001074:	e006      	b.n	8001084 <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__lesf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	e002      	b.n	8001084 <__cmpsf2+0x4>
 800107e:	bf00      	nop

08001080 <__cmpsf2>:
 8001080:	f04f 0c01 	mov.w	ip, #1
 8001084:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001090:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001094:	bf18      	it	ne
 8001096:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800109a:	d011      	beq.n	80010c0 <__cmpsf2+0x40>
 800109c:	b001      	add	sp, #4
 800109e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010a2:	bf18      	it	ne
 80010a4:	ea90 0f01 	teqne	r0, r1
 80010a8:	bf58      	it	pl
 80010aa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ae:	bf88      	it	hi
 80010b0:	17c8      	asrhi	r0, r1, #31
 80010b2:	bf38      	it	cc
 80010b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b8:	bf18      	it	ne
 80010ba:	f040 0001 	orrne.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c4:	d102      	bne.n	80010cc <__cmpsf2+0x4c>
 80010c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ca:	d105      	bne.n	80010d8 <__cmpsf2+0x58>
 80010cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d0:	d1e4      	bne.n	800109c <__cmpsf2+0x1c>
 80010d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010d6:	d0e1      	beq.n	800109c <__cmpsf2+0x1c>
 80010d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__aeabi_cfrcmple>:
 80010e0:	4684      	mov	ip, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4661      	mov	r1, ip
 80010e6:	e7ff      	b.n	80010e8 <__aeabi_cfcmpeq>

080010e8 <__aeabi_cfcmpeq>:
 80010e8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ea:	f7ff ffc9 	bl	8001080 <__cmpsf2>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	bf48      	it	mi
 80010f2:	f110 0f00 	cmnmi.w	r0, #0
 80010f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f8 <__aeabi_fcmpeq>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff fff4 	bl	80010e8 <__aeabi_cfcmpeq>
 8001100:	bf0c      	ite	eq
 8001102:	2001      	moveq	r0, #1
 8001104:	2000      	movne	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmplt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffea 	bl	80010e8 <__aeabi_cfcmpeq>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmple>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffe0 	bl	80010e8 <__aeabi_cfcmpeq>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpge>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffd2 	bl	80010e0 <__aeabi_cfrcmple>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpgt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffc8 	bl	80010e0 <__aeabi_cfrcmple>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmpun>:
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001168:	d102      	bne.n	8001170 <__aeabi_fcmpun+0x14>
 800116a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800116e:	d108      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 8001170:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001174:	d102      	bne.n	800117c <__aeabi_fcmpun+0x20>
 8001176:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117a:	d102      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	4770      	bx	lr
 8001182:	f04f 0001 	mov.w	r0, #1
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2iz>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30f      	bcc.n	80011b2 <__aeabi_f2iz+0x2a>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d90d      	bls.n	80011b8 <__aeabi_f2iz+0x30>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	bf18      	it	ne
 80011ae:	4240      	negne	r0, r0
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr
 80011b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011bc:	d101      	bne.n	80011c2 <__aeabi_f2iz+0x3a>
 80011be:	0242      	lsls	r2, r0, #9
 80011c0:	d105      	bne.n	80011ce <__aeabi_f2iz+0x46>
 80011c2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011c6:	bf08      	it	eq
 80011c8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_f2uiz>:
 80011d4:	0042      	lsls	r2, r0, #1
 80011d6:	d20e      	bcs.n	80011f6 <__aeabi_f2uiz+0x22>
 80011d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011dc:	d30b      	bcc.n	80011f6 <__aeabi_f2uiz+0x22>
 80011de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011e6:	d409      	bmi.n	80011fc <__aeabi_f2uiz+0x28>
 80011e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011f0:	fa23 f002 	lsr.w	r0, r3, r2
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2uiz+0x32>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d102      	bne.n	800120c <__aeabi_f2uiz+0x38>
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	4770      	bx	lr
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <__aeabi_uldivmod>:
 8001214:	b953      	cbnz	r3, 800122c <__aeabi_uldivmod+0x18>
 8001216:	b94a      	cbnz	r2, 800122c <__aeabi_uldivmod+0x18>
 8001218:	2900      	cmp	r1, #0
 800121a:	bf08      	it	eq
 800121c:	2800      	cmpeq	r0, #0
 800121e:	bf1c      	itt	ne
 8001220:	f04f 31ff 	movne.w	r1, #4294967295
 8001224:	f04f 30ff 	movne.w	r0, #4294967295
 8001228:	f000 b98c 	b.w	8001544 <__aeabi_idiv0>
 800122c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001234:	f000 f806 	bl	8001244 <__udivmoddi4>
 8001238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800123c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001240:	b004      	add	sp, #16
 8001242:	4770      	bx	lr

08001244 <__udivmoddi4>:
 8001244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001248:	9d08      	ldr	r5, [sp, #32]
 800124a:	468e      	mov	lr, r1
 800124c:	4604      	mov	r4, r0
 800124e:	4688      	mov	r8, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14a      	bne.n	80012ea <__udivmoddi4+0xa6>
 8001254:	428a      	cmp	r2, r1
 8001256:	4617      	mov	r7, r2
 8001258:	d962      	bls.n	8001320 <__udivmoddi4+0xdc>
 800125a:	fab2 f682 	clz	r6, r2
 800125e:	b14e      	cbz	r6, 8001274 <__udivmoddi4+0x30>
 8001260:	f1c6 0320 	rsb	r3, r6, #32
 8001264:	fa01 f806 	lsl.w	r8, r1, r6
 8001268:	fa20 f303 	lsr.w	r3, r0, r3
 800126c:	40b7      	lsls	r7, r6
 800126e:	ea43 0808 	orr.w	r8, r3, r8
 8001272:	40b4      	lsls	r4, r6
 8001274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001278:	fbb8 f1fe 	udiv	r1, r8, lr
 800127c:	fa1f fc87 	uxth.w	ip, r7
 8001280:	fb0e 8811 	mls	r8, lr, r1, r8
 8001284:	fb01 f20c 	mul.w	r2, r1, ip
 8001288:	0c23      	lsrs	r3, r4, #16
 800128a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800128e:	429a      	cmp	r2, r3
 8001290:	d909      	bls.n	80012a6 <__udivmoddi4+0x62>
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	f101 30ff 	add.w	r0, r1, #4294967295
 8001298:	f080 80eb 	bcs.w	8001472 <__udivmoddi4+0x22e>
 800129c:	429a      	cmp	r2, r3
 800129e:	f240 80e8 	bls.w	8001472 <__udivmoddi4+0x22e>
 80012a2:	3902      	subs	r1, #2
 80012a4:	443b      	add	r3, r7
 80012a6:	1a9a      	subs	r2, r3, r2
 80012a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80012ac:	fb0e 2210 	mls	r2, lr, r0, r2
 80012b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80012b4:	b2a3      	uxth	r3, r4
 80012b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ba:	459c      	cmp	ip, r3
 80012bc:	d909      	bls.n	80012d2 <__udivmoddi4+0x8e>
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c4:	f080 80d7 	bcs.w	8001476 <__udivmoddi4+0x232>
 80012c8:	459c      	cmp	ip, r3
 80012ca:	f240 80d4 	bls.w	8001476 <__udivmoddi4+0x232>
 80012ce:	443b      	add	r3, r7
 80012d0:	3802      	subs	r0, #2
 80012d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012d6:	2100      	movs	r1, #0
 80012d8:	eba3 030c 	sub.w	r3, r3, ip
 80012dc:	b11d      	cbz	r5, 80012e6 <__udivmoddi4+0xa2>
 80012de:	2200      	movs	r2, #0
 80012e0:	40f3      	lsrs	r3, r6
 80012e2:	e9c5 3200 	strd	r3, r2, [r5]
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	428b      	cmp	r3, r1
 80012ec:	d905      	bls.n	80012fa <__udivmoddi4+0xb6>
 80012ee:	b10d      	cbz	r5, 80012f4 <__udivmoddi4+0xb0>
 80012f0:	e9c5 0100 	strd	r0, r1, [r5]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4608      	mov	r0, r1
 80012f8:	e7f5      	b.n	80012e6 <__udivmoddi4+0xa2>
 80012fa:	fab3 f183 	clz	r1, r3
 80012fe:	2900      	cmp	r1, #0
 8001300:	d146      	bne.n	8001390 <__udivmoddi4+0x14c>
 8001302:	4573      	cmp	r3, lr
 8001304:	d302      	bcc.n	800130c <__udivmoddi4+0xc8>
 8001306:	4282      	cmp	r2, r0
 8001308:	f200 8108 	bhi.w	800151c <__udivmoddi4+0x2d8>
 800130c:	1a84      	subs	r4, r0, r2
 800130e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001312:	2001      	movs	r0, #1
 8001314:	4690      	mov	r8, r2
 8001316:	2d00      	cmp	r5, #0
 8001318:	d0e5      	beq.n	80012e6 <__udivmoddi4+0xa2>
 800131a:	e9c5 4800 	strd	r4, r8, [r5]
 800131e:	e7e2      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001320:	2a00      	cmp	r2, #0
 8001322:	f000 8091 	beq.w	8001448 <__udivmoddi4+0x204>
 8001326:	fab2 f682 	clz	r6, r2
 800132a:	2e00      	cmp	r6, #0
 800132c:	f040 80a5 	bne.w	800147a <__udivmoddi4+0x236>
 8001330:	1a8a      	subs	r2, r1, r2
 8001332:	2101      	movs	r1, #1
 8001334:	0c03      	lsrs	r3, r0, #16
 8001336:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800133a:	b280      	uxth	r0, r0
 800133c:	b2bc      	uxth	r4, r7
 800133e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001342:	fb0e 221c 	mls	r2, lr, ip, r2
 8001346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800134a:	fb04 f20c 	mul.w	r2, r4, ip
 800134e:	429a      	cmp	r2, r3
 8001350:	d907      	bls.n	8001362 <__udivmoddi4+0x11e>
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x11c>
 800135a:	429a      	cmp	r2, r3
 800135c:	f200 80e3 	bhi.w	8001526 <__udivmoddi4+0x2e2>
 8001360:	46c4      	mov	ip, r8
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	fbb3 f2fe 	udiv	r2, r3, lr
 8001368:	fb0e 3312 	mls	r3, lr, r2, r3
 800136c:	fb02 f404 	mul.w	r4, r2, r4
 8001370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001374:	429c      	cmp	r4, r3
 8001376:	d907      	bls.n	8001388 <__udivmoddi4+0x144>
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	f102 30ff 	add.w	r0, r2, #4294967295
 800137e:	d202      	bcs.n	8001386 <__udivmoddi4+0x142>
 8001380:	429c      	cmp	r4, r3
 8001382:	f200 80cd 	bhi.w	8001520 <__udivmoddi4+0x2dc>
 8001386:	4602      	mov	r2, r0
 8001388:	1b1b      	subs	r3, r3, r4
 800138a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800138e:	e7a5      	b.n	80012dc <__udivmoddi4+0x98>
 8001390:	f1c1 0620 	rsb	r6, r1, #32
 8001394:	408b      	lsls	r3, r1
 8001396:	fa22 f706 	lsr.w	r7, r2, r6
 800139a:	431f      	orrs	r7, r3
 800139c:	fa2e fa06 	lsr.w	sl, lr, r6
 80013a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80013a4:	fbba f8f9 	udiv	r8, sl, r9
 80013a8:	fa0e fe01 	lsl.w	lr, lr, r1
 80013ac:	fa20 f306 	lsr.w	r3, r0, r6
 80013b0:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b4:	fa1f fc87 	uxth.w	ip, r7
 80013b8:	ea43 030e 	orr.w	r3, r3, lr
 80013bc:	fa00 fe01 	lsl.w	lr, r0, r1
 80013c0:	fb08 f00c 	mul.w	r0, r8, ip
 80013c4:	0c1c      	lsrs	r4, r3, #16
 80013c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	fa02 f201 	lsl.w	r2, r2, r1
 80013d0:	d90a      	bls.n	80013e8 <__udivmoddi4+0x1a4>
 80013d2:	193c      	adds	r4, r7, r4
 80013d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80013d8:	f080 809e 	bcs.w	8001518 <__udivmoddi4+0x2d4>
 80013dc:	42a0      	cmp	r0, r4
 80013de:	f240 809b 	bls.w	8001518 <__udivmoddi4+0x2d4>
 80013e2:	f1a8 0802 	sub.w	r8, r8, #2
 80013e6:	443c      	add	r4, r7
 80013e8:	1a24      	subs	r4, r4, r0
 80013ea:	b298      	uxth	r0, r3
 80013ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80013f0:	fb09 4413 	mls	r4, r9, r3, r4
 80013f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80013f8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013fc:	45a4      	cmp	ip, r4
 80013fe:	d909      	bls.n	8001414 <__udivmoddi4+0x1d0>
 8001400:	193c      	adds	r4, r7, r4
 8001402:	f103 30ff 	add.w	r0, r3, #4294967295
 8001406:	f080 8085 	bcs.w	8001514 <__udivmoddi4+0x2d0>
 800140a:	45a4      	cmp	ip, r4
 800140c:	f240 8082 	bls.w	8001514 <__udivmoddi4+0x2d0>
 8001410:	3b02      	subs	r3, #2
 8001412:	443c      	add	r4, r7
 8001414:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001418:	eba4 040c 	sub.w	r4, r4, ip
 800141c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001420:	4564      	cmp	r4, ip
 8001422:	4643      	mov	r3, r8
 8001424:	46e1      	mov	r9, ip
 8001426:	d364      	bcc.n	80014f2 <__udivmoddi4+0x2ae>
 8001428:	d061      	beq.n	80014ee <__udivmoddi4+0x2aa>
 800142a:	b15d      	cbz	r5, 8001444 <__udivmoddi4+0x200>
 800142c:	ebbe 0203 	subs.w	r2, lr, r3
 8001430:	eb64 0409 	sbc.w	r4, r4, r9
 8001434:	fa04 f606 	lsl.w	r6, r4, r6
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	431e      	orrs	r6, r3
 800143e:	40cc      	lsrs	r4, r1
 8001440:	e9c5 6400 	strd	r6, r4, [r5]
 8001444:	2100      	movs	r1, #0
 8001446:	e74e      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001448:	fbb1 fcf2 	udiv	ip, r1, r2
 800144c:	0c01      	lsrs	r1, r0, #16
 800144e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001452:	b280      	uxth	r0, r0
 8001454:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001458:	463b      	mov	r3, r7
 800145a:	fbb1 f1f7 	udiv	r1, r1, r7
 800145e:	4638      	mov	r0, r7
 8001460:	463c      	mov	r4, r7
 8001462:	46b8      	mov	r8, r7
 8001464:	46be      	mov	lr, r7
 8001466:	2620      	movs	r6, #32
 8001468:	eba2 0208 	sub.w	r2, r2, r8
 800146c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001470:	e765      	b.n	800133e <__udivmoddi4+0xfa>
 8001472:	4601      	mov	r1, r0
 8001474:	e717      	b.n	80012a6 <__udivmoddi4+0x62>
 8001476:	4610      	mov	r0, r2
 8001478:	e72b      	b.n	80012d2 <__udivmoddi4+0x8e>
 800147a:	f1c6 0120 	rsb	r1, r6, #32
 800147e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001482:	40b7      	lsls	r7, r6
 8001484:	fa0e fe06 	lsl.w	lr, lr, r6
 8001488:	fa20 f101 	lsr.w	r1, r0, r1
 800148c:	ea41 010e 	orr.w	r1, r1, lr
 8001490:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001494:	fbbc f8fe 	udiv	r8, ip, lr
 8001498:	b2bc      	uxth	r4, r7
 800149a:	fb0e cc18 	mls	ip, lr, r8, ip
 800149e:	fb08 f904 	mul.w	r9, r8, r4
 80014a2:	0c0a      	lsrs	r2, r1, #16
 80014a4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80014a8:	40b0      	lsls	r0, r6
 80014aa:	4591      	cmp	r9, r2
 80014ac:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80014b0:	b280      	uxth	r0, r0
 80014b2:	d93e      	bls.n	8001532 <__udivmoddi4+0x2ee>
 80014b4:	18ba      	adds	r2, r7, r2
 80014b6:	f108 3cff 	add.w	ip, r8, #4294967295
 80014ba:	d201      	bcs.n	80014c0 <__udivmoddi4+0x27c>
 80014bc:	4591      	cmp	r9, r2
 80014be:	d81f      	bhi.n	8001500 <__udivmoddi4+0x2bc>
 80014c0:	eba2 0209 	sub.w	r2, r2, r9
 80014c4:	fbb2 f9fe 	udiv	r9, r2, lr
 80014c8:	fb09 f804 	mul.w	r8, r9, r4
 80014cc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014d0:	b28a      	uxth	r2, r1
 80014d2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014d6:	4542      	cmp	r2, r8
 80014d8:	d229      	bcs.n	800152e <__udivmoddi4+0x2ea>
 80014da:	18ba      	adds	r2, r7, r2
 80014dc:	f109 31ff 	add.w	r1, r9, #4294967295
 80014e0:	d2c2      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e2:	4542      	cmp	r2, r8
 80014e4:	d2c0      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e6:	f1a9 0102 	sub.w	r1, r9, #2
 80014ea:	443a      	add	r2, r7
 80014ec:	e7bc      	b.n	8001468 <__udivmoddi4+0x224>
 80014ee:	45c6      	cmp	lr, r8
 80014f0:	d29b      	bcs.n	800142a <__udivmoddi4+0x1e6>
 80014f2:	ebb8 0302 	subs.w	r3, r8, r2
 80014f6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014fa:	3801      	subs	r0, #1
 80014fc:	46e1      	mov	r9, ip
 80014fe:	e794      	b.n	800142a <__udivmoddi4+0x1e6>
 8001500:	eba7 0909 	sub.w	r9, r7, r9
 8001504:	444a      	add	r2, r9
 8001506:	fbb2 f9fe 	udiv	r9, r2, lr
 800150a:	f1a8 0c02 	sub.w	ip, r8, #2
 800150e:	fb09 f804 	mul.w	r8, r9, r4
 8001512:	e7db      	b.n	80014cc <__udivmoddi4+0x288>
 8001514:	4603      	mov	r3, r0
 8001516:	e77d      	b.n	8001414 <__udivmoddi4+0x1d0>
 8001518:	46d0      	mov	r8, sl
 800151a:	e765      	b.n	80013e8 <__udivmoddi4+0x1a4>
 800151c:	4608      	mov	r0, r1
 800151e:	e6fa      	b.n	8001316 <__udivmoddi4+0xd2>
 8001520:	443b      	add	r3, r7
 8001522:	3a02      	subs	r2, #2
 8001524:	e730      	b.n	8001388 <__udivmoddi4+0x144>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443b      	add	r3, r7
 800152c:	e719      	b.n	8001362 <__udivmoddi4+0x11e>
 800152e:	4649      	mov	r1, r9
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x224>
 8001532:	eba2 0209 	sub.w	r2, r2, r9
 8001536:	fbb2 f9fe 	udiv	r9, r2, lr
 800153a:	46c4      	mov	ip, r8
 800153c:	fb09 f804 	mul.w	r8, r9, r4
 8001540:	e7c4      	b.n	80014cc <__udivmoddi4+0x288>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <pin_to_index>:
} ButtonInfo_t;

static volatile ButtonInfo_t buttons[BTN_COUNT];

static int pin_to_index(uint16_t gpio_pin)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
    switch (gpio_pin) {
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d006      	beq.n	8001566 <pin_to_index+0x1e>
 8001558:	2b08      	cmp	r3, #8
 800155a:	dc0a      	bgt.n	8001572 <pin_to_index+0x2a>
 800155c:	2b02      	cmp	r3, #2
 800155e:	d006      	beq.n	800156e <pin_to_index+0x26>
 8001560:	2b04      	cmp	r3, #4
 8001562:	d002      	beq.n	800156a <pin_to_index+0x22>
 8001564:	e005      	b.n	8001572 <pin_to_index+0x2a>
    case GPIO_PIN_3: return BTN_A;  // Изменено
 8001566:	2300      	movs	r3, #0
 8001568:	e005      	b.n	8001576 <pin_to_index+0x2e>
    case GPIO_PIN_2: return BTN_B;
 800156a:	2301      	movs	r3, #1
 800156c:	e003      	b.n	8001576 <pin_to_index+0x2e>
    case GPIO_PIN_1: return BTN_C;  // Изменено
 800156e:	2302      	movs	r3, #2
 8001570:	e001      	b.n	8001576 <pin_to_index+0x2e>
    default: return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <Buttons_GetState>:

ButtonState_t Buttons_GetState(ButtonId_t id)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
    uint16_t pin;
    switch (id) {
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d00c      	beq.n	80015aa <Buttons_GetState+0x2a>
 8001590:	2b02      	cmp	r3, #2
 8001592:	dc0d      	bgt.n	80015b0 <Buttons_GetState+0x30>
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <Buttons_GetState+0x1e>
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <Buttons_GetState+0x24>
 800159c:	e008      	b.n	80015b0 <Buttons_GetState+0x30>
    case BTN_A: pin = BTN_A_PIN; break;  // Теперь это правая кнопка
 800159e:	2308      	movs	r3, #8
 80015a0:	81fb      	strh	r3, [r7, #14]
 80015a2:	e007      	b.n	80015b4 <Buttons_GetState+0x34>
    case BTN_B: pin = BTN_B_PIN; break;  // Средняя
 80015a4:	2304      	movs	r3, #4
 80015a6:	81fb      	strh	r3, [r7, #14]
 80015a8:	e004      	b.n	80015b4 <Buttons_GetState+0x34>
    case BTN_C: pin = BTN_C_PIN; break;  // Теперь это левая кнопка
 80015aa:	2302      	movs	r3, #2
 80015ac:	81fb      	strh	r3, [r7, #14]
 80015ae:	e001      	b.n	80015b4 <Buttons_GetState+0x34>
    default: return BUTTON_RELEASED;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e00a      	b.n	80015ca <Buttons_GetState+0x4a>
    }
    return (HAL_GPIO_ReadPin(BTN_GPIO_PORT, pin) == GPIO_PIN_SET) ?
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <Buttons_GetState+0x54>)
 80015ba:	f007 fb73 	bl	8008ca4 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
            BUTTON_PRESSED : BUTTON_RELEASED;
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <Buttons_Init>:

void Buttons_SetDebounceMs(uint32_t ms) { debounce_ms = ms; }
void Buttons_SetLongPressMs(uint32_t ms) { longpress_ms = ms; }

void Buttons_Init(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
    for (int i = 0; i < BTN_COUNT; ++i) {
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	e03d      	b.n	8001660 <Buttons_Init+0x88>
        buttons[i].last_tick = 0;
 80015e4:	4923      	ldr	r1, [pc, #140]	@ (8001674 <Buttons_Init+0x9c>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
        buttons[i].press_start = 0;
 80015f6:	491f      	ldr	r1, [pc, #124]	@ (8001674 <Buttons_Init+0x9c>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3304      	adds	r3, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
        buttons[i].state = BUTTON_RELEASED;
 800160a:	491a      	ldr	r1, [pc, #104]	@ (8001674 <Buttons_Init+0x9c>)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3308      	adds	r3, #8
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
        buttons[i].callback = NULL;
 800161e:	4915      	ldr	r1, [pc, #84]	@ (8001674 <Buttons_Init+0x9c>)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	330c      	adds	r3, #12
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
        buttons[i].long30_reported = 0;
 8001632:	4910      	ldr	r1, [pc, #64]	@ (8001674 <Buttons_Init+0x9c>)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3310      	adds	r3, #16
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
        buttons[i].long60_reported = 0;
 8001646:	490b      	ldr	r1, [pc, #44]	@ (8001674 <Buttons_Init+0x9c>)
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3311      	adds	r3, #17
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BTN_COUNT; ++i) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	ddbe      	ble.n	80015e4 <Buttons_Init+0xc>
    }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000304 	.word	0x20000304

08001678 <Buttons_EXTI_Handle>:
        buttons[id].callback = callback;
    }
}

void Buttons_EXTI_Handle(uint16_t GPIO_Pin)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
    int idx = pin_to_index(GPIO_Pin);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5f 	bl	8001548 <pin_to_index>
 800168a:	6178      	str	r0, [r7, #20]
    if (idx < 0) return;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f2c0 809f 	blt.w	80017d2 <Buttons_EXTI_Handle+0x15a>

    uint32_t now = HAL_GetTick();
 8001694:	f004 fd12 	bl	80060bc <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 800169a:	4951      	ldr	r1, [pc, #324]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	4b4d      	ldr	r3, [pc, #308]	@ (80017e4 <Buttons_EXTI_Handle+0x16c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	f0c0 808f 	bcc.w	80017d6 <Buttons_EXTI_Handle+0x15e>
    buttons[idx].last_tick = now;
 80016b8:	4949      	ldr	r1, [pc, #292]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

    ButtonState_t cur = Buttons_GetState((ButtonId_t)idx);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff56 	bl	8001580 <Buttons_GetState>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

    if (cur != buttons[idx].state) {
 80016d8:	4941      	ldr	r1, [pc, #260]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3308      	adds	r3, #8
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d072      	beq.n	80017d8 <Buttons_EXTI_Handle+0x160>
        buttons[idx].state = cur;
 80016f2:	493b      	ldr	r1, [pc, #236]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	701a      	strb	r2, [r3, #0]

        if (cur == BUTTON_PRESSED) {
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d11e      	bne.n	800174a <Buttons_EXTI_Handle+0xd2>
            buttons[idx].press_start = now;
 800170c:	4934      	ldr	r1, [pc, #208]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3304      	adds	r3, #4
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	601a      	str	r2, [r3, #0]
            buttons[idx].long30_reported = 0;
 8001720:	492f      	ldr	r1, [pc, #188]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3310      	adds	r3, #16
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
            buttons[idx].long60_reported = 0;
 8001734:	492a      	ldr	r1, [pc, #168]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3311      	adds	r3, #17
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e046      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
        } else {
            /* Отпускание */
            uint32_t dur = now - buttons[idx].press_start;
 800174a:	4925      	ldr	r1, [pc, #148]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	60bb      	str	r3, [r7, #8]
            if (buttons[idx].callback) {
 8001762:	491f      	ldr	r1, [pc, #124]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	330c      	adds	r3, #12
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d02f      	beq.n	80017d8 <Buttons_EXTI_Handle+0x160>
                if (dur >= longpress_ms && dur < LONG30_MS) {
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <Buttons_EXTI_Handle+0x170>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	429a      	cmp	r2, r3
 8001780:	d313      	bcc.n	80017aa <Buttons_EXTI_Handle+0x132>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001788:	4293      	cmp	r3, r2
 800178a:	d80e      	bhi.n	80017aa <Buttons_EXTI_Handle+0x132>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_LONG);
 800178c:	4914      	ldr	r1, [pc, #80]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	330c      	adds	r3, #12
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	2101      	movs	r1, #1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4798      	blx	r3
 80017a8:	e016      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
                } else if (dur < longpress_ms) {
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <Buttons_EXTI_Handle+0x170>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d211      	bcs.n	80017d8 <Buttons_EXTI_Handle+0x160>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_SHORT);
 80017b4:	490a      	ldr	r1, [pc, #40]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	330c      	adds	r3, #12
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	2100      	movs	r1, #0
 80017cc:	4610      	mov	r0, r2
 80017ce:	4798      	blx	r3
 80017d0:	e002      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
    if (idx < 0) return;
 80017d2:	bf00      	nop
 80017d4:	e000      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 80017d6:	bf00      	nop
                }
                /* Если удержали >30 или >60 — событие уже сработало в Task */
            }
        }
    }
}
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000304 	.word	0x20000304
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_GPIO_EXTI_Callback>:
    }
}

/* вызывать из stm32f2xx_it.c */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
    Buttons_EXTI_Handle(GPIO_Pin);
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff3d 	bl	8001678 <Buttons_EXTI_Handle>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800180c:	f3bf 8f4f 	dsb	sy
}
 8001810:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <__NVIC_SystemReset+0x24>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800181a:	4904      	ldr	r1, [pc, #16]	@ (800182c <__NVIC_SystemReset+0x24>)
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <__NVIC_SystemReset+0x28>)
 800181e:	4313      	orrs	r3, r2
 8001820:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
}
 8001826:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <__NVIC_SystemReset+0x20>
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	05fa0004 	.word	0x05fa0004

08001834 <OLED_ShowCurrentPage>:


// Добавим глобальную переменную для текущей страницы
int current_page = 0; // 0 = AB page, 1 = NETINFO page

void OLED_ShowCurrentPage(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001838:	2000      	movs	r0, #0
 800183a:	f004 f8c1 	bl	80059c0 <ssd1306_Fill>

    switch (current_page) {
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <OLED_ShowCurrentPage+0x40>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <OLED_ShowCurrentPage+0x18>
 8001846:	2b01      	cmp	r3, #1
 8001848:	d003      	beq.n	8001852 <OLED_ShowCurrentPage+0x1e>
 800184a:	e008      	b.n	800185e <OLED_ShowCurrentPage+0x2a>
        case 0:
            OLED_DrawABPage();
 800184c:	f002 fc72 	bl	8004134 <OLED_DrawABPage>
            break;
 8001850:	e00b      	b.n	800186a <OLED_ShowCurrentPage+0x36>
        case 1:
            OLED_DrawNetInfo(&gnetif, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	4808      	ldr	r0, [pc, #32]	@ (8001878 <OLED_ShowCurrentPage+0x44>)
 8001858:	f002 fe62 	bl	8004520 <OLED_DrawNetInfo>
            break;
 800185c:	e005      	b.n	800186a <OLED_ShowCurrentPage+0x36>
        default:
            current_page = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <OLED_ShowCurrentPage+0x40>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
            OLED_DrawABPage();
 8001864:	f002 fc66 	bl	8004134 <OLED_DrawABPage>
            break;
 8001868:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 800186a:	f004 f8c1 	bl	80059f0 <ssd1306_UpdateScreen>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000034c 	.word	0x2000034c
 8001878:	20004fc0 	.word	0x20004fc0

0800187c <Buttons_Process>:

void Buttons_Process(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
    static uint32_t btn1_last_action = 0;
    static uint32_t btn3_last_action = 0;
    static uint8_t btn1_held = 0;
    static uint8_t btn3_held = 0;

    uint32_t now = HAL_GetTick();
 8001882:	f004 fc1b 	bl	80060bc <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

    // ---- Если меню Settings активно ----
    if (settings_active) {
 8001888:	4b95      	ldr	r3, [pc, #596]	@ (8001ae0 <Buttons_Process+0x264>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80c5 	beq.w	8001a1c <Buttons_Process+0x1a0>
        int any_pressed = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]

        // Обработка кнопки 3 (ПРАВАЯ кнопка - ВВЕРХ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 8001896:	2108      	movs	r1, #8
 8001898:	4892      	ldr	r0, [pc, #584]	@ (8001ae4 <Buttons_Process+0x268>)
 800189a:	f007 fa03 	bl	8008ca4 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d13c      	bne.n	800191e <Buttons_Process+0xa2>
            if (!btn3_held) {
 80018a4:	4b90      	ldr	r3, [pc, #576]	@ (8001ae8 <Buttons_Process+0x26c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <Buttons_Process+0x46>
                // Первое нажатие
                btn3_held = 1;
 80018ac:	4b8e      	ldr	r3, [pc, #568]	@ (8001ae8 <Buttons_Process+0x26c>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
                btn3_last_action = now;
 80018b2:	4a8e      	ldr	r2, [pc, #568]	@ (8001aec <Buttons_Process+0x270>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveUp();
 80018b8:	f003 fd7a 	bl	80053b0 <OLED_Settings_MoveUp>
                any_pressed = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	e030      	b.n	8001924 <Buttons_Process+0xa8>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn3_last_action;
 80018c2:	4b8a      	ldr	r3, [pc, #552]	@ (8001aec <Buttons_Process+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	607b      	str	r3, [r7, #4]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d902      	bls.n	80018dc <Buttons_Process+0x60>
                    delay_ms = 20;
 80018d6:	2314      	movs	r3, #20
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e011      	b.n	8001900 <Buttons_Process+0x84>
                } else if (hold_time > 3000) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d902      	bls.n	80018ec <Buttons_Process+0x70>
                    delay_ms = 50;
 80018e6:	2332      	movs	r3, #50	@ 0x32
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	e009      	b.n	8001900 <Buttons_Process+0x84>
                } else if (hold_time > 1000) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018f2:	d902      	bls.n	80018fa <Buttons_Process+0x7e>
                    delay_ms = 100;
 80018f4:	2364      	movs	r3, #100	@ 0x64
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	e002      	b.n	8001900 <Buttons_Process+0x84>
                } else {
                    delay_ms = 300;
 80018fa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80018fe:	61bb      	str	r3, [r7, #24]
                }

                if (now - btn3_last_action > delay_ms) {
 8001900:	4b7a      	ldr	r3, [pc, #488]	@ (8001aec <Buttons_Process+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	429a      	cmp	r2, r3
 800190c:	d20a      	bcs.n	8001924 <Buttons_Process+0xa8>
                    OLED_Settings_MoveUp();
 800190e:	f003 fd4f 	bl	80053b0 <OLED_Settings_MoveUp>
                    btn3_last_action = now;
 8001912:	4a76      	ldr	r2, [pc, #472]	@ (8001aec <Buttons_Process+0x270>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	e002      	b.n	8001924 <Buttons_Process+0xa8>
                }
            }
        } else {
            btn3_held = 0;
 800191e:	4b72      	ldr	r3, [pc, #456]	@ (8001ae8 <Buttons_Process+0x26c>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 1 (ЛЕВАЯ кнопка - ВНИЗ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8001924:	2102      	movs	r1, #2
 8001926:	486f      	ldr	r0, [pc, #444]	@ (8001ae4 <Buttons_Process+0x268>)
 8001928:	f007 f9bc 	bl	8008ca4 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d13c      	bne.n	80019ac <Buttons_Process+0x130>
            if (!btn1_held) {
 8001932:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <Buttons_Process+0x274>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <Buttons_Process+0xd4>
                // Первое нажатие
                btn1_held = 1;
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <Buttons_Process+0x274>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
                btn1_last_action = now;
 8001940:	4a6c      	ldr	r2, [pc, #432]	@ (8001af4 <Buttons_Process+0x278>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveDown();
 8001946:	f003 fd69 	bl	800541c <OLED_Settings_MoveDown>
                any_pressed = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e030      	b.n	80019b2 <Buttons_Process+0x136>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn1_last_action;
 8001950:	4b68      	ldr	r3, [pc, #416]	@ (8001af4 <Buttons_Process+0x278>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	603b      	str	r3, [r7, #0]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d902      	bls.n	800196a <Buttons_Process+0xee>
                    delay_ms = 20;
 8001964:	2314      	movs	r3, #20
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e011      	b.n	800198e <Buttons_Process+0x112>
                } else if (hold_time > 3000) {
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001970:	4293      	cmp	r3, r2
 8001972:	d902      	bls.n	800197a <Buttons_Process+0xfe>
                    delay_ms = 50;
 8001974:	2332      	movs	r3, #50	@ 0x32
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e009      	b.n	800198e <Buttons_Process+0x112>
                } else if (hold_time > 1000) {
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001980:	d902      	bls.n	8001988 <Buttons_Process+0x10c>
                    delay_ms = 100;
 8001982:	2364      	movs	r3, #100	@ 0x64
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e002      	b.n	800198e <Buttons_Process+0x112>
                } else {
                    delay_ms = 300;
 8001988:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800198c:	617b      	str	r3, [r7, #20]
                }

                if (now - btn1_last_action > delay_ms) {
 800198e:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <Buttons_Process+0x278>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	d20a      	bcs.n	80019b2 <Buttons_Process+0x136>
                    OLED_Settings_MoveDown();
 800199c:	f003 fd3e 	bl	800541c <OLED_Settings_MoveDown>
                    btn1_last_action = now;
 80019a0:	4a54      	ldr	r2, [pc, #336]	@ (8001af4 <Buttons_Process+0x278>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e002      	b.n	80019b2 <Buttons_Process+0x136>
                }
            }
        } else {
            btn1_held = 0;
 80019ac:	4b50      	ldr	r3, [pc, #320]	@ (8001af0 <Buttons_Process+0x274>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 2 (Выбор)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019b2:	2104      	movs	r1, #4
 80019b4:	484b      	ldr	r0, [pc, #300]	@ (8001ae4 <Buttons_Process+0x268>)
 80019b6:	f007 f975 	bl	8008ca4 <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d118      	bne.n	80019f2 <Buttons_Process+0x176>
            HAL_Delay(50);
 80019c0:	2032      	movs	r0, #50	@ 0x32
 80019c2:	f004 fb85 	bl	80060d0 <HAL_Delay>
            if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019c6:	2104      	movs	r1, #4
 80019c8:	4846      	ldr	r0, [pc, #280]	@ (8001ae4 <Buttons_Process+0x268>)
 80019ca:	f007 f96b 	bl	8008ca4 <HAL_GPIO_ReadPin>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10e      	bne.n	80019f2 <Buttons_Process+0x176>
                OLED_Settings_Select();
 80019d4:	f003 fd5a 	bl	800548c <OLED_Settings_Select>
                // Ждем отпускания кнопки
                while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019d8:	e002      	b.n	80019e0 <Buttons_Process+0x164>
                    HAL_Delay(10);
 80019da:	200a      	movs	r0, #10
 80019dc:	f004 fb78 	bl	80060d0 <HAL_Delay>
                while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019e0:	2104      	movs	r1, #4
 80019e2:	4840      	ldr	r0, [pc, #256]	@ (8001ae4 <Buttons_Process+0x268>)
 80019e4:	f007 f95e 	bl	8008ca4 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f5      	beq.n	80019da <Buttons_Process+0x15e>
                }
                any_pressed = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
            }
        }

        // Обновляем таймер последней активности
        if (any_pressed) settings_last_activity = now;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <Buttons_Process+0x182>
 80019f8:	4a3f      	ldr	r2, [pc, #252]	@ (8001af8 <Buttons_Process+0x27c>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6013      	str	r3, [r2, #0]

        // Если прошло 10 секунд без действий → выход из настроек
        if ((now - settings_last_activity) >= 10000) {
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <Buttons_Process+0x27c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	f240 80c9 	bls.w	8001ba2 <Buttons_Process+0x326>
            settings_active = 0;
 8001a10:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <Buttons_Process+0x264>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
            OLED_DrawABPage();
 8001a16:	f002 fb8d 	bl	8004134 <OLED_DrawABPage>
        }

        return;
 8001a1a:	e0c2      	b.n	8001ba2 <Buttons_Process+0x326>
    }

    // ---- Режим обычного переключения страниц ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {  // Правая кнопка = предыдущая страница
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	4831      	ldr	r0, [pc, #196]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a20:	f007 f940 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11f      	bne.n	8001a6a <Buttons_Process+0x1ee>
        HAL_Delay(200);
 8001a2a:	20c8      	movs	r0, #200	@ 0xc8
 8001a2c:	f004 fb50 	bl	80060d0 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 8001a30:	2108      	movs	r1, #8
 8001a32:	482c      	ldr	r0, [pc, #176]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a34:	f007 f936 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <Buttons_Process+0x1ee>
            current_page--;
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <Buttons_Process+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4a2d      	ldr	r2, [pc, #180]	@ (8001afc <Buttons_Process+0x280>)
 8001a46:	6013      	str	r3, [r2, #0]
            if (current_page < 0) current_page = 1;
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <Buttons_Process+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <Buttons_Process+0x1da>
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <Buttons_Process+0x280>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 8001a56:	f7ff feed 	bl	8001834 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET);
 8001a5a:	bf00      	nop
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	4821      	ldr	r0, [pc, #132]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a60:	f007 f920 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f8      	beq.n	8001a5c <Buttons_Process+0x1e0>
        }
    }

    if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {  // Левая кнопка = следующая страница
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	481d      	ldr	r0, [pc, #116]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a6e:	f007 f919 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11f      	bne.n	8001ab8 <Buttons_Process+0x23c>
        HAL_Delay(200);
 8001a78:	20c8      	movs	r0, #200	@ 0xc8
 8001a7a:	f004 fb29 	bl	80060d0 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4818      	ldr	r0, [pc, #96]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a82:	f007 f90f 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d115      	bne.n	8001ab8 <Buttons_Process+0x23c>
            current_page++;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <Buttons_Process+0x280>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <Buttons_Process+0x280>)
 8001a94:	6013      	str	r3, [r2, #0]
            if (current_page > 1) current_page = 0;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <Buttons_Process+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	dd02      	ble.n	8001aa4 <Buttons_Process+0x228>
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <Buttons_Process+0x280>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 8001aa4:	f7ff fec6 	bl	8001834 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET);
 8001aa8:	bf00      	nop
 8001aaa:	2102      	movs	r1, #2
 8001aac:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <Buttons_Process+0x268>)
 8001aae:	f007 f8f9 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f8      	beq.n	8001aaa <Buttons_Process+0x22e>
        }
    }

    // ---- Кнопка 2 (Settings / RESET) ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8001ab8:	2104      	movs	r1, #4
 8001aba:	480a      	ldr	r0, [pc, #40]	@ (8001ae4 <Buttons_Process+0x268>)
 8001abc:	f007 f8f2 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d146      	bne.n	8001b54 <Buttons_Process+0x2d8>
        if (!btn2_held) {
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <Buttons_Process+0x284>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11c      	bne.n	8001b08 <Buttons_Process+0x28c>
            btn2_held = 1;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <Buttons_Process+0x284>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
            btn2_press_time = HAL_GetTick();
 8001ad4:	f004 faf2 	bl	80060bc <HAL_GetTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <Buttons_Process+0x288>)
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e061      	b.n	8001ba4 <Buttons_Process+0x328>
 8001ae0:	20000340 	.word	0x20000340
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	20000350 	.word	0x20000350
 8001aec:	20000354 	.word	0x20000354
 8001af0:	20000358 	.word	0x20000358
 8001af4:	2000035c 	.word	0x2000035c
 8001af8:	20000360 	.word	0x20000360
 8001afc:	2000034c 	.word	0x2000034c
 8001b00:	20000348 	.word	0x20000348
 8001b04:	20000344 	.word	0x20000344
        } else {
            uint32_t held_time = (HAL_GetTick() - btn2_press_time) / 1000;
 8001b08:	f004 fad8 	bl	80060bc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <Buttons_Process+0x330>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <Buttons_Process+0x334>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	60bb      	str	r3, [r7, #8]

            if (held_time >= 60) {
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b22:	d912      	bls.n	8001b4a <Buttons_Process+0x2ce>
                // HARD RESET через IWDG
                IWDG->KR = 0x5555;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b26:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001b2a:	601a      	str	r2, [r3, #0]
                IWDG->PR = 0;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
                IWDG->RLR = 10;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b34:	220a      	movs	r2, #10
 8001b36:	609a      	str	r2, [r3, #8]
                IWDG->KR = 0xAAAA;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b3a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001b3e:	601a      	str	r2, [r3, #0]
                IWDG->KR = 0xCCCC;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b42:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e02c      	b.n	8001ba4 <Buttons_Process+0x328>
            } else if (held_time >= 30) {
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b1d      	cmp	r3, #29
 8001b4e:	d929      	bls.n	8001ba4 <Buttons_Process+0x328>
                // SOFT RESET
                NVIC_SystemReset();
 8001b50:	f7ff fe5a 	bl	8001808 <__NVIC_SystemReset>
            }
        }
    } else {
        if (btn2_held) {
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <Buttons_Process+0x33c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01e      	beq.n	8001b9a <Buttons_Process+0x31e>
            uint32_t press_time = (HAL_GetTick() - btn2_press_time);
 8001b5c:	f004 faae 	bl	80060bc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <Buttons_Process+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	60fb      	str	r3, [r7, #12]
            if (press_time < 1000) {
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b70:	d213      	bcs.n	8001b9a <Buttons_Process+0x31e>
                // Короткое нажатие → открыть/закрыть Settings
                if (!settings_active) {
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <Buttons_Process+0x340>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <Buttons_Process+0x314>
                    settings_active = 1;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <Buttons_Process+0x340>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
                    OLED_Settings_Init();
 8001b80:	f002 fdba 	bl	80046f8 <OLED_Settings_Init>
                    settings_last_activity = HAL_GetTick();
 8001b84:	f004 fa9a 	bl	80060bc <HAL_GetTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <Buttons_Process+0x344>)
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e004      	b.n	8001b9a <Buttons_Process+0x31e>
                } else {
                    settings_active = 0;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <Buttons_Process+0x340>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
                    OLED_DrawABPage();
 8001b96:	f002 facd 	bl	8004134 <OLED_DrawABPage>
                }
            }
        }
        btn2_held = 0;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <Buttons_Process+0x33c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e000      	b.n	8001ba4 <Buttons_Process+0x328>
        return;
 8001ba2:	bf00      	nop
    }
}
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000344 	.word	0x20000344
 8001bb0:	10624dd3 	.word	0x10624dd3
 8001bb4:	40003000 	.word	0x40003000
 8001bb8:	20000348 	.word	0x20000348
 8001bbc:	20000340 	.word	0x20000340
 8001bc0:	20000360 	.word	0x20000360

08001bc4 <crc32_calc>:
#define BKP_WORDS     (sizeof(credentials_t)/4)  // сколько слов займём

static credentials_t creds;

// CRC32 для контроля
static uint32_t crc32_calc(const void *data, size_t len) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	617b      	str	r3, [r7, #20]
    const uint8_t *p = data;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	613b      	str	r3, [r7, #16]
    while (len--) {
 8001bd8:	e01a      	b.n	8001c10 <crc32_calc+0x4c>
        crc ^= *p++;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	613a      	str	r2, [r7, #16]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	4053      	eors	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < 8; i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e00c      	b.n	8001c0a <crc32_calc+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & (-(crc & 1)));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	085a      	lsrs	r2, r3, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	4259      	negs	r1, r3
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <crc32_calc+0x64>)
 8001bfe:	400b      	ands	r3, r1
 8001c00:	4053      	eors	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < 8; i++) {
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	ddef      	ble.n	8001bf0 <crc32_calc+0x2c>
    while (len--) {
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	1e5a      	subs	r2, r3, #1
 8001c14:	603a      	str	r2, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1df      	bne.n	8001bda <crc32_calc+0x16>
        }
    }
    return ~crc;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	43db      	mvns	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	edb88320 	.word	0xedb88320

08001c2c <backup_write>:

static void backup_write(const credentials_t *c) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    const uint32_t *src = (const uint32_t*)c;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e00c      	b.n	8001c58 <backup_write+0x2c>
        HAL_RTCEx_BKUPWrite(&hrtc, BKP_BASE + i, src[i]);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <backup_write+0x3c>)
 8001c4e:	f008 fd54 	bl	800a6fa <HAL_RTCEx_BKUPWrite>
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d9ef      	bls.n	8001c3e <backup_write+0x12>
    }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20002a08 	.word	0x20002a08

08001c6c <backup_read>:

static void backup_read(credentials_t *c) {
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    uint32_t *dst = (uint32_t*)c;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e00c      	b.n	8001c98 <backup_read+0x2c>
        dst[i] = HAL_RTCEx_BKUPRead(&hrtc, BKP_BASE + i);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	18d4      	adds	r4, r2, r3
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <backup_read+0x3c>)
 8001c8a:	f008 fd4f 	bl	800a72c <HAL_RTCEx_BKUPRead>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6023      	str	r3, [r4, #0]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d9ef      	bls.n	8001c7e <backup_read+0x12>
    }
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	20002a08 	.word	0x20002a08

08001cac <Creds_Init>:

// публичные функции
void Creds_Init(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
    backup_read(&creds);
 8001cb2:	4814      	ldr	r0, [pc, #80]	@ (8001d04 <Creds_Init+0x58>)
 8001cb4:	f7ff ffda 	bl	8001c6c <backup_read>

    uint32_t crc = crc32_calc(&creds, sizeof(credentials_t) - sizeof(uint32_t));
 8001cb8:	2120      	movs	r1, #32
 8001cba:	4812      	ldr	r0, [pc, #72]	@ (8001d04 <Creds_Init+0x58>)
 8001cbc:	f7ff ff82 	bl	8001bc4 <crc32_calc>
 8001cc0:	6078      	str	r0, [r7, #4]
    if (crc != creds.crc) {
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <Creds_Init+0x58>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d017      	beq.n	8001cfc <Creds_Init+0x50>
        // дефолтные значения
        strcpy(creds.username, "admin");
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <Creds_Init+0x58>)
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <Creds_Init+0x5c>)
 8001cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd4:	6018      	str	r0, [r3, #0]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	8019      	strh	r1, [r3, #0]
        strcpy(creds.password, "admin");
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <Creds_Init+0x60>)
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <Creds_Init+0x5c>)
 8001cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce2:	6018      	str	r0, [r3, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	8019      	strh	r1, [r3, #0]
        creds.crc = crc32_calc(&creds, sizeof(credentials_t) - sizeof(uint32_t));
 8001ce8:	2120      	movs	r1, #32
 8001cea:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <Creds_Init+0x58>)
 8001cec:	f7ff ff6a 	bl	8001bc4 <crc32_calc>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <Creds_Init+0x58>)
 8001cf4:	6213      	str	r3, [r2, #32]
        backup_write(&creds);
 8001cf6:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <Creds_Init+0x58>)
 8001cf8:	f7ff ff98 	bl	8001c2c <backup_write>
    }
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000364 	.word	0x20000364
 8001d08:	080244d8 	.word	0x080244d8
 8001d0c:	20000374 	.word	0x20000374

08001d10 <Creds_CheckLogin>:

bool Creds_CheckLogin(const char *user, const char *pass) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    return (strncmp(user, creds.username, MAX_CRED_LEN) == 0 &&
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	490c      	ldr	r1, [pc, #48]	@ (8001d50 <Creds_CheckLogin+0x40>)
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f01f feeb 	bl	8021afa <strncmp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <Creds_CheckLogin+0x2e>
            strncmp(pass, creds.password, MAX_CRED_LEN) == 0);
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	4909      	ldr	r1, [pc, #36]	@ (8001d54 <Creds_CheckLogin+0x44>)
 8001d2e:	6838      	ldr	r0, [r7, #0]
 8001d30:	f01f fee3 	bl	8021afa <strncmp>
 8001d34:	4603      	mov	r3, r0
    return (strncmp(user, creds.username, MAX_CRED_LEN) == 0 &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <Creds_CheckLogin+0x2e>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <Creds_CheckLogin+0x30>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000364 	.word	0x20000364
 8001d54:	20000374 	.word	0x20000374

08001d58 <HAL_ADC_ConvCpltCallback>:
#define ADC_BUFFER_SIZE   (3 * ADC_SAMPLES)
uint32_t adc_buffer[ADC_BUFFER_SIZE];
volatile uint8_t dma_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    dma_ready = 1;
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <HAL_ADC_ConvCpltCallback+0x18>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20002908 	.word	0x20002908

08001d74 <NET_CGI_Handler>:
// Таблица CGI
const tCGI NET_CGI = {"/set_network.cgi", NET_CGI_Handler};
tCGI CGI_TAB[5];

const char* NET_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
    // Reset DHCP flag; it's set only when parameter is present
    new_dhcp_enabled = 0;
 8001d82:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <NET_CGI_Handler+0x118>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e071      	b.n	8001e72 <NET_CGI_Handler+0xfe>
        // Сетевые
        if (strcmp(pcParam[i], "ip") == 0 && pcValue[i][0] != '\0') new_ip.addr = ipaddr_addr(pcValue[i]);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	493d      	ldr	r1, [pc, #244]	@ (8001e90 <NET_CGI_Handler+0x11c>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fa14 	bl	80001c8 <strcmp>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d113      	bne.n	8001dce <NET_CGI_Handler+0x5a>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <NET_CGI_Handler+0x5a>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f01d fda5 	bl	801f910 <ipaddr_addr>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a32      	ldr	r2, [pc, #200]	@ (8001e94 <NET_CGI_Handler+0x120>)
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e04e      	b.n	8001e6c <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "mask") == 0 && pcValue[i][0] != '\0') new_mask.addr = ipaddr_addr(pcValue[i]);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	492f      	ldr	r1, [pc, #188]	@ (8001e98 <NET_CGI_Handler+0x124>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe f9f4 	bl	80001c8 <strcmp>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d113      	bne.n	8001e0e <NET_CGI_Handler+0x9a>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <NET_CGI_Handler+0x9a>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f01d fd85 	bl	801f910 <ipaddr_addr>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a24      	ldr	r2, [pc, #144]	@ (8001e9c <NET_CGI_Handler+0x128>)
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e02e      	b.n	8001e6c <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "gateway") == 0 && pcValue[i][0] != '\0') new_gw.addr = ipaddr_addr(pcValue[i]);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4921      	ldr	r1, [pc, #132]	@ (8001ea0 <NET_CGI_Handler+0x12c>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe f9d4 	bl	80001c8 <strcmp>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d113      	bne.n	8001e4e <NET_CGI_Handler+0xda>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <NET_CGI_Handler+0xda>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f01d fd65 	bl	801f910 <ipaddr_addr>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a16      	ldr	r2, [pc, #88]	@ (8001ea4 <NET_CGI_Handler+0x130>)
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e00e      	b.n	8001e6c <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "dhcp") == 0) new_dhcp_enabled = 1;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4913      	ldr	r1, [pc, #76]	@ (8001ea8 <NET_CGI_Handler+0x134>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe f9b4 	bl	80001c8 <strcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <NET_CGI_Handler+0xf8>
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <NET_CGI_Handler+0x118>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	db89      	blt.n	8001d8e <NET_CGI_Handler+0x1a>
    }

    apply_network_settings = 1;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <NET_CGI_Handler+0x138>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]

    return "/settings.html";  // редирект обратно
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <NET_CGI_Handler+0x13c>)
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20002a80 	.word	0x20002a80
 8001e90:	080244f4 	.word	0x080244f4
 8001e94:	20002a74 	.word	0x20002a74
 8001e98:	080244f8 	.word	0x080244f8
 8001e9c:	20002a78 	.word	0x20002a78
 8001ea0:	08024500 	.word	0x08024500
 8001ea4:	20002a7c 	.word	0x20002a7c
 8001ea8:	08024508 	.word	0x08024508
 8001eac:	20002a81 	.word	0x20002a81
 8001eb0:	08024510 	.word	0x08024510

08001eb4 <DATE_CGI_Handler>:

uint8_t new_year=0, new_month=0, new_day=0;
uint8_t apply_date_settings = 0;

const char* DATE_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e042      	b.n	8001f4e <DATE_CGI_Handler+0x9a>
    {
        if(strcmp(pcParam[i],"date")==0 && pcValue[i][0]!='\0')
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4923      	ldr	r1, [pc, #140]	@ (8001f60 <DATE_CGI_Handler+0xac>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe f977 	bl	80001c8 <strcmp>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d133      	bne.n	8001f48 <DATE_CGI_Handler+0x94>
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d02b      	beq.n	8001f48 <DATE_CGI_Handler+0x94>
        {
            int y,m,d;
            if(sscanf(pcValue[i], "%d-%d-%d", &y,&m,&d)==3)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	f107 0114 	add.w	r1, r7, #20
 8001efe:	f107 0218 	add.w	r2, r7, #24
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4916      	ldr	r1, [pc, #88]	@ (8001f64 <DATE_CGI_Handler+0xb0>)
 8001f0c:	f01f fcb0 	bl	8021870 <siscanf>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d118      	bne.n	8001f48 <DATE_CGI_Handler+0x94>
            {
                new_year  = (uint8_t)(y % 100);
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <DATE_CGI_Handler+0xb4>)
 8001f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1e:	1151      	asrs	r1, r2, #5
 8001f20:	17da      	asrs	r2, r3, #31
 8001f22:	1a8a      	subs	r2, r1, r2
 8001f24:	2164      	movs	r1, #100	@ 0x64
 8001f26:	fb01 f202 	mul.w	r2, r1, r2
 8001f2a:	1a9a      	subs	r2, r3, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <DATE_CGI_Handler+0xb8>)
 8001f30:	701a      	strb	r2, [r3, #0]
                new_month = (uint8_t)m;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <DATE_CGI_Handler+0xbc>)
 8001f38:	701a      	strb	r2, [r3, #0]
                new_day   = (uint8_t)d;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <DATE_CGI_Handler+0xc0>)
 8001f40:	701a      	strb	r2, [r3, #0]
                apply_date_settings = 1;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <DATE_CGI_Handler+0xc4>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<iNumParams; i++)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbb8      	blt.n	8001ec8 <DATE_CGI_Handler+0x14>
            }
        }
    }
    // --- сразу сохраняем в backup (если RTC уже инициализирован) ---
}
 8001f56:	bf00      	nop
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	08024520 	.word	0x08024520
 8001f64:	08024528 	.word	0x08024528
 8001f68:	51eb851f 	.word	0x51eb851f
 8001f6c:	20002aac 	.word	0x20002aac
 8001f70:	20002aad 	.word	0x20002aad
 8001f74:	20002aae 	.word	0x20002aae
 8001f78:	20002aaf 	.word	0x20002aaf

08001f7c <TIME_CGI_Handler>:

uint8_t new_hours = 0, new_minutes = 0, new_seconds = 0;
uint8_t apply_time_settings = 0;

const char* TIME_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
    apply_time_settings = 0;
 8001f8a:	4b40      	ldr	r3, [pc, #256]	@ (800208c <TIME_CGI_Handler+0x110>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]

    for(int i = 0; i < iNumParams; i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f94:	e071      	b.n	800207a <TIME_CGI_Handler+0xfe>
    {
        if(strcmp(pcParam[i], "time") == 0 && strlen(pcValue[i]) >= 5)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	493b      	ldr	r1, [pc, #236]	@ (8002090 <TIME_CGI_Handler+0x114>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe f910 	bl	80001c8 <strcmp>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d162      	bne.n	8002074 <TIME_CGI_Handler+0xf8>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe f90f 	bl	80001dc <strlen>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d957      	bls.n	8002074 <TIME_CGI_Handler+0xf8>
        {
            // Простой парсинг без sscanf
            char *colon = strchr(pcValue[i], ':');
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	213a      	movs	r1, #58	@ 0x3a
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f01f fd85 	bl	8021ae0 <strchr>
 8001fd6:	6238      	str	r0, [r7, #32]
            if(colon != NULL)
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d04a      	beq.n	8002074 <TIME_CGI_Handler+0xf8>
            {
                // Берем первые 2 символа как часы
                char hour_str[3] = {0};
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	801a      	strh	r2, [r3, #0]
 8001fe8:	460a      	mov	r2, r1
 8001fea:	709a      	strb	r2, [r3, #2]
                strncpy(hour_str, pcValue[i], 2);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f01f fd8e 	bl	8021b1e <strncpy>
                hour_str[2] = '\0';
 8002002:	2300      	movs	r3, #0
 8002004:	75bb      	strb	r3, [r7, #22]

                // Берем 2 символа после двоеточия как минуты
                char min_str[3] = {0};
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	2100      	movs	r1, #0
 800200c:	460a      	mov	r2, r1
 800200e:	801a      	strh	r2, [r3, #0]
 8002010:	460a      	mov	r2, r1
 8002012:	709a      	strb	r2, [r3, #2]
                strncpy(min_str, colon + 1, 2);
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	2202      	movs	r2, #2
 800201e:	4618      	mov	r0, r3
 8002020:	f01f fd7d 	bl	8021b1e <strncpy>
                min_str[2] = '\0';
 8002024:	2300      	movs	r3, #0
 8002026:	74bb      	strb	r3, [r7, #18]

                int h = atoi(hour_str);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4618      	mov	r0, r3
 800202e:	f01e fd8d 	bl	8020b4c <atoi>
 8002032:	61f8      	str	r0, [r7, #28]
                int mi = atoi(min_str);
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4618      	mov	r0, r3
 800203a:	f01e fd87 	bl	8020b4c <atoi>
 800203e:	61b8      	str	r0, [r7, #24]

                if(h >= 0 && h < 24 && mi >= 0 && mi < 60)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db16      	blt.n	8002074 <TIME_CGI_Handler+0xf8>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b17      	cmp	r3, #23
 800204a:	dc13      	bgt.n	8002074 <TIME_CGI_Handler+0xf8>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db10      	blt.n	8002074 <TIME_CGI_Handler+0xf8>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b3b      	cmp	r3, #59	@ 0x3b
 8002056:	dc0d      	bgt.n	8002074 <TIME_CGI_Handler+0xf8>
                {
                    new_hours = (uint8_t)h;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <TIME_CGI_Handler+0x118>)
 800205e:	701a      	strb	r2, [r3, #0]
                    new_minutes = (uint8_t)mi;
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <TIME_CGI_Handler+0x11c>)
 8002066:	701a      	strb	r2, [r3, #0]
                    new_seconds = 0;
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <TIME_CGI_Handler+0x120>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
                    apply_time_settings = 1;
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <TIME_CGI_Handler+0x110>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < iNumParams; i++)
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	3301      	adds	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
 800207a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	db89      	blt.n	8001f96 <TIME_CGI_Handler+0x1a>
                }
            }
        }
    }
    return "/settings.html";
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <TIME_CGI_Handler+0x124>)
}
 8002084:	4618      	mov	r0, r3
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20002ab3 	.word	0x20002ab3
 8002090:	08024544 	.word	0x08024544
 8002094:	20002ab0 	.word	0x20002ab0
 8002098:	20002ab1 	.word	0x20002ab1
 800209c:	20002ab2 	.word	0x20002ab2
 80020a0:	08024510 	.word	0x08024510

080020a4 <SNMP_CGI_Handler>:
char snmp_trap[32] = "public";
uint8_t apply_snmp_settings = 0;

// CGI-хэндлер для SNMP
const char* SNMP_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e067      	b.n	8002188 <SNMP_CGI_Handler+0xe4>
    {
        if(strcmp(pcParam[i],"snmp-read")==0 && pcValue[i][0]!='\0')
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4937      	ldr	r1, [pc, #220]	@ (80021a0 <SNMP_CGI_Handler+0xfc>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f87f 	bl	80001c8 <strcmp>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d115      	bne.n	80020fc <SNMP_CGI_Handler+0x58>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <SNMP_CGI_Handler+0x58>
        {
            strncpy(snmp_read, pcValue[i], sizeof(snmp_read)-1);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	221f      	movs	r2, #31
 80020ec:	4619      	mov	r1, r3
 80020ee:	482d      	ldr	r0, [pc, #180]	@ (80021a4 <SNMP_CGI_Handler+0x100>)
 80020f0:	f01f fd15 	bl	8021b1e <strncpy>
            snmp_read[sizeof(snmp_read)-1] = 0;
 80020f4:	4b2b      	ldr	r3, [pc, #172]	@ (80021a4 <SNMP_CGI_Handler+0x100>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	77da      	strb	r2, [r3, #31]
 80020fa:	e042      	b.n	8002182 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-write")==0 && pcValue[i][0]!='\0')
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4928      	ldr	r1, [pc, #160]	@ (80021a8 <SNMP_CGI_Handler+0x104>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f85d 	bl	80001c8 <strcmp>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d115      	bne.n	8002140 <SNMP_CGI_Handler+0x9c>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00d      	beq.n	8002140 <SNMP_CGI_Handler+0x9c>
        {
            strncpy(snmp_write, pcValue[i], sizeof(snmp_write)-1);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4413      	add	r3, r2
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	221f      	movs	r2, #31
 8002130:	4619      	mov	r1, r3
 8002132:	481e      	ldr	r0, [pc, #120]	@ (80021ac <SNMP_CGI_Handler+0x108>)
 8002134:	f01f fcf3 	bl	8021b1e <strncpy>
            snmp_write[sizeof(snmp_write)-1] = 0;
 8002138:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <SNMP_CGI_Handler+0x108>)
 800213a:	2200      	movs	r2, #0
 800213c:	77da      	strb	r2, [r3, #31]
 800213e:	e020      	b.n	8002182 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-trap")==0 && pcValue[i][0]!='\0')
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4919      	ldr	r1, [pc, #100]	@ (80021b0 <SNMP_CGI_Handler+0x10c>)
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f83b 	bl	80001c8 <strcmp>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d114      	bne.n	8002182 <SNMP_CGI_Handler+0xde>
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	4413      	add	r3, r2
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00c      	beq.n	8002182 <SNMP_CGI_Handler+0xde>
        {
            strncpy(snmp_trap, pcValue[i], sizeof(snmp_trap)-1);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	221f      	movs	r2, #31
 8002174:	4619      	mov	r1, r3
 8002176:	480f      	ldr	r0, [pc, #60]	@ (80021b4 <SNMP_CGI_Handler+0x110>)
 8002178:	f01f fcd1 	bl	8021b1e <strncpy>
            snmp_trap[sizeof(snmp_trap)-1] = 0;
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <SNMP_CGI_Handler+0x110>)
 800217e:	2200      	movs	r2, #0
 8002180:	77da      	strb	r2, [r3, #31]
    for(int i=0; i<iNumParams; i++)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	db93      	blt.n	80020b8 <SNMP_CGI_Handler+0x14>
        }
    }
    apply_snmp_settings = 1; // ставим флаг применения в main()
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <SNMP_CGI_Handler+0x114>)
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
    return "/settings.html";  // редирект обратно
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <SNMP_CGI_Handler+0x118>)
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	0802455c 	.word	0x0802455c
 80021a4:	20000010 	.word	0x20000010
 80021a8:	08024568 	.word	0x08024568
 80021ac:	20000030 	.word	0x20000030
 80021b0:	08024574 	.word	0x08024574
 80021b4:	20000050 	.word	0x20000050
 80021b8:	20002ab4 	.word	0x20002ab4
 80021bc:	08024510 	.word	0x08024510

080021c0 <Flash_GetSector>:
static bool login_request_active = false; // текущий POST = login?
static char login_buf[128];
static uint16_t login_buf_len = 0;
// --- Helpers for Flash OTA ---
static uint32_t Flash_GetSector(uint32_t Address)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    if (Address < 0x08004000U) return FLASH_SECTOR_0;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a11      	ldr	r2, [pc, #68]	@ (8002210 <Flash_GetSector+0x50>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d201      	bcs.n	80021d4 <Flash_GetSector+0x14>
 80021d0:	2300      	movs	r3, #0
 80021d2:	e018      	b.n	8002206 <Flash_GetSector+0x46>
    if (Address < 0x08008000U) return FLASH_SECTOR_1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <Flash_GetSector+0x54>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d201      	bcs.n	80021e0 <Flash_GetSector+0x20>
 80021dc:	2301      	movs	r3, #1
 80021de:	e012      	b.n	8002206 <Flash_GetSector+0x46>
    if (Address < 0x0800C000U) return FLASH_SECTOR_2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <Flash_GetSector+0x58>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d201      	bcs.n	80021ec <Flash_GetSector+0x2c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e00c      	b.n	8002206 <Flash_GetSector+0x46>
    if (Address < 0x08010000U) return FLASH_SECTOR_3;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0b      	ldr	r2, [pc, #44]	@ (800221c <Flash_GetSector+0x5c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d801      	bhi.n	80021f8 <Flash_GetSector+0x38>
 80021f4:	2303      	movs	r3, #3
 80021f6:	e006      	b.n	8002206 <Flash_GetSector+0x46>
    if (Address < 0x08020000U) return FLASH_SECTOR_4;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <Flash_GetSector+0x60>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d801      	bhi.n	8002204 <Flash_GetSector+0x44>
 8002200:	2304      	movs	r3, #4
 8002202:	e000      	b.n	8002206 <Flash_GetSector+0x46>
    return FLASH_SECTOR_5; // up to 0x0803FFFF for 256KB devices
 8002204:	2305      	movs	r3, #5
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	08004000 	.word	0x08004000
 8002214:	08008000 	.word	0x08008000
 8002218:	0800c000 	.word	0x0800c000
 800221c:	0800ffff 	.word	0x0800ffff
 8002220:	0801ffff 	.word	0x0801ffff

08002224 <Flash_IsBlank>:

static bool Flash_IsBlank(uint32_t addr, uint32_t bytes_to_check)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e00d      	b.n	8002250 <Flash_IsBlank+0x2c>
        uint32_t v = *(volatile uint32_t *)(addr + off);
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60bb      	str	r3, [r7, #8]
        if (v != 0xFFFFFFFFU) return false;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d001      	beq.n	800224a <Flash_IsBlank+0x26>
 8002246:	2300      	movs	r3, #0
 8002248:	e007      	b.n	800225a <Flash_IsBlank+0x36>
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d3ed      	bcc.n	8002234 <Flash_IsBlank+0x10>
    }
    return true;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <FW_ResetContext>:

static void FW_ResetContext(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
    fw_ctx.active = false;
 8002268:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <FW_ResetContext+0x68>)
 800226a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800226e:	2200      	movs	r2, #0
 8002270:	721a      	strb	r2, [r3, #8]
    fw_ctx.error = false;
 8002272:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <FW_ResetContext+0x68>)
 8002274:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002278:	2200      	movs	r2, #0
 800227a:	725a      	strb	r2, [r3, #9]
    fw_ctx.buffer_len = 0;
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <FW_ResetContext+0x68>)
 800227e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002282:	461a      	mov	r2, r3
 8002284:	2300      	movs	r3, #0
 8002286:	6013      	str	r3, [r2, #0]
    fw_ctx.total_len = 0;
 8002288:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <FW_ResetContext+0x68>)
 800228a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800228e:	461a      	mov	r2, r3
 8002290:	2300      	movs	r3, #0
 8002292:	6053      	str	r3, [r2, #4]
    fw_ctx.write_addr = FLASH_UPDATE_ADDR;
 8002294:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <FW_ResetContext+0x68>)
 8002296:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800229a:	461a      	mov	r2, r3
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <FW_ResetContext+0x6c>)
 800229e:	60d3      	str	r3, [r2, #12]
    fw_ctx.word_buf_len = 0;
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <FW_ResetContext+0x68>)
 80022a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022a6:	2200      	movs	r2, #0
 80022a8:	751a      	strb	r2, [r3, #20]
    fw_ctx.crc = 0xFFFFFFFFU;
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <FW_ResetContext+0x68>)
 80022ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022b0:	461a      	mov	r2, r3
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	6193      	str	r3, [r2, #24]
    fw_ctx.erased = false;
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <FW_ResetContext+0x68>)
 80022ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022be:	2200      	movs	r2, #0
 80022c0:	771a      	strb	r2, [r3, #28]
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20002ab8 	.word	0x20002ab8
 80022d0:	08020000 	.word	0x08020000

080022d4 <FW_CrcUpdate>:

static inline void FW_CrcUpdate(const uint8_t *data, uint32_t len)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < len; i++) {
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e02b      	b.n	800233c <FW_CrcUpdate+0x68>
        fw_ctx.crc ^= data[i];
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <FW_CrcUpdate+0x7c>)
 80022e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	440a      	add	r2, r1
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	4053      	eors	r3, r2
 80022f6:	4a16      	ldr	r2, [pc, #88]	@ (8002350 <FW_CrcUpdate+0x7c>)
 80022f8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80022fc:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	72fb      	strb	r3, [r7, #11]
 8002302:	e015      	b.n	8002330 <FW_CrcUpdate+0x5c>
            fw_ctx.crc = (fw_ctx.crc >> 1) ^ (0xEDB88320U & (~(fw_ctx.crc & 1U) + 1U));
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <FW_CrcUpdate+0x7c>)
 8002306:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	085a      	lsrs	r2, r3, #1
 800230e:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <FW_CrcUpdate+0x7c>)
 8002310:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	4259      	negs	r1, r3
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <FW_CrcUpdate+0x80>)
 800231e:	400b      	ands	r3, r1
 8002320:	4053      	eors	r3, r2
 8002322:	4a0b      	ldr	r2, [pc, #44]	@ (8002350 <FW_CrcUpdate+0x7c>)
 8002324:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002328:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	3301      	adds	r3, #1
 800232e:	72fb      	strb	r3, [r7, #11]
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	2b07      	cmp	r3, #7
 8002334:	d9e6      	bls.n	8002304 <FW_CrcUpdate+0x30>
    for (uint32_t i = 0; i < len; i++) {
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3301      	adds	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d3cf      	bcc.n	80022e4 <FW_CrcUpdate+0x10>
        }
    }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20002ab8 	.word	0x20002ab8
 8002354:	edb88320 	.word	0xedb88320

08002358 <FW_EnsureErasedForAddress>:

static HAL_StatusTypeDef FW_EnsureErasedForAddress(uint32_t address)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	@ 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    if (fw_ctx.erased) return HAL_OK;
 8002360:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <FW_EnsureErasedForAddress+0x98>)
 8002362:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002366:	7f1b      	ldrb	r3, [r3, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <FW_EnsureErasedForAddress+0x18>
 800236c:	2300      	movs	r3, #0
 800236e:	e03a      	b.n	80023e6 <FW_EnsureErasedForAddress+0x8e>
    // Проверка: область должна быть пустой, иначе это часть прошивки — отменяем OTA
    if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) { // проверим первые 1KB
 8002370:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002374:	481f      	ldr	r0, [pc, #124]	@ (80023f4 <FW_EnsureErasedForAddress+0x9c>)
 8002376:	f7ff ff55 	bl	8002224 <Flash_IsBlank>
 800237a:	4603      	mov	r3, r0
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <FW_EnsureErasedForAddress+0x3c>
        fw_ctx.error = true;
 8002386:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <FW_EnsureErasedForAddress+0x98>)
 8002388:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800238c:	2201      	movs	r2, #1
 800238e:	725a      	strb	r2, [r3, #9]
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e028      	b.n	80023e6 <FW_EnsureErasedForAddress+0x8e>
    }

    FLASH_EraseInitTypeDef erase;
    uint32_t pageError = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800239c:	2302      	movs	r3, #2
 800239e:	623b      	str	r3, [r7, #32]
    erase.Sector = Flash_GetSector(address);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff0d 	bl	80021c0 <Flash_GetSector>
 80023a6:	4603      	mov	r3, r0
 80023a8:	61bb      	str	r3, [r7, #24]
    erase.NbSectors = 1; // стираем только сектор слота OTA
 80023aa:	2301      	movs	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef st = HAL_FLASHEx_Erase(&erase, &pageError);
 80023ae:	f107 020c 	add.w	r2, r7, #12
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f006 f9ad 	bl	8008718 <HAL_FLASHEx_Erase>
 80023be:	4603      	mov	r3, r0
 80023c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (st == HAL_OK) fw_ctx.erased = true;
 80023c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <FW_EnsureErasedForAddress+0x80>
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <FW_EnsureErasedForAddress+0x98>)
 80023ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023d2:	2201      	movs	r2, #1
 80023d4:	771a      	strb	r2, [r3, #28]
 80023d6:	e004      	b.n	80023e2 <FW_EnsureErasedForAddress+0x8a>
    else fw_ctx.error = true;
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <FW_EnsureErasedForAddress+0x98>)
 80023da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023de:	2201      	movs	r2, #1
 80023e0:	725a      	strb	r2, [r3, #9]
    return st;
 80023e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3728      	adds	r7, #40	@ 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20002ab8 	.word	0x20002ab8
 80023f4:	08020000 	.word	0x08020000

080023f8 <FW_FlashWriteStream>:

static HAL_StatusTypeDef FW_FlashWriteStream(const uint8_t *data, uint32_t len)
{
 80023f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
    // Обеспечиваем стирание перед первой записью
    if (!fw_ctx.erased) {
 8002404:	4b64      	ldr	r3, [pc, #400]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002406:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800240a:	7f1b      	ldrb	r3, [r3, #28]
 800240c:	f083 0301 	eor.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <FW_FlashWriteStream+0x3a>
        HAL_StatusTypeDef est = FW_EnsureErasedForAddress(fw_ctx.write_addr);
 8002416:	4b60      	ldr	r3, [pc, #384]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002418:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff9a 	bl	8002358 <FW_EnsureErasedForAddress>
 8002424:	4603      	mov	r3, r0
 8002426:	74fb      	strb	r3, [r7, #19]
        if (est != HAL_OK) return est;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <FW_FlashWriteStream+0x3a>
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	e0ac      	b.n	800258c <FW_FlashWriteStream+0x194>
    }

    // Обновляем CRC по потоку
    FW_CrcUpdate(data, len);
 8002432:	6839      	ldr	r1, [r7, #0]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff4d 	bl	80022d4 <FW_CrcUpdate>

    uint32_t idx = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
    // Дополним незавершённое слово, если было
    if (fw_ctx.word_buf_len > 0) {
 800243e:	4b56      	ldr	r3, [pc, #344]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002440:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002444:	7d1b      	ldrb	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d07e      	beq.n	8002548 <FW_FlashWriteStream+0x150>
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 800244a:	e016      	b.n	800247a <FW_FlashWriteStream+0x82>
            fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	617a      	str	r2, [r7, #20]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	441a      	add	r2, r3
 8002456:	4b50      	ldr	r3, [pc, #320]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002458:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800245c:	7d1b      	ldrb	r3, [r3, #20]
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	b2c8      	uxtb	r0, r1
 8002462:	494d      	ldr	r1, [pc, #308]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002464:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002468:	7508      	strb	r0, [r1, #20]
 800246a:	4619      	mov	r1, r3
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	4b4a      	ldr	r3, [pc, #296]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002470:	440b      	add	r3, r1
 8002472:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002476:	3310      	adds	r3, #16
 8002478:	701a      	strb	r2, [r3, #0]
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 800247a:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 800247c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002480:	7d1b      	ldrb	r3, [r3, #20]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d803      	bhi.n	800248e <FW_FlashWriteStream+0x96>
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d3de      	bcc.n	800244c <FW_FlashWriteStream+0x54>
        }
        if (fw_ctx.word_buf_len == 4) {
 800248e:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002490:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002494:	7d1b      	ldrb	r3, [r3, #20]
 8002496:	2b04      	cmp	r3, #4
 8002498:	d156      	bne.n	8002548 <FW_FlashWriteStream+0x150>
            uint32_t word;
            memcpy(&word, fw_ctx.word_buf, 4);
 800249a:	4b3f      	ldr	r3, [pc, #252]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 800249c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	60fb      	str	r3, [r7, #12]
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 80024a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 80024a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024aa:	68d9      	ldr	r1, [r3, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	4698      	mov	r8, r3
 80024b2:	4691      	mov	r9, r2
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	2002      	movs	r0, #2
 80024ba:	f005 ff7b 	bl	80083b4 <HAL_FLASH_Program>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <FW_FlashWriteStream+0xd0>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e061      	b.n	800258c <FW_FlashWriteStream+0x194>
            fw_ctx.write_addr += 4;
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 80024ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	3304      	adds	r3, #4
 80024d2:	4a31      	ldr	r2, [pc, #196]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 80024d4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80024d8:	60d3      	str	r3, [r2, #12]
            fw_ctx.word_buf_len = 0;
 80024da:	4b2f      	ldr	r3, [pc, #188]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 80024dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024e0:	2200      	movs	r2, #0
 80024e2:	751a      	strb	r2, [r3, #20]
        }
    }

    // Пишем целыми словами напрямую из входного буфера
    while ((idx + 4) <= len) {
 80024e4:	e030      	b.n	8002548 <FW_FlashWriteStream+0x150>
        uint32_t word;
        memcpy(&word, &data[idx], 4);
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	4413      	add	r3, r2
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60bb      	str	r3, [r7, #8]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 80024f0:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 80024f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024f6:	68d9      	ldr	r1, [r3, #12]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	461c      	mov	r4, r3
 80024fe:	4615      	mov	r5, r2
 8002500:	4622      	mov	r2, r4
 8002502:	462b      	mov	r3, r5
 8002504:	2002      	movs	r0, #2
 8002506:	f005 ff55 	bl	80083b4 <HAL_FLASH_Program>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <FW_FlashWriteStream+0x11c>
 8002510:	2301      	movs	r3, #1
 8002512:	e03b      	b.n	800258c <FW_FlashWriteStream+0x194>
        fw_ctx.write_addr += 4;
 8002514:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002516:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002520:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002524:	60d3      	str	r3, [r2, #12]
        idx += 4;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3304      	adds	r3, #4
 800252a:	617b      	str	r3, [r7, #20]
        if (fw_ctx.write_addr >= FLASH_UPDATE_END) { fw_ctx.error = true; return HAL_ERROR; }
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 800252e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a19      	ldr	r2, [pc, #100]	@ (800259c <FW_FlashWriteStream+0x1a4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d906      	bls.n	8002548 <FW_FlashWriteStream+0x150>
 800253a:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 800253c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002540:	2201      	movs	r2, #1
 8002542:	725a      	strb	r2, [r3, #9]
 8002544:	2301      	movs	r3, #1
 8002546:	e021      	b.n	800258c <FW_FlashWriteStream+0x194>
    while ((idx + 4) <= len) {
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3304      	adds	r3, #4
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d2c9      	bcs.n	80024e6 <FW_FlashWriteStream+0xee>
    }

    // Остаток < 4 байт сохраняем в буфер до завершения
    while (idx < len) {
 8002552:	e016      	b.n	8002582 <FW_FlashWriteStream+0x18a>
        fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	617a      	str	r2, [r7, #20]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	441a      	add	r2, r3
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002560:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002564:	7d1b      	ldrb	r3, [r3, #20]
 8002566:	1c59      	adds	r1, r3, #1
 8002568:	b2c8      	uxtb	r0, r1
 800256a:	490b      	ldr	r1, [pc, #44]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 800256c:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002570:	7508      	strb	r0, [r1, #20]
 8002572:	4619      	mov	r1, r3
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <FW_FlashWriteStream+0x1a0>)
 8002578:	440b      	add	r3, r1
 800257a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800257e:	3310      	adds	r3, #16
 8002580:	701a      	strb	r2, [r3, #0]
    while (idx < len) {
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d3e4      	bcc.n	8002554 <FW_FlashWriteStream+0x15c>
    }
    return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002596:	bf00      	nop
 8002598:	20002ab8 	.word	0x20002ab8
 800259c:	0803ffff 	.word	0x0803ffff

080025a0 <FW_Update_CGI_Handler>:
    return ~crc;
}

// --- CGI ---
const char* FW_Update_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
    return "/update.html";
 80025ae:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <FW_Update_CGI_Handler+0x1c>)
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	08024590 	.word	0x08024590

080025c0 <url_decode>:

const tCGI FW_UPDATE_CGI = {"/fw_update.cgi", FW_Update_CGI_Handler};

void url_decode(char *dst, const char *src)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    char a, b;
    while (*src)
 80025ca:	e066      	b.n	800269a <url_decode+0xda>
    {
        if ((*src == '%') &&
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b25      	cmp	r3, #37	@ 0x25
 80025d2:	d14d      	bne.n	8002670 <url_decode+0xb0>
            ((a = src[1]) && (b = src[2])) &&
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	73fb      	strb	r3, [r7, #15]
        if ((*src == '%') &&
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d046      	beq.n	8002670 <url_decode+0xb0>
            ((a = src[1]) && (b = src[2])) &&
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	3302      	adds	r3, #2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	73bb      	strb	r3, [r7, #14]
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d03f      	beq.n	8002670 <url_decode+0xb0>
            (isxdigit(a) && isxdigit(b)))
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f01e fb72 	bl	8020cdc <isxdigit>
 80025f8:	4603      	mov	r3, r0
            ((a = src[1]) && (b = src[2])) &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d038      	beq.n	8002670 <url_decode+0xb0>
            (isxdigit(a) && isxdigit(b)))
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	4618      	mov	r0, r3
 8002602:	f01e fb6b 	bl	8020cdc <isxdigit>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d031      	beq.n	8002670 <url_decode+0xb0>
        {
            a = (a >= 'a') ? a - 'a' + 10 : (a >= 'A') ? a - 'A' + 10 : a - '0';
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b60      	cmp	r3, #96	@ 0x60
 8002610:	d903      	bls.n	800261a <url_decode+0x5a>
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	3b57      	subs	r3, #87	@ 0x57
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e009      	b.n	800262e <url_decode+0x6e>
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b40      	cmp	r3, #64	@ 0x40
 800261e:	d903      	bls.n	8002628 <url_decode+0x68>
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	3b37      	subs	r3, #55	@ 0x37
 8002624:	b2db      	uxtb	r3, r3
 8002626:	e002      	b.n	800262e <url_decode+0x6e>
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	3b30      	subs	r3, #48	@ 0x30
 800262c:	b2db      	uxtb	r3, r3
 800262e:	73fb      	strb	r3, [r7, #15]
            b = (b >= 'a') ? b - 'a' + 10 : (b >= 'A') ? b - 'A' + 10 : b - '0';
 8002630:	7bbb      	ldrb	r3, [r7, #14]
 8002632:	2b60      	cmp	r3, #96	@ 0x60
 8002634:	d903      	bls.n	800263e <url_decode+0x7e>
 8002636:	7bbb      	ldrb	r3, [r7, #14]
 8002638:	3b57      	subs	r3, #87	@ 0x57
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e009      	b.n	8002652 <url_decode+0x92>
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	d903      	bls.n	800264c <url_decode+0x8c>
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	3b37      	subs	r3, #55	@ 0x37
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e002      	b.n	8002652 <url_decode+0x92>
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	3b30      	subs	r3, #48	@ 0x30
 8002650:	b2db      	uxtb	r3, r3
 8002652:	73bb      	strb	r3, [r7, #14]
            *dst++ = (char)(16 * a + b);
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	b2d9      	uxtb	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	7bba      	ldrb	r2, [r7, #14]
 8002662:	440a      	add	r2, r1
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
            src += 3;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3303      	adds	r3, #3
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	e014      	b.n	800269a <url_decode+0xda>
        }
        else if (*src == '+')
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b2b      	cmp	r3, #43	@ 0x2b
 8002676:	d108      	bne.n	800268a <url_decode+0xca>
        {
            *dst++ = ' ';
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	701a      	strb	r2, [r3, #0]
            src++;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	e007      	b.n	800269a <url_decode+0xda>
        }
        else
        {
            *dst++ = *src++;
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	1c53      	adds	r3, r2, #1
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	6079      	str	r1, [r7, #4]
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
    while (*src)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d194      	bne.n	80025cc <url_decode+0xc>
        }
    }
    *dst = '\0';
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <httpd_post_begin>:
                       u16_t content_len,
                       int total_data_len,
                       char *post_data,
                       u16_t post_data_len,
                       u8_t *connection_status)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	807b      	strh	r3, [r7, #2]
    // Сброс признаков по умолчанию
    fw_request_active = false;
 80026be:	4b30      	ldr	r3, [pc, #192]	@ (8002780 <httpd_post_begin+0xd0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    login_request_active = false;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002784 <httpd_post_begin+0xd4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]

    // Обработка логина: проверяем креды при POST /login.cgi
    if(strcmp(uri, "/login.cgi") == 0) {
 80026ca:	492f      	ldr	r1, [pc, #188]	@ (8002788 <httpd_post_begin+0xd8>)
 80026cc:	68b8      	ldr	r0, [r7, #8]
 80026ce:	f7fd fd7b 	bl	80001c8 <strcmp>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d11e      	bne.n	8002716 <httpd_post_begin+0x66>
        login_request_active = true;
 80026d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002784 <httpd_post_begin+0xd4>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
        login_buf_len = 0;
 80026de:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <httpd_post_begin+0xdc>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	801a      	strh	r2, [r3, #0]
        if (post_data && post_data_len > 0) {
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <httpd_post_begin+0x5c>
 80026ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <httpd_post_begin+0x5c>
            uint16_t copy = (post_data_len > sizeof(login_buf)) ? sizeof(login_buf) : post_data_len;
 80026f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026f2:	2b80      	cmp	r3, #128	@ 0x80
 80026f4:	bf28      	it	cs
 80026f6:	2380      	movcs	r3, #128	@ 0x80
 80026f8:	82fb      	strh	r3, [r7, #22]
            memcpy(login_buf, post_data, copy);
 80026fa:	8afb      	ldrh	r3, [r7, #22]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002700:	4823      	ldr	r0, [pc, #140]	@ (8002790 <httpd_post_begin+0xe0>)
 8002702:	f01f faba 	bl	8021c7a <memcpy>
            login_buf_len = copy;
 8002706:	4a21      	ldr	r2, [pc, #132]	@ (800278c <httpd_post_begin+0xdc>)
 8002708:	8afb      	ldrh	r3, [r7, #22]
 800270a:	8013      	strh	r3, [r2, #0]
        }
        *connection_status = 1;
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
        return ERR_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e030      	b.n	8002778 <httpd_post_begin+0xc8>
    }
    if(strcmp(uri, "/fw_update.cgi") == 0) {
 8002716:	491f      	ldr	r1, [pc, #124]	@ (8002794 <httpd_post_begin+0xe4>)
 8002718:	68b8      	ldr	r0, [r7, #8]
 800271a:	f7fd fd55 	bl	80001c8 <strcmp>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d128      	bne.n	8002776 <httpd_post_begin+0xc6>
        fw_request_active = true;
 8002724:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <httpd_post_begin+0xd0>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
        FW_ResetContext();
 800272a:	f7ff fd9b 	bl	8002264 <FW_ResetContext>
        // Если слот OTA потенциально пересекается с текущей прошивкой (не пустой) — не начинаем запись
        if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) {
 800272e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002732:	4819      	ldr	r0, [pc, #100]	@ (8002798 <httpd_post_begin+0xe8>)
 8002734:	f7ff fd76 	bl	8002224 <Flash_IsBlank>
 8002738:	4603      	mov	r3, r0
 800273a:	f083 0301 	eor.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00e      	beq.n	8002762 <httpd_post_begin+0xb2>
            fw_ctx.error = true;
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <httpd_post_begin+0xec>)
 8002746:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800274a:	2201      	movs	r2, #1
 800274c:	725a      	strb	r2, [r3, #9]
            fw_ctx.active = false;
 800274e:	4b13      	ldr	r3, [pc, #76]	@ (800279c <httpd_post_begin+0xec>)
 8002750:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002754:	2200      	movs	r2, #0
 8002756:	721a      	strb	r2, [r3, #8]
            *connection_status = 0; // не буферизуем лишние данные
 8002758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
            return ERR_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e00a      	b.n	8002778 <httpd_post_begin+0xc8>
        }
        fw_ctx.active = true;
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <httpd_post_begin+0xec>)
 8002764:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002768:	2201      	movs	r2, #1
 800276a:	721a      	strb	r2, [r3, #8]
        *connection_status = 1; // продолжаем принимать
 800276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_Unlock();
 8002772:	f005 fe73 	bl	800845c <HAL_FLASH_Unlock>
    }
    return ERR_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20004ad8 	.word	0x20004ad8
 8002784:	20004ad9 	.word	0x20004ad9
 8002788:	080245b0 	.word	0x080245b0
 800278c:	20004b5c 	.word	0x20004b5c
 8002790:	20004adc 	.word	0x20004adc
 8002794:	080245a0 	.word	0x080245a0
 8002798:	08020000 	.word	0x08020000
 800279c:	20002ab8 	.word	0x20002ab8

080027a0 <httpd_post_receive_data>:



err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    if (p == NULL) return ERR_OK;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <httpd_post_receive_data+0x14>
 80027b0:	2300      	movs	r3, #0
 80027b2:	e061      	b.n	8002878 <httpd_post_receive_data+0xd8>

    if (login_request_active) {
 80027b4:	4b32      	ldr	r3, [pc, #200]	@ (8002880 <httpd_post_receive_data+0xe0>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02c      	beq.n	8002816 <httpd_post_receive_data+0x76>
        struct pbuf *q = p;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	617b      	str	r3, [r7, #20]
        while (q && login_buf_len < sizeof(login_buf)) {
 80027c0:	e020      	b.n	8002804 <httpd_post_receive_data+0x64>
            uint16_t room = sizeof(login_buf) - login_buf_len;
 80027c2:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <httpd_post_receive_data+0xe4>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80027ca:	81fb      	strh	r3, [r7, #14]
            uint16_t to_copy = (q->len > room) ? room : q->len;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	895b      	ldrh	r3, [r3, #10]
 80027d0:	89fa      	ldrh	r2, [r7, #14]
 80027d2:	4293      	cmp	r3, r2
 80027d4:	bf28      	it	cs
 80027d6:	4613      	movcs	r3, r2
 80027d8:	81bb      	strh	r3, [r7, #12]
            memcpy(login_buf + login_buf_len, q->payload, to_copy);
 80027da:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <httpd_post_receive_data+0xe4>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <httpd_post_receive_data+0xe8>)
 80027e2:	18d0      	adds	r0, r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	89ba      	ldrh	r2, [r7, #12]
 80027ea:	4619      	mov	r1, r3
 80027ec:	f01f fa45 	bl	8021c7a <memcpy>
            login_buf_len += to_copy;
 80027f0:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <httpd_post_receive_data+0xe4>)
 80027f2:	881a      	ldrh	r2, [r3, #0]
 80027f4:	89bb      	ldrh	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <httpd_post_receive_data+0xe4>)
 80027fc:	801a      	strh	r2, [r3, #0]
            q = q->next;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	617b      	str	r3, [r7, #20]
        while (q && login_buf_len < sizeof(login_buf)) {
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <httpd_post_receive_data+0x72>
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <httpd_post_receive_data+0xe4>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002810:	d9d7      	bls.n	80027c2 <httpd_post_receive_data+0x22>
        }
        return ERR_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e030      	b.n	8002878 <httpd_post_receive_data+0xd8>
    }

    if (fw_ctx.active) {
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <httpd_post_receive_data+0xec>)
 8002818:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800281c:	7a1b      	ldrb	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d029      	beq.n	8002876 <httpd_post_receive_data+0xd6>
        struct pbuf *q = p;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	613b      	str	r3, [r7, #16]
        while(q) {
 8002826:	e023      	b.n	8002870 <httpd_post_receive_data+0xd0>
            if (FW_FlashWriteStream((const uint8_t*)q->payload, q->len) != HAL_OK) {
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	895b      	ldrh	r3, [r3, #10]
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f7ff fde0 	bl	80023f8 <FW_FlashWriteStream>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <httpd_post_receive_data+0xb4>
                fw_ctx.error = true;
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <httpd_post_receive_data+0xec>)
 8002840:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002844:	2201      	movs	r2, #1
 8002846:	725a      	strb	r2, [r3, #9]
                fw_ctx.active = false;
 8002848:	4b10      	ldr	r3, [pc, #64]	@ (800288c <httpd_post_receive_data+0xec>)
 800284a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800284e:	2200      	movs	r2, #0
 8002850:	721a      	strb	r2, [r3, #8]
                break;
 8002852:	e010      	b.n	8002876 <httpd_post_receive_data+0xd6>
            }
            fw_ctx.total_len += q->len;
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <httpd_post_receive_data+0xec>)
 8002856:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	8952      	ldrh	r2, [r2, #10]
 8002860:	4413      	add	r3, r2
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <httpd_post_receive_data+0xec>)
 8002864:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002868:	6053      	str	r3, [r2, #4]
            q = q->next;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	613b      	str	r3, [r7, #16]
        while(q) {
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1d8      	bne.n	8002828 <httpd_post_receive_data+0x88>
        }
    }
    return ERR_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20004ad9 	.word	0x20004ad9
 8002884:	20004b5c 	.word	0x20004b5c
 8002888:	20004adc 	.word	0x20004adc
 800288c:	20002ab8 	.word	0x20002ab8

08002890 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b09e      	sub	sp, #120	@ 0x78
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
    // Если это был login — перенаправим по результату авторизации
    if (login_request_active) {
 800289e:	4b9b      	ldr	r3, [pc, #620]	@ (8002b0c <httpd_post_finished+0x27c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80e3 	beq.w	8002a6e <httpd_post_finished+0x1de>
        if (response_uri && response_uri_len) {
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80d8 	beq.w	8002a60 <httpd_post_finished+0x1d0>
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80d4 	beq.w	8002a60 <httpd_post_finished+0x1d0>
            // Разобрать накопленный буфер
            char user[32]={0}, pass[32]={0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2220      	movs	r2, #32
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f01f f905 	bl	8021ad0 <memset>
 80028c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028ca:	2220      	movs	r2, #32
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f01f f8fe 	bl	8021ad0 <memset>
            if (login_buf_len > 0) {
 80028d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002b10 <httpd_post_finished+0x280>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05f      	beq.n	800299c <httpd_post_finished+0x10c>
                const char *u = strstr(login_buf, "user=");
 80028dc:	498d      	ldr	r1, [pc, #564]	@ (8002b14 <httpd_post_finished+0x284>)
 80028de:	488e      	ldr	r0, [pc, #568]	@ (8002b18 <httpd_post_finished+0x288>)
 80028e0:	f01f f930 	bl	8021b44 <strstr>
 80028e4:	6678      	str	r0, [r7, #100]	@ 0x64
                const char *p = strstr(login_buf, "pass=");
 80028e6:	498d      	ldr	r1, [pc, #564]	@ (8002b1c <httpd_post_finished+0x28c>)
 80028e8:	488b      	ldr	r0, [pc, #556]	@ (8002b18 <httpd_post_finished+0x288>)
 80028ea:	f01f f92b 	bl	8021b44 <strstr>
 80028ee:	6638      	str	r0, [r7, #96]	@ 0x60
                if (u) {
 80028f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d027      	beq.n	8002946 <httpd_post_finished+0xb6>
                    u += 5;
 80028f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028f8:	3305      	adds	r3, #5
 80028fa:	667b      	str	r3, [r7, #100]	@ 0x64
                    size_t n=0; while (u[n] && u[n] != '&' && n < sizeof(user)-1) { user[n]=u[n]; n++; }
 80028fc:	2300      	movs	r3, #0
 80028fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8002900:	e00c      	b.n	800291c <httpd_post_finished+0x8c>
 8002902:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002906:	4413      	add	r3, r2
 8002908:	7819      	ldrb	r1, [r3, #0]
 800290a:	f107 0214 	add.w	r2, r7, #20
 800290e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002910:	4413      	add	r3, r2
 8002912:	460a      	mov	r2, r1
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002918:	3301      	adds	r3, #1
 800291a:	677b      	str	r3, [r7, #116]	@ 0x74
 800291c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800291e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002920:	4413      	add	r3, r2
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <httpd_post_finished+0xaa>
 8002928:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800292a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800292c:	4413      	add	r3, r2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b26      	cmp	r3, #38	@ 0x26
 8002932:	d002      	beq.n	800293a <httpd_post_finished+0xaa>
 8002934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002936:	2b1e      	cmp	r3, #30
 8002938:	d9e3      	bls.n	8002902 <httpd_post_finished+0x72>
                    user[n]=0;
 800293a:	f107 0214 	add.w	r2, r7, #20
 800293e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002940:	4413      	add	r3, r2
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
                }
                if (p) {
 8002946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002948:	2b00      	cmp	r3, #0
 800294a:	d027      	beq.n	800299c <httpd_post_finished+0x10c>
                    p += 5;
 800294c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800294e:	3305      	adds	r3, #5
 8002950:	663b      	str	r3, [r7, #96]	@ 0x60
                    size_t n=0; while (p[n] && p[n] != '&' && n < sizeof(pass)-1) { pass[n]=p[n]; n++; }
 8002952:	2300      	movs	r3, #0
 8002954:	673b      	str	r3, [r7, #112]	@ 0x70
 8002956:	e00c      	b.n	8002972 <httpd_post_finished+0xe2>
 8002958:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800295a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800295c:	4413      	add	r3, r2
 800295e:	7819      	ldrb	r1, [r3, #0]
 8002960:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002966:	4413      	add	r3, r2
 8002968:	460a      	mov	r2, r1
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800296e:	3301      	adds	r3, #1
 8002970:	673b      	str	r3, [r7, #112]	@ 0x70
 8002972:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002976:	4413      	add	r3, r2
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <httpd_post_finished+0x100>
 800297e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b26      	cmp	r3, #38	@ 0x26
 8002988:	d002      	beq.n	8002990 <httpd_post_finished+0x100>
 800298a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800298c:	2b1e      	cmp	r3, #30
 800298e:	d9e3      	bls.n	8002958 <httpd_post_finished+0xc8>
                    pass[n]=0;
 8002990:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002994:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002996:	4413      	add	r3, r2
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
                }
            }
            url_decode(user, user);
 800299c:	f107 0214 	add.w	r2, r7, #20
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fe0a 	bl	80025c0 <url_decode>
            url_decode(pass, pass);
 80029ac:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80029b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fe02 	bl	80025c0 <url_decode>


            extern volatile uint8_t g_is_authenticated;
            g_is_authenticated = (user[0] && pass[0] && Creds_CheckLogin(user, pass)) ? 1 : 0;
 80029bc:	7d3b      	ldrb	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <httpd_post_finished+0x154>
 80029c2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <httpd_post_finished+0x154>
 80029ca:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f99b 	bl	8001d10 <Creds_CheckLogin>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <httpd_post_finished+0x154>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <httpd_post_finished+0x156>
 80029e4:	2300      	movs	r3, #0
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b20 <httpd_post_finished+0x290>)
 80029ea:	701a      	strb	r2, [r3, #0]
            if (g_is_authenticated) {
 80029ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002b20 <httpd_post_finished+0x290>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01a      	beq.n	8002a2c <httpd_post_finished+0x19c>
                const char *target = "/index.html";
 80029f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <httpd_post_finished+0x294>)
 80029f8:	65bb      	str	r3, [r7, #88]	@ 0x58
                size_t n = strlen(target);
 80029fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80029fc:	f7fd fbee 	bl	80001dc <strlen>
 8002a00:	66f8      	str	r0, [r7, #108]	@ 0x6c
                if (response_uri_len > 0) {
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02b      	beq.n	8002a60 <httpd_post_finished+0x1d0>
                    if (n >= response_uri_len) n = response_uri_len - 1;
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d302      	bcc.n	8002a16 <httpd_post_finished+0x186>
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    memcpy(response_uri, target, n);
 8002a16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002a1a:	68b8      	ldr	r0, [r7, #8]
 8002a1c:	f01f f92d 	bl	8021c7a <memcpy>
                    response_uri[n] = '\0';
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a24:	4413      	add	r3, r2
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e019      	b.n	8002a60 <httpd_post_finished+0x1d0>
                }
            } else {
                const char *target = "/login_failed.html";
 8002a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b28 <httpd_post_finished+0x298>)
 8002a2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                size_t n = strlen(target);
 8002a30:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002a32:	f7fd fbd3 	bl	80001dc <strlen>
 8002a36:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (response_uri_len > 0) {
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <httpd_post_finished+0x1d0>
                    if (n >= response_uri_len) n = response_uri_len - 1;
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <httpd_post_finished+0x1bc>
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	66bb      	str	r3, [r7, #104]	@ 0x68
                    memcpy(response_uri, target, n);
 8002a4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a4e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a50:	68b8      	ldr	r0, [r7, #8]
 8002a52:	f01f f912 	bl	8021c7a <memcpy>
                    response_uri[n] = '\0';
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a5a:	4413      	add	r3, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
                }
            }

                    }
        // сброс буфера и флага
        login_buf_len = 0;
 8002a60:	4b2b      	ldr	r3, [pc, #172]	@ (8002b10 <httpd_post_finished+0x280>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
        login_request_active = false;
 8002a66:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <httpd_post_finished+0x27c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
        return;
 8002a6c:	e092      	b.n	8002b94 <httpd_post_finished+0x304>
    }

    // Если это был fw_update — завершим запись и отдадим соответствующую страницу
    if (fw_request_active) {
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b2c <httpd_post_finished+0x29c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 808e 	beq.w	8002b94 <httpd_post_finished+0x304>
        // Завершаем запись: дописываем неполное слово, если нужно
        if (fw_ctx.active && !fw_ctx.error) {
 8002a78:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002a7a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a7e:	7a1b      	ldrb	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d060      	beq.n	8002b46 <httpd_post_finished+0x2b6>
 8002a84:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002a86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a8a:	7a5b      	ldrb	r3, [r3, #9]
 8002a8c:	f083 0301 	eor.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d057      	beq.n	8002b46 <httpd_post_finished+0x2b6>
            if (fw_ctx.word_buf_len > 0) {
 8002a96:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002a98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a9c:	7d1b      	ldrb	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d051      	beq.n	8002b46 <httpd_post_finished+0x2b6>
                while (fw_ctx.word_buf_len < 4) fw_ctx.word_buf[fw_ctx.word_buf_len++] = 0xFF;
 8002aa2:	e011      	b.n	8002ac8 <httpd_post_finished+0x238>
 8002aa4:	4b22      	ldr	r3, [pc, #136]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002aa6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002aaa:	7d1b      	ldrb	r3, [r3, #20]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	b2d1      	uxtb	r1, r2
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002ab2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002ab6:	7511      	strb	r1, [r2, #20]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	22ff      	movs	r2, #255	@ 0xff
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002aca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ace:	7d1b      	ldrb	r3, [r3, #20]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d9e7      	bls.n	8002aa4 <httpd_post_finished+0x214>
                uint32_t word;
                memcpy(&word, fw_ctx.word_buf, 4);
 8002ad4:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002ad6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	657b      	str	r3, [r7, #84]	@ 0x54
                if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) {
 8002ade:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002ae0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ae4:	68d9      	ldr	r1, [r3, #12]
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	2200      	movs	r2, #0
 8002aea:	461c      	mov	r4, r3
 8002aec:	4615      	mov	r5, r2
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	2002      	movs	r0, #2
 8002af4:	f005 fc5e 	bl	80083b4 <HAL_FLASH_Program>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01a      	beq.n	8002b34 <httpd_post_finished+0x2a4>
                    fw_ctx.error = true;
 8002afe:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <httpd_post_finished+0x2a0>)
 8002b00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b04:	2201      	movs	r2, #1
 8002b06:	725a      	strb	r2, [r3, #9]
 8002b08:	e01d      	b.n	8002b46 <httpd_post_finished+0x2b6>
 8002b0a:	bf00      	nop
 8002b0c:	20004ad9 	.word	0x20004ad9
 8002b10:	20004b5c 	.word	0x20004b5c
 8002b14:	080245bc 	.word	0x080245bc
 8002b18:	20004adc 	.word	0x20004adc
 8002b1c:	080245c4 	.word	0x080245c4
 8002b20:	20002a70 	.word	0x20002a70
 8002b24:	080245cc 	.word	0x080245cc
 8002b28:	080245d8 	.word	0x080245d8
 8002b2c:	20004ad8 	.word	0x20004ad8
 8002b30:	20002ab8 	.word	0x20002ab8
                } else {
                    fw_ctx.write_addr += 4;
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <httpd_post_finished+0x30c>)
 8002b36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <httpd_post_finished+0x30c>)
 8002b40:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002b44:	60d3      	str	r3, [r2, #12]
                }
            }
        }
        HAL_FLASH_Lock();
 8002b46:	f005 fcab 	bl	80084a0 <HAL_FLASH_Lock>
        fw_ctx.active = false;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <httpd_post_finished+0x30c>)
 8002b4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b50:	2200      	movs	r2, #0
 8002b52:	721a      	strb	r2, [r3, #8]
        if (response_uri && response_uri_len) {
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01b      	beq.n	8002b92 <httpd_post_finished+0x302>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d018      	beq.n	8002b92 <httpd_post_finished+0x302>
            if (fw_ctx.error || fw_ctx.total_len == 0) {
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <httpd_post_finished+0x30c>)
 8002b62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b66:	7a5b      	ldrb	r3, [r3, #9]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <httpd_post_finished+0x2e8>
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <httpd_post_finished+0x30c>)
 8002b6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <httpd_post_finished+0x2f6>
                strncpy(response_uri, "/update.html", response_uri_len);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <httpd_post_finished+0x310>)
 8002b7e:	68b8      	ldr	r0, [r7, #8]
 8002b80:	f01e ffcd 	bl	8021b1e <strncpy>
            } else {
                strncpy(response_uri, "/update_complete.html", response_uri_len);
            }
        }
        return;
 8002b84:	e005      	b.n	8002b92 <httpd_post_finished+0x302>
                strncpy(response_uri, "/update_complete.html", response_uri_len);
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4906      	ldr	r1, [pc, #24]	@ (8002ba4 <httpd_post_finished+0x314>)
 8002b8c:	68b8      	ldr	r0, [r7, #8]
 8002b8e:	f01e ffc6 	bl	8021b1e <strncpy>
        return;
 8002b92:	bf00      	nop
    }
}
 8002b94:	3778      	adds	r7, #120	@ 0x78
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20002ab8 	.word	0x20002ab8
 8002ba0:	08024590 	.word	0x08024590
 8002ba4:	080245ec 	.word	0x080245ec

08002ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b0af      	sub	sp, #188	@ 0xbc
 8002bac:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bae:	f003 fa21 	bl	8005ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bb2:	f000 f9c1 	bl	8002f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bb6:	f000 fba1 	bl	80032fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002bba:	f000 fb7f 	bl	80032bc <MX_DMA_Init>
  MX_I2C1_Init();
 8002bbe:	f000 fa8d 	bl	80030dc <MX_I2C1_Init>
  MX_LWIP_Init();
 8002bc2:	f008 f901 	bl	800adc8 <MX_LWIP_Init>
  MX_ADC1_Init();
 8002bc6:	f000 fa17 	bl	8002ff8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002bca:	f000 fb2b 	bl	8003224 <MX_TIM3_Init>
  MX_RTC_Init();
 8002bce:	f000 fab3 	bl	8003138 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Инициализация логина/пароля (admin/admin по умолчанию)
  Creds_Init();
 8002bd2:	f7ff f86b 	bl	8001cac <Creds_Init>
  Settings_Init();
 8002bd6:	f000 fcdd 	bl	8003594 <Settings_Init>

  ip4_addr_t bk_ip, bk_mask, bk_gw;
  uint8_t bk_dhcp;
  char bk_snmp_read[32], bk_snmp_write[32], bk_snmp_trap[32];

  Settings_Load_From_Backup(&bk_ip, &bk_mask, &bk_gw, &bk_dhcp,
 8002bda:	f107 0493 	add.w	r4, r7, #147	@ 0x93
 8002bde:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002be2:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002be6:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8002bea:	2320      	movs	r3, #32
 8002bec:	9305      	str	r3, [sp, #20]
 8002bee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bf2:	9304      	str	r3, [sp, #16]
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	9303      	str	r3, [sp, #12]
 8002bf8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002bfc:	9302      	str	r3, [sp, #8]
 8002bfe:	2320      	movs	r3, #32
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4623      	mov	r3, r4
 8002c0a:	f000 fd2b 	bl	8003664 <Settings_Load_From_Backup>
                            bk_snmp_read, sizeof(bk_snmp_read),
                            bk_snmp_write, sizeof(bk_snmp_write),
                            bk_snmp_trap, sizeof(bk_snmp_trap));

  // Apply saved network settings on boot if present
  if (bk_dhcp || bk_ip.addr != 0) {
 8002c0e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <main+0x76>
 8002c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <main+0xa4>
      netif_set_down(&gnetif);
 8002c1e:	48a6      	ldr	r0, [pc, #664]	@ (8002eb8 <main+0x310>)
 8002c20:	f012 f9aa 	bl	8014f78 <netif_set_down>
      if (bk_dhcp) {
 8002c24:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <main+0x8c>
          dhcp_start(&gnetif);
 8002c2c:	48a2      	ldr	r0, [pc, #648]	@ (8002eb8 <main+0x310>)
 8002c2e:	f019 fce7 	bl	801c600 <dhcp_start>
 8002c32:	e008      	b.n	8002c46 <main+0x9e>
      } else {
          netif_set_addr(&gnetif, &bk_ip, &bk_mask, &bk_gw);
 8002c34:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c38:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8002c3c:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8002c40:	489d      	ldr	r0, [pc, #628]	@ (8002eb8 <main+0x310>)
 8002c42:	f012 f8b1 	bl	8014da8 <netif_set_addr>
      }
      netif_set_up(&gnetif);
 8002c46:	489c      	ldr	r0, [pc, #624]	@ (8002eb8 <main+0x310>)
 8002c48:	f012 f946 	bl	8014ed8 <netif_set_up>
  }

  /* Инициализируем SNMP community из backup */
  if (bk_snmp_read[0])  strncpy(snmp_read,  bk_snmp_read,  sizeof(snmp_read)-1);
 8002c4c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <main+0xba>
 8002c54:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002c58:	221f      	movs	r2, #31
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4897      	ldr	r0, [pc, #604]	@ (8002ebc <main+0x314>)
 8002c5e:	f01e ff5e 	bl	8021b1e <strncpy>
  if (bk_snmp_write[0]) strncpy(snmp_write, bk_snmp_write, sizeof(snmp_write)-1);
 8002c62:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <main+0xd0>
 8002c6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c6e:	221f      	movs	r2, #31
 8002c70:	4619      	mov	r1, r3
 8002c72:	4893      	ldr	r0, [pc, #588]	@ (8002ec0 <main+0x318>)
 8002c74:	f01e ff53 	bl	8021b1e <strncpy>
  if (bk_snmp_trap[0])  strncpy(snmp_trap,  bk_snmp_trap,  sizeof(snmp_trap)-1);
 8002c78:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <main+0xe6>
 8002c80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c84:	221f      	movs	r2, #31
 8002c86:	4619      	mov	r1, r3
 8002c88:	488e      	ldr	r0, [pc, #568]	@ (8002ec4 <main+0x31c>)
 8002c8a:	f01e ff48 	bl	8021b1e <strncpy>
  /* Применяем к SNMP-агенту на старте */
  snmp_community[0] = snmp_read;
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec8 <main+0x320>)
 8002c90:	4a8a      	ldr	r2, [pc, #552]	@ (8002ebc <main+0x314>)
 8002c92:	601a      	str	r2, [r3, #0]
  snmp_community_write[0] = snmp_write;
 8002c94:	4b8d      	ldr	r3, [pc, #564]	@ (8002ecc <main+0x324>)
 8002c96:	4a8a      	ldr	r2, [pc, #552]	@ (8002ec0 <main+0x318>)
 8002c98:	601a      	str	r2, [r3, #0]
  snmp_set_community_trap(snmp_trap);
 8002c9a:	488a      	ldr	r0, [pc, #552]	@ (8002ec4 <main+0x31c>)
 8002c9c:	f00e f8de 	bl	8010e5c <snmp_set_community_trap>


  httpd_init();
 8002ca0:	f00a fb2a 	bl	800d2f8 <httpd_init>

  httpd_ssi_init_custom();
 8002ca4:	f008 ff42 	bl	800bb2c <httpd_ssi_init_custom>

  // Регистрация CGI

  CGI_TAB[0] = NET_CGI;
 8002ca8:	4b89      	ldr	r3, [pc, #548]	@ (8002ed0 <main+0x328>)
 8002caa:	4a8a      	ldr	r2, [pc, #552]	@ (8002ed4 <main+0x32c>)
 8002cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cb0:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[1] = DATE_CGI;
 8002cb4:	4b86      	ldr	r3, [pc, #536]	@ (8002ed0 <main+0x328>)
 8002cb6:	4a88      	ldr	r2, [pc, #544]	@ (8002ed8 <main+0x330>)
 8002cb8:	3308      	adds	r3, #8
 8002cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cbe:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[2] = TIME_CGI;
 8002cc2:	4b83      	ldr	r3, [pc, #524]	@ (8002ed0 <main+0x328>)
 8002cc4:	4a85      	ldr	r2, [pc, #532]	@ (8002edc <main+0x334>)
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ccc:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[3] = SNMP_CGI;
 8002cd0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed0 <main+0x328>)
 8002cd2:	4a83      	ldr	r2, [pc, #524]	@ (8002ee0 <main+0x338>)
 8002cd4:	3318      	adds	r3, #24
 8002cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cda:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[4] = FW_UPDATE_CGI;
 8002cde:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed0 <main+0x328>)
 8002ce0:	4a80      	ldr	r2, [pc, #512]	@ (8002ee4 <main+0x33c>)
 8002ce2:	3320      	adds	r3, #32
 8002ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce8:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 5); // количество зарегистрированных CGI
 8002cec:	2105      	movs	r1, #5
 8002cee:	4878      	ldr	r0, [pc, #480]	@ (8002ed0 <main+0x328>)
 8002cf0:	f00a fb90 	bl	800d414 <http_set_cgi_handlers>
  snmp_init();
 8002cf4:	f010 fada 	bl	80132ac <snmp_init>

  snmp_set_mibs(mib_array, snmp_num_mibs);
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	487a      	ldr	r0, [pc, #488]	@ (8002ee8 <main+0x340>)
 8002cfe:	f00b f91d 	bl	800df3c <snmp_set_mibs>


  ssd1306_Init();
 8002d02:	f002 fdf3 	bl	80058ec <ssd1306_Init>

  ssd1306_UpdateScreen();
 8002d06:	f002 fe73 	bl	80059f0 <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f002 fe58 	bl	80059c0 <ssd1306_Fill>

  Buttons_Init();
 8002d10:	f7fe fc62 	bl	80015d8 <Buttons_Init>


  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
 8002d14:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002d18:	4974      	ldr	r1, [pc, #464]	@ (8002eec <main+0x344>)
 8002d1a:	4875      	ldr	r0, [pc, #468]	@ (8002ef0 <main+0x348>)
 8002d1c:	f003 fa40 	bl	80061a0 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim3);
 8002d20:	4874      	ldr	r0, [pc, #464]	@ (8002ef4 <main+0x34c>)
 8002d22:	f007 fd69 	bl	800a7f8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8002d26:	f008 f975 	bl	800b014 <MX_LWIP_Process>

      if (dma_ready) {
 8002d2a:	4b73      	ldr	r3, [pc, #460]	@ (8002ef8 <main+0x350>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <main+0x19c>
          SignalProcessor_Update(adc_buffer, ADC_SAMPLES);
 8002d34:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002d38:	486c      	ldr	r0, [pc, #432]	@ (8002eec <main+0x344>)
 8002d3a:	f000 fd45 	bl	80037c8 <SignalProcessor_Update>
          dma_ready = 0;
 8002d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ef8 <main+0x350>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
      }
	    Buttons_Process();
 8002d44:	f7fe fd9a 	bl	800187c <Buttons_Process>

	    OLED_Settings_TimeoutCheck();
 8002d48:	f002 fcca 	bl	80056e0 <OLED_Settings_TimeoutCheck>

	    OLED_UpdateDisplay();
 8002d4c:	f002 fcf2 	bl	8005734 <OLED_UpdateDisplay>

	    if (apply_network_settings) {
 8002d50:	4b6a      	ldr	r3, [pc, #424]	@ (8002efc <main+0x354>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d029      	beq.n	8002dac <main+0x204>
	        apply_network_settings = 0;
 8002d58:	4b68      	ldr	r3, [pc, #416]	@ (8002efc <main+0x354>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]

	        netif_set_down(&gnetif);
 8002d5e:	4856      	ldr	r0, [pc, #344]	@ (8002eb8 <main+0x310>)
 8002d60:	f012 f90a 	bl	8014f78 <netif_set_down>
	        dhcp_stop(&gnetif);
 8002d64:	4854      	ldr	r0, [pc, #336]	@ (8002eb8 <main+0x310>)
 8002d66:	f01a f8fb 	bl	801cf60 <dhcp_stop>

	        if (new_dhcp_enabled) {
 8002d6a:	4b65      	ldr	r3, [pc, #404]	@ (8002f00 <main+0x358>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <main+0x1d2>
	            dhcp_start(&gnetif);
 8002d72:	4851      	ldr	r0, [pc, #324]	@ (8002eb8 <main+0x310>)
 8002d74:	f019 fc44 	bl	801c600 <dhcp_start>
 8002d78:	e005      	b.n	8002d86 <main+0x1de>
	        } else {
	            netif_set_addr(&gnetif, &new_ip, &new_mask, &new_gw);
 8002d7a:	4b62      	ldr	r3, [pc, #392]	@ (8002f04 <main+0x35c>)
 8002d7c:	4a62      	ldr	r2, [pc, #392]	@ (8002f08 <main+0x360>)
 8002d7e:	4963      	ldr	r1, [pc, #396]	@ (8002f0c <main+0x364>)
 8002d80:	484d      	ldr	r0, [pc, #308]	@ (8002eb8 <main+0x310>)
 8002d82:	f012 f811 	bl	8014da8 <netif_set_addr>
	        }
	        netif_set_up(&gnetif);
 8002d86:	484c      	ldr	r0, [pc, #304]	@ (8002eb8 <main+0x310>)
 8002d88:	f012 f8a6 	bl	8014ed8 <netif_set_up>

	        Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8002d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002f00 <main+0x358>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4a5c      	ldr	r2, [pc, #368]	@ (8002f04 <main+0x35c>)
 8002d92:	495d      	ldr	r1, [pc, #372]	@ (8002f08 <main+0x360>)
 8002d94:	485d      	ldr	r0, [pc, #372]	@ (8002f0c <main+0x364>)
 8002d96:	4c4b      	ldr	r4, [pc, #300]	@ (8002ec4 <main+0x31c>)
 8002d98:	9402      	str	r4, [sp, #8]
 8002d9a:	4c49      	ldr	r4, [pc, #292]	@ (8002ec0 <main+0x318>)
 8002d9c:	9401      	str	r4, [sp, #4]
 8002d9e:	4c47      	ldr	r4, [pc, #284]	@ (8002ebc <main+0x314>)
 8002da0:	9400      	str	r4, [sp, #0]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	6809      	ldr	r1, [r1, #0]
 8002da6:	6800      	ldr	r0, [r0, #0]
 8002da8:	f000 fc0e 	bl	80035c8 <Settings_Save_To_Backup>
	                                snmp_read, snmp_write, snmp_trap);
	    }


	    	// Дата
	    if(apply_date_settings)
 8002dac:	4b58      	ldr	r3, [pc, #352]	@ (8002f10 <main+0x368>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d024      	beq.n	8002dfe <main+0x256>
	    {
	        apply_date_settings = 0;
 8002db4:	4b56      	ldr	r3, [pc, #344]	@ (8002f10 <main+0x368>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]

	        RTC_DateTypeDef sDate = {0};
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        sDate.Year  = new_year;
 8002dbe:	4b55      	ldr	r3, [pc, #340]	@ (8002f14 <main+0x36c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	        sDate.Month = new_month;
 8002dc6:	4b54      	ldr	r3, [pc, #336]	@ (8002f18 <main+0x370>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	        sDate.Date  = new_day;
 8002dce:	4b53      	ldr	r3, [pc, #332]	@ (8002f1c <main+0x374>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	        sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	        if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 8002ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002de0:	2200      	movs	r2, #0
 8002de2:	4619      	mov	r1, r3
 8002de4:	484e      	ldr	r0, [pc, #312]	@ (8002f20 <main+0x378>)
 8002de6:	f007 fb01 	bl	800a3ec <HAL_RTC_SetDate>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <main+0x256>
	        {
	            RTC_TimeTypeDef t;
	            HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8002df0:	f107 0320 	add.w	r3, r7, #32
 8002df4:	2200      	movs	r2, #0
 8002df6:	4619      	mov	r1, r3
 8002df8:	4849      	ldr	r0, [pc, #292]	@ (8002f20 <main+0x378>)
 8002dfa:	f007 faa5 	bl	800a348 <HAL_RTC_GetTime>
	        }
	    }


	    	// Обработка ВРЕМЕНИ
	    if(apply_time_settings)
 8002dfe:	4b49      	ldr	r3, [pc, #292]	@ (8002f24 <main+0x37c>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d026      	beq.n	8002e54 <main+0x2ac>
	    {
	        apply_time_settings = 0;
 8002e06:	4b47      	ldr	r3, [pc, #284]	@ (8002f24 <main+0x37c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]

	        RTC_TimeTypeDef sTime = {0};
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
	        sTime.Hours   = new_hours;
 8002e18:	4b43      	ldr	r3, [pc, #268]	@ (8002f28 <main+0x380>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	753b      	strb	r3, [r7, #20]
	        sTime.Minutes = new_minutes;
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <main+0x384>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	757b      	strb	r3, [r7, #21]
	        sTime.Seconds = new_seconds;
 8002e24:	4b42      	ldr	r3, [pc, #264]	@ (8002f30 <main+0x388>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	75bb      	strb	r3, [r7, #22]
	        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
	        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]

        if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK)
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	2200      	movs	r2, #0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4839      	ldr	r0, [pc, #228]	@ (8002f20 <main+0x378>)
 8002e3c:	f007 f9ea 	bl	800a214 <HAL_RTC_SetTime>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <main+0x2ac>
	        {
	            RTC_DateTypeDef d;
	            HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8002e46:	f107 0310 	add.w	r3, r7, #16
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4834      	ldr	r0, [pc, #208]	@ (8002f20 <main+0x378>)
 8002e50:	f007 fb50 	bl	800a4f4 <HAL_RTC_GetDate>
	        }
	    }


	        // Проверка применения SNMP
	    	if (apply_snmp_settings) {
 8002e54:	4b37      	ldr	r3, [pc, #220]	@ (8002f34 <main+0x38c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f43f af64 	beq.w	8002d26 <main+0x17e>
	    	    apply_snmp_settings = 0;
 8002e5e:	4b35      	ldr	r3, [pc, #212]	@ (8002f34 <main+0x38c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
            snmp_community[0] = snmp_read;
 8002e64:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <main+0x320>)
 8002e66:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <main+0x314>)
 8002e68:	601a      	str	r2, [r3, #0]
            snmp_community_write[0] = snmp_write;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <main+0x324>)
 8002e6c:	4a14      	ldr	r2, [pc, #80]	@ (8002ec0 <main+0x318>)
 8002e6e:	601a      	str	r2, [r3, #0]
            snmp_set_community_trap(snmp_trap);
 8002e70:	4814      	ldr	r0, [pc, #80]	@ (8002ec4 <main+0x31c>)
 8002e72:	f00d fff3 	bl	8010e5c <snmp_set_community_trap>

            // Preserve current network settings: reload them from backup and rewrite with new SNMP
            ip4_addr_t saved_ip, saved_mask, saved_gw;
            uint8_t saved_dhcp;
            Settings_Load_From_Backup(&saved_ip, &saved_mask, &saved_gw, &saved_dhcp,
 8002e76:	1cfb      	adds	r3, r7, #3
 8002e78:	1d3a      	adds	r2, r7, #4
 8002e7a:	f107 0108 	add.w	r1, r7, #8
 8002e7e:	f107 000c 	add.w	r0, r7, #12
 8002e82:	2400      	movs	r4, #0
 8002e84:	9405      	str	r4, [sp, #20]
 8002e86:	2400      	movs	r4, #0
 8002e88:	9404      	str	r4, [sp, #16]
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	9403      	str	r4, [sp, #12]
 8002e8e:	2400      	movs	r4, #0
 8002e90:	9402      	str	r4, [sp, #8]
 8002e92:	2400      	movs	r4, #0
 8002e94:	9401      	str	r4, [sp, #4]
 8002e96:	2400      	movs	r4, #0
 8002e98:	9400      	str	r4, [sp, #0]
 8002e9a:	f000 fbe3 	bl	8003664 <Settings_Load_From_Backup>
                                      NULL, 0, NULL, 0, NULL, 0);
            Settings_Save_To_Backup(saved_ip, saved_mask, saved_gw, saved_dhcp,
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	4a08      	ldr	r2, [pc, #32]	@ (8002ec4 <main+0x31c>)
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	4a06      	ldr	r2, [pc, #24]	@ (8002ec0 <main+0x318>)
 8002ea6:	9201      	str	r2, [sp, #4]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <main+0x314>)
 8002eaa:	9200      	str	r2, [sp, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fb89 	bl	80035c8 <Settings_Save_To_Backup>
	  MX_LWIP_Process();
 8002eb6:	e736      	b.n	8002d26 <main+0x17e>
 8002eb8:	20004fc0 	.word	0x20004fc0
 8002ebc:	20000010 	.word	0x20000010
 8002ec0:	20000030 	.word	0x20000030
 8002ec4:	20000050 	.word	0x20000050
 8002ec8:	20000104 	.word	0x20000104
 8002ecc:	20000108 	.word	0x20000108
 8002ed0:	20002a84 	.word	0x20002a84
 8002ed4:	0802733c 	.word	0x0802733c
 8002ed8:	08027344 	.word	0x08027344
 8002edc:	0802734c 	.word	0x0802734c
 8002ee0:	08027354 	.word	0x08027354
 8002ee4:	0802735c 	.word	0x0802735c
 8002ee8:	20000008 	.word	0x20000008
 8002eec:	20000388 	.word	0x20000388
 8002ef0:	2000290c 	.word	0x2000290c
 8002ef4:	20002a28 	.word	0x20002a28
 8002ef8:	20002908 	.word	0x20002908
 8002efc:	20002a81 	.word	0x20002a81
 8002f00:	20002a80 	.word	0x20002a80
 8002f04:	20002a7c 	.word	0x20002a7c
 8002f08:	20002a78 	.word	0x20002a78
 8002f0c:	20002a74 	.word	0x20002a74
 8002f10:	20002aaf 	.word	0x20002aaf
 8002f14:	20002aac 	.word	0x20002aac
 8002f18:	20002aad 	.word	0x20002aad
 8002f1c:	20002aae 	.word	0x20002aae
 8002f20:	20002a08 	.word	0x20002a08
 8002f24:	20002ab3 	.word	0x20002ab3
 8002f28:	20002ab0 	.word	0x20002ab0
 8002f2c:	20002ab1 	.word	0x20002ab1
 8002f30:	20002ab2 	.word	0x20002ab2
 8002f34:	20002ab4 	.word	0x20002ab4

08002f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b096      	sub	sp, #88	@ 0x58
 8002f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f42:	2230      	movs	r2, #48	@ 0x30
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f01e fdc2 	bl	8021ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002f6a:	2309      	movs	r3, #9
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f72:	2301      	movs	r3, #1
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f76:	2302      	movs	r3, #2
 8002f78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 20;
 8002f80:	2314      	movs	r3, #20
 8002f82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002f84:	23c0      	movs	r3, #192	@ 0xc0
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f94:	4618      	mov	r0, r3
 8002f96:	f006 fb7d 	bl	8009694 <HAL_RCC_OscConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002fa0:	f000 fa2a 	bl	80033f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fb0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fb4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2103      	movs	r1, #3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f006 fdba 	bl	8009b3c <HAL_RCC_ClockConfig>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002fce:	f000 fa13 	bl	80033f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fda:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f006 ff8a 	bl	8009ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002fea:	f000 fa05 	bl	80033f8 <Error_Handler>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3758      	adds	r7, #88	@ 0x58
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ffe:	463b      	mov	r3, r7
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800300a:	4b32      	ldr	r3, [pc, #200]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800300c:	4a32      	ldr	r2, [pc, #200]	@ (80030d8 <MX_ADC1_Init+0xe0>)
 800300e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003010:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 8003012:	2200      	movs	r2, #0
 8003014:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003016:	4b2f      	ldr	r3, [pc, #188]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800301e:	2201      	movs	r2, #1
 8003020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003022:	4b2c      	ldr	r3, [pc, #176]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 8003024:	2200      	movs	r2, #0
 8003026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003028:	4b2a      	ldr	r3, [pc, #168]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003030:	4b28      	ldr	r3, [pc, #160]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 8003032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003036:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003038:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800303a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003040:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8003046:	4b23      	ldr	r3, [pc, #140]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 8003048:	2203      	movs	r2, #3
 800304a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800304c:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003054:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 8003056:	2201      	movs	r2, #1
 8003058:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800305a:	481e      	ldr	r0, [pc, #120]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800305c:	f003 f85c 	bl	8006118 <HAL_ADC_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8003066:	f000 f9c7 	bl	80033f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800306a:	2305      	movs	r3, #5
 800306c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003072:	2303      	movs	r3, #3
 8003074:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003076:	463b      	mov	r3, r7
 8003078:	4619      	mov	r1, r3
 800307a:	4816      	ldr	r0, [pc, #88]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800307c:	f003 f980 	bl	8006380 <HAL_ADC_ConfigChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8003086:	f000 f9b7 	bl	80033f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800308a:	2306      	movs	r3, #6
 800308c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800308e:	2302      	movs	r3, #2
 8003090:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003092:	2303      	movs	r3, #3
 8003094:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003096:	463b      	mov	r3, r7
 8003098:	4619      	mov	r1, r3
 800309a:	480e      	ldr	r0, [pc, #56]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 800309c:	f003 f970 	bl	8006380 <HAL_ADC_ConfigChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80030a6:	f000 f9a7 	bl	80033f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80030aa:	230a      	movs	r3, #10
 80030ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80030ae:	2303      	movs	r3, #3
 80030b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80030b2:	2303      	movs	r3, #3
 80030b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030b6:	463b      	mov	r3, r7
 80030b8:	4619      	mov	r1, r3
 80030ba:	4806      	ldr	r0, [pc, #24]	@ (80030d4 <MX_ADC1_Init+0xdc>)
 80030bc:	f003 f960 	bl	8006380 <HAL_ADC_ConfigChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80030c6:	f000 f997 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	2000290c 	.word	0x2000290c
 80030d8:	40012000 	.word	0x40012000

080030dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <MX_I2C1_Init+0x50>)
 80030e2:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <MX_I2C1_Init+0x54>)
 80030e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030e6:	4b11      	ldr	r3, [pc, #68]	@ (800312c <MX_I2C1_Init+0x50>)
 80030e8:	4a12      	ldr	r2, [pc, #72]	@ (8003134 <MX_I2C1_Init+0x58>)
 80030ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030ec:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <MX_I2C1_Init+0x50>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	@ (800312c <MX_I2C1_Init+0x50>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <MX_I2C1_Init+0x50>)
 80030fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003100:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <MX_I2C1_Init+0x50>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <MX_I2C1_Init+0x50>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <MX_I2C1_Init+0x50>)
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <MX_I2C1_Init+0x50>)
 8003114:	2200      	movs	r2, #0
 8003116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003118:	4804      	ldr	r0, [pc, #16]	@ (800312c <MX_I2C1_Init+0x50>)
 800311a:	f005 fdf3 	bl	8008d04 <HAL_I2C_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003124:	f000 f968 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200029b4 	.word	0x200029b4
 8003130:	40005400 	.word	0x40005400
 8003134:	000186a0 	.word	0x000186a0

08003138 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
    RTC_DateTypeDef sDate = {0};
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]

    __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	4b30      	ldr	r3, [pc, #192]	@ (8003214 <MX_RTC_Init+0xdc>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4a2f      	ldr	r2, [pc, #188]	@ (8003214 <MX_RTC_Init+0xdc>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	@ 0x40
 800315e:	4b2d      	ldr	r3, [pc, #180]	@ (8003214 <MX_RTC_Init+0xdc>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess(); // 🔹 доступ к backup-домену
 800316a:	f006 fa77 	bl	800965c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_ENABLE();     // 🔹 включаем тактирование RTC, если ещё не включено
 800316e:	4b2a      	ldr	r3, [pc, #168]	@ (8003218 <MX_RTC_Init+0xe0>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

    hrtc.Instance = RTC;
 8003174:	4b29      	ldr	r3, [pc, #164]	@ (800321c <MX_RTC_Init+0xe4>)
 8003176:	4a2a      	ldr	r2, [pc, #168]	@ (8003220 <MX_RTC_Init+0xe8>)
 8003178:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800317a:	4b28      	ldr	r3, [pc, #160]	@ (800321c <MX_RTC_Init+0xe4>)
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8003180:	4b26      	ldr	r3, [pc, #152]	@ (800321c <MX_RTC_Init+0xe4>)
 8003182:	227f      	movs	r2, #127	@ 0x7f
 8003184:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8003186:	4b25      	ldr	r3, [pc, #148]	@ (800321c <MX_RTC_Init+0xe4>)
 8003188:	22ff      	movs	r2, #255	@ 0xff
 800318a:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800318c:	4b23      	ldr	r3, [pc, #140]	@ (800321c <MX_RTC_Init+0xe4>)
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003192:	4b22      	ldr	r3, [pc, #136]	@ (800321c <MX_RTC_Init+0xe4>)
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003198:	4b20      	ldr	r3, [pc, #128]	@ (800321c <MX_RTC_Init+0xe4>)
 800319a:	2200      	movs	r2, #0
 800319c:	619a      	str	r2, [r3, #24]

    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800319e:	481f      	ldr	r0, [pc, #124]	@ (800321c <MX_RTC_Init+0xe4>)
 80031a0:	f006 ffa0 	bl	800a0e4 <HAL_RTC_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_RTC_Init+0x76>
    {
        Error_Handler();
 80031aa:	f000 f925 	bl	80033f8 <Error_Handler>
    }

    /* Проверяем, был ли RTC уже инициализирован */
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 80031ae:	2100      	movs	r1, #0
 80031b0:	481a      	ldr	r0, [pc, #104]	@ (800321c <MX_RTC_Init+0xe4>)
 80031b2:	f007 fabb 	bl	800a72c <HAL_RTCEx_BKUPRead>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80031bc:	4293      	cmp	r3, r2
 80031be:	d025      	beq.n	800320c <MX_RTC_Init+0xd4>
    {
        // --- Первый запуск ---
        sTime.Hours = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	733b      	strb	r3, [r7, #12]
        sTime.Minutes = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	737b      	strb	r3, [r7, #13]
        sTime.Seconds = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73bb      	strb	r3, [r7, #14]
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	2200      	movs	r2, #0
 80031da:	4619      	mov	r1, r3
 80031dc:	480f      	ldr	r0, [pc, #60]	@ (800321c <MX_RTC_Init+0xe4>)
 80031de:	f007 f819 	bl	800a214 <HAL_RTC_SetTime>

        sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80031e2:	2301      	movs	r3, #1
 80031e4:	723b      	strb	r3, [r7, #8]
        sDate.Month = RTC_MONTH_JANUARY;
 80031e6:	2301      	movs	r3, #1
 80031e8:	727b      	strb	r3, [r7, #9]
        sDate.Date = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	72bb      	strb	r3, [r7, #10]
        sDate.Year = 25;
 80031ee:	2319      	movs	r3, #25
 80031f0:	72fb      	strb	r3, [r7, #11]
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	2200      	movs	r2, #0
 80031f8:	4619      	mov	r1, r3
 80031fa:	4808      	ldr	r0, [pc, #32]	@ (800321c <MX_RTC_Init+0xe4>)
 80031fc:	f007 f8f6 	bl	800a3ec <HAL_RTC_SetDate>

        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // 💾 флаг инициализации
 8003200:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8003204:	2100      	movs	r1, #0
 8003206:	4805      	ldr	r0, [pc, #20]	@ (800321c <MX_RTC_Init+0xe4>)
 8003208:	f007 fa77 	bl	800a6fa <HAL_RTCEx_BKUPWrite>
    }
    else
    {
        // --- RTC уже настроен, ничего не трогаем ---
    }
}
 800320c:	bf00      	nop
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	42470e3c 	.word	0x42470e3c
 800321c:	20002a08 	.word	0x20002a08
 8003220:	40002800 	.word	0x40002800

08003224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322a:	f107 0308 	add.w	r3, r7, #8
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	463b      	mov	r3, r7
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003240:	4b1c      	ldr	r3, [pc, #112]	@ (80032b4 <MX_TIM3_Init+0x90>)
 8003242:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <MX_TIM3_Init+0x94>)
 8003244:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8003246:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <MX_TIM3_Init+0x90>)
 8003248:	223b      	movs	r2, #59	@ 0x3b
 800324a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324c:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <MX_TIM3_Init+0x90>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003252:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <MX_TIM3_Init+0x90>)
 8003254:	2263      	movs	r2, #99	@ 0x63
 8003256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003258:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <MX_TIM3_Init+0x90>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <MX_TIM3_Init+0x90>)
 8003260:	2280      	movs	r2, #128	@ 0x80
 8003262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003264:	4813      	ldr	r0, [pc, #76]	@ (80032b4 <MX_TIM3_Init+0x90>)
 8003266:	f007 fa78 	bl	800a75a <HAL_TIM_Base_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003270:	f000 f8c2 	bl	80033f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	4619      	mov	r1, r3
 8003280:	480c      	ldr	r0, [pc, #48]	@ (80032b4 <MX_TIM3_Init+0x90>)
 8003282:	f007 fb1f 	bl	800a8c4 <HAL_TIM_ConfigClockSource>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800328c:	f000 f8b4 	bl	80033f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003290:	2320      	movs	r3, #32
 8003292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003298:	463b      	mov	r3, r7
 800329a:	4619      	mov	r1, r3
 800329c:	4805      	ldr	r0, [pc, #20]	@ (80032b4 <MX_TIM3_Init+0x90>)
 800329e:	f007 fd19 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80032a8:	f000 f8a6 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032ac:	bf00      	nop
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20002a28 	.word	0x20002a28
 80032b8:	40000400 	.word	0x40000400

080032bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <MX_DMA_Init+0x3c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	4a0b      	ldr	r2, [pc, #44]	@ (80032f8 <MX_DMA_Init+0x3c>)
 80032cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d2:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <MX_DMA_Init+0x3c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	2038      	movs	r0, #56	@ 0x38
 80032e4:	f003 fbcb 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80032e8:	2038      	movs	r0, #56	@ 0x38
 80032ea:	f003 fbe4 	bl	8006ab6 <HAL_NVIC_EnableIRQ>

}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	@ 0x28
 8003300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b36      	ldr	r3, [pc, #216]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a35      	ldr	r2, [pc, #212]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 800331c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b2f      	ldr	r3, [pc, #188]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a2e      	ldr	r2, [pc, #184]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b2c      	ldr	r3, [pc, #176]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b28      	ldr	r3, [pc, #160]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4a27      	ldr	r2, [pc, #156]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4b25      	ldr	r3, [pc, #148]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	4b21      	ldr	r3, [pc, #132]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	4a20      	ldr	r2, [pc, #128]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	6313      	str	r3, [r2, #48]	@ 0x30
 8003376:	4b1e      	ldr	r3, [pc, #120]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	4b1a      	ldr	r3, [pc, #104]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	6313      	str	r3, [r2, #48]	@ 0x30
 8003392:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <MX_GPIO_Init+0xf4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800339e:	230e      	movs	r3, #14
 80033a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a8:	2301      	movs	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	4810      	ldr	r0, [pc, #64]	@ (80033f4 <MX_GPIO_Init+0xf8>)
 80033b4:	f005 fad8 	bl	8008968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2105      	movs	r1, #5
 80033bc:	2007      	movs	r0, #7
 80033be:	f003 fb5e 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80033c2:	2007      	movs	r0, #7
 80033c4:	f003 fb77 	bl	8006ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80033c8:	2200      	movs	r2, #0
 80033ca:	2105      	movs	r1, #5
 80033cc:	2008      	movs	r0, #8
 80033ce:	f003 fb56 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80033d2:	2008      	movs	r0, #8
 80033d4:	f003 fb6f 	bl	8006ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2105      	movs	r1, #5
 80033dc:	2009      	movs	r0, #9
 80033de:	f003 fb4e 	bl	8006a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80033e2:	2009      	movs	r0, #9
 80033e4:	f003 fb67 	bl	8006ab6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80033e8:	bf00      	nop
 80033ea:	3728      	adds	r7, #40	@ 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40020c00 	.word	0x40020c00

080033f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
}
 80033fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <Error_Handler+0x8>

08003404 <bk_write_u32>:
#define BKP_SNMP_REG_COUNT   4   // 8 регистров на строку (~32 байта)
#define BKP_MAGIC_REG        RTC_BKP_DR19
#define BKP_MAGIC_VALUE      0xBEEFCAFE

/* --- Вспомогательные функции --- */
static void bk_write_u32(uint32_t reg, uint32_t value) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, reg, value);
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4803      	ldr	r0, [pc, #12]	@ (8003420 <bk_write_u32+0x1c>)
 8003414:	f007 f971 	bl	800a6fa <HAL_RTCEx_BKUPWrite>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20002a08 	.word	0x20002a08

08003424 <bk_read_u32>:

static uint32_t bk_read_u32(uint32_t reg) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(&hrtc, reg);
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4804      	ldr	r0, [pc, #16]	@ (8003440 <bk_read_u32+0x1c>)
 8003430:	f007 f97c 	bl	800a72c <HAL_RTCEx_BKUPRead>
 8003434:	4603      	mov	r3, r0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20002a08 	.word	0x20002a08

08003444 <bk_write_string>:

static void bk_write_string(uint32_t start_reg, const char *s, int reg_count) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
    int max_len = reg_count * 4 - 1; // оставляем 1 байт под '\0'
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3b01      	subs	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
    int str_len = s ? strlen(s) : 0;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <bk_write_string+0x24>
 800345e:	68b8      	ldr	r0, [r7, #8]
 8003460:	f7fc febc 	bl	80001dc <strlen>
 8003464:	4603      	mov	r3, r0
 8003466:	e000      	b.n	800346a <bk_write_string+0x26>
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (str_len > max_len) str_len = max_len;
 800346c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	dd01      	ble.n	8003478 <bk_write_string+0x34>
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (int i = 0; i < reg_count; i++) {
 8003478:	2300      	movs	r3, #0
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800347c:	e02d      	b.n	80034da <bk_write_string+0x96>
        uint32_t word = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
 8003486:	e01a      	b.n	80034be <bk_write_string+0x7a>
            int idx = i * 4 + b;
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	4413      	add	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
            uint8_t ch = (idx < str_len) ? (uint8_t)s[idx] : 0;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	429a      	cmp	r2, r3
 8003498:	da04      	bge.n	80034a4 <bk_write_string+0x60>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	e000      	b.n	80034a6 <bk_write_string+0x62>
 80034a4:	2300      	movs	r3, #0
 80034a6:	75fb      	strb	r3, [r7, #23]
            word |= ((uint32_t)ch) << (8 * b);
 80034a8:	7dfa      	ldrb	r2, [r7, #23]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b4:	4313      	orrs	r3, r2
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	3301      	adds	r3, #1
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	dde1      	ble.n	8003488 <bk_write_string+0x44>
        }
        HAL_RTCEx_BKUPWrite(&hrtc, start_reg + i, word);
 80034c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	4807      	ldr	r0, [pc, #28]	@ (80034ec <bk_write_string+0xa8>)
 80034d0:	f007 f913 	bl	800a6fa <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < reg_count; i++) {
 80034d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d6:	3301      	adds	r3, #1
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	dbcd      	blt.n	800347e <bk_write_string+0x3a>
    }
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	3730      	adds	r7, #48	@ 0x30
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20002a08 	.word	0x20002a08

080034f0 <bk_read_string>:

static void bk_read_string(uint32_t start_reg, char *out, int reg_count) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	@ 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
    int pos = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
    int max_len = reg_count * 4 - 1; // оставляем место для '\0'
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	3b01      	subs	r3, #1
 8003506:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < reg_count; i++) {
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	e034      	b.n	8003578 <bk_read_string+0x88>
        uint32_t word = HAL_RTCEx_BKUPRead(&hrtc, start_reg + i);
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	4619      	mov	r1, r3
 8003516:	481e      	ldr	r0, [pc, #120]	@ (8003590 <bk_read_string+0xa0>)
 8003518:	f007 f908 	bl	800a72c <HAL_RTCEx_BKUPRead>
 800351c:	6178      	str	r0, [r7, #20]
        for (int b = 0; b < 4; b++) {
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	e023      	b.n	800356c <bk_read_string+0x7c>
            if (pos >= max_len) { out[pos] = 0; return; }
 8003524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	db05      	blt.n	8003538 <bk_read_string+0x48>
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e028      	b.n	800358a <bk_read_string+0x9a>
            uint8_t ch = (word >> (8 * b)) & 0xFF;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	74fb      	strb	r3, [r7, #19]
            if (ch == 0) { out[pos] = 0; return; }
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <bk_read_string+0x66>
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	4413      	add	r3, r2
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e019      	b.n	800358a <bk_read_string+0x9a>
            out[pos++] = ch;
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	627a      	str	r2, [r7, #36]	@ 0x24
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4413      	add	r3, r2
 8003562:	7cfa      	ldrb	r2, [r7, #19]
 8003564:	701a      	strb	r2, [r3, #0]
        for (int b = 0; b < 4; b++) {
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b03      	cmp	r3, #3
 8003570:	ddd8      	ble.n	8003524 <bk_read_string+0x34>
    for (int i = 0; i < reg_count; i++) {
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	3301      	adds	r3, #1
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	dbc6      	blt.n	800350e <bk_read_string+0x1e>
        }
    }
    out[pos] = 0;
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4413      	add	r3, r2
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
}
 800358a:	3728      	adds	r7, #40	@ 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20002a08 	.word	0x20002a08

08003594 <Settings_Init>:

/* --- Инициализация backup-доступа --- */
void Settings_Init(void) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
    __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <Settings_Init+0x30>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a08      	ldr	r2, [pc, #32]	@ (80035c4 <Settings_Init+0x30>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <Settings_Init+0x30>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 80035b6:	f006 f851 	bl	800965c <HAL_PWR_EnableBkUpAccess>
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <Settings_Save_To_Backup>:

/* --- Сохранение всех настроек в backup --- */
void Settings_Save_To_Backup(ip4_addr_t ip, ip4_addr_t mask, ip4_addr_t gw, uint8_t dhcp,
                             const char *snmp_read, const char *snmp_write, const char *snmp_trap)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	70fb      	strb	r3, [r7, #3]
    bk_write_u32(BKP_IP_REG0, ip.addr);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4619      	mov	r1, r3
 80035da:	2001      	movs	r0, #1
 80035dc:	f7ff ff12 	bl	8003404 <bk_write_u32>
    bk_write_u32(BKP_MASK_REG1, mask.addr);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4619      	mov	r1, r3
 80035e4:	2002      	movs	r0, #2
 80035e6:	f7ff ff0d 	bl	8003404 <bk_write_u32>
    bk_write_u32(BKP_GW_REG2, gw.addr);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4619      	mov	r1, r3
 80035ee:	2003      	movs	r0, #3
 80035f0:	f7ff ff08 	bl	8003404 <bk_write_u32>
    bk_write_u32(BKP_DHCP_REG3, dhcp ? 1 : 0);
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	2004      	movs	r0, #4
 8003604:	f7ff fefe 	bl	8003404 <bk_write_u32>

    bk_write_string(BKP_SNMP_BASE + 0, snmp_read  ? snmp_read  : "", BKP_SNMP_REG_COUNT);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <Settings_Save_To_Backup+0x4a>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	e000      	b.n	8003614 <Settings_Save_To_Backup+0x4c>
 8003612:	4b12      	ldr	r3, [pc, #72]	@ (800365c <Settings_Save_To_Backup+0x94>)
 8003614:	2204      	movs	r2, #4
 8003616:	4619      	mov	r1, r3
 8003618:	2005      	movs	r0, #5
 800361a:	f7ff ff13 	bl	8003444 <bk_write_string>
    bk_write_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT, snmp_write ? snmp_write : "", BKP_SNMP_REG_COUNT);
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <Settings_Save_To_Backup+0x60>
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	e000      	b.n	800362a <Settings_Save_To_Backup+0x62>
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <Settings_Save_To_Backup+0x94>)
 800362a:	2204      	movs	r2, #4
 800362c:	4619      	mov	r1, r3
 800362e:	2009      	movs	r0, #9
 8003630:	f7ff ff08 	bl	8003444 <bk_write_string>
    bk_write_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT * 2, snmp_trap  ? snmp_trap  : "", BKP_SNMP_REG_COUNT);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <Settings_Save_To_Backup+0x76>
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	e000      	b.n	8003640 <Settings_Save_To_Backup+0x78>
 800363e:	4b07      	ldr	r3, [pc, #28]	@ (800365c <Settings_Save_To_Backup+0x94>)
 8003640:	2204      	movs	r2, #4
 8003642:	4619      	mov	r1, r3
 8003644:	200d      	movs	r0, #13
 8003646:	f7ff fefd 	bl	8003444 <bk_write_string>

    bk_write_u32(BKP_MAGIC_REG, BKP_MAGIC_VALUE); // Обязательно ставим magic
 800364a:	4905      	ldr	r1, [pc, #20]	@ (8003660 <Settings_Save_To_Backup+0x98>)
 800364c:	2013      	movs	r0, #19
 800364e:	f7ff fed9 	bl	8003404 <bk_write_u32>
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	08024604 	.word	0x08024604
 8003660:	beefcafe 	.word	0xbeefcafe

08003664 <Settings_Load_From_Backup>:
/* --- Загрузка всех настроек из backup --- */
void Settings_Load_From_Backup(ip4_addr_t *ip, ip4_addr_t *mask, ip4_addr_t *gw, uint8_t *dhcp,
                              char *snmp_read, int snmp_read_size,
                              char *snmp_write, int snmp_write_size,
                              char *snmp_trap, int snmp_trap_size)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	@ 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
    if (bk_read_u32(BKP_MAGIC_REG) != BKP_MAGIC_VALUE) {
 8003672:	2013      	movs	r0, #19
 8003674:	f7ff fed6 	bl	8003424 <bk_read_u32>
 8003678:	4603      	mov	r3, r0
 800367a:	4a51      	ldr	r2, [pc, #324]	@ (80037c0 <Settings_Load_From_Backup+0x15c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d02a      	beq.n	80036d6 <Settings_Load_From_Backup+0x72>
        // backup пустой или некорректный
        if (ip) ip->addr = 0;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <Settings_Load_From_Backup+0x28>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
        if (mask) mask->addr = 0;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <Settings_Load_From_Backup+0x34>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
        if (gw) gw->addr = 0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <Settings_Load_From_Backup+0x40>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
        if (dhcp) *dhcp = 0;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <Settings_Load_From_Backup+0x4c>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
        if (snmp_read)  snmp_read[0]  = 0;
 80036b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <Settings_Load_From_Backup+0x58>
 80036b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
        if (snmp_write) snmp_write[0] = 0;
 80036bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <Settings_Load_From_Backup+0x64>
 80036c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
        if (snmp_trap)  snmp_trap[0]  = 0;
 80036c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d074      	beq.n	80037b8 <Settings_Load_From_Backup+0x154>
 80036ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e071      	b.n	80037ba <Settings_Load_From_Backup+0x156>
        return;
    }

    if (ip)    ip->addr   = bk_read_u32(BKP_IP_REG0);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <Settings_Load_From_Backup+0x84>
 80036dc:	2001      	movs	r0, #1
 80036de:	f7ff fea1 	bl	8003424 <bk_read_u32>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	601a      	str	r2, [r3, #0]
    if (mask)  mask->addr = bk_read_u32(BKP_MASK_REG1);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <Settings_Load_From_Backup+0x96>
 80036ee:	2002      	movs	r0, #2
 80036f0:	f7ff fe98 	bl	8003424 <bk_read_u32>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	601a      	str	r2, [r3, #0]
    if (gw)    gw->addr   = bk_read_u32(BKP_GW_REG2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <Settings_Load_From_Backup+0xa8>
 8003700:	2003      	movs	r0, #3
 8003702:	f7ff fe8f 	bl	8003424 <bk_read_u32>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	601a      	str	r2, [r3, #0]
    if (dhcp)  *dhcp      = (uint8_t)(bk_read_u32(BKP_DHCP_REG3) & 0xFF);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <Settings_Load_From_Backup+0xbc>
 8003712:	2004      	movs	r0, #4
 8003714:	f7ff fe86 	bl	8003424 <bk_read_u32>
 8003718:	4603      	mov	r3, r0
 800371a:	b2da      	uxtb	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	701a      	strb	r2, [r3, #0]

    char tmp[33];

    bk_read_string(BKP_SNMP_BASE + 0, tmp, BKP_SNMP_REG_COUNT);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	2204      	movs	r2, #4
 8003726:	4619      	mov	r1, r3
 8003728:	2005      	movs	r0, #5
 800372a:	f7ff fee1 	bl	80034f0 <bk_read_string>
    if (snmp_read) { strncpy(snmp_read, tmp, snmp_read_size-1); snmp_read[snmp_read_size-1]=0; }
 800372e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <Settings_Load_From_Backup+0xee>
 8003734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003736:	3b01      	subs	r3, #1
 8003738:	461a      	mov	r2, r3
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	4619      	mov	r1, r3
 8003740:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003742:	f01e f9ec 	bl	8021b1e <strncpy>
 8003746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003748:	3b01      	subs	r3, #1
 800374a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800374c:	4413      	add	r3, r2
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT, tmp, BKP_SNMP_REG_COUNT);
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	2204      	movs	r2, #4
 8003758:	4619      	mov	r1, r3
 800375a:	2009      	movs	r0, #9
 800375c:	f7ff fec8 	bl	80034f0 <bk_read_string>
    if (snmp_write) { strncpy(snmp_write, tmp, snmp_write_size-1); snmp_write[snmp_write_size-1]=0; }
 8003760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <Settings_Load_From_Backup+0x120>
 8003766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003768:	3b01      	subs	r3, #1
 800376a:	461a      	mov	r2, r3
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003774:	f01e f9d3 	bl	8021b1e <strncpy>
 8003778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800377a:	3b01      	subs	r3, #1
 800377c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377e:	4413      	add	r3, r2
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_BASE + BKP_SNMP_REG_COUNT * 2, tmp, BKP_SNMP_REG_COUNT);
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2204      	movs	r2, #4
 800378a:	4619      	mov	r1, r3
 800378c:	200d      	movs	r0, #13
 800378e:	f7ff feaf 	bl	80034f0 <bk_read_string>
    if (snmp_trap) { strncpy(snmp_trap, tmp, snmp_trap_size-1); snmp_trap[snmp_trap_size-1]=0; }
 8003792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <Settings_Load_From_Backup+0x156>
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	3b01      	subs	r3, #1
 800379c:	461a      	mov	r2, r3
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	4619      	mov	r1, r3
 80037a4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80037a6:	f01e f9ba 	bl	8021b1e <strncpy>
 80037aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ac:	3b01      	subs	r3, #1
 80037ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80037b0:	4413      	add	r3, r2
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e000      	b.n	80037ba <Settings_Load_From_Backup+0x156>
        return;
 80037b8:	bf00      	nop
}
 80037ba:	3738      	adds	r7, #56	@ 0x38
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	beefcafe 	.word	0xbeefcafe
 80037c4:	00000000 	.word	0x00000000

080037c8 <SignalProcessor_Update>:
float voltage2 = 0.0f;
float current  = 0.0f;
float selected_voltage = 0.0f;

void SignalProcessor_Update(uint32_t *adc_buf, size_t samples)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b090      	sub	sp, #64	@ 0x40
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    double sum_v1 = 0.0;
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double sum_v2 = 0.0;
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double sum_i  = 0.0;
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    for (size_t n = 0; n < samples; n++) {
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fa:	e095      	b.n	8003928 <SignalProcessor_Update+0x160>
        // Буфер имеет вид [ch1, ch2, ch3, ch1, ch2, ch3, ...]
        uint32_t raw1 = adc_buf[n * 3 + 0];
 80037fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	623b      	str	r3, [r7, #32]
        uint32_t raw2 = adc_buf[n * 3 + 1];
 8003810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	3304      	adds	r3, #4
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61fb      	str	r3, [r7, #28]
        uint32_t raw3 = adc_buf[n * 3 + 2];
 8003824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	3308      	adds	r3, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61bb      	str	r3, [r7, #24]

        // Переводим в напряжение на пине (0…3.3 В)
        float v1 = (raw1 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8003838:	6a38      	ldr	r0, [r7, #32]
 800383a:	f7fd fa71 	bl	8000d20 <__aeabi_ui2f>
 800383e:	4603      	mov	r3, r0
 8003840:	49a1      	ldr	r1, [pc, #644]	@ (8003ac8 <SignalProcessor_Update+0x300>)
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fac4 	bl	8000dd0 <__aeabi_fmul>
 8003848:	4603      	mov	r3, r0
 800384a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fb72 	bl	8000f38 <__aeabi_fdiv>
 8003854:	4603      	mov	r3, r0
 8003856:	499d      	ldr	r1, [pc, #628]	@ (8003acc <SignalProcessor_Update+0x304>)
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd f9af 	bl	8000bbc <__aeabi_fsub>
 800385e:	4603      	mov	r3, r0
 8003860:	617b      	str	r3, [r7, #20]
        float v2 = (raw2 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8003862:	69f8      	ldr	r0, [r7, #28]
 8003864:	f7fd fa5c 	bl	8000d20 <__aeabi_ui2f>
 8003868:	4603      	mov	r3, r0
 800386a:	4997      	ldr	r1, [pc, #604]	@ (8003ac8 <SignalProcessor_Update+0x300>)
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd faaf 	bl	8000dd0 <__aeabi_fmul>
 8003872:	4603      	mov	r3, r0
 8003874:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fb5d 	bl	8000f38 <__aeabi_fdiv>
 800387e:	4603      	mov	r3, r0
 8003880:	4992      	ldr	r1, [pc, #584]	@ (8003acc <SignalProcessor_Update+0x304>)
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd f99a 	bl	8000bbc <__aeabi_fsub>
 8003888:	4603      	mov	r3, r0
 800388a:	613b      	str	r3, [r7, #16]
        float i  = (raw3 * VREF / ADC_RESOLUTION) - VREF_HALF;
 800388c:	69b8      	ldr	r0, [r7, #24]
 800388e:	f7fd fa47 	bl	8000d20 <__aeabi_ui2f>
 8003892:	4603      	mov	r3, r0
 8003894:	498c      	ldr	r1, [pc, #560]	@ (8003ac8 <SignalProcessor_Update+0x300>)
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fa9a 	bl	8000dd0 <__aeabi_fmul>
 800389c:	4603      	mov	r3, r0
 800389e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fb48 	bl	8000f38 <__aeabi_fdiv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4988      	ldr	r1, [pc, #544]	@ (8003acc <SignalProcessor_Update+0x304>)
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd f985 	bl	8000bbc <__aeabi_fsub>
 80038b2:	4603      	mov	r3, r0
 80038b4:	60fb      	str	r3, [r7, #12]

        // Суммируем квадраты
        sum_v1 += (double)(v1 * v1);
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	6978      	ldr	r0, [r7, #20]
 80038ba:	f7fd fa89 	bl	8000dd0 <__aeabi_fmul>
 80038be:	4603      	mov	r3, r0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fdf7 	bl	80004b4 <__aeabi_f2d>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80038ce:	f7fc fc93 	bl	80001f8 <__adddf3>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        sum_v2 += (double)(v2 * v2);
 80038da:	6939      	ldr	r1, [r7, #16]
 80038dc:	6938      	ldr	r0, [r7, #16]
 80038de:	f7fd fa77 	bl	8000dd0 <__aeabi_fmul>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fde5 	bl	80004b4 <__aeabi_f2d>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80038f2:	f7fc fc81 	bl	80001f8 <__adddf3>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        sum_i  += (double)(i  * i);
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7fd fa65 	bl	8000dd0 <__aeabi_fmul>
 8003906:	4603      	mov	r3, r0
 8003908:	4618      	mov	r0, r3
 800390a:	f7fc fdd3 	bl	80004b4 <__aeabi_f2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003916:	f7fc fc6f 	bl	80001f8 <__adddf3>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (size_t n = 0; n < samples; n++) {
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	3301      	adds	r3, #1
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
 8003928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	f4ff af65 	bcc.w	80037fc <SignalProcessor_Update+0x34>
    }

    // RMS
    voltage1 = (sqrtf(sum_v1 / samples) - 0.82)*780;
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	f7fc fd9c 	bl	8000470 <__aeabi_ui2d>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003940:	f7fc ff3a 	bl	80007b8 <__aeabi_ddiv>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f7fd f8e2 	bl	8000b14 <__aeabi_d2f>
 8003950:	4603      	mov	r3, r0
 8003952:	4618      	mov	r0, r3
 8003954:	f020 fd2a 	bl	80243ac <sqrtf>
 8003958:	4603      	mov	r3, r0
 800395a:	4618      	mov	r0, r3
 800395c:	f7fc fdaa 	bl	80004b4 <__aeabi_f2d>
 8003960:	a357      	add	r3, pc, #348	@ (adr r3, 8003ac0 <SignalProcessor_Update+0x2f8>)
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f7fc fc45 	bl	80001f4 <__aeabi_dsub>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	4b56      	ldr	r3, [pc, #344]	@ (8003ad0 <SignalProcessor_Update+0x308>)
 8003978:	f7fc fdf4 	bl	8000564 <__aeabi_dmul>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f7fd f8c6 	bl	8000b14 <__aeabi_d2f>
 8003988:	4603      	mov	r3, r0
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <SignalProcessor_Update+0x30c>)
 800398c:	6013      	str	r3, [r2, #0]
    if (voltage1 < 20.0f) {
 800398e:	4b51      	ldr	r3, [pc, #324]	@ (8003ad4 <SignalProcessor_Update+0x30c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4951      	ldr	r1, [pc, #324]	@ (8003ad8 <SignalProcessor_Update+0x310>)
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd fbb9 	bl	800110c <__aeabi_fcmplt>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <SignalProcessor_Update+0x1e0>
        voltage1 = 0.0f;
 80039a0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <SignalProcessor_Update+0x30c>)
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
    }
    voltage2 = (sqrtf(sum_v2 / samples) - 0.82)*780;
 80039a8:	6838      	ldr	r0, [r7, #0]
 80039aa:	f7fc fd61 	bl	8000470 <__aeabi_ui2d>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80039b6:	f7fc feff 	bl	80007b8 <__aeabi_ddiv>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fd f8a7 	bl	8000b14 <__aeabi_d2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f020 fcef 	bl	80243ac <sqrtf>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fd6f 	bl	80004b4 <__aeabi_f2d>
 80039d6:	a33a      	add	r3, pc, #232	@ (adr r3, 8003ac0 <SignalProcessor_Update+0x2f8>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fc0a 	bl	80001f4 <__aeabi_dsub>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	4b38      	ldr	r3, [pc, #224]	@ (8003ad0 <SignalProcessor_Update+0x308>)
 80039ee:	f7fc fdb9 	bl	8000564 <__aeabi_dmul>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f7fd f88b 	bl	8000b14 <__aeabi_d2f>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a36      	ldr	r2, [pc, #216]	@ (8003adc <SignalProcessor_Update+0x314>)
 8003a02:	6013      	str	r3, [r2, #0]
    if (voltage2 < 20.0f) {
 8003a04:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <SignalProcessor_Update+0x314>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4933      	ldr	r1, [pc, #204]	@ (8003ad8 <SignalProcessor_Update+0x310>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd fb7e 	bl	800110c <__aeabi_fcmplt>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <SignalProcessor_Update+0x256>
        voltage2 = 0.0f;
 8003a16:	4b31      	ldr	r3, [pc, #196]	@ (8003adc <SignalProcessor_Update+0x314>)
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
    }
	current  = (sqrtf(sum_i  / samples) - 0.82)*25;
 8003a1e:	6838      	ldr	r0, [r7, #0]
 8003a20:	f7fc fd26 	bl	8000470 <__aeabi_ui2d>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a2c:	f7fc fec4 	bl	80007b8 <__aeabi_ddiv>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7fd f86c 	bl	8000b14 <__aeabi_d2f>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f020 fcb4 	bl	80243ac <sqrtf>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd34 	bl	80004b4 <__aeabi_f2d>
 8003a4c:	a31c      	add	r3, pc, #112	@ (adr r3, 8003ac0 <SignalProcessor_Update+0x2f8>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fbcf 	bl	80001f4 <__aeabi_dsub>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae0 <SignalProcessor_Update+0x318>)
 8003a64:	f7fc fd7e 	bl	8000564 <__aeabi_dmul>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd f850 	bl	8000b14 <__aeabi_d2f>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae4 <SignalProcessor_Update+0x31c>)
 8003a78:	6013      	str	r3, [r2, #0]
    if (current < 0.205f) {
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <SignalProcessor_Update+0x31c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	491a      	ldr	r1, [pc, #104]	@ (8003ae8 <SignalProcessor_Update+0x320>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fb43 	bl	800110c <__aeabi_fcmplt>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <SignalProcessor_Update+0x2cc>
        current = 0.0f;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ae4 <SignalProcessor_Update+0x31c>)
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    }

    // Выбор активного напряжения
    if (voltage1 > 50.0f) {
 8003a94:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <SignalProcessor_Update+0x30c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4914      	ldr	r1, [pc, #80]	@ (8003aec <SignalProcessor_Update+0x324>)
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fb54 	bl	8001148 <__aeabi_fcmpgt>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d004      	beq.n	8003ab0 <SignalProcessor_Update+0x2e8>
        selected_voltage = voltage1;
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <SignalProcessor_Update+0x30c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a11      	ldr	r2, [pc, #68]	@ (8003af0 <SignalProcessor_Update+0x328>)
 8003aac:	6013      	str	r3, [r2, #0]
    } else {
        selected_voltage = voltage2;
    }
}
 8003aae:	e003      	b.n	8003ab8 <SignalProcessor_Update+0x2f0>
        selected_voltage = voltage2;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <SignalProcessor_Update+0x314>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8003af0 <SignalProcessor_Update+0x328>)
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	3740      	adds	r7, #64	@ 0x40
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	a3d70a3d 	.word	0xa3d70a3d
 8003ac4:	3fea3d70 	.word	0x3fea3d70
 8003ac8:	40533333 	.word	0x40533333
 8003acc:	3fd33333 	.word	0x3fd33333
 8003ad0:	40886000 	.word	0x40886000
 8003ad4:	20004b60 	.word	0x20004b60
 8003ad8:	41a00000 	.word	0x41a00000
 8003adc:	20004b64 	.word	0x20004b64
 8003ae0:	40390000 	.word	0x40390000
 8003ae4:	20004b68 	.word	0x20004b68
 8003ae8:	3e51eb85 	.word	0x3e51eb85
 8003aec:	42480000 	.word	0x42480000
 8003af0:	20004b6c 	.word	0x20004b6c

08003af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <HAL_MspInit+0x48>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	4a0e      	ldr	r2, [pc, #56]	@ (8003b3c <HAL_MspInit+0x48>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <HAL_MspInit+0x48>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <HAL_MspInit+0x48>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <HAL_MspInit+0x48>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b26:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <HAL_MspInit+0x48>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	40023800 	.word	0x40023800

08003b40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	@ 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c50 <HAL_ADC_MspInit+0x110>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d172      	bne.n	8003c48 <HAL_ADC_MspInit+0x108>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6a:	4a3a      	ldr	r2, [pc, #232]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b72:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	4a33      	ldr	r2, [pc, #204]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8e:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003baa:	4b2a      	ldr	r3, [pc, #168]	@ (8003c54 <HAL_ADC_MspInit+0x114>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc2:	f107 0314 	add.w	r3, r7, #20
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4823      	ldr	r0, [pc, #140]	@ (8003c58 <HAL_ADC_MspInit+0x118>)
 8003bca:	f004 fecd 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003bce:	2360      	movs	r3, #96	@ 0x60
 8003bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	4619      	mov	r1, r3
 8003be0:	481e      	ldr	r0, [pc, #120]	@ (8003c5c <HAL_ADC_MspInit+0x11c>)
 8003be2:	f004 fec1 	bl	8008968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003be6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003be8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c64 <HAL_ADC_MspInit+0x124>)
 8003bea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003bec:	4b1c      	ldr	r3, [pc, #112]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf8:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bfe:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c06:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c0e:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c16:	4b12      	ldr	r3, [pc, #72]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c26:	4b0e      	ldr	r3, [pc, #56]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c2c:	480c      	ldr	r0, [pc, #48]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c2e:	f002 ff5d 	bl	8006aec <HAL_DMA_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8003c38:	f7ff fbde 	bl	80033f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a08      	ldr	r2, [pc, #32]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c40:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c42:	4a07      	ldr	r2, [pc, #28]	@ (8003c60 <HAL_ADC_MspInit+0x120>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003c48:	bf00      	nop
 8003c4a:	3728      	adds	r7, #40	@ 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40012000 	.word	0x40012000
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	20002954 	.word	0x20002954
 8003c64:	40026410 	.word	0x40026410

08003c68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	@ 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	@ (8003cec <HAL_I2C_MspInit+0x84>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d12b      	bne.n	8003ce2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	4b18      	ldr	r3, [pc, #96]	@ (8003cf0 <HAL_I2C_MspInit+0x88>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <HAL_I2C_MspInit+0x88>)
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <HAL_I2C_MspInit+0x88>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ca6:	23c0      	movs	r3, #192	@ 0xc0
 8003ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003caa:	2312      	movs	r3, #18
 8003cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	480c      	ldr	r0, [pc, #48]	@ (8003cf4 <HAL_I2C_MspInit+0x8c>)
 8003cc2:	f004 fe51 	bl	8008968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_I2C_MspInit+0x88>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <HAL_I2C_MspInit+0x88>)
 8003cd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_I2C_MspInit+0x88>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003ce2:	bf00      	nop
 8003ce4:	3728      	adds	r7, #40	@ 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40005400 	.word	0x40005400
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020400 	.word	0x40020400

08003cf8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a05      	ldr	r2, [pc, #20]	@ (8003d1c <HAL_RTC_MspInit+0x24>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d102      	bne.n	8003d10 <HAL_RTC_MspInit+0x18>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d0a:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_RTC_MspInit+0x28>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40002800 	.word	0x40002800
 8003d20:	42470e3c 	.word	0x42470e3c

08003d24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	@ (8003d5c <HAL_TIM_Base_MspInit+0x38>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10d      	bne.n	8003d52 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <HAL_TIM_Base_MspInit+0x3c>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	4a08      	ldr	r2, [pc, #32]	@ (8003d60 <HAL_TIM_Base_MspInit+0x3c>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_TIM_Base_MspInit+0x3c>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40023800 	.word	0x40023800

08003d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <NMI_Handler+0x4>

08003d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <HardFault_Handler+0x4>

08003d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <MemManage_Handler+0x4>

08003d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d80:	bf00      	nop
 8003d82:	e7fd      	b.n	8003d80 <BusFault_Handler+0x4>

08003d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <UsageFault_Handler+0x4>

08003d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003db4:	f002 f970 	bl	8006098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	f004 ff87 	bl	8008cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003dce:	2004      	movs	r0, #4
 8003dd0:	f004 ff80 	bl	8008cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003ddc:	2008      	movs	r0, #8
 8003dde:	f004 ff79 	bl	8008cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003dec:	4802      	ldr	r0, [pc, #8]	@ (8003df8 <DMA2_Stream0_IRQHandler+0x10>)
 8003dee:	f002 ff83 	bl	8006cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20002954 	.word	0x20002954

08003dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return 1;
 8003e00:	2301      	movs	r3, #1
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
	...

08003e0c <_kill>:

int _kill(int pid, int sig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e16:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <_kill+0x20>)
 8003e18:	2216      	movs	r2, #22
 8003e1a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2000c098 	.word	0x2000c098

08003e30 <_exit>:

void _exit (int status)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e38:	f04f 31ff 	mov.w	r1, #4294967295
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffe5 	bl	8003e0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <_exit+0x12>

08003e46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e00a      	b.n	8003e6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e58:	f3af 8000 	nop.w
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	60ba      	str	r2, [r7, #8]
 8003e64:	b2ca      	uxtb	r2, r1
 8003e66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	dbf0      	blt.n	8003e58 <_read+0x12>
  }

  return len;
 8003e76:	687b      	ldr	r3, [r7, #4]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e009      	b.n	8003ea6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	60ba      	str	r2, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	dbf1      	blt.n	8003e92 <_write+0x12>
  }
  return len;
 8003eae:	687b      	ldr	r3, [r7, #4]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_close>:

int _close(int file)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ede:	605a      	str	r2, [r3, #4]
  return 0;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <_isatty>:

int _isatty(int file)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ef4:	2301      	movs	r3, #1
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f20:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <_sbrk+0x5c>)
 8003f22:	4b15      	ldr	r3, [pc, #84]	@ (8003f78 <_sbrk+0x60>)
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f2c:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <_sbrk+0x64>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <_sbrk+0x64>)
 8003f36:	4a12      	ldr	r2, [pc, #72]	@ (8003f80 <_sbrk+0x68>)
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f3a:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <_sbrk+0x64>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d205      	bcs.n	8003f54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <_sbrk+0x6c>)
 8003f4a:	220c      	movs	r2, #12
 8003f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	e009      	b.n	8003f68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f54:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <_sbrk+0x64>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f5a:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <_sbrk+0x64>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	4a06      	ldr	r2, [pc, #24]	@ (8003f7c <_sbrk+0x64>)
 8003f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f66:	68fb      	ldr	r3, [r7, #12]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2001c000 	.word	0x2001c000
 8003f78:	00004000 	.word	0x00004000
 8003f7c:	20004b70 	.word	0x20004b70
 8003f80:	2000c0a8 	.word	0x2000c0a8
 8003f84:	2000c098 	.word	0x2000c098

08003f88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <draw_cross>:
extern float current;

/* --- Вспомогательные функции --- */

/* Рисует крест поверх круга */
static void draw_cross(int cx, int cy, int r) {
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b089      	sub	sp, #36	@ 0x24
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
    int d = (int)(r * 0.65f);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fc fec1 	bl	8000d28 <__aeabi_i2f>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4923      	ldr	r1, [pc, #140]	@ (8004038 <draw_cross+0xa4>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc ff10 	bl	8000dd0 <__aeabi_fmul>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd f8e8 	bl	8001188 <__aeabi_f2iz>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	617b      	str	r3, [r7, #20]
    ssd1306_Line(cx - d, cy - d, cx + d, cy + d, White);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	b2d8      	uxtb	r0, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	b2d9      	uxtb	r1, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	b2dc      	uxtb	r4, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2201      	movs	r2, #1
 8003fee:	9200      	str	r2, [sp, #0]
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	f001 fe45 	bl	8005c80 <ssd1306_Line>
    ssd1306_Line(cx - d, cy + d, cx + d, cy - d, White);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	b2d8      	uxtb	r0, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4413      	add	r3, r2
 800400c:	b2d9      	uxtb	r1, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	4413      	add	r3, r2
 8004018:	b2dc      	uxtb	r4, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2201      	movs	r2, #1
 8004028:	9200      	str	r2, [sp, #0]
 800402a:	4622      	mov	r2, r4
 800402c:	f001 fe28 	bl	8005c80 <ssd1306_Line>
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	bd90      	pop	{r4, r7, pc}
 8004038:	3f266666 	.word	0x3f266666

0800403c <draw_centered_char>:

/* Центрированный символ */
static void draw_centered_char(int cx, int cy, char ch, const SSD1306_Font_t *font) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	@ 0x30
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	71fb      	strb	r3, [r7, #7]
    char s[2] = { ch, '\0' };
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	753b      	strb	r3, [r7, #20]
 8004050:	2300      	movs	r3, #0
 8004052:	757b      	strb	r3, [r7, #21]
    int fw = font->width;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	61fb      	str	r3, [r7, #28]
    int fh = font->height;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	61bb      	str	r3, [r7, #24]
    int x = cx - fw / 2;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	0fda      	lsrs	r2, r3, #31
 8004064:	4413      	add	r3, r2
 8004066:	105b      	asrs	r3, r3, #1
 8004068:	425b      	negs	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = cy - fh / 2;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	0fda      	lsrs	r2, r3, #31
 8004076:	4413      	add	r3, r2
 8004078:	105b      	asrs	r3, r3, #1
 800407a:	425b      	negs	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4413      	add	r3, r2
 8004082:	623b      	str	r3, [r7, #32]
    if (x < 0) x = 0;
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	da01      	bge.n	800408e <draw_centered_char+0x52>
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) y = 0;
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da01      	bge.n	8004098 <draw_centered_char+0x5c>
 8004094:	2300      	movs	r3, #0
 8004096:	623b      	str	r3, [r7, #32]
    ssd1306_SetCursor((uint8_t)x, (uint8_t)y);
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	b2db      	uxtb	r3, r3
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fdd4 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(s, *font, White);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f107 0014 	add.w	r0, r7, #20
 80040ae:	2201      	movs	r2, #1
 80040b0:	9200      	str	r2, [sp, #0]
 80040b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b4:	f001 fda6 	bl	8005c04 <ssd1306_WriteString>
}
 80040b8:	bf00      	nop
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <draw_input_circle>:

/* Кружок с буквой. Если нет входа — крест. Если активный — двойной круг */
static void draw_input_circle(int cx, int cy, char label, uint8_t hasInput, uint8_t isActive) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	460b      	mov	r3, r1
 80040d0:	71fb      	strb	r3, [r7, #7]
 80040d2:	4613      	mov	r3, r2
 80040d4:	71bb      	strb	r3, [r7, #6]
    const int r = 12;
 80040d6:	230c      	movs	r3, #12
 80040d8:	617b      	str	r3, [r7, #20]
    ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)r, White);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	b2d8      	uxtb	r0, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	b2d9      	uxtb	r1, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	2301      	movs	r3, #1
 80040e8:	f001 fe36 	bl	8005d58 <ssd1306_DrawCircle>

    // буква всегда рисуется
    draw_centered_char(cx, cy, label, &Font_11x18);
 80040ec:	79fa      	ldrb	r2, [r7, #7]
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <draw_input_circle+0x70>)
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff ffa2 	bl	800403c <draw_centered_char>

    if (!hasInput) {
 80040f8:	79bb      	ldrb	r3, [r7, #6]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <draw_input_circle+0x4a>
        draw_cross(cx, cy, r);
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff ff46 	bl	8003f94 <draw_cross>
    } else if (isActive) {
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
    }
}
 8004108:	e00e      	b.n	8004128 <draw_input_circle+0x68>
    } else if (isActive) {
 800410a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <draw_input_circle+0x68>
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	b2d8      	uxtb	r0, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	b2d9      	uxtb	r1, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	3303      	adds	r3, #3
 8004120:	b2da      	uxtb	r2, r3
 8004122:	2301      	movs	r3, #1
 8004124:	f001 fe18 	bl	8005d58 <ssd1306_DrawCircle>
}
 8004128:	bf00      	nop
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	08028940 	.word	0x08028940

08004134 <OLED_DrawABPage>:

/* --- Главная функция --- */
void OLED_DrawABPage(void) {
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b0a5      	sub	sp, #148	@ 0x94
 8004138:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800413a:	2000      	movs	r0, #0
 800413c:	f001 fc40 	bl	80059c0 <ssd1306_Fill>

    const int SW = SSD1306_ROTATED_WIDTH;   // 64
 8004140:	2340      	movs	r3, #64	@ 0x40
 8004142:	677b      	str	r3, [r7, #116]	@ 0x74
    const int SH = SSD1306_ROTATED_HEIGHT;  // 128
 8004144:	2380      	movs	r3, #128	@ 0x80
 8004146:	673b      	str	r3, [r7, #112]	@ 0x70

    // Заголовок сверху - БОЛЬШИМИ БУКВАМИ ДЛЯ ТЕСТА
    const char title[] = "BONCH-ATS";
 8004148:	4a72      	ldr	r2, [pc, #456]	@ (8004314 <OLED_DrawABPage+0x1e0>)
 800414a:	f107 0320 	add.w	r3, r7, #32
 800414e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004150:	c303      	stmia	r3!, {r0, r1}
 8004152:	801a      	strh	r2, [r3, #0]
    const SSD1306_Font_t *title_font = &Font_7x10;
 8004154:	4b70      	ldr	r3, [pc, #448]	@ (8004318 <OLED_DrawABPage+0x1e4>)
 8004156:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int title_x = (SW / 2) - ((int)strlen(title) * title_font->width / 2);
 8004158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415a:	0fda      	lsrs	r2, r3, #31
 800415c:	4413      	add	r3, r2
 800415e:	105b      	asrs	r3, r3, #1
 8004160:	4619      	mov	r1, r3
 8004162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	0fda      	lsrs	r2, r3, #31
 8004170:	4413      	add	r3, r2
 8004172:	105b      	asrs	r3, r3, #1
 8004174:	425b      	negs	r3, r3
 8004176:	440b      	add	r3, r1
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (title_x < 0) title_x = 0;
 800417c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004180:	2b00      	cmp	r3, #0
 8004182:	da02      	bge.n	800418a <OLED_DrawABPage+0x56>
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ssd1306_SetCursor(title_x, 2);
 800418a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2102      	movs	r1, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fd5c 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *title_font, White);
 8004198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800419a:	f107 0020 	add.w	r0, r7, #32
 800419e:	2201      	movs	r2, #1
 80041a0:	9200      	str	r2, [sp, #0]
 80041a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a4:	f001 fd2e 	bl	8005c04 <ssd1306_WriteString>
    int title_bottom = 2 + title_font->height;
 80041a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	3302      	adds	r3, #2
 80041ae:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Нижний блок (U/I/P)
    const SSD1306_Font_t *fval = &Font_7x10;
 80041b0:	4b59      	ldr	r3, [pc, #356]	@ (8004318 <OLED_DrawABPage+0x1e4>)
 80041b2:	667b      	str	r3, [r7, #100]	@ 0x64
    const int fh = fval->height;   // ~10
 80041b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	663b      	str	r3, [r7, #96]	@ 0x60
    const int vpad = 4;
 80041ba:	2304      	movs	r3, #4
 80041bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const int box_x = 2;
 80041be:	2302      	movs	r3, #2
 80041c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    const int lines = 3;
 80041c2:	2303      	movs	r3, #3
 80041c4:	657b      	str	r3, [r7, #84]	@ 0x54
    const int box_h = (fh * lines) + (vpad * (lines + 1));
 80041c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041ca:	fb03 f202 	mul.w	r2, r3, r2
 80041ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d0:	3301      	adds	r3, #1
 80041d2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	653b      	str	r3, [r7, #80]	@ 0x50
    const int box_w = SW - 4;
 80041dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041de:	3b04      	subs	r3, #4
 80041e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int box_y = SH - box_h - 4;
 80041e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80041e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	3b04      	subs	r3, #4
 80041ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    int data_top = box_y;
 80041ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ee:	647b      	str	r3, [r7, #68]	@ 0x44

    // Параметры входов
    uint8_t hasA = (voltage1 > ABPAGE_VOLTAGE_THRESHOLD);
 80041f0:	4b4a      	ldr	r3, [pc, #296]	@ (800431c <OLED_DrawABPage+0x1e8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	4614      	mov	r4, r2
 80041f8:	4949      	ldr	r1, [pc, #292]	@ (8004320 <OLED_DrawABPage+0x1ec>)
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fc ffa4 	bl	8001148 <__aeabi_fcmpgt>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <OLED_DrawABPage+0xd6>
 8004206:	2300      	movs	r3, #0
 8004208:	461c      	mov	r4, r3
 800420a:	b2e3      	uxtb	r3, r4
 800420c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t hasB = (voltage2 > ABPAGE_VOLTAGE_THRESHOLD);
 8004210:	4b44      	ldr	r3, [pc, #272]	@ (8004324 <OLED_DrawABPage+0x1f0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2201      	movs	r2, #1
 8004216:	4614      	mov	r4, r2
 8004218:	4941      	ldr	r1, [pc, #260]	@ (8004320 <OLED_DrawABPage+0x1ec>)
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc ff94 	bl	8001148 <__aeabi_fcmpgt>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <OLED_DrawABPage+0xf6>
 8004226:	2300      	movs	r3, #0
 8004228:	461c      	mov	r4, r3
 800422a:	b2e3      	uxtb	r3, r4
 800422c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    uint8_t activeA = 0, activeB = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004236:	2300      	movs	r3, #0
 8004238:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    if (hasA && hasB) activeA = 1;     // A приоритет
 800423c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <OLED_DrawABPage+0x120>
 8004244:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <OLED_DrawABPage+0x120>
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004252:	e00e      	b.n	8004272 <OLED_DrawABPage+0x13e>
    else if (hasA) activeA = 1;
 8004254:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <OLED_DrawABPage+0x130>
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8004262:	e006      	b.n	8004272 <OLED_DrawABPage+0x13e>
    else if (hasB) activeB = 1;
 8004264:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <OLED_DrawABPage+0x13e>
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

    // Кружки A и B — по центру между заголовком и блоком данных
    // ЯВНО СДВИГАЕМ ВНИЗ НА 10 ПИКСЕЛЕЙ ДЛЯ ТЕСТА
    int center_y = title_bottom + 10 + ((data_top - title_bottom - 10) / 2);
 8004272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004274:	f103 020a 	add.w	r2, r3, #10
 8004278:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800427a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800427c:	1acb      	subs	r3, r1, r3
 800427e:	3b0a      	subs	r3, #10
 8004280:	0fd9      	lsrs	r1, r3, #31
 8004282:	440b      	add	r3, r1
 8004284:	105b      	asrs	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const int ax = SW / 4;
 800428a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800428c:	2b00      	cmp	r3, #0
 800428e:	da00      	bge.n	8004292 <OLED_DrawABPage+0x15e>
 8004290:	3303      	adds	r3, #3
 8004292:	109b      	asrs	r3, r3, #2
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int bx = (SW * 3) / 4;
 8004296:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da00      	bge.n	80042a4 <OLED_DrawABPage+0x170>
 80042a2:	3303      	adds	r3, #3
 80042a4:	109b      	asrs	r3, r3, #2
 80042a6:	637b      	str	r3, [r7, #52]	@ 0x34

    draw_input_circle(ax, center_y, 'A', hasA, activeA);
 80042a8:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80042ac:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	2241      	movs	r2, #65	@ 0x41
 80042b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80042ba:	f7ff ff01 	bl	80040c0 <draw_input_circle>
    draw_input_circle(bx, center_y, 'B', hasB, activeB);
 80042be:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 80042c2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	2242      	movs	r2, #66	@ 0x42
 80042cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80042d0:	f7ff fef6 	bl	80040c0 <draw_input_circle>

    // Рисуем нижний блок
    ssd1306_DrawRectangle(box_x, box_y, box_x + box_w, box_y + box_h, White);
 80042d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d6:	b2d8      	uxtb	r0, r3
 80042d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042da:	b2d9      	uxtb	r1, r3
 80042dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	b2dc      	uxtb	r4, r3
 80042e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2201      	movs	r2, #1
 80042f6:	9200      	str	r2, [sp, #0]
 80042f8:	4622      	mov	r2, r4
 80042fa:	f001 fdb4 	bl	8005e66 <ssd1306_DrawRectangle>

    // Значения
    float u_work = 0.0f;
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (activeA) u_work = voltage1;
 8004304:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00d      	beq.n	8004328 <OLED_DrawABPage+0x1f4>
 800430c:	4b03      	ldr	r3, [pc, #12]	@ (800431c <OLED_DrawABPage+0x1e8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004312:	e010      	b.n	8004336 <OLED_DrawABPage+0x202>
 8004314:	08024624 	.word	0x08024624
 8004318:	08028934 	.word	0x08028934
 800431c:	20004b60 	.word	0x20004b60
 8004320:	41a00000 	.word	0x41a00000
 8004324:	20004b64 	.word	0x20004b64
    else if (activeB) u_work = voltage2;
 8004328:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <OLED_DrawABPage+0x202>
 8004330:	4b48      	ldr	r3, [pc, #288]	@ (8004454 <OLED_DrawABPage+0x320>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Округление мощности до целых - ТЕПЕРЬ ТОЧНО БЕЗ ДРОБНОЙ ЧАСТИ
    int power_int = (int)(current * u_work);
 8004336:	4b48      	ldr	r3, [pc, #288]	@ (8004458 <OLED_DrawABPage+0x324>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc fd47 	bl	8000dd0 <__aeabi_fmul>
 8004342:	4603      	mov	r3, r0
 8004344:	4618      	mov	r0, r3
 8004346:	f7fc ff1f 	bl	8001188 <__aeabi_f2iz>
 800434a:	4603      	mov	r3, r0
 800434c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (current * u_work - power_int >= 0.5) power_int++; // Правильное округление
 800434e:	4b42      	ldr	r3, [pc, #264]	@ (8004458 <OLED_DrawABPage+0x324>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc fd3b 	bl	8000dd0 <__aeabi_fmul>
 800435a:	4603      	mov	r3, r0
 800435c:	461c      	mov	r4, r3
 800435e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8004360:	f7fc fce2 	bl	8000d28 <__aeabi_i2f>
 8004364:	4603      	mov	r3, r0
 8004366:	4619      	mov	r1, r3
 8004368:	4620      	mov	r0, r4
 800436a:	f7fc fc27 	bl	8000bbc <__aeabi_fsub>
 800436e:	4603      	mov	r3, r0
 8004370:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc fedd 	bl	8001134 <__aeabi_fcmpge>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <OLED_DrawABPage+0x252>
 8004380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004382:	3301      	adds	r3, #1
 8004384:	67bb      	str	r3, [r7, #120]	@ 0x78

    char buf[32];
    int text_x = box_x + 4;
 8004386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004388:	3304      	adds	r3, #4
 800438a:	633b      	str	r3, [r7, #48]	@ 0x30
    int y = box_y + vpad;
 800438c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800438e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004390:	4413      	add	r3, r2
 8004392:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // ИЗМЕНИЛ ФОРМАТ ДЛЯ ТЕСТА - БОЛЬШИЕ БУКВЫ
    snprintf(buf, sizeof(buf), "U=%.1fV", u_work);
 8004394:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004396:	f7fc f88d 	bl	80004b4 <__aeabi_f2d>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4638      	mov	r0, r7
 80043a0:	e9cd 2300 	strd	r2, r3, [sp]
 80043a4:	4a2d      	ldr	r2, [pc, #180]	@ (800445c <OLED_DrawABPage+0x328>)
 80043a6:	2120      	movs	r1, #32
 80043a8:	f01d fa2c 	bl	8021804 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 fc4a 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 80043bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043be:	4638      	mov	r0, r7
 80043c0:	2201      	movs	r2, #1
 80043c2:	9200      	str	r2, [sp, #0]
 80043c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c6:	f001 fc1d 	bl	8005c04 <ssd1306_WriteString>

    y += fh + vpad;
 80043ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ce:	4413      	add	r3, r2
 80043d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043d2:	4413      	add	r3, r2
 80043d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(buf, sizeof(buf), "I=%.1f A", current);
 80043d6:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <OLED_DrawABPage+0x324>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f86a 	bl	80004b4 <__aeabi_f2d>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4638      	mov	r0, r7
 80043e6:	e9cd 2300 	strd	r2, r3, [sp]
 80043ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004460 <OLED_DrawABPage+0x32c>)
 80043ec:	2120      	movs	r1, #32
 80043ee:	f01d fa09 	bl	8021804 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80043f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 fc27 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 8004402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004404:	4638      	mov	r0, r7
 8004406:	2201      	movs	r2, #1
 8004408:	9200      	str	r2, [sp, #0]
 800440a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800440c:	f001 fbfa 	bl	8005c04 <ssd1306_WriteString>

    y += fh + vpad;
 8004410:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004414:	4413      	add	r3, r2
 8004416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004418:	4413      	add	r3, r2
 800441a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // ЯВНОЕ ИЗМЕНЕНИЕ - ЦЕЛОЕ ЧИСЛО БЕЗ ТОЧКИ
    snprintf(buf, sizeof(buf), "P=%d W", power_int);
 800441c:	4638      	mov	r0, r7
 800441e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004420:	4a10      	ldr	r2, [pc, #64]	@ (8004464 <OLED_DrawABPage+0x330>)
 8004422:	2120      	movs	r1, #32
 8004424:	f01d f9ee 	bl	8021804 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	b2db      	uxtb	r3, r3
 800442c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f001 fc0c 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 8004438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800443a:	4638      	mov	r0, r7
 800443c:	2201      	movs	r2, #1
 800443e:	9200      	str	r2, [sp, #0]
 8004440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004442:	f001 fbdf 	bl	8005c04 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8004446:	f001 fad3 	bl	80059f0 <ssd1306_UpdateScreen>
}
 800444a:	bf00      	nop
 800444c:	378c      	adds	r7, #140	@ 0x8c
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}
 8004452:	bf00      	nop
 8004454:	20004b64 	.word	0x20004b64
 8004458:	20004b68 	.word	0x20004b68
 800445c:	08024608 	.word	0x08024608
 8004460:	08024610 	.word	0x08024610
 8004464:	0802461c 	.word	0x0802461c

08004468 <OLED_DrawIP_Split>:
 *
 * @param x   позиция курсора X
 * @param y   позиция курсора Y
 * @param addr указатель на ip4_addr_t
 */
void OLED_DrawIP_Split(uint8_t x, uint8_t y, const ip4_addr_t *addr) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af02      	add	r7, sp, #8
 800446e:	4603      	mov	r3, r0
 8004470:	603a      	str	r2, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]
 8004474:	460b      	mov	r3, r1
 8004476:	71bb      	strb	r3, [r7, #6]
    char line[20];

    if (!addr) return;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d045      	beq.n	800450a <OLED_DrawIP_Split+0xa2>

    uint8_t o1 = ip4_addr1_16(addr);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	77fb      	strb	r3, [r7, #31]
    uint8_t o2 = ip4_addr2_16(addr);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	77bb      	strb	r3, [r7, #30]
    uint8_t o3 = ip4_addr3_16(addr);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	3302      	adds	r3, #2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	777b      	strb	r3, [r7, #29]
    uint8_t o4 = ip4_addr4_16(addr);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	3303      	adds	r3, #3
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	773b      	strb	r3, [r7, #28]

    // Вторая строка: первые два октета
    snprintf(line, sizeof(line), "%u.%u.", o1, o2);
 800449c:	7ffa      	ldrb	r2, [r7, #31]
 800449e:	7fbb      	ldrb	r3, [r7, #30]
 80044a0:	f107 0008 	add.w	r0, r7, #8
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004514 <OLED_DrawIP_Split+0xac>)
 80044aa:	2114      	movs	r1, #20
 80044ac:	f01d f9aa 	bl	8021804 <sniprintf>
    ssd1306_SetCursor(x, y);
 80044b0:	79ba      	ldrb	r2, [r7, #6]
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fbca 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 80044bc:	4b16      	ldr	r3, [pc, #88]	@ (8004518 <OLED_DrawIP_Split+0xb0>)
 80044be:	f107 0008 	add.w	r0, r7, #8
 80044c2:	2201      	movs	r2, #1
 80044c4:	9200      	str	r2, [sp, #0]
 80044c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c8:	f001 fb9c 	bl	8005c04 <ssd1306_WriteString>

    // Третья строка: последние два октета
    snprintf(line, sizeof(line), "%u.%u", o3, o4);
 80044cc:	7f7a      	ldrb	r2, [r7, #29]
 80044ce:	7f3b      	ldrb	r3, [r7, #28]
 80044d0:	f107 0008 	add.w	r0, r7, #8
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	4613      	mov	r3, r2
 80044d8:	4a10      	ldr	r2, [pc, #64]	@ (800451c <OLED_DrawIP_Split+0xb4>)
 80044da:	2114      	movs	r1, #20
 80044dc:	f01d f992 	bl	8021804 <sniprintf>
    ssd1306_SetCursor(x, y + Font_7x10.height + 2);
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <OLED_DrawIP_Split+0xb0>)
 80044e2:	785a      	ldrb	r2, [r3, #1]
 80044e4:	79bb      	ldrb	r3, [r7, #6]
 80044e6:	4413      	add	r3, r2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	3302      	adds	r3, #2
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fbac 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 80044f8:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <OLED_DrawIP_Split+0xb0>)
 80044fa:	f107 0008 	add.w	r0, r7, #8
 80044fe:	2201      	movs	r2, #1
 8004500:	9200      	str	r2, [sp, #0]
 8004502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004504:	f001 fb7e 	bl	8005c04 <ssd1306_WriteString>
 8004508:	e000      	b.n	800450c <OLED_DrawIP_Split+0xa4>
    if (!addr) return;
 800450a:	bf00      	nop
}
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	08024630 	.word	0x08024630
 8004518:	08028934 	.word	0x08028934
 800451c:	08024638 	.word	0x08024638

08004520 <OLED_DrawNetInfo>:
 *
 * @param netif  структура сетевого интерфейса LwIP
 * @param startX начальная позиция X
 * @param startY начальная позиция Y
 */
void OLED_DrawNetInfo(struct netif *netif, uint8_t startX, uint8_t startY) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b096      	sub	sp, #88	@ 0x58
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
 800452c:	4613      	mov	r3, r2
 800452e:	70bb      	strb	r3, [r7, #2]
	char buffer[64];
	uint8_t lineY = startY;
 8004530:	78bb      	ldrb	r3, [r7, #2]
 8004532:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    ssd1306_Fill(Black);
 8004536:	2000      	movs	r0, #0
 8004538:	f001 fa42 	bl	80059c0 <ssd1306_Fill>

    ssd1306_SetCursor(startX, startY);
 800453c:	78ba      	ldrb	r2, [r7, #2]
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f001 fb84 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("NETINF", Font_7x10, White);
 8004548:	4b5b      	ldr	r3, [pc, #364]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 800454a:	2201      	movs	r2, #1
 800454c:	9200      	str	r2, [sp, #0]
 800454e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004550:	485a      	ldr	r0, [pc, #360]	@ (80046bc <OLED_DrawNetInfo+0x19c>)
 8004552:	f001 fb57 	bl	8005c04 <ssd1306_WriteString>

    // Полоса под заголовком
    ssd1306_DrawRectangle(0, startY + Font_7x10.height + 1, SSD1306_ROTATED_WIDTH-1, startY + Font_7x10.height + 2, White);
 8004556:	4b58      	ldr	r3, [pc, #352]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 8004558:	785a      	ldrb	r2, [r3, #1]
 800455a:	78bb      	ldrb	r3, [r7, #2]
 800455c:	4413      	add	r3, r2
 800455e:	b2db      	uxtb	r3, r3
 8004560:	3301      	adds	r3, #1
 8004562:	b2d9      	uxtb	r1, r3
 8004564:	4b54      	ldr	r3, [pc, #336]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 8004566:	785a      	ldrb	r2, [r3, #1]
 8004568:	78bb      	ldrb	r3, [r7, #2]
 800456a:	4413      	add	r3, r2
 800456c:	b2db      	uxtb	r3, r3
 800456e:	3302      	adds	r3, #2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2201      	movs	r2, #1
 8004574:	9200      	str	r2, [sp, #0]
 8004576:	223f      	movs	r2, #63	@ 0x3f
 8004578:	2000      	movs	r0, #0
 800457a:	f001 fc74 	bl	8005e66 <ssd1306_DrawRectangle>

    // IP
    lineY = startY + Font_7x10.height + 6;
 800457e:	4b4e      	ldr	r3, [pc, #312]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 8004580:	785a      	ldrb	r2, [r3, #1]
 8004582:	78bb      	ldrb	r3, [r7, #2]
 8004584:	4413      	add	r3, r2
 8004586:	b2db      	uxtb	r3, r3
 8004588:	3306      	adds	r3, #6
 800458a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 800458e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f001 fb5a 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", Font_7x10, White);
 800459c:	4b46      	ldr	r3, [pc, #280]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 800459e:	2201      	movs	r2, #1
 80045a0:	9200      	str	r2, [sp, #0]
 80045a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045a4:	4846      	ldr	r0, [pc, #280]	@ (80046c0 <OLED_DrawNetInfo+0x1a0>)
 80045a6:	f001 fb2d 	bl	8005c04 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX , lineY + Font_7x10.height + 2, netif_ip4_addr(netif));
 80045aa:	4b43      	ldr	r3, [pc, #268]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 80045ac:	785a      	ldrb	r2, [r3, #1]
 80045ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80045b2:	4413      	add	r3, r2
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	3302      	adds	r3, #2
 80045b8:	b2d9      	uxtb	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1d1a      	adds	r2, r3, #4
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff51 	bl	8004468 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 80045c6:	4b3c      	ldr	r3, [pc, #240]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	3301      	adds	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	0052      	lsls	r2, r2, #1
 80045d2:	4413      	add	r3, r2
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80045da:	4413      	add	r3, r2
 80045dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 80045e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80045e4:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 80045e8:	2201      	movs	r2, #1
 80045ea:	9200      	str	r2, [sp, #0]
 80045ec:	223f      	movs	r2, #63	@ 0x3f
 80045ee:	2000      	movs	r0, #0
 80045f0:	f001 fc39 	bl	8005e66 <ssd1306_DrawRectangle>

    // MASK
    lineY += 4;
 80045f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80045f8:	3304      	adds	r3, #4
 80045fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 80045fe:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	4611      	mov	r1, r2
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fb22 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("MASK:", Font_7x10, White);
 800460c:	4b2a      	ldr	r3, [pc, #168]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 800460e:	2201      	movs	r2, #1
 8004610:	9200      	str	r2, [sp, #0]
 8004612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004614:	482b      	ldr	r0, [pc, #172]	@ (80046c4 <OLED_DrawNetInfo+0x1a4>)
 8004616:	f001 faf5 	bl	8005c04 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_netmask(netif));
 800461a:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 800461c:	785a      	ldrb	r2, [r3, #1]
 800461e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004622:	4413      	add	r3, r2
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3302      	adds	r3, #2
 8004628:	b2d9      	uxtb	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f103 0208 	add.w	r2, r3, #8
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff ff18 	bl	8004468 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 8004638:	4b1f      	ldr	r3, [pc, #124]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	3301      	adds	r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	0052      	lsls	r2, r2, #1
 8004644:	4413      	add	r3, r2
 8004646:	b2da      	uxtb	r2, r3
 8004648:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800464c:	4413      	add	r3, r2
 800464e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 8004652:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004656:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 800465a:	2201      	movs	r2, #1
 800465c:	9200      	str	r2, [sp, #0]
 800465e:	223f      	movs	r2, #63	@ 0x3f
 8004660:	2000      	movs	r0, #0
 8004662:	f001 fc00 	bl	8005e66 <ssd1306_DrawRectangle>

    // GW
    lineY += 4;
 8004666:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800466a:	3304      	adds	r3, #4
 800466c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8004670:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f001 fae9 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("GW:", Font_7x10, White);
 800467e:	4b0e      	ldr	r3, [pc, #56]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 8004680:	2201      	movs	r2, #1
 8004682:	9200      	str	r2, [sp, #0]
 8004684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004686:	4810      	ldr	r0, [pc, #64]	@ (80046c8 <OLED_DrawNetInfo+0x1a8>)
 8004688:	f001 fabc 	bl	8005c04 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_gw(netif));
 800468c:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <OLED_DrawNetInfo+0x198>)
 800468e:	785a      	ldrb	r2, [r3, #1]
 8004690:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004694:	4413      	add	r3, r2
 8004696:	b2db      	uxtb	r3, r3
 8004698:	3302      	adds	r3, #2
 800469a:	b2d9      	uxtb	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f103 020c 	add.w	r2, r3, #12
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fedf 	bl	8004468 <OLED_DrawIP_Split>
    // отправить буфер на дисплей
    ssd1306_UpdateScreen();
 80046aa:	f001 f9a1 	bl	80059f0 <ssd1306_UpdateScreen>
}
 80046ae:	bf00      	nop
 80046b0:	3750      	adds	r7, #80	@ 0x50
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	08028934 	.word	0x08028934
 80046bc:	08024640 	.word	0x08024640
 80046c0:	08024648 	.word	0x08024648
 80046c4:	0802464c 	.word	0x0802464c
 80046c8:	08024654 	.word	0x08024654

080046cc <__NVIC_SystemReset>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80046d0:	f3bf 8f4f 	dsb	sy
}
 80046d4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <__NVIC_SystemReset+0x24>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80046de:	4904      	ldr	r1, [pc, #16]	@ (80046f0 <__NVIC_SystemReset+0x24>)
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <__NVIC_SystemReset+0x28>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80046e6:	f3bf 8f4f 	dsb	sy
}
 80046ea:	bf00      	nop
    __NOP();
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <__NVIC_SystemReset+0x20>
 80046f0:	e000ed00 	.word	0xe000ed00
 80046f4:	05fa0004 	.word	0x05fa0004

080046f8 <OLED_Settings_Init>:
static void DHCP_Apply(void);
static bool OLED_Confirm(const char *msg);

// Инициализация меню
void OLED_Settings_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
    selected_index = 0;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <OLED_Settings_Init+0x30>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
    editing_active = false;
 8004702:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <OLED_Settings_Init+0x34>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <OLED_Settings_Init+0x38>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
    settings_active = true;
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <OLED_Settings_Init+0x3c>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
    last_activity_time = HAL_GetTick();
 8004714:	f001 fcd2 	bl	80060bc <HAL_GetTick>
 8004718:	4603      	mov	r3, r0
 800471a:	4a07      	ldr	r2, [pc, #28]	@ (8004738 <OLED_Settings_Init+0x40>)
 800471c:	6013      	str	r3, [r2, #0]
    OLED_Settings_Draw();
 800471e:	f000 fc75 	bl	800500c <OLED_Settings_Draw>
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20004b74 	.word	0x20004b74
 800472c:	20004b7c 	.word	0x20004b7c
 8004730:	20004b85 	.word	0x20004b85
 8004734:	20000340 	.word	0x20000340
 8004738:	20004b80 	.word	0x20004b80

0800473c <OLED_Draw_Confirm>:

// --- Отображение меню подтверждения ---
static void OLED_Draw_Confirm(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08c      	sub	sp, #48	@ 0x30
 8004740:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8004742:	2000      	movs	r0, #0
 8004744:	f001 f93c 	bl	80059c0 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8004748:	2340      	movs	r3, #64	@ 0x40
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Заголовок
    ssd1306_SetCursor(0, 2);
 800474c:	2102      	movs	r1, #2
 800474e:	2000      	movs	r0, #0
 8004750:	f001 fa7e 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("Confirm", *menu_font, White);
 8004754:	4b52      	ldr	r3, [pc, #328]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	9200      	str	r2, [sp, #0]
 800475c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475e:	4851      	ldr	r0, [pc, #324]	@ (80048a4 <OLED_Draw_Confirm+0x168>)
 8004760:	f001 fa50 	bl	8005c04 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 12);
 8004764:	210c      	movs	r1, #12
 8004766:	2000      	movs	r0, #0
 8004768:	f001 fa72 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("settings", *menu_font, White);
 800476c:	4b4c      	ldr	r3, [pc, #304]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	9200      	str	r2, [sp, #0]
 8004774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004776:	484c      	ldr	r0, [pc, #304]	@ (80048a8 <OLED_Draw_Confirm+0x16c>)
 8004778:	f001 fa44 	bl	8005c04 <ssd1306_WriteString>

    // IP адрес в две строки
    ssd1306_SetCursor(0, 22);
 800477c:	2116      	movs	r1, #22
 800477e:	2000      	movs	r0, #0
 8004780:	f001 fa66 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", *menu_font, White);
 8004784:	4b46      	ldr	r3, [pc, #280]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2201      	movs	r2, #1
 800478a:	9200      	str	r2, [sp, #0]
 800478c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800478e:	4847      	ldr	r0, [pc, #284]	@ (80048ac <OLED_Draw_Confirm+0x170>)
 8004790:	f001 fa38 	bl	8005c04 <ssd1306_WriteString>

    // Первая строка IP: 192.168.
    char ip_str1[16];
    snprintf(ip_str1, sizeof(ip_str1), "%d.%d.", last_ip[0], last_ip[1]);
 8004794:	4b46      	ldr	r3, [pc, #280]	@ (80048b0 <OLED_Draw_Confirm+0x174>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	4b45      	ldr	r3, [pc, #276]	@ (80048b0 <OLED_Draw_Confirm+0x174>)
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	f107 0014 	add.w	r0, r7, #20
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	4a43      	ldr	r2, [pc, #268]	@ (80048b4 <OLED_Draw_Confirm+0x178>)
 80047a8:	2110      	movs	r1, #16
 80047aa:	f01d f82b 	bl	8021804 <sniprintf>
    ssd1306_SetCursor(10, 32);
 80047ae:	2120      	movs	r1, #32
 80047b0:	200a      	movs	r0, #10
 80047b2:	f001 fa4d 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(ip_str1, *menu_font, White);
 80047b6:	4b3a      	ldr	r3, [pc, #232]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f107 0014 	add.w	r0, r7, #20
 80047be:	2201      	movs	r2, #1
 80047c0:	9200      	str	r2, [sp, #0]
 80047c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047c4:	f001 fa1e 	bl	8005c04 <ssd1306_WriteString>

    // Вторая строка: 1.178
    char ip_str2[16];
    snprintf(ip_str2, sizeof(ip_str2), "%d.%d", last_ip[2], last_ip[3]);
 80047c8:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <OLED_Draw_Confirm+0x174>)
 80047ca:	789b      	ldrb	r3, [r3, #2]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b38      	ldr	r3, [pc, #224]	@ (80048b0 <OLED_Draw_Confirm+0x174>)
 80047d0:	78db      	ldrb	r3, [r3, #3]
 80047d2:	1d38      	adds	r0, r7, #4
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	4a37      	ldr	r2, [pc, #220]	@ (80048b8 <OLED_Draw_Confirm+0x17c>)
 80047da:	2110      	movs	r1, #16
 80047dc:	f01d f812 	bl	8021804 <sniprintf>
    ssd1306_SetCursor(10, 42);
 80047e0:	212a      	movs	r1, #42	@ 0x2a
 80047e2:	200a      	movs	r0, #10
 80047e4:	f001 fa34 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(ip_str2, *menu_font, White);
 80047e8:	4b2d      	ldr	r3, [pc, #180]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1d38      	adds	r0, r7, #4
 80047ee:	2201      	movs	r2, #1
 80047f0:	9200      	str	r2, [sp, #0]
 80047f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047f4:	f001 fa06 	bl	8005c04 <ssd1306_WriteString>

    // Опции Yes/No
    if(confirm_selection == 0) {
 80047f8:	4b30      	ldr	r3, [pc, #192]	@ (80048bc <OLED_Draw_Confirm+0x180>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d124      	bne.n	800484a <OLED_Draw_Confirm+0x10e>
        // Yes выделено (слева)
        ssd1306_FillRect(0, 55, 25, menu_font->height + 2, White);
 8004800:	4b27      	ldr	r3, [pc, #156]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	3302      	adds	r3, #2
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2201      	movs	r2, #1
 800480c:	9200      	str	r2, [sp, #0]
 800480e:	2219      	movs	r2, #25
 8004810:	2137      	movs	r1, #55	@ 0x37
 8004812:	2000      	movs	r0, #0
 8004814:	f001 fb90 	bl	8005f38 <ssd1306_FillRect>
        ssd1306_SetCursor(2, 57);
 8004818:	2139      	movs	r1, #57	@ 0x39
 800481a:	2002      	movs	r0, #2
 800481c:	f001 fa18 	bl	8005c50 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, Black);
 8004820:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2200      	movs	r2, #0
 8004826:	9200      	str	r2, [sp, #0]
 8004828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800482a:	4825      	ldr	r0, [pc, #148]	@ (80048c0 <OLED_Draw_Confirm+0x184>)
 800482c:	f001 f9ea 	bl	8005c04 <ssd1306_WriteString>

        ssd1306_SetCursor(30, 57);
 8004830:	2139      	movs	r1, #57	@ 0x39
 8004832:	201e      	movs	r0, #30
 8004834:	f001 fa0c 	bl	8005c50 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, White);
 8004838:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2201      	movs	r2, #1
 800483e:	9200      	str	r2, [sp, #0]
 8004840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004842:	4820      	ldr	r0, [pc, #128]	@ (80048c4 <OLED_Draw_Confirm+0x188>)
 8004844:	f001 f9de 	bl	8005c04 <ssd1306_WriteString>
 8004848:	e023      	b.n	8004892 <OLED_Draw_Confirm+0x156>
    } else {
        // No выделено (справа)
        ssd1306_SetCursor(0, 57);
 800484a:	2139      	movs	r1, #57	@ 0x39
 800484c:	2000      	movs	r0, #0
 800484e:	f001 f9ff 	bl	8005c50 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, White);
 8004852:	4b13      	ldr	r3, [pc, #76]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	9200      	str	r2, [sp, #0]
 800485a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800485c:	4818      	ldr	r0, [pc, #96]	@ (80048c0 <OLED_Draw_Confirm+0x184>)
 800485e:	f001 f9d1 	bl	8005c04 <ssd1306_WriteString>

        ssd1306_FillRect(30, 55, 25, menu_font->height + 2, White);
 8004862:	4b0f      	ldr	r3, [pc, #60]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	3302      	adds	r3, #2
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2201      	movs	r2, #1
 800486e:	9200      	str	r2, [sp, #0]
 8004870:	2219      	movs	r2, #25
 8004872:	2137      	movs	r1, #55	@ 0x37
 8004874:	201e      	movs	r0, #30
 8004876:	f001 fb5f 	bl	8005f38 <ssd1306_FillRect>
        ssd1306_SetCursor(32, 57);
 800487a:	2139      	movs	r1, #57	@ 0x39
 800487c:	2020      	movs	r0, #32
 800487e:	f001 f9e7 	bl	8005c50 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, Black);
 8004882:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <OLED_Draw_Confirm+0x164>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	9200      	str	r2, [sp, #0]
 800488a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800488c:	480d      	ldr	r0, [pc, #52]	@ (80048c4 <OLED_Draw_Confirm+0x188>)
 800488e:	f001 f9b9 	bl	8005c04 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8004892:	f001 f8ad 	bl	80059f0 <ssd1306_UpdateScreen>
}
 8004896:	bf00      	nop
 8004898:	3728      	adds	r7, #40	@ 0x28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	2000009c 	.word	0x2000009c
 80048a4:	08024690 	.word	0x08024690
 80048a8:	08024698 	.word	0x08024698
 80048ac:	080246a4 	.word	0x080246a4
 80048b0:	20000074 	.word	0x20000074
 80048b4:	080246a8 	.word	0x080246a8
 80048b8:	080246b0 	.word	0x080246b0
 80048bc:	20004b88 	.word	0x20004b88
 80048c0:	080246b8 	.word	0x080246b8
 80048c4:	080246bc 	.word	0x080246bc

080048c8 <Apply_Network_Settings>:

// --- Применение сетевых настроек в LwIP ---
void Apply_Network_Settings(void)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b089      	sub	sp, #36	@ 0x24
 80048cc:	af04      	add	r7, sp, #16
    ip_addr_t ip_addr, netmask, gw;

    IP4_ADDR(&ip_addr, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 80048ce:	4baa      	ldr	r3, [pc, #680]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	061a      	lsls	r2, r3, #24
 80048d4:	4ba8      	ldr	r3, [pc, #672]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	431a      	orrs	r2, r3
 80048dc:	4ba6      	ldr	r3, [pc, #664]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 80048de:	789b      	ldrb	r3, [r3, #2]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	4313      	orrs	r3, r2
 80048e4:	4aa4      	ldr	r2, [pc, #656]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 80048e6:	78d2      	ldrb	r2, [r2, #3]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	061a      	lsls	r2, r3, #24
 80048ec:	4ba2      	ldr	r3, [pc, #648]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	0619      	lsls	r1, r3, #24
 80048f2:	4ba1      	ldr	r3, [pc, #644]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	4319      	orrs	r1, r3
 80048fa:	4b9f      	ldr	r3, [pc, #636]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 80048fc:	789b      	ldrb	r3, [r3, #2]
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	430b      	orrs	r3, r1
 8004902:	499d      	ldr	r1, [pc, #628]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004904:	78c9      	ldrb	r1, [r1, #3]
 8004906:	430b      	orrs	r3, r1
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800490e:	431a      	orrs	r2, r3
 8004910:	4b99      	ldr	r3, [pc, #612]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	0619      	lsls	r1, r3, #24
 8004916:	4b98      	ldr	r3, [pc, #608]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004918:	785b      	ldrb	r3, [r3, #1]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	4319      	orrs	r1, r3
 800491e:	4b96      	ldr	r3, [pc, #600]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004920:	789b      	ldrb	r3, [r3, #2]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	430b      	orrs	r3, r1
 8004926:	4994      	ldr	r1, [pc, #592]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004928:	78c9      	ldrb	r1, [r1, #3]
 800492a:	430b      	orrs	r3, r1
 800492c:	0a1b      	lsrs	r3, r3, #8
 800492e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004932:	431a      	orrs	r2, r3
 8004934:	4b90      	ldr	r3, [pc, #576]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	0619      	lsls	r1, r3, #24
 800493a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	4319      	orrs	r1, r3
 8004942:	4b8d      	ldr	r3, [pc, #564]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004944:	789b      	ldrb	r3, [r3, #2]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	430b      	orrs	r3, r1
 800494a:	498b      	ldr	r1, [pc, #556]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 800494c:	78c9      	ldrb	r1, [r1, #3]
 800494e:	430b      	orrs	r3, r1
 8004950:	0e1b      	lsrs	r3, r3, #24
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8004956:	4b89      	ldr	r3, [pc, #548]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	061a      	lsls	r2, r3, #24
 800495c:	4b87      	ldr	r3, [pc, #540]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	431a      	orrs	r2, r3
 8004964:	4b85      	ldr	r3, [pc, #532]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004966:	789b      	ldrb	r3, [r3, #2]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	4313      	orrs	r3, r2
 800496c:	4a83      	ldr	r2, [pc, #524]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 800496e:	78d2      	ldrb	r2, [r2, #3]
 8004970:	4313      	orrs	r3, r2
 8004972:	061a      	lsls	r2, r3, #24
 8004974:	4b81      	ldr	r3, [pc, #516]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	0619      	lsls	r1, r3, #24
 800497a:	4b80      	ldr	r3, [pc, #512]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 800497c:	785b      	ldrb	r3, [r3, #1]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	4319      	orrs	r1, r3
 8004982:	4b7e      	ldr	r3, [pc, #504]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004984:	789b      	ldrb	r3, [r3, #2]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	430b      	orrs	r3, r1
 800498a:	497c      	ldr	r1, [pc, #496]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 800498c:	78c9      	ldrb	r1, [r1, #3]
 800498e:	430b      	orrs	r3, r1
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004996:	431a      	orrs	r2, r3
 8004998:	4b78      	ldr	r3, [pc, #480]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	0619      	lsls	r1, r3, #24
 800499e:	4b77      	ldr	r3, [pc, #476]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	4319      	orrs	r1, r3
 80049a6:	4b75      	ldr	r3, [pc, #468]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 80049a8:	789b      	ldrb	r3, [r3, #2]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	430b      	orrs	r3, r1
 80049ae:	4973      	ldr	r1, [pc, #460]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 80049b0:	78c9      	ldrb	r1, [r1, #3]
 80049b2:	430b      	orrs	r3, r1
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80049ba:	431a      	orrs	r2, r3
 80049bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	0619      	lsls	r1, r3, #24
 80049c2:	4b6e      	ldr	r3, [pc, #440]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	4319      	orrs	r1, r3
 80049ca:	4b6c      	ldr	r3, [pc, #432]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	430b      	orrs	r3, r1
 80049d2:	496a      	ldr	r1, [pc, #424]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 80049d4:	78c9      	ldrb	r1, [r1, #3]
 80049d6:	430b      	orrs	r3, r1
 80049d8:	0e1b      	lsrs	r3, r3, #24
 80049da:	4313      	orrs	r3, r2
 80049dc:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 80049de:	4b68      	ldr	r3, [pc, #416]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	061a      	lsls	r2, r3, #24
 80049e4:	4b66      	ldr	r3, [pc, #408]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	431a      	orrs	r2, r3
 80049ec:	4b64      	ldr	r3, [pc, #400]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 80049ee:	789b      	ldrb	r3, [r3, #2]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	4313      	orrs	r3, r2
 80049f4:	4a62      	ldr	r2, [pc, #392]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 80049f6:	78d2      	ldrb	r2, [r2, #3]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	061a      	lsls	r2, r3, #24
 80049fc:	4b60      	ldr	r3, [pc, #384]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	0619      	lsls	r1, r3, #24
 8004a02:	4b5f      	ldr	r3, [pc, #380]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	4319      	orrs	r1, r3
 8004a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a0c:	789b      	ldrb	r3, [r3, #2]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	430b      	orrs	r3, r1
 8004a12:	495b      	ldr	r1, [pc, #364]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a14:	78c9      	ldrb	r1, [r1, #3]
 8004a16:	430b      	orrs	r3, r1
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	4b57      	ldr	r3, [pc, #348]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	0619      	lsls	r1, r3, #24
 8004a26:	4b56      	ldr	r3, [pc, #344]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	4319      	orrs	r1, r3
 8004a2e:	4b54      	ldr	r3, [pc, #336]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a30:	789b      	ldrb	r3, [r3, #2]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	430b      	orrs	r3, r1
 8004a36:	4952      	ldr	r1, [pc, #328]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a38:	78c9      	ldrb	r1, [r1, #3]
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004a42:	431a      	orrs	r2, r3
 8004a44:	4b4e      	ldr	r3, [pc, #312]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	0619      	lsls	r1, r3, #24
 8004a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	4319      	orrs	r1, r3
 8004a52:	4b4b      	ldr	r3, [pc, #300]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a54:	789b      	ldrb	r3, [r3, #2]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	4949      	ldr	r1, [pc, #292]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004a5c:	78c9      	ldrb	r1, [r1, #3]
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	0e1b      	lsrs	r3, r3, #24
 8004a62:	4313      	orrs	r3, r2
 8004a64:	607b      	str	r3, [r7, #4]

    netif_set_addr(&gnetif, &ip_addr, &netmask, &gw);
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	f107 0208 	add.w	r2, r7, #8
 8004a6c:	f107 010c 	add.w	r1, r7, #12
 8004a70:	4844      	ldr	r0, [pc, #272]	@ (8004b84 <Apply_Network_Settings+0x2bc>)
 8004a72:	f010 f999 	bl	8014da8 <netif_set_addr>

    printf("Network settings applied:\n");
 8004a76:	4844      	ldr	r0, [pc, #272]	@ (8004b88 <Apply_Network_Settings+0x2c0>)
 8004a78:	f01c febc 	bl	80217f4 <puts>
    printf("IP: %d.%d.%d.%d\n", last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8004a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	4b3d      	ldr	r3, [pc, #244]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b3b      	ldr	r3, [pc, #236]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004a8a:	789b      	ldrb	r3, [r3, #2]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004a90:	78db      	ldrb	r3, [r3, #3]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	483d      	ldr	r0, [pc, #244]	@ (8004b8c <Apply_Network_Settings+0x2c4>)
 8004a98:	f01c fe44 	bl	8021724 <iprintf>
    printf("Mask: %d.%d.%d.%d\n", last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8004a9c:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4b36      	ldr	r3, [pc, #216]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4b34      	ldr	r3, [pc, #208]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004aaa:	789b      	ldrb	r3, [r3, #2]
 8004aac:	4618      	mov	r0, r3
 8004aae:	4b33      	ldr	r3, [pc, #204]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004ab0:	78db      	ldrb	r3, [r3, #3]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4836      	ldr	r0, [pc, #216]	@ (8004b90 <Apply_Network_Settings+0x2c8>)
 8004ab8:	f01c fe34 	bl	8021724 <iprintf>
    printf("GW: %d.%d.%d.%d\n", last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8004abc:	4b30      	ldr	r3, [pc, #192]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004aca:	789b      	ldrb	r3, [r3, #2]
 8004acc:	4618      	mov	r0, r3
 8004ace:	4b2c      	ldr	r3, [pc, #176]	@ (8004b80 <Apply_Network_Settings+0x2b8>)
 8004ad0:	78db      	ldrb	r3, [r3, #3]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	482f      	ldr	r0, [pc, #188]	@ (8004b94 <Apply_Network_Settings+0x2cc>)
 8004ad8:	f01c fe24 	bl	8021724 <iprintf>

    /* --- сохраняем в backup-регистры --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8004adc:	4b26      	ldr	r3, [pc, #152]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	061a      	lsls	r2, r3, #24
 8004ae2:	4b25      	ldr	r3, [pc, #148]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	4b23      	ldr	r3, [pc, #140]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004aec:	789b      	ldrb	r3, [r3, #2]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	4313      	orrs	r3, r2
 8004af2:	4a21      	ldr	r2, [pc, #132]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004af4:	78d2      	ldrb	r2, [r2, #3]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	061a      	lsls	r2, r3, #24
 8004afa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	0619      	lsls	r1, r3, #24
 8004b00:	4b1d      	ldr	r3, [pc, #116]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	4319      	orrs	r1, r3
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b0a:	789b      	ldrb	r3, [r3, #2]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	4919      	ldr	r1, [pc, #100]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b12:	78c9      	ldrb	r1, [r1, #3]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	0619      	lsls	r1, r3, #24
 8004b24:	4b14      	ldr	r3, [pc, #80]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	4319      	orrs	r1, r3
 8004b2c:	4b12      	ldr	r3, [pc, #72]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b2e:	789b      	ldrb	r3, [r3, #2]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	430b      	orrs	r3, r1
 8004b34:	4910      	ldr	r1, [pc, #64]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b36:	78c9      	ldrb	r1, [r1, #3]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b40:	431a      	orrs	r2, r3
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	0619      	lsls	r1, r3, #24
 8004b48:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	4319      	orrs	r1, r3
 8004b50:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b52:	789b      	ldrb	r3, [r3, #2]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	430b      	orrs	r3, r1
 8004b58:	4907      	ldr	r1, [pc, #28]	@ (8004b78 <Apply_Network_Settings+0x2b0>)
 8004b5a:	78c9      	ldrb	r1, [r1, #3]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	0e1b      	lsrs	r3, r3, #24
 8004b60:	4313      	orrs	r3, r2
 8004b62:	4a0d      	ldr	r2, [pc, #52]	@ (8004b98 <Apply_Network_Settings+0x2d0>)
 8004b64:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	061a      	lsls	r2, r3, #24
 8004b6c:	4b03      	ldr	r3, [pc, #12]	@ (8004b7c <Apply_Network_Settings+0x2b4>)
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	e012      	b.n	8004b9c <Apply_Network_Settings+0x2d4>
 8004b76:	bf00      	nop
 8004b78:	20000074 	.word	0x20000074
 8004b7c:	20000078 	.word	0x20000078
 8004b80:	2000007c 	.word	0x2000007c
 8004b84:	20004fc0 	.word	0x20004fc0
 8004b88:	080246c0 	.word	0x080246c0
 8004b8c:	080246dc 	.word	0x080246dc
 8004b90:	080246f0 	.word	0x080246f0
 8004b94:	08024704 	.word	0x08024704
 8004b98:	20002a74 	.word	0x20002a74
 8004b9c:	4b51      	ldr	r3, [pc, #324]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004b9e:	789b      	ldrb	r3, [r3, #2]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004ba6:	78d2      	ldrb	r2, [r2, #3]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	061a      	lsls	r2, r3, #24
 8004bac:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	0619      	lsls	r1, r3, #24
 8004bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	4319      	orrs	r1, r3
 8004bba:	4b4a      	ldr	r3, [pc, #296]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bbc:	789b      	ldrb	r3, [r3, #2]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	4948      	ldr	r1, [pc, #288]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bc4:	78c9      	ldrb	r1, [r1, #3]
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	4b44      	ldr	r3, [pc, #272]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	0619      	lsls	r1, r3, #24
 8004bd6:	4b43      	ldr	r3, [pc, #268]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	4319      	orrs	r1, r3
 8004bde:	4b41      	ldr	r3, [pc, #260]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004be0:	789b      	ldrb	r3, [r3, #2]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	430b      	orrs	r3, r1
 8004be6:	493f      	ldr	r1, [pc, #252]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004be8:	78c9      	ldrb	r1, [r1, #3]
 8004bea:	430b      	orrs	r3, r1
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	0619      	lsls	r1, r3, #24
 8004bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	4319      	orrs	r1, r3
 8004c02:	4b38      	ldr	r3, [pc, #224]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004c04:	789b      	ldrb	r3, [r3, #2]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	4936      	ldr	r1, [pc, #216]	@ (8004ce4 <Apply_Network_Settings+0x41c>)
 8004c0c:	78c9      	ldrb	r1, [r1, #3]
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	4313      	orrs	r3, r2
 8004c14:	4a34      	ldr	r2, [pc, #208]	@ (8004ce8 <Apply_Network_Settings+0x420>)
 8004c16:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8004c18:	4b34      	ldr	r3, [pc, #208]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	061a      	lsls	r2, r3, #24
 8004c1e:	4b33      	ldr	r3, [pc, #204]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	431a      	orrs	r2, r3
 8004c26:	4b31      	ldr	r3, [pc, #196]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c28:	789b      	ldrb	r3, [r3, #2]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c30:	78d2      	ldrb	r2, [r2, #3]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	061a      	lsls	r2, r3, #24
 8004c36:	4b2d      	ldr	r3, [pc, #180]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	0619      	lsls	r1, r3, #24
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	041b      	lsls	r3, r3, #16
 8004c42:	4319      	orrs	r1, r3
 8004c44:	4b29      	ldr	r3, [pc, #164]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c46:	789b      	ldrb	r3, [r3, #2]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	4927      	ldr	r1, [pc, #156]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c4e:	78c9      	ldrb	r1, [r1, #3]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	4b24      	ldr	r3, [pc, #144]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	0619      	lsls	r1, r3, #24
 8004c60:	4b22      	ldr	r3, [pc, #136]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	4319      	orrs	r1, r3
 8004c68:	4b20      	ldr	r3, [pc, #128]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c6a:	789b      	ldrb	r3, [r3, #2]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	491e      	ldr	r1, [pc, #120]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c72:	78c9      	ldrb	r1, [r1, #3]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	0619      	lsls	r1, r3, #24
 8004c84:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c86:	785b      	ldrb	r3, [r3, #1]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	4319      	orrs	r1, r3
 8004c8c:	4b17      	ldr	r3, [pc, #92]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c8e:	789b      	ldrb	r3, [r3, #2]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	430b      	orrs	r3, r1
 8004c94:	4915      	ldr	r1, [pc, #84]	@ (8004cec <Apply_Network_Settings+0x424>)
 8004c96:	78c9      	ldrb	r1, [r1, #3]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	0e1b      	lsrs	r3, r3, #24
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	4a14      	ldr	r2, [pc, #80]	@ (8004cf0 <Apply_Network_Settings+0x428>)
 8004ca0:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 8004ca2:	4b14      	ldr	r3, [pc, #80]	@ (8004cf4 <Apply_Network_Settings+0x42c>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <Apply_Network_Settings+0x430>)
 8004cb4:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;  // чтобы main тоже увидел изменение
 8004cb6:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <Apply_Network_Settings+0x434>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	701a      	strb	r2, [r3, #0]

    /* Сохраняем в backup (используем текущие SNMP community из main) */
    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <Apply_Network_Settings+0x430>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf0 <Apply_Network_Settings+0x428>)
 8004cc2:	4909      	ldr	r1, [pc, #36]	@ (8004ce8 <Apply_Network_Settings+0x420>)
 8004cc4:	480e      	ldr	r0, [pc, #56]	@ (8004d00 <Apply_Network_Settings+0x438>)
 8004cc6:	4c0f      	ldr	r4, [pc, #60]	@ (8004d04 <Apply_Network_Settings+0x43c>)
 8004cc8:	9402      	str	r4, [sp, #8]
 8004cca:	4c0f      	ldr	r4, [pc, #60]	@ (8004d08 <Apply_Network_Settings+0x440>)
 8004ccc:	9401      	str	r4, [sp, #4]
 8004cce:	4c0f      	ldr	r4, [pc, #60]	@ (8004d0c <Apply_Network_Settings+0x444>)
 8004cd0:	9400      	str	r4, [sp, #0]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	6809      	ldr	r1, [r1, #0]
 8004cd6:	6800      	ldr	r0, [r0, #0]
 8004cd8:	f7fe fc76 	bl	80035c8 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd90      	pop	{r4, r7, pc}
 8004ce4:	20000078 	.word	0x20000078
 8004ce8:	20002a78 	.word	0x20002a78
 8004cec:	2000007c 	.word	0x2000007c
 8004cf0:	20002a7c 	.word	0x20002a7c
 8004cf4:	200000b8 	.word	0x200000b8
 8004cf8:	20002a80 	.word	0x20002a80
 8004cfc:	20002a81 	.word	0x20002a81
 8004d00:	20002a74 	.word	0x20002a74
 8004d04:	20000050 	.word	0x20000050
 8004d08:	20000030 	.word	0x20000030
 8004d0c:	20000010 	.word	0x20000010

08004d10 <DHCP_Apply>:


// --- Применение DHCP ---
static void DHCP_Apply()
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af04      	add	r7, sp, #16
    if (dhcp_on)
 8004d16:	4b81      	ldr	r3, [pc, #516]	@ (8004f1c <DHCP_Apply+0x20c>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <DHCP_Apply+0x1c>
    {
        dhcp_start(&gnetif);
 8004d1e:	4880      	ldr	r0, [pc, #512]	@ (8004f20 <DHCP_Apply+0x210>)
 8004d20:	f017 fc6e 	bl	801c600 <dhcp_start>
        printf("DHCP enabled\n");
 8004d24:	487f      	ldr	r0, [pc, #508]	@ (8004f24 <DHCP_Apply+0x214>)
 8004d26:	f01c fd65 	bl	80217f4 <puts>
 8004d2a:	e007      	b.n	8004d3c <DHCP_Apply+0x2c>
    }
    else
    {
        dhcp_stop(&gnetif);
 8004d2c:	487c      	ldr	r0, [pc, #496]	@ (8004f20 <DHCP_Apply+0x210>)
 8004d2e:	f018 f917 	bl	801cf60 <dhcp_stop>
        Apply_Network_Settings();
 8004d32:	f7ff fdc9 	bl	80048c8 <Apply_Network_Settings>
        printf("DHCP disabled, static IP applied\n");
 8004d36:	487c      	ldr	r0, [pc, #496]	@ (8004f28 <DHCP_Apply+0x218>)
 8004d38:	f01c fd5c 	bl	80217f4 <puts>
    }

    /* --- сохраняем флаг DHCP в backup --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8004d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	061a      	lsls	r2, r3, #24
 8004d42:	4b7a      	ldr	r3, [pc, #488]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	041b      	lsls	r3, r3, #16
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	4b78      	ldr	r3, [pc, #480]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d4c:	789b      	ldrb	r3, [r3, #2]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	4313      	orrs	r3, r2
 8004d52:	4a76      	ldr	r2, [pc, #472]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d54:	78d2      	ldrb	r2, [r2, #3]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	061a      	lsls	r2, r3, #24
 8004d5a:	4b74      	ldr	r3, [pc, #464]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	0619      	lsls	r1, r3, #24
 8004d60:	4b72      	ldr	r3, [pc, #456]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	4319      	orrs	r1, r3
 8004d68:	4b70      	ldr	r3, [pc, #448]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d6a:	789b      	ldrb	r3, [r3, #2]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	496e      	ldr	r1, [pc, #440]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d72:	78c9      	ldrb	r1, [r1, #3]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	4b6b      	ldr	r3, [pc, #428]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	0619      	lsls	r1, r3, #24
 8004d84:	4b69      	ldr	r3, [pc, #420]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	4319      	orrs	r1, r3
 8004d8c:	4b67      	ldr	r3, [pc, #412]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d8e:	789b      	ldrb	r3, [r3, #2]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	430b      	orrs	r3, r1
 8004d94:	4965      	ldr	r1, [pc, #404]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004d96:	78c9      	ldrb	r1, [r1, #3]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004da0:	431a      	orrs	r2, r3
 8004da2:	4b62      	ldr	r3, [pc, #392]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	0619      	lsls	r1, r3, #24
 8004da8:	4b60      	ldr	r3, [pc, #384]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	4319      	orrs	r1, r3
 8004db0:	4b5e      	ldr	r3, [pc, #376]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004db2:	789b      	ldrb	r3, [r3, #2]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	430b      	orrs	r3, r1
 8004db8:	495c      	ldr	r1, [pc, #368]	@ (8004f2c <DHCP_Apply+0x21c>)
 8004dba:	78c9      	ldrb	r1, [r1, #3]
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	0e1b      	lsrs	r3, r3, #24
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8004f30 <DHCP_Apply+0x220>)
 8004dc4:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8004dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f34 <DHCP_Apply+0x224>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	061a      	lsls	r2, r3, #24
 8004dcc:	4b59      	ldr	r3, [pc, #356]	@ (8004f34 <DHCP_Apply+0x224>)
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	4b57      	ldr	r3, [pc, #348]	@ (8004f34 <DHCP_Apply+0x224>)
 8004dd6:	789b      	ldrb	r3, [r3, #2]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	4a55      	ldr	r2, [pc, #340]	@ (8004f34 <DHCP_Apply+0x224>)
 8004dde:	78d2      	ldrb	r2, [r2, #3]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	061a      	lsls	r2, r3, #24
 8004de4:	4b53      	ldr	r3, [pc, #332]	@ (8004f34 <DHCP_Apply+0x224>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	0619      	lsls	r1, r3, #24
 8004dea:	4b52      	ldr	r3, [pc, #328]	@ (8004f34 <DHCP_Apply+0x224>)
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	4319      	orrs	r1, r3
 8004df2:	4b50      	ldr	r3, [pc, #320]	@ (8004f34 <DHCP_Apply+0x224>)
 8004df4:	789b      	ldrb	r3, [r3, #2]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	494e      	ldr	r1, [pc, #312]	@ (8004f34 <DHCP_Apply+0x224>)
 8004dfc:	78c9      	ldrb	r1, [r1, #3]
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e06:	431a      	orrs	r2, r3
 8004e08:	4b4a      	ldr	r3, [pc, #296]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	0619      	lsls	r1, r3, #24
 8004e0e:	4b49      	ldr	r3, [pc, #292]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	4319      	orrs	r1, r3
 8004e16:	4b47      	ldr	r3, [pc, #284]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e18:	789b      	ldrb	r3, [r3, #2]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	4945      	ldr	r1, [pc, #276]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e20:	78c9      	ldrb	r1, [r1, #3]
 8004e22:	430b      	orrs	r3, r1
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	4b41      	ldr	r3, [pc, #260]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	0619      	lsls	r1, r3, #24
 8004e32:	4b40      	ldr	r3, [pc, #256]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	4319      	orrs	r1, r3
 8004e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e3c:	789b      	ldrb	r3, [r3, #2]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	430b      	orrs	r3, r1
 8004e42:	493c      	ldr	r1, [pc, #240]	@ (8004f34 <DHCP_Apply+0x224>)
 8004e44:	78c9      	ldrb	r1, [r1, #3]
 8004e46:	430b      	orrs	r3, r1
 8004e48:	0e1b      	lsrs	r3, r3, #24
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f38 <DHCP_Apply+0x228>)
 8004e4e:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8004e50:	4b3a      	ldr	r3, [pc, #232]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	061a      	lsls	r2, r3, #24
 8004e56:	4b39      	ldr	r3, [pc, #228]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	4b37      	ldr	r3, [pc, #220]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e60:	789b      	ldrb	r3, [r3, #2]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	4313      	orrs	r3, r2
 8004e66:	4a35      	ldr	r2, [pc, #212]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e68:	78d2      	ldrb	r2, [r2, #3]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	061a      	lsls	r2, r3, #24
 8004e6e:	4b33      	ldr	r3, [pc, #204]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	0619      	lsls	r1, r3, #24
 8004e74:	4b31      	ldr	r3, [pc, #196]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	041b      	lsls	r3, r3, #16
 8004e7a:	4319      	orrs	r1, r3
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e7e:	789b      	ldrb	r3, [r3, #2]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	430b      	orrs	r3, r1
 8004e84:	492d      	ldr	r1, [pc, #180]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e86:	78c9      	ldrb	r1, [r1, #3]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e90:	431a      	orrs	r2, r3
 8004e92:	4b2a      	ldr	r3, [pc, #168]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	0619      	lsls	r1, r3, #24
 8004e98:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	4319      	orrs	r1, r3
 8004ea0:	4b26      	ldr	r3, [pc, #152]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004ea2:	789b      	ldrb	r3, [r3, #2]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	4924      	ldr	r1, [pc, #144]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004eaa:	78c9      	ldrb	r1, [r1, #3]
 8004eac:	430b      	orrs	r3, r1
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	4b21      	ldr	r3, [pc, #132]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	0619      	lsls	r1, r3, #24
 8004ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	4319      	orrs	r1, r3
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004ec6:	789b      	ldrb	r3, [r3, #2]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	491b      	ldr	r1, [pc, #108]	@ (8004f3c <DHCP_Apply+0x22c>)
 8004ece:	78c9      	ldrb	r1, [r1, #3]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	0e1b      	lsrs	r3, r3, #24
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f40 <DHCP_Apply+0x230>)
 8004ed8:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 8004eda:	4b10      	ldr	r3, [pc, #64]	@ (8004f1c <DHCP_Apply+0x20c>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bf14      	ite	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	2300      	moveq	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b16      	ldr	r3, [pc, #88]	@ (8004f44 <DHCP_Apply+0x234>)
 8004eec:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;
 8004eee:	4b16      	ldr	r3, [pc, #88]	@ (8004f48 <DHCP_Apply+0x238>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]

    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8004ef4:	4b13      	ldr	r3, [pc, #76]	@ (8004f44 <DHCP_Apply+0x234>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <DHCP_Apply+0x230>)
 8004efa:	490f      	ldr	r1, [pc, #60]	@ (8004f38 <DHCP_Apply+0x228>)
 8004efc:	480c      	ldr	r0, [pc, #48]	@ (8004f30 <DHCP_Apply+0x220>)
 8004efe:	4c13      	ldr	r4, [pc, #76]	@ (8004f4c <DHCP_Apply+0x23c>)
 8004f00:	9402      	str	r4, [sp, #8]
 8004f02:	4c13      	ldr	r4, [pc, #76]	@ (8004f50 <DHCP_Apply+0x240>)
 8004f04:	9401      	str	r4, [sp, #4]
 8004f06:	4c13      	ldr	r4, [pc, #76]	@ (8004f54 <DHCP_Apply+0x244>)
 8004f08:	9400      	str	r4, [sp, #0]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	6809      	ldr	r1, [r1, #0]
 8004f0e:	6800      	ldr	r0, [r0, #0]
 8004f10:	f7fe fb5a 	bl	80035c8 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 8004f14:	bf00      	nop
 8004f16:	3704      	adds	r7, #4
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd90      	pop	{r4, r7, pc}
 8004f1c:	200000b8 	.word	0x200000b8
 8004f20:	20004fc0 	.word	0x20004fc0
 8004f24:	08024718 	.word	0x08024718
 8004f28:	08024728 	.word	0x08024728
 8004f2c:	20000074 	.word	0x20000074
 8004f30:	20002a74 	.word	0x20002a74
 8004f34:	20000078 	.word	0x20000078
 8004f38:	20002a78 	.word	0x20002a78
 8004f3c:	2000007c 	.word	0x2000007c
 8004f40:	20002a7c 	.word	0x20002a7c
 8004f44:	20002a80 	.word	0x20002a80
 8004f48:	20002a81 	.word	0x20002a81
 8004f4c:	20000050 	.word	0x20000050
 8004f50:	20000030 	.word	0x20000030
 8004f54:	20000010 	.word	0x20000010

08004f58 <OLED_Confirm>:


// --- Подтверждение действий ---
static bool OLED_Confirm(const char *msg)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8004f60:	2000      	movs	r0, #0
 8004f62:	f000 fd2d 	bl	80059c0 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8004f66:	2100      	movs	r1, #0
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f000 fe71 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)msg, *menu_font, White);
 8004f6e:	4b23      	ldr	r3, [pc, #140]	@ (8004ffc <OLED_Confirm+0xa4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2201      	movs	r2, #1
 8004f74:	9200      	str	r2, [sp, #0]
 8004f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fe43 	bl	8005c04 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 16);
 8004f7e:	2110      	movs	r1, #16
 8004f80:	2000      	movs	r0, #0
 8004f82:	f000 fe65 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("Middle=OK", *menu_font, White);
 8004f86:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <OLED_Confirm+0xa4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	9200      	str	r2, [sp, #0]
 8004f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f90:	481b      	ldr	r0, [pc, #108]	@ (8005000 <OLED_Confirm+0xa8>)
 8004f92:	f000 fe37 	bl	8005c04 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 26);
 8004f96:	211a      	movs	r1, #26
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f000 fe59 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("Left/Right=Cancel", *menu_font, White);
 8004f9e:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <OLED_Confirm+0xa4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	9200      	str	r2, [sp, #0]
 8004fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa8:	4816      	ldr	r0, [pc, #88]	@ (8005004 <OLED_Confirm+0xac>)
 8004faa:	f000 fe2b 	bl	8005c04 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8004fae:	f000 fd1f 	bl	80059f0 <ssd1306_UpdateScreen>

    // Ждём нажатия
    while(1)
    {
        update_activity_time();
 8004fb2:	f000 f9a7 	bl	8005304 <update_activity_time>

        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)
 8004fb6:	2104      	movs	r1, #4
 8004fb8:	4813      	ldr	r0, [pc, #76]	@ (8005008 <OLED_Confirm+0xb0>)
 8004fba:	f003 fe73 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <OLED_Confirm+0x70>
            return true;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e015      	b.n	8004ff4 <OLED_Confirm+0x9c>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET)
 8004fc8:	2102      	movs	r1, #2
 8004fca:	480f      	ldr	r0, [pc, #60]	@ (8005008 <OLED_Confirm+0xb0>)
 8004fcc:	f003 fe6a 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <OLED_Confirm+0x82>
            return false;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e00c      	b.n	8004ff4 <OLED_Confirm+0x9c>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET)
 8004fda:	2108      	movs	r1, #8
 8004fdc:	480a      	ldr	r0, [pc, #40]	@ (8005008 <OLED_Confirm+0xb0>)
 8004fde:	f003 fe61 	bl	8008ca4 <HAL_GPIO_ReadPin>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <OLED_Confirm+0x94>
            return false;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e003      	b.n	8004ff4 <OLED_Confirm+0x9c>

        // Добавляем небольшую задержку для уменьшения нагрузки на CPU
        HAL_Delay(50);
 8004fec:	2032      	movs	r0, #50	@ 0x32
 8004fee:	f001 f86f 	bl	80060d0 <HAL_Delay>
        update_activity_time();
 8004ff2:	e7de      	b.n	8004fb2 <OLED_Confirm+0x5a>
    }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	2000009c 	.word	0x2000009c
 8005000:	0802474c 	.word	0x0802474c
 8005004:	08024758 	.word	0x08024758
 8005008:	40020c00 	.word	0x40020c00

0800500c <OLED_Settings_Draw>:

// Рисуем меню
void OLED_Settings_Draw(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	@ 0x28
 8005010:	af02      	add	r7, sp, #8
    if(confirm_active) {
 8005012:	4b40      	ldr	r3, [pc, #256]	@ (8005114 <OLED_Settings_Draw+0x108>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <OLED_Settings_Draw+0x14>
        OLED_Draw_Confirm();
 800501a:	f7ff fb8f 	bl	800473c <OLED_Draw_Confirm>
 800501e:	e075      	b.n	800510c <OLED_Settings_Draw+0x100>
        return;
    }

    ssd1306_Fill(Black);
 8005020:	2000      	movs	r0, #0
 8005022:	f000 fccd 	bl	80059c0 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8005026:	2340      	movs	r3, #64	@ 0x40
 8005028:	613b      	str	r3, [r7, #16]

    // Заголовок
    const char title[] = "Settings";
 800502a:	4a3b      	ldr	r2, [pc, #236]	@ (8005118 <OLED_Settings_Draw+0x10c>)
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005030:	c303      	stmia	r3!, {r0, r1}
 8005032:	701a      	strb	r2, [r3, #0]
    int title_x = (SW / 2) - ((int)strlen(title) * menu_font->width / 2);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	0fda      	lsrs	r2, r3, #31
 8005038:	4413      	add	r3, r2
 800503a:	105b      	asrs	r3, r3, #1
 800503c:	461a      	mov	r2, r3
 800503e:	4b37      	ldr	r3, [pc, #220]	@ (800511c <OLED_Settings_Draw+0x110>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	61fb      	str	r3, [r7, #28]
    if(title_x < 0) title_x = 0;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	da01      	bge.n	8005054 <OLED_Settings_Draw+0x48>
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
    ssd1306_SetCursor(title_x, 2);
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2102      	movs	r1, #2
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fdf8 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *menu_font, White);
 8005060:	4b2e      	ldr	r3, [pc, #184]	@ (800511c <OLED_Settings_Draw+0x110>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1d38      	adds	r0, r7, #4
 8005066:	2201      	movs	r2, #1
 8005068:	9200      	str	r2, [sp, #0]
 800506a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506c:	f000 fdca 	bl	8005c04 <ssd1306_WriteString>

    // Список пунктов
    int y = 16;
 8005070:	2310      	movs	r3, #16
 8005072:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e043      	b.n	8005102 <OLED_Settings_Draw+0xf6>
    {
        if(i == selected_index)
 800507a:	4b29      	ldr	r3, [pc, #164]	@ (8005120 <OLED_Settings_Draw+0x114>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	429a      	cmp	r2, r3
 8005082:	d121      	bne.n	80050c8 <OLED_Settings_Draw+0xbc>
        {
            ssd1306_FillRect(0, y - 1, SW, menu_font->height + 2, White);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b2d9      	uxtb	r1, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	4b22      	ldr	r3, [pc, #136]	@ (800511c <OLED_Settings_Draw+0x110>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	3302      	adds	r3, #2
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2001      	movs	r0, #1
 800509c:	9000      	str	r0, [sp, #0]
 800509e:	2000      	movs	r0, #0
 80050a0:	f000 ff4a 	bl	8005f38 <ssd1306_FillRect>
            ssd1306_SetCursor(2, y);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	4619      	mov	r1, r3
 80050aa:	2002      	movs	r0, #2
 80050ac:	f000 fdd0 	bl	8005c50 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, Black);
 80050b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005124 <OLED_Settings_Draw+0x118>)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80050b8:	4b18      	ldr	r3, [pc, #96]	@ (800511c <OLED_Settings_Draw+0x110>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2200      	movs	r2, #0
 80050be:	9200      	str	r2, [sp, #0]
 80050c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050c2:	f000 fd9f 	bl	8005c04 <ssd1306_WriteString>
 80050c6:	e010      	b.n	80050ea <OLED_Settings_Draw+0xde>
        }
        else
        {
            ssd1306_SetCursor(2, y);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	2002      	movs	r0, #2
 80050d0:	f000 fdbe 	bl	8005c50 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, White);
 80050d4:	4a13      	ldr	r2, [pc, #76]	@ (8005124 <OLED_Settings_Draw+0x118>)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80050dc:	4b0f      	ldr	r3, [pc, #60]	@ (800511c <OLED_Settings_Draw+0x110>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2201      	movs	r2, #1
 80050e2:	9200      	str	r2, [sp, #0]
 80050e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e6:	f000 fd8d 	bl	8005c04 <ssd1306_WriteString>
        }
        y += menu_font->height + vpad;
 80050ea:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <OLED_Settings_Draw+0x110>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	461a      	mov	r2, r3
 80050f2:	2303      	movs	r3, #3
 80050f4:	4413      	add	r3, r2
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4413      	add	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3301      	adds	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d9b8      	bls.n	800507a <OLED_Settings_Draw+0x6e>
    }

    ssd1306_UpdateScreen();
 8005108:	f000 fc72 	bl	80059f0 <ssd1306_UpdateScreen>
}
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20004b85 	.word	0x20004b85
 8005118:	0802476c 	.word	0x0802476c
 800511c:	2000009c 	.word	0x2000009c
 8005120:	20004b74 	.word	0x20004b74
 8005124:	20000080 	.word	0x20000080

08005128 <OLED_Draw_Edit>:

// --- Отображение IP/Mask/GW при редактировании ---
static void OLED_Draw_Edit()
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b08d      	sub	sp, #52	@ 0x34
 800512c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800512e:	2000      	movs	r0, #0
 8005130:	f000 fc46 	bl	80059c0 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8005134:	2340      	movs	r3, #64	@ 0x40
 8005136:	617b      	str	r3, [r7, #20]
    const int SH = SSD1306_ROTATED_HEIGHT;
 8005138:	2380      	movs	r3, #128	@ 0x80
 800513a:	613b      	str	r3, [r7, #16]

    // Заголовок по центру
    int title_x = (SW / 2) - ((int)strlen(edit_title) * menu_font->width / 2);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	0fda      	lsrs	r2, r3, #31
 8005140:	4413      	add	r3, r2
 8005142:	105b      	asrs	r3, r3, #1
 8005144:	461c      	mov	r4, r3
 8005146:	4866      	ldr	r0, [pc, #408]	@ (80052e0 <OLED_Draw_Edit+0x1b8>)
 8005148:	f7fb f848 	bl	80001dc <strlen>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	4b64      	ldr	r3, [pc, #400]	@ (80052e4 <OLED_Draw_Edit+0x1bc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	0fda      	lsrs	r2, r3, #31
 800515c:	4413      	add	r3, r2
 800515e:	105b      	asrs	r3, r3, #1
 8005160:	425b      	negs	r3, r3
 8005162:	4423      	add	r3, r4
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
    if(title_x < 0) title_x = 0;
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	da01      	bge.n	8005170 <OLED_Draw_Edit+0x48>
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
    ssd1306_SetCursor(title_x, 2);
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fd6a 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString(edit_title, *menu_font, White);
 800517c:	4b59      	ldr	r3, [pc, #356]	@ (80052e4 <OLED_Draw_Edit+0x1bc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2201      	movs	r2, #1
 8005182:	9200      	str	r2, [sp, #0]
 8005184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005186:	4856      	ldr	r0, [pc, #344]	@ (80052e0 <OLED_Draw_Edit+0x1b8>)
 8005188:	f000 fd3c 	bl	8005c04 <ssd1306_WriteString>

    // Отображение IP адреса в столбик по центру
    int start_y = 15;
 800518c:	230f      	movs	r3, #15
 800518e:	623b      	str	r3, [r7, #32]
    int part_spacing = edit_font->height + 2;
 8005190:	4b55      	ldr	r3, [pc, #340]	@ (80052e8 <OLED_Draw_Edit+0x1c0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	3302      	adds	r3, #2
 8005198:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < 4; i++)
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e066      	b.n	800526e <OLED_Draw_Edit+0x146>
    {
        char part_str[4];
        snprintf(part_str, sizeof(part_str), "%d", edit_parts[i]);
 80051a0:	4a52      	ldr	r2, [pc, #328]	@ (80052ec <OLED_Draw_Edit+0x1c4>)
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	1d38      	adds	r0, r7, #4
 80051aa:	4a51      	ldr	r2, [pc, #324]	@ (80052f0 <OLED_Draw_Edit+0x1c8>)
 80051ac:	2104      	movs	r1, #4
 80051ae:	f01c fb29 	bl	8021804 <sniprintf>

        // Центрирование по горизонтали
        int part_width = strlen(part_str) * edit_font->width;
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb f811 	bl	80001dc <strlen>
 80051ba:	4602      	mov	r2, r0
 80051bc:	4b4a      	ldr	r3, [pc, #296]	@ (80052e8 <OLED_Draw_Edit+0x1c0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	60bb      	str	r3, [r7, #8]
        int part_x = (SW / 2) - (part_width / 2);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	0fda      	lsrs	r2, r3, #31
 80051cc:	4413      	add	r3, r2
 80051ce:	105b      	asrs	r3, r3, #1
 80051d0:	4619      	mov	r1, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	0fda      	lsrs	r2, r3, #31
 80051d6:	4413      	add	r3, r2
 80051d8:	105b      	asrs	r3, r3, #1
 80051da:	425b      	negs	r3, r3
 80051dc:	440b      	add	r3, r1
 80051de:	61bb      	str	r3, [r7, #24]
        if(part_x < 0) part_x = 0;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	da01      	bge.n	80051ea <OLED_Draw_Edit+0xc2>
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]

        // Подсветка текущей части
        if(i == edit_digit)
 80051ea:	4b42      	ldr	r3, [pc, #264]	@ (80052f4 <OLED_Draw_Edit+0x1cc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d125      	bne.n	8005240 <OLED_Draw_Edit+0x118>
        {
            ssd1306_FillRect(part_x - 2, start_y - 1, part_width + 4, edit_font->height + 2, White);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	3b02      	subs	r3, #2
 80051fa:	b2d8      	uxtb	r0, r3
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b2d9      	uxtb	r1, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3304      	adds	r3, #4
 800520a:	b2da      	uxtb	r2, r3
 800520c:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <OLED_Draw_Edit+0x1c0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	3302      	adds	r3, #2
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2401      	movs	r4, #1
 8005218:	9400      	str	r4, [sp, #0]
 800521a:	f000 fe8d 	bl	8005f38 <ssd1306_FillRect>
            ssd1306_SetCursor(part_x, start_y);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fd11 	bl	8005c50 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, Black);
 800522e:	4b2e      	ldr	r3, [pc, #184]	@ (80052e8 <OLED_Draw_Edit+0x1c0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1d38      	adds	r0, r7, #4
 8005234:	2200      	movs	r2, #0
 8005236:	9200      	str	r2, [sp, #0]
 8005238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800523a:	f000 fce3 	bl	8005c04 <ssd1306_WriteString>
 800523e:	e00f      	b.n	8005260 <OLED_Draw_Edit+0x138>
        }
        else
        {
            ssd1306_SetCursor(part_x, start_y);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fd00 	bl	8005c50 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, White);
 8005250:	4b25      	ldr	r3, [pc, #148]	@ (80052e8 <OLED_Draw_Edit+0x1c0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	1d38      	adds	r0, r7, #4
 8005256:	2201      	movs	r2, #1
 8005258:	9200      	str	r2, [sp, #0]
 800525a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800525c:	f000 fcd2 	bl	8005c04 <ssd1306_WriteString>
        }

        start_y += part_spacing;
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	623b      	str	r3, [r7, #32]
    for(int i = 0; i < 4; i++)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	3301      	adds	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	2b03      	cmp	r3, #3
 8005272:	dd95      	ble.n	80051a0 <OLED_Draw_Edit+0x78>
    }

    // Инструкция внизу
    ssd1306_SetCursor(0, SH - 30);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	3b1e      	subs	r3, #30
 800527a:	b2db      	uxtb	r3, r3
 800527c:	4619      	mov	r1, r3
 800527e:	2000      	movs	r0, #0
 8005280:	f000 fce6 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("Up/Dn:", *menu_font, White);
 8005284:	4b17      	ldr	r3, [pc, #92]	@ (80052e4 <OLED_Draw_Edit+0x1bc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	9200      	str	r2, [sp, #0]
 800528c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800528e:	481a      	ldr	r0, [pc, #104]	@ (80052f8 <OLED_Draw_Edit+0x1d0>)
 8005290:	f000 fcb8 	bl	8005c04 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 20);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	3b14      	subs	r3, #20
 800529a:	b2db      	uxtb	r3, r3
 800529c:	4619      	mov	r1, r3
 800529e:	2000      	movs	r0, #0
 80052a0:	f000 fcd6 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("Change", *menu_font, White);
 80052a4:	4b0f      	ldr	r3, [pc, #60]	@ (80052e4 <OLED_Draw_Edit+0x1bc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	9200      	str	r2, [sp, #0]
 80052ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052ae:	4813      	ldr	r0, [pc, #76]	@ (80052fc <OLED_Draw_Edit+0x1d4>)
 80052b0:	f000 fca8 	bl	8005c04 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 10);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3b0a      	subs	r3, #10
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	2000      	movs	r0, #0
 80052c0:	f000 fcc6 	bl	8005c50 <ssd1306_SetCursor>
    ssd1306_WriteString("Mid: Next", *menu_font, White);
 80052c4:	4b07      	ldr	r3, [pc, #28]	@ (80052e4 <OLED_Draw_Edit+0x1bc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	9200      	str	r2, [sp, #0]
 80052cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052ce:	480c      	ldr	r0, [pc, #48]	@ (8005300 <OLED_Draw_Edit+0x1d8>)
 80052d0:	f000 fc98 	bl	8005c04 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80052d4:	f000 fb8c 	bl	80059f0 <ssd1306_UpdateScreen>
}
 80052d8:	bf00      	nop
 80052da:	372c      	adds	r7, #44	@ 0x2c
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd90      	pop	{r4, r7, pc}
 80052e0:	200000a8 	.word	0x200000a8
 80052e4:	2000009c 	.word	0x2000009c
 80052e8:	200000a0 	.word	0x200000a0
 80052ec:	200000a4 	.word	0x200000a4
 80052f0:	08024778 	.word	0x08024778
 80052f4:	20004b78 	.word	0x20004b78
 80052f8:	0802477c 	.word	0x0802477c
 80052fc:	08024784 	.word	0x08024784
 8005300:	0802478c 	.word	0x0802478c

08005304 <update_activity_time>:

// Обновление времени активности
static void update_activity_time(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
    last_activity_time = HAL_GetTick();
 8005308:	f000 fed8 	bl	80060bc <HAL_GetTick>
 800530c:	4603      	mov	r3, r0
 800530e:	4a02      	ldr	r2, [pc, #8]	@ (8005318 <update_activity_time+0x14>)
 8005310:	6013      	str	r3, [r2, #0]
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20004b80 	.word	0x20004b80

0800531c <change_edit_value>:

// Изменение значения с учетом удержания
static void change_edit_value(int delta)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8005324:	f000 feca 	bl	80060bc <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]
    static uint32_t last_change_time = 0;
    static uint32_t change_delay = 300;

    if(!button_held)
 800532a:	4b1c      	ldr	r3, [pc, #112]	@ (800539c <change_edit_value+0x80>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10e      	bne.n	8005350 <change_edit_value+0x34>
    {
        edit_parts[edit_digit] += delta;
 8005332:	4b1b      	ldr	r3, [pc, #108]	@ (80053a0 <change_edit_value+0x84>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <change_edit_value+0x88>)
 8005338:	5cd1      	ldrb	r1, [r2, r3]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	4b18      	ldr	r3, [pc, #96]	@ (80053a0 <change_edit_value+0x84>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	440a      	add	r2, r1
 8005344:	b2d1      	uxtb	r1, r2
 8005346:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <change_edit_value+0x88>)
 8005348:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;
        OLED_Draw_Edit();
 800534a:	f7ff feed 	bl	8005128 <OLED_Draw_Edit>
        return;
 800534e:	e021      	b.n	8005394 <change_edit_value+0x78>
    }

    if(now - last_change_time > change_delay)
 8005350:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <change_edit_value+0x8c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	1ad2      	subs	r2, r2, r3
 8005358:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <change_edit_value+0x90>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d919      	bls.n	8005394 <change_edit_value+0x78>
    {
        edit_parts[edit_digit] += delta;
 8005360:	4b0f      	ldr	r3, [pc, #60]	@ (80053a0 <change_edit_value+0x84>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0f      	ldr	r2, [pc, #60]	@ (80053a4 <change_edit_value+0x88>)
 8005366:	5cd1      	ldrb	r1, [r2, r3]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <change_edit_value+0x84>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	440a      	add	r2, r1
 8005372:	b2d1      	uxtb	r1, r2
 8005374:	4a0b      	ldr	r2, [pc, #44]	@ (80053a4 <change_edit_value+0x88>)
 8005376:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;

        if(change_delay > 50) change_delay -= 10;
 8005378:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <change_edit_value+0x90>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b32      	cmp	r3, #50	@ 0x32
 800537e:	d904      	bls.n	800538a <change_edit_value+0x6e>
 8005380:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <change_edit_value+0x90>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3b0a      	subs	r3, #10
 8005386:	4a09      	ldr	r2, [pc, #36]	@ (80053ac <change_edit_value+0x90>)
 8005388:	6013      	str	r3, [r2, #0]

        last_change_time = now;
 800538a:	4a07      	ldr	r2, [pc, #28]	@ (80053a8 <change_edit_value+0x8c>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6013      	str	r3, [r2, #0]
        OLED_Draw_Edit();
 8005390:	f7ff feca 	bl	8005128 <OLED_Draw_Edit>
    }
}
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20004b84 	.word	0x20004b84
 80053a0:	20004b78 	.word	0x20004b78
 80053a4:	200000a4 	.word	0x200000a4
 80053a8:	20004b8c 	.word	0x20004b8c
 80053ac:	200000bc 	.word	0x200000bc

080053b0 <OLED_Settings_MoveUp>:

// --- Навигация меню ---
void OLED_Settings_MoveUp(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 80053b4:	4b14      	ldr	r3, [pc, #80]	@ (8005408 <OLED_Settings_MoveUp+0x58>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d023      	beq.n	8005404 <OLED_Settings_MoveUp+0x54>

    update_activity_time();
 80053bc:	f7ff ffa2 	bl	8005304 <update_activity_time>

    if(confirm_active) {
 80053c0:	4b12      	ldr	r3, [pc, #72]	@ (800540c <OLED_Settings_MoveUp+0x5c>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <OLED_Settings_MoveUp+0x24>
        confirm_selection = 0; // Yes (слева)
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <OLED_Settings_MoveUp+0x60>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 80053ce:	f7ff f9b5 	bl	800473c <OLED_Draw_Confirm>
        return;
 80053d2:	e018      	b.n	8005406 <OLED_Settings_MoveUp+0x56>
    }

    if(editing_active)
 80053d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <OLED_Settings_MoveUp+0x64>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <OLED_Settings_MoveUp+0x34>
    {
        change_edit_value(1);
 80053dc:	2001      	movs	r0, #1
 80053de:	f7ff ff9d 	bl	800531c <change_edit_value>
        return;
 80053e2:	e010      	b.n	8005406 <OLED_Settings_MoveUp+0x56>
    }

    if(selected_index > 0)
 80053e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <OLED_Settings_MoveUp+0x68>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	dd05      	ble.n	80053f8 <OLED_Settings_MoveUp+0x48>
        selected_index--;
 80053ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <OLED_Settings_MoveUp+0x68>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	4a09      	ldr	r2, [pc, #36]	@ (8005418 <OLED_Settings_MoveUp+0x68>)
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e002      	b.n	80053fe <OLED_Settings_MoveUp+0x4e>
    else
        selected_index = MENU_ITEMS_COUNT - 1;
 80053f8:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <OLED_Settings_MoveUp+0x68>)
 80053fa:	2206      	movs	r2, #6
 80053fc:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 80053fe:	f7ff fe05 	bl	800500c <OLED_Settings_Draw>
 8005402:	e000      	b.n	8005406 <OLED_Settings_MoveUp+0x56>
    if(!settings_active) return;
 8005404:	bf00      	nop
}
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000340 	.word	0x20000340
 800540c:	20004b85 	.word	0x20004b85
 8005410:	20004b88 	.word	0x20004b88
 8005414:	20004b7c 	.word	0x20004b7c
 8005418:	20004b74 	.word	0x20004b74

0800541c <OLED_Settings_MoveDown>:

void OLED_Settings_MoveDown(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005420:	4b15      	ldr	r3, [pc, #84]	@ (8005478 <OLED_Settings_MoveDown+0x5c>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d024      	beq.n	8005472 <OLED_Settings_MoveDown+0x56>

    update_activity_time();
 8005428:	f7ff ff6c 	bl	8005304 <update_activity_time>

    if(confirm_active) {
 800542c:	4b13      	ldr	r3, [pc, #76]	@ (800547c <OLED_Settings_MoveDown+0x60>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <OLED_Settings_MoveDown+0x24>
        confirm_selection = 1; // No (справа)
 8005434:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <OLED_Settings_MoveDown+0x64>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 800543a:	f7ff f97f 	bl	800473c <OLED_Draw_Confirm>
        return;
 800543e:	e019      	b.n	8005474 <OLED_Settings_MoveDown+0x58>
    }

    if(editing_active)
 8005440:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <OLED_Settings_MoveDown+0x68>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <OLED_Settings_MoveDown+0x36>
    {
        change_edit_value(-1);
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	f7ff ff66 	bl	800531c <change_edit_value>
        return;
 8005450:	e010      	b.n	8005474 <OLED_Settings_MoveDown+0x58>
    }

    if(selected_index < MENU_ITEMS_COUNT - 1)
 8005452:	4b0d      	ldr	r3, [pc, #52]	@ (8005488 <OLED_Settings_MoveDown+0x6c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b05      	cmp	r3, #5
 8005458:	d805      	bhi.n	8005466 <OLED_Settings_MoveDown+0x4a>
        selected_index++;
 800545a:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <OLED_Settings_MoveDown+0x6c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <OLED_Settings_MoveDown+0x6c>)
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	e002      	b.n	800546c <OLED_Settings_MoveDown+0x50>
    else
        selected_index = 0;
 8005466:	4b08      	ldr	r3, [pc, #32]	@ (8005488 <OLED_Settings_MoveDown+0x6c>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 800546c:	f7ff fdce 	bl	800500c <OLED_Settings_Draw>
 8005470:	e000      	b.n	8005474 <OLED_Settings_MoveDown+0x58>
    if(!settings_active) return;
 8005472:	bf00      	nop
}
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000340 	.word	0x20000340
 800547c:	20004b85 	.word	0x20004b85
 8005480:	20004b88 	.word	0x20004b88
 8005484:	20004b7c 	.word	0x20004b7c
 8005488:	20004b74 	.word	0x20004b74

0800548c <OLED_Settings_Select>:
// --- Выбор пункта меню ---
void OLED_Settings_Select(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005490:	4b77      	ldr	r3, [pc, #476]	@ (8005670 <OLED_Settings_Select+0x1e4>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80e8 	beq.w	800566a <OLED_Settings_Select+0x1de>

    update_activity_time();
 800549a:	f7ff ff33 	bl	8005304 <update_activity_time>

    if(confirm_active) {
 800549e:	4b75      	ldr	r3, [pc, #468]	@ (8005674 <OLED_Settings_Select+0x1e8>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <OLED_Settings_Select+0x32>
        if(confirm_selection == 0) {
 80054a6:	4b74      	ldr	r3, [pc, #464]	@ (8005678 <OLED_Settings_Select+0x1ec>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <OLED_Settings_Select+0x26>
            // Yes - применяем настройки
            Apply_Network_Settings();
 80054ae:	f7ff fa0b 	bl	80048c8 <Apply_Network_Settings>
        }
        confirm_active = false;
 80054b2:	4b70      	ldr	r3, [pc, #448]	@ (8005674 <OLED_Settings_Select+0x1e8>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 80054b8:	f7ff fda8 	bl	800500c <OLED_Settings_Draw>
        return;
 80054bc:	e0d6      	b.n	800566c <OLED_Settings_Select+0x1e0>
    }

    if(editing_active)
 80054be:	4b6f      	ldr	r3, [pc, #444]	@ (800567c <OLED_Settings_Select+0x1f0>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d031      	beq.n	800552a <OLED_Settings_Select+0x9e>
    {
        edit_digit++;
 80054c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005680 <OLED_Settings_Select+0x1f4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	4a6c      	ldr	r2, [pc, #432]	@ (8005680 <OLED_Settings_Select+0x1f4>)
 80054ce:	6013      	str	r3, [r2, #0]
        if(edit_digit > 3)
 80054d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005680 <OLED_Settings_Select+0x1f4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	dd25      	ble.n	8005524 <OLED_Settings_Select+0x98>
        {
            editing_active = false;
 80054d8:	4b68      	ldr	r3, [pc, #416]	@ (800567c <OLED_Settings_Select+0x1f0>)
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]

            // Сохраняем изменения и показываем подтверждение
            switch(selected_index)
 80054de:	4b69      	ldr	r3, [pc, #420]	@ (8005684 <OLED_Settings_Select+0x1f8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d010      	beq.n	8005508 <OLED_Settings_Select+0x7c>
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	dc13      	bgt.n	8005512 <OLED_Settings_Select+0x86>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <OLED_Settings_Select+0x68>
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d005      	beq.n	80054fe <OLED_Settings_Select+0x72>
 80054f2:	e00e      	b.n	8005512 <OLED_Settings_Select+0x86>
            {
                case 0:
                    memcpy(last_ip, edit_parts, 4);
 80054f4:	4b64      	ldr	r3, [pc, #400]	@ (8005688 <OLED_Settings_Select+0x1fc>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a64      	ldr	r2, [pc, #400]	@ (800568c <OLED_Settings_Select+0x200>)
 80054fa:	6013      	str	r3, [r2, #0]
                    break;
 80054fc:	e009      	b.n	8005512 <OLED_Settings_Select+0x86>
                case 1:
                    memcpy(last_mask, edit_parts, 4);
 80054fe:	4b62      	ldr	r3, [pc, #392]	@ (8005688 <OLED_Settings_Select+0x1fc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a63      	ldr	r2, [pc, #396]	@ (8005690 <OLED_Settings_Select+0x204>)
 8005504:	6013      	str	r3, [r2, #0]
                    break;
 8005506:	e004      	b.n	8005512 <OLED_Settings_Select+0x86>
                case 2:
                    memcpy(last_gw, edit_parts, 4);
 8005508:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <OLED_Settings_Select+0x1fc>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a61      	ldr	r2, [pc, #388]	@ (8005694 <OLED_Settings_Select+0x208>)
 800550e:	6013      	str	r3, [r2, #0]
                    break;
 8005510:	bf00      	nop
            }

            confirm_active = true;
 8005512:	4b58      	ldr	r3, [pc, #352]	@ (8005674 <OLED_Settings_Select+0x1e8>)
 8005514:	2201      	movs	r2, #1
 8005516:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 8005518:	4b57      	ldr	r3, [pc, #348]	@ (8005678 <OLED_Settings_Select+0x1ec>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
            OLED_Draw_Confirm();
 800551e:	f7ff f90d 	bl	800473c <OLED_Draw_Confirm>
        }
        else
            OLED_Draw_Edit();
        return;
 8005522:	e0a3      	b.n	800566c <OLED_Settings_Select+0x1e0>
            OLED_Draw_Edit();
 8005524:	f7ff fe00 	bl	8005128 <OLED_Draw_Edit>
        return;
 8005528:	e0a0      	b.n	800566c <OLED_Settings_Select+0x1e0>
    }

    switch(selected_index)
 800552a:	4b56      	ldr	r3, [pc, #344]	@ (8005684 <OLED_Settings_Select+0x1f8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b06      	cmp	r3, #6
 8005530:	f200 809c 	bhi.w	800566c <OLED_Settings_Select+0x1e0>
 8005534:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <OLED_Settings_Select+0xb0>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005559 	.word	0x08005559
 8005540:	08005587 	.word	0x08005587
 8005544:	080055ab 	.word	0x080055ab
 8005548:	080055d9 	.word	0x080055d9
 800554c:	080055f7 	.word	0x080055f7
 8005550:	0800560d 	.word	0x0800560d
 8005554:	0800566d 	.word	0x0800566d
    {
        case 0: // IP
            editing_active = true;
 8005558:	4b48      	ldr	r3, [pc, #288]	@ (800567c <OLED_Settings_Select+0x1f0>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 800555e:	4b48      	ldr	r3, [pc, #288]	@ (8005680 <OLED_Settings_Select+0x1f4>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set IP");
 8005564:	4b4c      	ldr	r3, [pc, #304]	@ (8005698 <OLED_Settings_Select+0x20c>)
 8005566:	4a4d      	ldr	r2, [pc, #308]	@ (800569c <OLED_Settings_Select+0x210>)
 8005568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800556c:	6018      	str	r0, [r3, #0]
 800556e:	3304      	adds	r3, #4
 8005570:	8019      	strh	r1, [r3, #0]
 8005572:	3302      	adds	r3, #2
 8005574:	0c0a      	lsrs	r2, r1, #16
 8005576:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_ip, 4);
 8005578:	4b44      	ldr	r3, [pc, #272]	@ (800568c <OLED_Settings_Select+0x200>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a42      	ldr	r2, [pc, #264]	@ (8005688 <OLED_Settings_Select+0x1fc>)
 800557e:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005580:	f7ff fdd2 	bl	8005128 <OLED_Draw_Edit>
            break;
 8005584:	e072      	b.n	800566c <OLED_Settings_Select+0x1e0>

        case 1: // Mask
            editing_active = true;
 8005586:	4b3d      	ldr	r3, [pc, #244]	@ (800567c <OLED_Settings_Select+0x1f0>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 800558c:	4b3c      	ldr	r3, [pc, #240]	@ (8005680 <OLED_Settings_Select+0x1f4>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set Mask");
 8005592:	4b41      	ldr	r3, [pc, #260]	@ (8005698 <OLED_Settings_Select+0x20c>)
 8005594:	4a42      	ldr	r2, [pc, #264]	@ (80056a0 <OLED_Settings_Select+0x214>)
 8005596:	ca07      	ldmia	r2, {r0, r1, r2}
 8005598:	c303      	stmia	r3!, {r0, r1}
 800559a:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_mask, 4);
 800559c:	4b3c      	ldr	r3, [pc, #240]	@ (8005690 <OLED_Settings_Select+0x204>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a39      	ldr	r2, [pc, #228]	@ (8005688 <OLED_Settings_Select+0x1fc>)
 80055a2:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 80055a4:	f7ff fdc0 	bl	8005128 <OLED_Draw_Edit>
            break;
 80055a8:	e060      	b.n	800566c <OLED_Settings_Select+0x1e0>

        case 2: // Gateway
            editing_active = true;
 80055aa:	4b34      	ldr	r3, [pc, #208]	@ (800567c <OLED_Settings_Select+0x1f0>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 80055b0:	4b33      	ldr	r3, [pc, #204]	@ (8005680 <OLED_Settings_Select+0x1f4>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set GW");
 80055b6:	4b38      	ldr	r3, [pc, #224]	@ (8005698 <OLED_Settings_Select+0x20c>)
 80055b8:	4a3a      	ldr	r2, [pc, #232]	@ (80056a4 <OLED_Settings_Select+0x218>)
 80055ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055be:	6018      	str	r0, [r3, #0]
 80055c0:	3304      	adds	r3, #4
 80055c2:	8019      	strh	r1, [r3, #0]
 80055c4:	3302      	adds	r3, #2
 80055c6:	0c0a      	lsrs	r2, r1, #16
 80055c8:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_gw, 4);
 80055ca:	4b32      	ldr	r3, [pc, #200]	@ (8005694 <OLED_Settings_Select+0x208>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005688 <OLED_Settings_Select+0x1fc>)
 80055d0:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 80055d2:	f7ff fda9 	bl	8005128 <OLED_Draw_Edit>
            break;
 80055d6:	e049      	b.n	800566c <OLED_Settings_Select+0x1e0>

        case 3: // DHCP
            dhcp_on = !dhcp_on;
 80055d8:	4b33      	ldr	r3, [pc, #204]	@ (80056a8 <OLED_Settings_Select+0x21c>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b2f      	ldr	r3, [pc, #188]	@ (80056a8 <OLED_Settings_Select+0x21c>)
 80055ea:	701a      	strb	r2, [r3, #0]
            DHCP_Apply();
 80055ec:	f7ff fb90 	bl	8004d10 <DHCP_Apply>
            OLED_Settings_Draw();
 80055f0:	f7ff fd0c 	bl	800500c <OLED_Settings_Draw>
            break;
 80055f4:	e03a      	b.n	800566c <OLED_Settings_Select+0x1e0>

        case 4: // Reboot
            if(OLED_Confirm("Will Reboot!"))
 80055f6:	482d      	ldr	r0, [pc, #180]	@ (80056ac <OLED_Settings_Select+0x220>)
 80055f8:	f7ff fcae 	bl	8004f58 <OLED_Confirm>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <OLED_Settings_Select+0x17a>
                NVIC_SystemReset();
 8005602:	f7ff f863 	bl	80046cc <__NVIC_SystemReset>
            else
                OLED_Settings_Draw();
 8005606:	f7ff fd01 	bl	800500c <OLED_Settings_Draw>
            break;
 800560a:	e02f      	b.n	800566c <OLED_Settings_Select+0x1e0>

        case 5: // Reset
            if(OLED_Confirm("Factory Reset!"))
 800560c:	4828      	ldr	r0, [pc, #160]	@ (80056b0 <OLED_Settings_Select+0x224>)
 800560e:	f7ff fca3 	bl	8004f58 <OLED_Confirm>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d025      	beq.n	8005664 <OLED_Settings_Select+0x1d8>
            {
                last_ip[0] = 192; last_ip[1] = 168; last_ip[2] = 1; last_ip[3] = 178;
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <OLED_Settings_Select+0x200>)
 800561a:	22c0      	movs	r2, #192	@ 0xc0
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <OLED_Settings_Select+0x200>)
 8005620:	22a8      	movs	r2, #168	@ 0xa8
 8005622:	705a      	strb	r2, [r3, #1]
 8005624:	4b19      	ldr	r3, [pc, #100]	@ (800568c <OLED_Settings_Select+0x200>)
 8005626:	2201      	movs	r2, #1
 8005628:	709a      	strb	r2, [r3, #2]
 800562a:	4b18      	ldr	r3, [pc, #96]	@ (800568c <OLED_Settings_Select+0x200>)
 800562c:	22b2      	movs	r2, #178	@ 0xb2
 800562e:	70da      	strb	r2, [r3, #3]
                last_mask[0] = 255; last_mask[1] = 255; last_mask[2] = 255; last_mask[3] = 0;
 8005630:	4b17      	ldr	r3, [pc, #92]	@ (8005690 <OLED_Settings_Select+0x204>)
 8005632:	22ff      	movs	r2, #255	@ 0xff
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <OLED_Settings_Select+0x204>)
 8005638:	22ff      	movs	r2, #255	@ 0xff
 800563a:	705a      	strb	r2, [r3, #1]
 800563c:	4b14      	ldr	r3, [pc, #80]	@ (8005690 <OLED_Settings_Select+0x204>)
 800563e:	22ff      	movs	r2, #255	@ 0xff
 8005640:	709a      	strb	r2, [r3, #2]
 8005642:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <OLED_Settings_Select+0x204>)
 8005644:	2200      	movs	r2, #0
 8005646:	70da      	strb	r2, [r3, #3]
                last_gw[0] = 192; last_gw[1] = 168; last_gw[2] = 1; last_gw[3] = 1;
 8005648:	4b12      	ldr	r3, [pc, #72]	@ (8005694 <OLED_Settings_Select+0x208>)
 800564a:	22c0      	movs	r2, #192	@ 0xc0
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	4b11      	ldr	r3, [pc, #68]	@ (8005694 <OLED_Settings_Select+0x208>)
 8005650:	22a8      	movs	r2, #168	@ 0xa8
 8005652:	705a      	strb	r2, [r3, #1]
 8005654:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <OLED_Settings_Select+0x208>)
 8005656:	2201      	movs	r2, #1
 8005658:	709a      	strb	r2, [r3, #2]
 800565a:	4b0e      	ldr	r3, [pc, #56]	@ (8005694 <OLED_Settings_Select+0x208>)
 800565c:	2201      	movs	r2, #1
 800565e:	70da      	strb	r2, [r3, #3]
                Apply_Network_Settings();
 8005660:	f7ff f932 	bl	80048c8 <Apply_Network_Settings>
            }
            OLED_Settings_Draw();
 8005664:	f7ff fcd2 	bl	800500c <OLED_Settings_Draw>
            break;
 8005668:	e000      	b.n	800566c <OLED_Settings_Select+0x1e0>
    if(!settings_active) return;
 800566a:	bf00      	nop

        case 6: // Set rotation
            // TODO: вывод 0° / 180° и поворот
            break;
    }
}
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000340 	.word	0x20000340
 8005674:	20004b85 	.word	0x20004b85
 8005678:	20004b88 	.word	0x20004b88
 800567c:	20004b7c 	.word	0x20004b7c
 8005680:	20004b78 	.word	0x20004b78
 8005684:	20004b74 	.word	0x20004b74
 8005688:	200000a4 	.word	0x200000a4
 800568c:	20000074 	.word	0x20000074
 8005690:	20000078 	.word	0x20000078
 8005694:	2000007c 	.word	0x2000007c
 8005698:	200000a8 	.word	0x200000a8
 800569c:	08024798 	.word	0x08024798
 80056a0:	080247a0 	.word	0x080247a0
 80056a4:	080247ac 	.word	0x080247ac
 80056a8:	200000b8 	.word	0x200000b8
 80056ac:	080247b4 	.word	0x080247b4
 80056b0:	080247c4 	.word	0x080247c4

080056b4 <OLED_Settings_Exit>:

// Выход из меню настроек
void OLED_Settings_Exit(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
    settings_active = false;
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <OLED_Settings_Exit+0x20>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
    editing_active = false;
 80056be:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <OLED_Settings_Exit+0x24>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 80056c4:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <OLED_Settings_Exit+0x28>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
}
 80056ca:	bf00      	nop
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000340 	.word	0x20000340
 80056d8:	20004b7c 	.word	0x20004b7c
 80056dc:	20004b85 	.word	0x20004b85

080056e0 <OLED_Settings_TimeoutCheck>:

// Проверка таймаута бездействия
void OLED_Settings_TimeoutCheck(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
    if (!settings_active) return;
 80056e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005724 <OLED_Settings_TimeoutCheck+0x44>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d015      	beq.n	800571a <OLED_Settings_TimeoutCheck+0x3a>

    uint32_t now = HAL_GetTick();
 80056ee:	f000 fce5 	bl	80060bc <HAL_GetTick>
 80056f2:	6078      	str	r0, [r7, #4]

    // Таймаут работает ТОЛЬКО если мы не в режиме редактирования и не в подтверждении
    if (!editing_active && !confirm_active && (now - last_activity_time) >= 10000)
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <OLED_Settings_TimeoutCheck+0x48>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10f      	bne.n	800571c <OLED_Settings_TimeoutCheck+0x3c>
 80056fc:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <OLED_Settings_TimeoutCheck+0x4c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <OLED_Settings_TimeoutCheck+0x3c>
 8005704:	4b0a      	ldr	r3, [pc, #40]	@ (8005730 <OLED_Settings_TimeoutCheck+0x50>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005710:	4293      	cmp	r3, r2
 8005712:	d903      	bls.n	800571c <OLED_Settings_TimeoutCheck+0x3c>
    {
        OLED_Settings_Exit();
 8005714:	f7ff ffce 	bl	80056b4 <OLED_Settings_Exit>
 8005718:	e000      	b.n	800571c <OLED_Settings_TimeoutCheck+0x3c>
    if (!settings_active) return;
 800571a:	bf00      	nop
    }
}
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000340 	.word	0x20000340
 8005728:	20004b7c 	.word	0x20004b7c
 800572c:	20004b85 	.word	0x20004b85
 8005730:	20004b80 	.word	0x20004b80

08005734 <OLED_UpdateDisplay>:
    button_held = held;
    if(!held) button_press_time = 0;
}

void OLED_UpdateDisplay(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
    static uint32_t last_display_update = 0;
    uint32_t now = HAL_GetTick();
 800573a:	f000 fcbf 	bl	80060bc <HAL_GetTick>
 800573e:	6078      	str	r0, [r7, #4]

    if (now - last_display_update < 500) {
 8005740:	4b12      	ldr	r3, [pc, #72]	@ (800578c <OLED_UpdateDisplay+0x58>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800574c:	d31a      	bcc.n	8005784 <OLED_UpdateDisplay+0x50>
        return;
    }
    last_display_update = now;
 800574e:	4a0f      	ldr	r2, [pc, #60]	@ (800578c <OLED_UpdateDisplay+0x58>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6013      	str	r3, [r2, #0]

    if (settings_active) {
 8005754:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <OLED_UpdateDisplay+0x5c>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <OLED_UpdateDisplay+0x4a>
        if (confirm_active) {
 800575c:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <OLED_UpdateDisplay+0x60>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <OLED_UpdateDisplay+0x36>
            OLED_Draw_Confirm();
 8005764:	f7fe ffea 	bl	800473c <OLED_Draw_Confirm>
 8005768:	e00d      	b.n	8005786 <OLED_UpdateDisplay+0x52>
        }
        else if (editing_active) {
 800576a:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <OLED_UpdateDisplay+0x64>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <OLED_UpdateDisplay+0x44>
            OLED_Draw_Edit();
 8005772:	f7ff fcd9 	bl	8005128 <OLED_Draw_Edit>
 8005776:	e006      	b.n	8005786 <OLED_UpdateDisplay+0x52>
        }
        else {
            OLED_Settings_Draw();
 8005778:	f7ff fc48 	bl	800500c <OLED_Settings_Draw>
 800577c:	e003      	b.n	8005786 <OLED_UpdateDisplay+0x52>
        }
    }
    else {
        OLED_ShowCurrentPage();
 800577e:	f7fc f859 	bl	8001834 <OLED_ShowCurrentPage>
 8005782:	e000      	b.n	8005786 <OLED_UpdateDisplay+0x52>
        return;
 8005784:	bf00      	nop
    }
}
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20004b90 	.word	0x20004b90
 8005790:	20000340 	.word	0x20000340
 8005794:	20004b85 	.word	0x20004b85
 8005798:	20004b7c 	.word	0x20004b7c

0800579c <custom_get_value>:
static const u32_t custom_base_oid[] = { 1,3,6,1,4,1,62283,1 };



/* Колбэки для чтения переменных */
static s16_t custom_get_value(struct snmp_node_instance* instance, void* value) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage1;
 80057a6:	4b06      	ldr	r3, [pc, #24]	@ (80057c0 <custom_get_value+0x24>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fb fd12 	bl	80011d4 <__aeabi_f2uiz>
 80057b0:	4602      	mov	r2, r0
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80057b6:	2304      	movs	r3, #4
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20004b60 	.word	0x20004b60

080057c4 <custom_get_var1>:

static s16_t custom_get_var1(struct snmp_node_instance* instance, void* value) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage2;
 80057ce:	4b06      	ldr	r3, [pc, #24]	@ (80057e8 <custom_get_var1+0x24>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fb fcfe 	bl	80011d4 <__aeabi_f2uiz>
 80057d8:	4602      	mov	r2, r0
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80057de:	2304      	movs	r3, #4
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20004b64 	.word	0x20004b64

080057ec <custom_get_var2>:

static s16_t custom_get_var2(struct snmp_node_instance* instance, void* value) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = current;
 80057f6:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <custom_get_var2+0x24>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fb fcea 	bl	80011d4 <__aeabi_f2uiz>
 8005800:	4602      	mov	r2, r0
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005806:	2304      	movs	r3, #4
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20004b68 	.word	0x20004b68

08005814 <custom_get_var3>:

static s16_t custom_get_var3(struct snmp_node_instance* instance, void* value) {
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 123;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	227b      	movs	r2, #123	@ 0x7b
 8005822:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005824:	2304      	movs	r3, #4
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <custom_get_var4>:

static s16_t custom_get_var4(struct snmp_node_instance* instance, void* value) {
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 228;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	22e4      	movs	r2, #228	@ 0xe4
 800583e:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005840:	2304      	movs	r3, #4
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <ssd1306_map_logical_to_physical>:
/* Map logical (lx,ly) -> physical (px,py) for 90° clockwise rotation:
 * px = physical_x = W - 1 - ly
 * py = physical_y = lx
 */
// Поворот 90° против часовой стрелки
static inline void ssd1306_map_logical_to_physical(uint8_t lx, uint8_t ly, uint8_t *px, uint8_t *py) {
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	60ba      	str	r2, [r7, #8]
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	4603      	mov	r3, r0
 8005858:	73fb      	strb	r3, [r7, #15]
 800585a:	460b      	mov	r3, r1
 800585c:	73bb      	strb	r3, [r7, #14]
    *px = ly;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	7bba      	ldrb	r2, [r7, #14]
 8005862:	701a      	strb	r2, [r3, #0]
    *py = (uint8_t)(SSD1306_HEIGHT - 1 - lx);
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800586a:	b2da      	uxtb	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	701a      	strb	r2, [r3, #0]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <ssd1306_Reset>:


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800587a:	b480      	push	{r7}
 800587c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800587e:	bf00      	nop
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr
	...

08005888 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af04      	add	r7, sp, #16
 800588e:	4603      	mov	r3, r0
 8005890:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	9302      	str	r3, [sp, #8]
 8005898:	2301      	movs	r3, #1
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	1dfb      	adds	r3, r7, #7
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	2301      	movs	r3, #1
 80058a2:	2200      	movs	r2, #0
 80058a4:	2178      	movs	r1, #120	@ 0x78
 80058a6:	4803      	ldr	r0, [pc, #12]	@ (80058b4 <ssd1306_WriteCommand+0x2c>)
 80058a8:	f003 fb70 	bl	8008f8c <HAL_I2C_Mem_Write>
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200029b4 	.word	0x200029b4

080058b8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af04      	add	r7, sp, #16
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ca:	9202      	str	r2, [sp, #8]
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	2301      	movs	r3, #1
 80058d4:	2240      	movs	r2, #64	@ 0x40
 80058d6:	2178      	movs	r1, #120	@ 0x78
 80058d8:	4803      	ldr	r0, [pc, #12]	@ (80058e8 <ssd1306_WriteData+0x30>)
 80058da:	f003 fb57 	bl	8008f8c <HAL_I2C_Mem_Write>
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200029b4 	.word	0x200029b4

080058ec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80058f0:	f7ff ffc3 	bl	800587a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80058f4:	2064      	movs	r0, #100	@ 0x64
 80058f6:	f000 fbeb 	bl	80060d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80058fa:	2000      	movs	r0, #0
 80058fc:	f000 fafe 	bl	8005efc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005900:	2020      	movs	r0, #32
 8005902:	f7ff ffc1 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005906:	2000      	movs	r0, #0
 8005908:	f7ff ffbe 	bl	8005888 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800590c:	20b0      	movs	r0, #176	@ 0xb0
 800590e:	f7ff ffbb 	bl	8005888 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005912:	20c8      	movs	r0, #200	@ 0xc8
 8005914:	f7ff ffb8 	bl	8005888 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005918:	2000      	movs	r0, #0
 800591a:	f7ff ffb5 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800591e:	2010      	movs	r0, #16
 8005920:	f7ff ffb2 	bl	8005888 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005924:	2040      	movs	r0, #64	@ 0x40
 8005926:	f7ff ffaf 	bl	8005888 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800592a:	20ff      	movs	r0, #255	@ 0xff
 800592c:	f000 fad2 	bl	8005ed4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005930:	20a1      	movs	r0, #161	@ 0xa1
 8005932:	f7ff ffa9 	bl	8005888 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005936:	20a6      	movs	r0, #166	@ 0xa6
 8005938:	f7ff ffa6 	bl	8005888 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800593c:	20a8      	movs	r0, #168	@ 0xa8
 800593e:	f7ff ffa3 	bl	8005888 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005942:	203f      	movs	r0, #63	@ 0x3f
 8005944:	f7ff ffa0 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005948:	20a4      	movs	r0, #164	@ 0xa4
 800594a:	f7ff ff9d 	bl	8005888 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800594e:	20d3      	movs	r0, #211	@ 0xd3
 8005950:	f7ff ff9a 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005954:	2000      	movs	r0, #0
 8005956:	f7ff ff97 	bl	8005888 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800595a:	20d5      	movs	r0, #213	@ 0xd5
 800595c:	f7ff ff94 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005960:	20f0      	movs	r0, #240	@ 0xf0
 8005962:	f7ff ff91 	bl	8005888 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005966:	20d9      	movs	r0, #217	@ 0xd9
 8005968:	f7ff ff8e 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800596c:	2022      	movs	r0, #34	@ 0x22
 800596e:	f7ff ff8b 	bl	8005888 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005972:	20da      	movs	r0, #218	@ 0xda
 8005974:	f7ff ff88 	bl	8005888 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005978:	2012      	movs	r0, #18
 800597a:	f7ff ff85 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800597e:	20db      	movs	r0, #219	@ 0xdb
 8005980:	f7ff ff82 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005984:	2020      	movs	r0, #32
 8005986:	f7ff ff7f 	bl	8005888 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800598a:	208d      	movs	r0, #141	@ 0x8d
 800598c:	f7ff ff7c 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005990:	2014      	movs	r0, #20
 8005992:	f7ff ff79 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005996:	2001      	movs	r0, #1
 8005998:	f000 fab0 	bl	8005efc <ssd1306_SetDisplayOn>

    // Clear screen (logical)
    ssd1306_Fill(Black);
 800599c:	2000      	movs	r0, #0
 800599e:	f000 f80f 	bl	80059c0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80059a2:	f000 f825 	bl	80059f0 <ssd1306_UpdateScreen>

    // Set default values for screen object (logical coords)
    SSD1306.CurrentX = 0;
 80059a6:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <ssd1306_Init+0xd0>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80059ac:	4b03      	ldr	r3, [pc, #12]	@ (80059bc <ssd1306_Init+0xd0>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80059b2:	4b02      	ldr	r3, [pc, #8]	@ (80059bc <ssd1306_Init+0xd0>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	711a      	strb	r2, [r3, #4]
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20004f94 	.word	0x20004f94

080059c0 <ssd1306_Fill>:

/* Fill the whole screen with the given color (physical buffer fill) */
void ssd1306_Fill(SSD1306_COLOR color) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <ssd1306_Fill+0x14>
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <ssd1306_Fill+0x16>
 80059d4:	23ff      	movs	r3, #255	@ 0xff
 80059d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059da:	4619      	mov	r1, r3
 80059dc:	4803      	ldr	r0, [pc, #12]	@ (80059ec <ssd1306_Fill+0x2c>)
 80059de:	f01c f877 	bl	8021ad0 <memset>
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20004b94 	.word	0x20004b94

080059f0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen (physical pages) */
void ssd1306_UpdateScreen(void) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
    // depends on the screen height (physical):
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80059f6:	2300      	movs	r3, #0
 80059f8:	71fb      	strb	r3, [r7, #7]
 80059fa:	e016      	b.n	8005a2a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	3b50      	subs	r3, #80	@ 0x50
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ff40 	bl	8005888 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005a08:	2000      	movs	r0, #0
 8005a0a:	f7ff ff3d 	bl	8005888 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005a0e:	2010      	movs	r0, #16
 8005a10:	f7ff ff3a 	bl	8005888 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	01db      	lsls	r3, r3, #7
 8005a18:	4a08      	ldr	r2, [pc, #32]	@ (8005a3c <ssd1306_UpdateScreen+0x4c>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	2180      	movs	r1, #128	@ 0x80
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ff4a 	bl	80058b8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	3301      	adds	r3, #1
 8005a28:	71fb      	strb	r3, [r7, #7]
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	2b07      	cmp	r3, #7
 8005a2e:	d9e5      	bls.n	80059fc <ssd1306_UpdateScreen+0xc>
    }
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20004b94 	.word	0x20004b94

08005a40 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer (logical coords)
 * X => X Logical Coordinate (0..SSD1306_ROTATED_WIDTH-1)
 * Y => Y Logical Coordinate (0..SSD1306_ROTATED_HEIGHT-1)
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	71bb      	strb	r3, [r7, #6]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_ROTATED_WIDTH || y >= SSD1306_ROTATED_HEIGHT) {
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a56:	d83c      	bhi.n	8005ad2 <ssd1306_DrawPixel+0x92>
 8005a58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	db38      	blt.n	8005ad2 <ssd1306_DrawPixel+0x92>
        // Don't write outside the logical buffer
        return;
    }

    uint8_t px, py;
    ssd1306_map_logical_to_physical(x, y, &px, &py);
 8005a60:	f107 0309 	add.w	r3, r7, #9
 8005a64:	f107 020a 	add.w	r2, r7, #10
 8005a68:	79b9      	ldrb	r1, [r7, #6]
 8005a6a:	79f8      	ldrb	r0, [r7, #7]
 8005a6c:	f7ff feee 	bl	800584c <ssd1306_map_logical_to_physical>

    uint32_t index = (uint32_t)px + ((uint32_t)(py / 8) * SSD1306_WIDTH);
 8005a70:	7abb      	ldrb	r3, [r7, #10]
 8005a72:	461a      	mov	r2, r3
 8005a74:	7a7b      	ldrb	r3, [r7, #9]
 8005a76:	08db      	lsrs	r3, r3, #3
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
    uint8_t mask = (uint8_t)(1 << (py % 8));
 8005a80:	7a7b      	ldrb	r3, [r7, #9]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2201      	movs	r2, #1
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	72fb      	strb	r3, [r7, #11]

    if (color == White) {
 8005a8e:	797b      	ldrb	r3, [r7, #5]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10c      	bne.n	8005aae <ssd1306_DrawPixel+0x6e>
        SSD1306_Buffer[index] |= mask;
 8005a94:	4a11      	ldr	r2, [pc, #68]	@ (8005adc <ssd1306_DrawPixel+0x9c>)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b2d9      	uxtb	r1, r3
 8005aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8005adc <ssd1306_DrawPixel+0x9c>)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e012      	b.n	8005ad4 <ssd1306_DrawPixel+0x94>
    } else {
        SSD1306_Buffer[index] &= ~mask;
 8005aae:	4a0b      	ldr	r2, [pc, #44]	@ (8005adc <ssd1306_DrawPixel+0x9c>)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b25a      	sxtb	r2, r3
 8005ab8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	b25b      	sxtb	r3, r3
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	b25b      	sxtb	r3, r3
 8005ac4:	b2d9      	uxtb	r1, r3
 8005ac6:	4a05      	ldr	r2, [pc, #20]	@ (8005adc <ssd1306_DrawPixel+0x9c>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	460a      	mov	r2, r1
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e000      	b.n	8005ad4 <ssd1306_DrawPixel+0x94>
        return;
 8005ad2:	bf00      	nop
    }
}
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20004b94 	.word	0x20004b94

08005ae0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer (logical coords)
 * ch       => char to write
 * Font     => Font to use
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b089      	sub	sp, #36	@ 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4638      	mov	r0, r7
 8005aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005aee:	4623      	mov	r3, r4
 8005af0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b1f      	cmp	r3, #31
 8005af6:	d902      	bls.n	8005afe <ssd1306_WriteChar+0x1e>
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b7e      	cmp	r3, #126	@ 0x7e
 8005afc:	d901      	bls.n	8005b02 <ssd1306_WriteChar+0x22>
        return 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e079      	b.n	8005bf6 <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <ssd1306_WriteChar+0x34>
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	3b20      	subs	r3, #32
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	e000      	b.n	8005b16 <ssd1306_WriteChar+0x36>
 8005b14:	783b      	ldrb	r3, [r7, #0]
 8005b16:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line (logical)
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005b18:	4b39      	ldr	r3, [pc, #228]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	4413      	add	r3, r2
 8005b22:	2b40      	cmp	r3, #64	@ 0x40
 8005b24:	dc06      	bgt.n	8005b34 <ssd1306_WriteChar+0x54>
        SSD1306_ROTATED_HEIGHT < (SSD1306.CurrentY + Font.height))
 8005b26:	4b36      	ldr	r3, [pc, #216]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005b28:	885b      	ldrh	r3, [r3, #2]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	787b      	ldrb	r3, [r7, #1]
 8005b2e:	4413      	add	r3, r2
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005b30:	2b80      	cmp	r3, #128	@ 0x80
 8005b32:	dd01      	ble.n	8005b38 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e05e      	b.n	8005bf6 <ssd1306_WriteChar+0x116>
    }

    // Use the font to write (font expected to be in conventional orientation;
    // since DrawPixel maps logical->physical, characters will be rotated accordingly)
    for(i = 0; i < Font.height; i++) {
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e04d      	b.n	8005bda <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	3b20      	subs	r3, #32
 8005b44:	7879      	ldrb	r1, [r7, #1]
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	440b      	add	r3, r1
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	e036      	b.n	8005bcc <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d013      	beq.n	8005b96 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005b6e:	4b24      	ldr	r3, [pc, #144]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	4413      	add	r3, r2
 8005b7a:	b2d8      	uxtb	r0, r3
 8005b7c:	4b20      	ldr	r3, [pc, #128]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005b7e:	885b      	ldrh	r3, [r3, #2]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005b8e:	4619      	mov	r1, r3
 8005b90:	f7ff ff56 	bl	8005a40 <ssd1306_DrawPixel>
 8005b94:	e017      	b.n	8005bc6 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005b96:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	b2d8      	uxtb	r0, r3
 8005ba4:	4b16      	ldr	r3, [pc, #88]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005ba6:	885b      	ldrh	r3, [r3, #2]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	b2d9      	uxtb	r1, r3
 8005bb2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f7ff ff3d 	bl	8005a40 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3c4      	bcc.n	8005b5e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	787b      	ldrb	r3, [r7, #1]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d3ac      	bcc.n	8005b3e <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	4413      	add	r3, r2
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <ssd1306_WriteChar+0x120>)
 8005bf2:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3724      	adds	r7, #36	@ 0x24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd90      	pop	{r4, r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20004f94 	.word	0x20004f94

08005c04 <ssd1306_WriteString>:

/* Write full string to screenbuffer (logical) */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8005c12:	e013      	b.n	8005c3c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	7818      	ldrb	r0, [r3, #0]
 8005c18:	7e3b      	ldrb	r3, [r7, #24]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c20:	f7ff ff5e 	bl	8005ae0 <ssd1306_WriteChar>
 8005c24:	4603      	mov	r3, r0
 8005c26:	461a      	mov	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d002      	beq.n	8005c36 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	e008      	b.n	8005c48 <ssd1306_WriteString+0x44>
        }
        str++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e7      	bne.n	8005c14 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	781b      	ldrb	r3, [r3, #0]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <ssd1306_SetCursor>:

/* Position the cursor (logical) */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	460a      	mov	r2, r1
 8005c5a:	71fb      	strb	r3, [r7, #7]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <ssd1306_SetCursor+0x2c>)
 8005c66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005c68:	79bb      	ldrb	r3, [r7, #6]
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	4b03      	ldr	r3, [pc, #12]	@ (8005c7c <ssd1306_SetCursor+0x2c>)
 8005c6e:	805a      	strh	r2, [r3, #2]
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20004f94 	.word	0x20004f94

08005c80 <ssd1306_Line>:

/* Draw line by Bresenham's algorithm (logical coords) */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b089      	sub	sp, #36	@ 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4623      	mov	r3, r4
 8005c90:	71fb      	strb	r3, [r7, #7]
 8005c92:	4603      	mov	r3, r0
 8005c94:	71bb      	strb	r3, [r7, #6]
 8005c96:	460b      	mov	r3, r1
 8005c98:	717b      	strb	r3, [r7, #5]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs((int32_t)x2 - (int32_t)x1);
 8005c9e:	797a      	ldrb	r2, [r7, #5]
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfb8      	it	lt
 8005ca8:	425b      	neglt	r3, r3
 8005caa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs((int32_t)y2 - (int32_t)y1);
 8005cac:	793a      	ldrb	r2, [r7, #4]
 8005cae:	79bb      	ldrb	r3, [r7, #6]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfb8      	it	lt
 8005cb6:	425b      	neglt	r3, r3
 8005cb8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8005cba:	79fa      	ldrb	r2, [r7, #7]
 8005cbc:	797b      	ldrb	r3, [r7, #5]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d201      	bcs.n	8005cc6 <ssd1306_Line+0x46>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e001      	b.n	8005cca <ssd1306_Line+0x4a>
 8005cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cca:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8005ccc:	79ba      	ldrb	r2, [r7, #6]
 8005cce:	793b      	ldrb	r3, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d201      	bcs.n	8005cd8 <ssd1306_Line+0x58>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e001      	b.n	8005cdc <ssd1306_Line+0x5c>
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cdc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8005ce6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005cea:	7939      	ldrb	r1, [r7, #4]
 8005cec:	797b      	ldrb	r3, [r7, #5]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fea6 	bl	8005a40 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8005cf4:	e024      	b.n	8005d40 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8005cf6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005cfa:	79b9      	ldrb	r1, [r7, #6]
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fe9e 	bl	8005a40 <ssd1306_DrawPixel>
        error2 = error * 2;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	425b      	negs	r3, r3
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	dd08      	ble.n	8005d26 <ssd1306_Line+0xa6>
            error -= deltaY;
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	4413      	add	r3, r2
 8005d24:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	da08      	bge.n	8005d40 <ssd1306_Line+0xc0>
            error += deltaX;
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	4413      	add	r3, r2
 8005d34:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	79bb      	ldrb	r3, [r7, #6]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8005d40:	79fa      	ldrb	r2, [r7, #7]
 8005d42:	797b      	ldrb	r3, [r7, #5]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d1d6      	bne.n	8005cf6 <ssd1306_Line+0x76>
 8005d48:	79ba      	ldrb	r2, [r7, #6]
 8005d4a:	793b      	ldrb	r3, [r7, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1d2      	bne.n	8005cf6 <ssd1306_Line+0x76>
        }
    }
    return;
 8005d50:	bf00      	nop
}
 8005d52:	3724      	adds	r7, #36	@ 0x24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}

08005d58 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenham's algorithm (logical) */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4623      	mov	r3, r4
 8005d68:	71fb      	strb	r3, [r7, #7]
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	71bb      	strb	r3, [r7, #6]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	717b      	strb	r3, [r7, #5]
 8005d72:	4613      	mov	r3, r2
 8005d74:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8005d76:	797b      	ldrb	r3, [r7, #5]
 8005d78:	425b      	negs	r3, r3
 8005d7a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8005d80:	797b      	ldrb	r3, [r7, #5]
 8005d82:	f1c3 0301 	rsb	r3, r3, #1
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_ROTATED_WIDTH || par_y >= SSD1306_ROTATED_HEIGHT) {
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8005d8e:	d866      	bhi.n	8005e5e <ssd1306_DrawCircle+0x106>
 8005d90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	db62      	blt.n	8005e5e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	79fa      	ldrb	r2, [r7, #7]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	b2d8      	uxtb	r0, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	79bb      	ldrb	r3, [r7, #6]
 8005da8:	4413      	add	r3, r2
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	793a      	ldrb	r2, [r7, #4]
 8005dae:	4619      	mov	r1, r3
 8005db0:	f7ff fe46 	bl	8005a40 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	4413      	add	r3, r2
 8005dbc:	b2d8      	uxtb	r0, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	79bb      	ldrb	r3, [r7, #6]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	793a      	ldrb	r2, [r7, #4]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	f7ff fe38 	bl	8005a40 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	b2d8      	uxtb	r0, r3
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	79ba      	ldrb	r2, [r7, #6]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	793a      	ldrb	r2, [r7, #4]
 8005de6:	4619      	mov	r1, r3
 8005de8:	f7ff fe2a 	bl	8005a40 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	79fa      	ldrb	r2, [r7, #7]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	b2d8      	uxtb	r0, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	79ba      	ldrb	r2, [r7, #6]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	793a      	ldrb	r2, [r7, #4]
 8005e02:	4619      	mov	r1, r3
 8005e04:	f7ff fe1c 	bl	8005a40 <ssd1306_DrawPixel>
        e2 = err;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	dc13      	bgt.n	8005e3c <ssd1306_DrawCircle+0xe4>
            y++;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	3301      	adds	r3, #1
 8005e18:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	3301      	adds	r3, #1
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	425b      	negs	r3, r3
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d105      	bne.n	8005e3c <ssd1306_DrawCircle+0xe4>
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	dc01      	bgt.n	8005e3c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	dd08      	ble.n	8005e56 <ssd1306_DrawCircle+0xfe>
            x++;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3301      	adds	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	3301      	adds	r3, #1
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dd9d      	ble.n	8005d98 <ssd1306_DrawCircle+0x40>

    return;
 8005e5c:	e000      	b.n	8005e60 <ssd1306_DrawCircle+0x108>
        return;
 8005e5e:	bf00      	nop
}
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}

08005e66 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle (logical) */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005e66:	b590      	push	{r4, r7, lr}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af02      	add	r7, sp, #8
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	4608      	mov	r0, r1
 8005e70:	4611      	mov	r1, r2
 8005e72:	461a      	mov	r2, r3
 8005e74:	4623      	mov	r3, r4
 8005e76:	71fb      	strb	r3, [r7, #7]
 8005e78:	4603      	mov	r3, r0
 8005e7a:	71bb      	strb	r3, [r7, #6]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	717b      	strb	r3, [r7, #5]
 8005e80:	4613      	mov	r3, r2
 8005e82:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8005e84:	79bc      	ldrb	r4, [r7, #6]
 8005e86:	797a      	ldrb	r2, [r7, #5]
 8005e88:	79b9      	ldrb	r1, [r7, #6]
 8005e8a:	79f8      	ldrb	r0, [r7, #7]
 8005e8c:	7e3b      	ldrb	r3, [r7, #24]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	4623      	mov	r3, r4
 8005e92:	f7ff fef5 	bl	8005c80 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8005e96:	793c      	ldrb	r4, [r7, #4]
 8005e98:	797a      	ldrb	r2, [r7, #5]
 8005e9a:	79b9      	ldrb	r1, [r7, #6]
 8005e9c:	7978      	ldrb	r0, [r7, #5]
 8005e9e:	7e3b      	ldrb	r3, [r7, #24]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	f7ff feec 	bl	8005c80 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8005ea8:	793c      	ldrb	r4, [r7, #4]
 8005eaa:	79fa      	ldrb	r2, [r7, #7]
 8005eac:	7939      	ldrb	r1, [r7, #4]
 8005eae:	7978      	ldrb	r0, [r7, #5]
 8005eb0:	7e3b      	ldrb	r3, [r7, #24]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	f7ff fee3 	bl	8005c80 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8005eba:	79bc      	ldrb	r4, [r7, #6]
 8005ebc:	79fa      	ldrb	r2, [r7, #7]
 8005ebe:	7939      	ldrb	r1, [r7, #4]
 8005ec0:	79f8      	ldrb	r0, [r7, #7]
 8005ec2:	7e3b      	ldrb	r3, [r7, #24]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	f7ff feda 	bl	8005c80 <ssd1306_Line>

    return;
 8005ecc:	bf00      	nop
}
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd90      	pop	{r4, r7, pc}

08005ed4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005ede:	2381      	movs	r3, #129	@ 0x81
 8005ee0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fccf 	bl	8005888 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fccb 	bl	8005888 <ssd1306_WriteCommand>
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005f0c:	23af      	movs	r3, #175	@ 0xaf
 8005f0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005f10:	4b08      	ldr	r3, [pc, #32]	@ (8005f34 <ssd1306_SetDisplayOn+0x38>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	715a      	strb	r2, [r3, #5]
 8005f16:	e004      	b.n	8005f22 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005f18:	23ae      	movs	r3, #174	@ 0xae
 8005f1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <ssd1306_SetDisplayOn+0x38>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fcaf 	bl	8005888 <ssd1306_WriteCommand>
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20004f94 	.word	0x20004f94

08005f38 <ssd1306_FillRect>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8005f38:	b590      	push	{r4, r7, lr}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	461a      	mov	r2, r3
 8005f46:	4623      	mov	r3, r4
 8005f48:	71fb      	strb	r3, [r7, #7]
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	71bb      	strb	r3, [r7, #6]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	717b      	strb	r3, [r7, #5]
 8005f52:	4613      	mov	r3, r2
 8005f54:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = y; i < y + h; i++) {
 8005f56:	79bb      	ldrb	r3, [r7, #6]
 8005f58:	73fb      	strb	r3, [r7, #15]
 8005f5a:	e015      	b.n	8005f88 <ssd1306_FillRect+0x50>
        for (uint8_t j = x; j < x + w; j++) {
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	73bb      	strb	r3, [r7, #14]
 8005f60:	e009      	b.n	8005f76 <ssd1306_FillRect+0x3e>
            ssd1306_DrawPixel(j, i, color);
 8005f62:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005f66:	7bf9      	ldrb	r1, [r7, #15]
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff fd68 	bl	8005a40 <ssd1306_DrawPixel>
        for (uint8_t j = x; j < x + w; j++) {
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	3301      	adds	r3, #1
 8005f74:	73bb      	strb	r3, [r7, #14]
 8005f76:	7bba      	ldrb	r2, [r7, #14]
 8005f78:	79f9      	ldrb	r1, [r7, #7]
 8005f7a:	797b      	ldrb	r3, [r7, #5]
 8005f7c:	440b      	add	r3, r1
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	dbef      	blt.n	8005f62 <ssd1306_FillRect+0x2a>
    for (uint8_t i = y; i < y + h; i++) {
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	3301      	adds	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	7bfa      	ldrb	r2, [r7, #15]
 8005f8a:	79b9      	ldrb	r1, [r7, #6]
 8005f8c:	793b      	ldrb	r3, [r7, #4]
 8005f8e:	440b      	add	r3, r1
 8005f90:	429a      	cmp	r2, r3
 8005f92:	dbe3      	blt.n	8005f5c <ssd1306_FillRect+0x24>
        }
    }
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd90      	pop	{r4, r7, pc}
	...

08005fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005fd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8005fa4:	f7fd fff0 	bl	8003f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fa8:	480c      	ldr	r0, [pc, #48]	@ (8005fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005faa:	490d      	ldr	r1, [pc, #52]	@ (8005fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005fac:	4a0d      	ldr	r2, [pc, #52]	@ (8005fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fb0:	e002      	b.n	8005fb8 <LoopCopyDataInit>

08005fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fb6:	3304      	adds	r3, #4

08005fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fbc:	d3f9      	bcc.n	8005fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8005fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8005fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fc4:	e001      	b.n	8005fca <LoopFillZerobss>

08005fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fc8:	3204      	adds	r2, #4

08005fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fcc:	d3fb      	bcc.n	8005fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fce:	f01b fe1f 	bl	8021c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fd2:	f7fc fde9 	bl	8002ba8 <main>
  bx  lr
 8005fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005fd8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fe0:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8005fe4:	08030a60 	.word	0x08030a60
  ldr r2, =_sbss
 8005fe8:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8005fec:	2000c0a8 	.word	0x2000c0a8

08005ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ff0:	e7fe      	b.n	8005ff0 <ADC_IRQHandler>
	...

08005ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8006034 <HAL_Init+0x40>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8006034 <HAL_Init+0x40>)
 8005ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006004:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <HAL_Init+0x40>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a0a      	ldr	r2, [pc, #40]	@ (8006034 <HAL_Init+0x40>)
 800600a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800600e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006010:	4b08      	ldr	r3, [pc, #32]	@ (8006034 <HAL_Init+0x40>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a07      	ldr	r2, [pc, #28]	@ (8006034 <HAL_Init+0x40>)
 8006016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800601c:	2003      	movs	r0, #3
 800601e:	f000 fd23 	bl	8006a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006022:	200f      	movs	r0, #15
 8006024:	f000 f808 	bl	8006038 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006028:	f7fd fd64 	bl	8003af4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40023c00 	.word	0x40023c00

08006038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006040:	4b12      	ldr	r3, [pc, #72]	@ (800608c <HAL_InitTick+0x54>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b12      	ldr	r3, [pc, #72]	@ (8006090 <HAL_InitTick+0x58>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	4619      	mov	r1, r3
 800604a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800604e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006052:	fbb2 f3f3 	udiv	r3, r2, r3
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fd3b 	bl	8006ad2 <HAL_SYSTICK_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e00e      	b.n	8006084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b0f      	cmp	r3, #15
 800606a:	d80a      	bhi.n	8006082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800606c:	2200      	movs	r2, #0
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	f000 fd03 	bl	8006a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006078:	4a06      	ldr	r2, [pc, #24]	@ (8006094 <HAL_InitTick+0x5c>)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e000      	b.n	8006084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000070 	.word	0x20000070
 8006090:	200000c4 	.word	0x200000c4
 8006094:	200000c0 	.word	0x200000c0

08006098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_IncTick+0x1c>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <HAL_IncTick+0x20>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4413      	add	r3, r2
 80060a8:	4a03      	ldr	r2, [pc, #12]	@ (80060b8 <HAL_IncTick+0x20>)
 80060aa:	6013      	str	r3, [r2, #0]
}
 80060ac:	bf00      	nop
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr
 80060b4:	200000c4 	.word	0x200000c4
 80060b8:	20004f9c 	.word	0x20004f9c

080060bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return uwTick;
 80060c0:	4b02      	ldr	r3, [pc, #8]	@ (80060cc <HAL_GetTick+0x10>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr
 80060cc:	20004f9c 	.word	0x20004f9c

080060d0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060d8:	f7ff fff0 	bl	80060bc <HAL_GetTick>
 80060dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d005      	beq.n	80060f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006114 <HAL_Delay+0x44>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060f6:	bf00      	nop
 80060f8:	f7ff ffe0 	bl	80060bc <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	429a      	cmp	r2, r3
 8006106:	d8f7      	bhi.n	80060f8 <HAL_Delay+0x28>
  {
  }
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	200000c4 	.word	0x200000c4

08006118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e033      	b.n	8006196 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fd fd02 	bl	8003b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	2b00      	cmp	r3, #0
 8006154:	d118      	bne.n	8006188 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800615e:	f023 0302 	bic.w	r3, r3, #2
 8006162:	f043 0202 	orr.w	r2, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa28 	bl	80065c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	f043 0201 	orr.w	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	641a      	str	r2, [r3, #64]	@ 0x40
 8006186:	e001      	b.n	800618c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_ADC_Start_DMA+0x1e>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e0bc      	b.n	8006338 <HAL_ADC_Start_DMA+0x198>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d018      	beq.n	8006206 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80061e4:	4b56      	ldr	r3, [pc, #344]	@ (8006340 <HAL_ADC_Start_DMA+0x1a0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a56      	ldr	r2, [pc, #344]	@ (8006344 <HAL_ADC_Start_DMA+0x1a4>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	0c9a      	lsrs	r2, r3, #18
 80061f0:	4613      	mov	r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	4413      	add	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80061f8:	e002      	b.n	8006200 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f9      	bne.n	80061fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	f040 8084 	bne.w	800631e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006240:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006254:	d106      	bne.n	8006264 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625a:	f023 0206 	bic.w	r2, r3, #6
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	645a      	str	r2, [r3, #68]	@ 0x44
 8006262:	e002      	b.n	800626a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	4a34      	ldr	r2, [pc, #208]	@ (8006348 <HAL_ADC_Start_DMA+0x1a8>)
 8006278:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627e:	4a33      	ldr	r2, [pc, #204]	@ (800634c <HAL_ADC_Start_DMA+0x1ac>)
 8006280:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006286:	4a32      	ldr	r2, [pc, #200]	@ (8006350 <HAL_ADC_Start_DMA+0x1b0>)
 8006288:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006292:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80062a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	334c      	adds	r3, #76	@ 0x4c
 80062be:	4619      	mov	r1, r3
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f000 fcc0 	bl	8006c48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80062c8:	4b22      	ldr	r3, [pc, #136]	@ (8006354 <HAL_ADC_Start_DMA+0x1b4>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10f      	bne.n	80062f4 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d129      	bne.n	8006336 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	e020      	b.n	8006336 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a17      	ldr	r2, [pc, #92]	@ (8006358 <HAL_ADC_Start_DMA+0x1b8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d11b      	bne.n	8006336 <HAL_ADC_Start_DMA+0x196>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d114      	bne.n	8006336 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	e00b      	b.n	8006336 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	f043 0210 	orr.w	r2, r3, #16
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632e:	f043 0201 	orr.w	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000070 	.word	0x20000070
 8006344:	431bde83 	.word	0x431bde83
 8006348:	080067cd 	.word	0x080067cd
 800634c:	08006887 	.word	0x08006887
 8006350:	080068a3 	.word	0x080068a3
 8006354:	40012300 	.word	0x40012300
 8006358:	40012000 	.word	0x40012000

0800635c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_ADC_ConfigChannel+0x1c>
 8006398:	2302      	movs	r3, #2
 800639a:	e103      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x224>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	d925      	bls.n	80063f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68d9      	ldr	r1, [r3, #12]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	4613      	mov	r3, r2
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4413      	add	r3, r2
 80063c0:	3b1e      	subs	r3, #30
 80063c2:	2207      	movs	r2, #7
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	43da      	mvns	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	400a      	ands	r2, r1
 80063d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68d9      	ldr	r1, [r3, #12]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	4618      	mov	r0, r3
 80063e4:	4603      	mov	r3, r0
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4403      	add	r3, r0
 80063ea:	3b1e      	subs	r3, #30
 80063ec:	409a      	lsls	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	e022      	b.n	800643e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6919      	ldr	r1, [r3, #16]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	4613      	mov	r3, r2
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	4413      	add	r3, r2
 800640c:	2207      	movs	r2, #7
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43da      	mvns	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	400a      	ands	r2, r1
 800641a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6919      	ldr	r1, [r3, #16]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	4618      	mov	r0, r3
 800642e:	4603      	mov	r3, r0
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4403      	add	r3, r0
 8006434:	409a      	lsls	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b06      	cmp	r3, #6
 8006444:	d824      	bhi.n	8006490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	3b05      	subs	r3, #5
 8006458:	221f      	movs	r2, #31
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43da      	mvns	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	400a      	ands	r2, r1
 8006466:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	4618      	mov	r0, r3
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	3b05      	subs	r3, #5
 8006482:	fa00 f203 	lsl.w	r2, r0, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	635a      	str	r2, [r3, #52]	@ 0x34
 800648e:	e04c      	b.n	800652a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b0c      	cmp	r3, #12
 8006496:	d824      	bhi.n	80064e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	3b23      	subs	r3, #35	@ 0x23
 80064aa:	221f      	movs	r2, #31
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43da      	mvns	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	400a      	ands	r2, r1
 80064b8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	4618      	mov	r0, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	3b23      	subs	r3, #35	@ 0x23
 80064d4:	fa00 f203 	lsl.w	r2, r0, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	631a      	str	r2, [r3, #48]	@ 0x30
 80064e0:	e023      	b.n	800652a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	3b41      	subs	r3, #65	@ 0x41
 80064f4:	221f      	movs	r2, #31
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	43da      	mvns	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	400a      	ands	r2, r1
 8006502:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	4618      	mov	r0, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	3b41      	subs	r3, #65	@ 0x41
 800651e:	fa00 f203 	lsl.w	r2, r0, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a20      	ldr	r2, [pc, #128]	@ (80065b0 <HAL_ADC_ConfigChannel+0x230>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d109      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x1c8>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b12      	cmp	r3, #18
 800653a:	d105      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800653c:	4b1d      	ldr	r3, [pc, #116]	@ (80065b4 <HAL_ADC_ConfigChannel+0x234>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a1c      	ldr	r2, [pc, #112]	@ (80065b4 <HAL_ADC_ConfigChannel+0x234>)
 8006542:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006546:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a18      	ldr	r2, [pc, #96]	@ (80065b0 <HAL_ADC_ConfigChannel+0x230>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d123      	bne.n	800659a <HAL_ADC_ConfigChannel+0x21a>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b10      	cmp	r3, #16
 8006558:	d003      	beq.n	8006562 <HAL_ADC_ConfigChannel+0x1e2>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b11      	cmp	r3, #17
 8006560:	d11b      	bne.n	800659a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006562:	4b14      	ldr	r3, [pc, #80]	@ (80065b4 <HAL_ADC_ConfigChannel+0x234>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <HAL_ADC_ConfigChannel+0x234>)
 8006568:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800656c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b10      	cmp	r3, #16
 8006574:	d111      	bne.n	800659a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006576:	4b10      	ldr	r3, [pc, #64]	@ (80065b8 <HAL_ADC_ConfigChannel+0x238>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a10      	ldr	r2, [pc, #64]	@ (80065bc <HAL_ADC_ConfigChannel+0x23c>)
 800657c:	fba2 2303 	umull	r2, r3, r2, r3
 8006580:	0c9a      	lsrs	r2, r3, #18
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800658c:	e002      	b.n	8006594 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3b01      	subs	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f9      	bne.n	800658e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40012000 	.word	0x40012000
 80065b4:	40012300 	.word	0x40012300
 80065b8:	20000070 	.word	0x20000070
 80065bc:	431bde83 	.word	0x431bde83

080065c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80065c8:	4b7e      	ldr	r3, [pc, #504]	@ (80067c4 <ADC_Init+0x204>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	4a7d      	ldr	r2, [pc, #500]	@ (80067c4 <ADC_Init+0x204>)
 80065ce:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80065d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80065d4:	4b7b      	ldr	r3, [pc, #492]	@ (80067c4 <ADC_Init+0x204>)
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4979      	ldr	r1, [pc, #484]	@ (80067c4 <ADC_Init+0x204>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6859      	ldr	r1, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	021a      	lsls	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6859      	ldr	r1, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6899      	ldr	r1, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	4a5e      	ldr	r2, [pc, #376]	@ (80067c8 <ADC_Init+0x208>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	609a      	str	r2, [r3, #8]
 8006698:	e00f      	b.n	80066ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80066a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80066b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0202 	bic.w	r2, r2, #2
 80066c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6899      	ldr	r1, [r3, #8]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	7e1b      	ldrb	r3, [r3, #24]
 80066d4:	005a      	lsls	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d027      	beq.n	8006738 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	3b01      	subs	r3, #1
 800670e:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8006712:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	fa92 f2a2 	rbit	r2, r2
 800671a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	fab2 f282 	clz	r2, r2
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	fa03 f102 	lsl.w	r1, r3, r2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	e007      	b.n	8006748 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	3b01      	subs	r3, #1
 8006764:	051a      	lsls	r2, r3, #20
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800677c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6899      	ldr	r1, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800678a:	025a      	lsls	r2, r3, #9
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6899      	ldr	r1, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	029a      	lsls	r2, r3, #10
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40012300 	.word	0x40012300
 80067c8:	0f000001 	.word	0x0f000001

080067cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d13c      	bne.n	8006860 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d12b      	bne.n	8006858 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006804:	2b00      	cmp	r3, #0
 8006806:	d127      	bne.n	8006858 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006812:	2b00      	cmp	r3, #0
 8006814:	d006      	beq.n	8006824 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006820:	2b00      	cmp	r3, #0
 8006822:	d119      	bne.n	8006858 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0220 	bic.w	r2, r2, #32
 8006832:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006850:	f043 0201 	orr.w	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7fb fa7d 	bl	8001d58 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800685e:	e00e      	b.n	800687e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fd7e 	bl	800636e <HAL_ADC_ErrorCallback>
}
 8006872:	e004      	b.n	800687e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006892:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff fd61 	bl	800635c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2240      	movs	r2, #64	@ 0x40
 80068b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff fd53 	bl	800636e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <__NVIC_SetPriorityGrouping>:
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006914 <__NVIC_SetPriorityGrouping+0x44>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068ec:	4013      	ands	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80068fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006902:	4a04      	ldr	r2, [pc, #16]	@ (8006914 <__NVIC_SetPriorityGrouping+0x44>)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	60d3      	str	r3, [r2, #12]
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	e000ed00 	.word	0xe000ed00

08006918 <__NVIC_GetPriorityGrouping>:
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <__NVIC_GetPriorityGrouping+0x18>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	f003 0307 	and.w	r3, r3, #7
}
 8006926:	4618      	mov	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000ed00 	.word	0xe000ed00

08006934 <__NVIC_EnableIRQ>:
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800693e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006942:	2b00      	cmp	r3, #0
 8006944:	db0b      	blt.n	800695e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	f003 021f 	and.w	r2, r3, #31
 800694c:	4906      	ldr	r1, [pc, #24]	@ (8006968 <__NVIC_EnableIRQ+0x34>)
 800694e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	2001      	movs	r0, #1
 8006956:	fa00 f202 	lsl.w	r2, r0, r2
 800695a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	e000e100 	.word	0xe000e100

0800696c <__NVIC_SetPriority>:
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697c:	2b00      	cmp	r3, #0
 800697e:	db0a      	blt.n	8006996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	490c      	ldr	r1, [pc, #48]	@ (80069b8 <__NVIC_SetPriority+0x4c>)
 8006986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698a:	0112      	lsls	r2, r2, #4
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	440b      	add	r3, r1
 8006990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006994:	e00a      	b.n	80069ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	4908      	ldr	r1, [pc, #32]	@ (80069bc <__NVIC_SetPriority+0x50>)
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	3b04      	subs	r3, #4
 80069a4:	0112      	lsls	r2, r2, #4
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	440b      	add	r3, r1
 80069aa:	761a      	strb	r2, [r3, #24]
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	e000e100 	.word	0xe000e100
 80069bc:	e000ed00 	.word	0xe000ed00

080069c0 <NVIC_EncodePriority>:
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	@ 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f1c3 0307 	rsb	r3, r3, #7
 80069da:	2b04      	cmp	r3, #4
 80069dc:	bf28      	it	cs
 80069de:	2304      	movcs	r3, #4
 80069e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	3304      	adds	r3, #4
 80069e6:	2b06      	cmp	r3, #6
 80069e8:	d902      	bls.n	80069f0 <NVIC_EncodePriority+0x30>
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3b03      	subs	r3, #3
 80069ee:	e000      	b.n	80069f2 <NVIC_EncodePriority+0x32>
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069f4:	f04f 32ff 	mov.w	r2, #4294967295
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43da      	mvns	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	401a      	ands	r2, r3
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a08:	f04f 31ff 	mov.w	r1, #4294967295
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a12:	43d9      	mvns	r1, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a18:	4313      	orrs	r3, r2
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3724      	adds	r7, #36	@ 0x24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a34:	d301      	bcc.n	8006a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a36:	2301      	movs	r3, #1
 8006a38:	e00f      	b.n	8006a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a64 <SysTick_Config+0x40>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a42:	210f      	movs	r1, #15
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	f7ff ff90 	bl	800696c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a4c:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <SysTick_Config+0x40>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a52:	4b04      	ldr	r3, [pc, #16]	@ (8006a64 <SysTick_Config+0x40>)
 8006a54:	2207      	movs	r2, #7
 8006a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	e000e010 	.word	0xe000e010

08006a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff2d 	bl	80068d0 <__NVIC_SetPriorityGrouping>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b086      	sub	sp, #24
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	4603      	mov	r3, r0
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a90:	f7ff ff42 	bl	8006918 <__NVIC_GetPriorityGrouping>
 8006a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	f7ff ff90 	bl	80069c0 <NVIC_EncodePriority>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff ff5f 	bl	800696c <__NVIC_SetPriority>
}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	4603      	mov	r3, r0
 8006abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff ff35 	bl	8006934 <__NVIC_EnableIRQ>
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ffa2 	bl	8006a24 <SysTick_Config>
 8006ae0:	4603      	mov	r3, r0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006af8:	f7ff fae0 	bl	80060bc <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e099      	b.n	8006c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0201 	bic.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b28:	e00f      	b.n	8006b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b2a:	f7ff fac7 	bl	80060bc <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d908      	bls.n	8006b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2203      	movs	r2, #3
 8006b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e078      	b.n	8006c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e8      	bne.n	8006b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4b38      	ldr	r3, [pc, #224]	@ (8006c44 <HAL_DMA_Init+0x158>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d107      	bne.n	8006bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bac:	4313      	orrs	r3, r2
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0307 	bic.w	r3, r3, #7
 8006bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d117      	bne.n	8006c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fa6d 	bl	80070d0 <DMA_CheckFifoParam>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2240      	movs	r2, #64	@ 0x40
 8006c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e016      	b.n	8006c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa26 	bl	8007068 <DMA_CalcBaseAndBitshift>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c24:	223f      	movs	r2, #63	@ 0x3f
 8006c26:	409a      	lsls	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	f010803f 	.word	0xf010803f

08006c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_DMA_Start_IT+0x26>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e040      	b.n	8006cf0 <HAL_DMA_Start_IT+0xa8>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d12f      	bne.n	8006ce2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f9b8 	bl	800700c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca0:	223f      	movs	r2, #63	@ 0x3f
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0216 	orr.w	r2, r2, #22
 8006cb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	e005      	b.n	8006cee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
 8006cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d04:	4b8e      	ldr	r3, [pc, #568]	@ (8006f40 <HAL_DMA_IRQHandler+0x248>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a8e      	ldr	r2, [pc, #568]	@ (8006f44 <HAL_DMA_IRQHandler+0x24c>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	0a9b      	lsrs	r3, r3, #10
 8006d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d22:	2208      	movs	r2, #8
 8006d24:	409a      	lsls	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01a      	beq.n	8006d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d013      	beq.n	8006d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0204 	bic.w	r2, r2, #4
 8006d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d50:	2208      	movs	r2, #8
 8006d52:	409a      	lsls	r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d012      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d86:	2201      	movs	r2, #1
 8006d88:	409a      	lsls	r2, r3
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	f043 0202 	orr.w	r2, r3, #2
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9e:	2204      	movs	r2, #4
 8006da0:	409a      	lsls	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4013      	ands	r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d012      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc8:	f043 0204 	orr.w	r2, r3, #4
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d043      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d03c      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df2:	2210      	movs	r2, #16
 8006df4:	409a      	lsls	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d018      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d108      	bne.n	8006e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d024      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
 8006e26:	e01f      	b.n	8006e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01b      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
 8006e38:	e016      	b.n	8006e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d107      	bne.n	8006e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0208 	bic.w	r2, r2, #8
 8006e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 808f 	beq.w	8006f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 8087 	beq.w	8006f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e8e:	2220      	movs	r2, #32
 8006e90:	409a      	lsls	r2, r3
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d136      	bne.n	8006f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0216 	bic.w	r2, r2, #22
 8006eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_DMA_IRQHandler+0x1da>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0208 	bic.w	r2, r2, #8
 8006ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee6:	223f      	movs	r2, #63	@ 0x3f
 8006ee8:	409a      	lsls	r2, r3
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d07e      	beq.n	8007004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
        }
        return;
 8006f0e:	e079      	b.n	8007004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01d      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10d      	bne.n	8006f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d031      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
 8006f3c:	e02c      	b.n	8006f98 <HAL_DMA_IRQHandler+0x2a0>
 8006f3e:	bf00      	nop
 8006f40:	20000070 	.word	0x20000070
 8006f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d023      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	e01e      	b.n	8006f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10f      	bne.n	8006f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0210 	bic.w	r2, r2, #16
 8006f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d032      	beq.n	8007006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d022      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2205      	movs	r2, #5
 8006fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d307      	bcc.n	8006fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1f2      	bne.n	8006fc4 <HAL_DMA_IRQHandler+0x2cc>
 8006fde:	e000      	b.n	8006fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	e000      	b.n	8007006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007004:	bf00      	nop
    }
  }
}
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b40      	cmp	r3, #64	@ 0x40
 8007038:	d108      	bne.n	800704c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800704a:	e007      	b.n	800705c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]
}
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
	...

08007068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	3b10      	subs	r3, #16
 8007078:	4a13      	ldr	r2, [pc, #76]	@ (80070c8 <DMA_CalcBaseAndBitshift+0x60>)
 800707a:	fba2 2303 	umull	r2, r3, r2, r3
 800707e:	091b      	lsrs	r3, r3, #4
 8007080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007082:	4a12      	ldr	r2, [pc, #72]	@ (80070cc <DMA_CalcBaseAndBitshift+0x64>)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b03      	cmp	r3, #3
 8007094:	d909      	bls.n	80070aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	1d1a      	adds	r2, r3, #4
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80070a8:	e007      	b.n	80070ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80070b2:	f023 0303 	bic.w	r3, r3, #3
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr
 80070c8:	aaaaaaab 	.word	0xaaaaaaab
 80070cc:	0802894c 	.word	0x0802894c

080070d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d11f      	bne.n	800712a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d856      	bhi.n	800719e <DMA_CheckFifoParam+0xce>
 80070f0:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <DMA_CheckFifoParam+0x28>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	08007109 	.word	0x08007109
 80070fc:	0800711b 	.word	0x0800711b
 8007100:	08007109 	.word	0x08007109
 8007104:	0800719f 	.word	0x0800719f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d046      	beq.n	80071a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007118:	e043      	b.n	80071a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007122:	d140      	bne.n	80071a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007128:	e03d      	b.n	80071a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007132:	d121      	bne.n	8007178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b03      	cmp	r3, #3
 8007138:	d837      	bhi.n	80071aa <DMA_CheckFifoParam+0xda>
 800713a:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <DMA_CheckFifoParam+0x70>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007151 	.word	0x08007151
 8007144:	08007157 	.word	0x08007157
 8007148:	08007151 	.word	0x08007151
 800714c:	08007169 	.word	0x08007169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]
      break;
 8007154:	e030      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d025      	beq.n	80071ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007166:	e022      	b.n	80071ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007170:	d11f      	bne.n	80071b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007176:	e01c      	b.n	80071b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d903      	bls.n	8007186 <DMA_CheckFifoParam+0xb6>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d003      	beq.n	800718c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007184:	e018      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
      break;
 800718a:	e015      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00e      	beq.n	80071b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
      break;
 800719c:	e00b      	b.n	80071b6 <DMA_CheckFifoParam+0xe6>
      break;
 800719e:	bf00      	nop
 80071a0:	e00a      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      break;
 80071a2:	bf00      	nop
 80071a4:	e008      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      break;
 80071a6:	bf00      	nop
 80071a8:	e006      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      break;
 80071aa:	bf00      	nop
 80071ac:	e004      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      break;
 80071ae:	bf00      	nop
 80071b0:	e002      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80071b2:	bf00      	nop
 80071b4:	e000      	b.n	80071b8 <DMA_CheckFifoParam+0xe8>
      break;
 80071b6:	bf00      	nop
    }
  } 
  
  return status; 
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr

080071c4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80071d4:	4ba3      	ldr	r3, [pc, #652]	@ (8007464 <HAL_ETH_Init+0x2a0>)
 80071d6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e173      	b.n	80074d2 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f003 ff14 	bl	800b02c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007204:	2300      	movs	r3, #0
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	4b97      	ldr	r3, [pc, #604]	@ (8007468 <HAL_ETH_Init+0x2a4>)
 800720a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720c:	4a96      	ldr	r2, [pc, #600]	@ (8007468 <HAL_ETH_Init+0x2a4>)
 800720e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007212:	6453      	str	r3, [r2, #68]	@ 0x44
 8007214:	4b94      	ldr	r3, [pc, #592]	@ (8007468 <HAL_ETH_Init+0x2a4>)
 8007216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007220:	4b92      	ldr	r3, [pc, #584]	@ (800746c <HAL_ETH_Init+0x2a8>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	4a91      	ldr	r2, [pc, #580]	@ (800746c <HAL_ETH_Init+0x2a8>)
 8007226:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800722a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800722c:	4b8f      	ldr	r3, [pc, #572]	@ (800746c <HAL_ETH_Init+0x2a8>)
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	498d      	ldr	r1, [pc, #564]	@ (800746c <HAL_ETH_Init+0x2a8>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007250:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007252:	f7fe ff33 	bl	80060bc <HAL_GetTick>
 8007256:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007258:	e011      	b.n	800727e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800725a:	f7fe ff2f 	bl	80060bc <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007268:	d909      	bls.n	800727e <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2203      	movs	r2, #3
 800726e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e129      	b.n	80074d2 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e4      	bne.n	800725a <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f023 031c 	bic.w	r3, r3, #28
 800729e:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80072a0:	f002 fdfe 	bl	8009ea0 <HAL_RCC_GetHCLKFreq>
 80072a4:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	4a71      	ldr	r2, [pc, #452]	@ (8007470 <HAL_ETH_Init+0x2ac>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d908      	bls.n	80072c0 <HAL_ETH_Init+0xfc>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	4a70      	ldr	r2, [pc, #448]	@ (8007474 <HAL_ETH_Init+0x2b0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d804      	bhi.n	80072c0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f043 0308 	orr.w	r3, r3, #8
 80072bc:	61fb      	str	r3, [r7, #28]
 80072be:	e01a      	b.n	80072f6 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	4a6c      	ldr	r2, [pc, #432]	@ (8007474 <HAL_ETH_Init+0x2b0>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d908      	bls.n	80072da <HAL_ETH_Init+0x116>
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	4a66      	ldr	r2, [pc, #408]	@ (8007464 <HAL_ETH_Init+0x2a0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d204      	bcs.n	80072da <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f043 030c 	orr.w	r3, r3, #12
 80072d6:	61fb      	str	r3, [r7, #28]
 80072d8:	e00d      	b.n	80072f6 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	4a61      	ldr	r2, [pc, #388]	@ (8007464 <HAL_ETH_Init+0x2a0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d303      	bcc.n	80072ea <HAL_ETH_Init+0x126>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	4a64      	ldr	r2, [pc, #400]	@ (8007478 <HAL_ETH_Init+0x2b4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d904      	bls.n	80072f4 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f043 0304 	orr.w	r3, r3, #4
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	e000      	b.n	80072f6 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80072f4:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80072fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007302:	2100      	movs	r1, #0
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fb8e 	bl	8007a26 <HAL_ETH_WritePHYRegister>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8007314:	6939      	ldr	r1, [r7, #16]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fd44 	bl	8007da4 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e0d4      	b.n	80074d2 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8007328:	20ff      	movs	r0, #255	@ 0xff
 800732a:	f7fe fed1 	bl	80060d0 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80a2 	beq.w	800747c <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007338:	f7fe fec0 	bl	80060bc <HAL_GetTick>
 800733c:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	461a      	mov	r2, r3
 8007344:	2101      	movs	r1, #1
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb05 	bl	8007956 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800734c:	f7fe feb6 	bl	80060bc <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800735a:	4293      	cmp	r3, r2
 800735c:	d90f      	bls.n	800737e <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007362:	6939      	ldr	r1, [r7, #16]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fd1d 	bl	8007da4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e0a9      	b.n	80074d2 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0da      	beq.n	800733e <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007388:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800738c:	2100      	movs	r1, #0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb49 	bl	8007a26 <HAL_ETH_WritePHYRegister>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800739e:	6939      	ldr	r1, [r7, #16]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fcff 	bl	8007da4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e08f      	b.n	80074d2 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80073b2:	f7fe fe83 	bl	80060bc <HAL_GetTick>
 80073b6:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	461a      	mov	r2, r3
 80073be:	2101      	movs	r1, #1
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fac8 	bl	8007956 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80073c6:	f7fe fe79 	bl	80060bc <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d90f      	bls.n	80073f8 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80073dc:	6939      	ldr	r1, [r7, #16]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fce0 	bl	8007da4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e06c      	b.n	80074d2 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0da      	beq.n	80073b8 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8007402:	f107 030c 	add.w	r3, r7, #12
 8007406:	461a      	mov	r2, r3
 8007408:	2110      	movs	r1, #16
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 faa3 	bl	8007956 <HAL_ETH_ReadPHYRegister>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00b      	beq.n	800742e <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800741a:	6939      	ldr	r1, [r7, #16]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fcc1 	bl	8007da4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e051      	b.n	80074d2 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	e002      	b.n	8007448 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	609a      	str	r2, [r3, #8]
 8007458:	e032      	b.n	80074c0 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007460:	609a      	str	r2, [r3, #8]
 8007462:	e02d      	b.n	80074c0 <HAL_ETH_Init+0x2fc>
 8007464:	03938700 	.word	0x03938700
 8007468:	40023800 	.word	0x40023800
 800746c:	40013800 	.word	0x40013800
 8007470:	01312cff 	.word	0x01312cff
 8007474:	02160ebf 	.word	0x02160ebf
 8007478:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	08db      	lsrs	r3, r3, #3
 8007482:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800748c:	4313      	orrs	r3, r2
 800748e:	b29b      	uxth	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	2100      	movs	r1, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fac6 	bl	8007a26 <HAL_ETH_WritePHYRegister>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80074a4:	6939      	ldr	r1, [r7, #16]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc7c 	bl	8007da4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e00c      	b.n	80074d2 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80074b8:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80074bc:	f7fe fe08 	bl	80060d0 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80074c0:	6939      	ldr	r1, [r7, #16]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fc6e 	bl	8007da4 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop

080074dc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_ETH_DMATxDescListInit+0x20>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e051      	b.n	80075a0 <HAL_ETH_DMATxDescListInit+0xc4>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	e030      	b.n	800757a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	015b      	lsls	r3, r3, #5
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	4413      	add	r3, r2
 8007520:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007528:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007530:	fb02 f303 	mul.w	r3, r2, r3
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4413      	add	r3, r2
 8007538:	461a      	mov	r2, r3
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	3b01      	subs	r3, #1
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	429a      	cmp	r2, r3
 800755a:	d208      	bcs.n	800756e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	3301      	adds	r3, #1
 8007560:	015b      	lsls	r3, r3, #5
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	4413      	add	r3, r2
 8007566:	461a      	mov	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	60da      	str	r2, [r3, #12]
 800756c:	e002      	b.n	8007574 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	3301      	adds	r3, #1
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d3ca      	bcc.n	8007518 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800758c:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr

080075aa <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b087      	sub	sp, #28
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_ETH_DMARxDescListInit+0x20>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e055      	b.n	8007676 <HAL_ETH_DMARxDescListInit+0xcc>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e034      	b.n	8007650 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	015b      	lsls	r3, r3, #5
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80075f6:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80075fe:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	461a      	mov	r2, r3
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d105      	bne.n	8007628 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	3b01      	subs	r3, #1
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	429a      	cmp	r2, r3
 8007630:	d208      	bcs.n	8007644 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3301      	adds	r3, #1
 8007636:	015b      	lsls	r3, r3, #5
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	4413      	add	r3, r2
 800763c:	461a      	mov	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	60da      	str	r2, [r3, #12]
 8007642:	e002      	b.n	800764a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	3301      	adds	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d3c6      	bcc.n	80075e6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007662:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_ETH_TransmitFrame+0x24>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e0cc      	b.n	800783e <HAL_ETH_TransmitFrame+0x1be>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e0b7      	b.n	800783e <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	da09      	bge.n	80076ec <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2212      	movs	r2, #18
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0a8      	b.n	800783e <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d915      	bls.n	8007722 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	4a53      	ldr	r2, [pc, #332]	@ (8007848 <HAL_ETH_TransmitFrame+0x1c8>)
 80076fa:	fba2 2303 	umull	r2, r3, r2, r3
 80076fe:	0a9b      	lsrs	r3, r3, #10
 8007700:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	4b50      	ldr	r3, [pc, #320]	@ (8007848 <HAL_ETH_TransmitFrame+0x1c8>)
 8007706:	fba3 1302 	umull	r1, r3, r3, r2
 800770a:	0a9b      	lsrs	r3, r3, #10
 800770c:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d005      	beq.n	8007726 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	3301      	adds	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e001      	b.n	8007726 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8007722:	2301      	movs	r3, #1
 8007724:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d11c      	bne.n	8007766 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800773a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007746:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007756:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007764:	e04b      	b.n	80077fe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	e044      	b.n	80077f6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800777a:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d107      	bne.n	8007792 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007790:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800779a:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	3b01      	subs	r3, #1
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d116      	bne.n	80077d4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80077b4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	4a24      	ldr	r2, [pc, #144]	@ (800784c <HAL_ETH_TransmitFrame+0x1cc>)
 80077ba:	fb03 f202 	mul.w	r2, r3, r2
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80077c6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80077d2:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80077e2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	3301      	adds	r3, #1
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d3b6      	bcc.n	800776c <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00d      	beq.n	800782c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007818:	461a      	mov	r2, r3
 800781a:	2304      	movs	r3, #4
 800781c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007826:	461a      	mov	r2, r3
 8007828:	2300      	movs	r3, #0
 800782a:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr
 8007848:	ac02b00b 	.word	0xac02b00b
 800784c:	fffffa0c 	.word	0xfffffa0c

08007850 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <HAL_ETH_GetReceivedFrame+0x1a>
 8007866:	2302      	movs	r3, #2
 8007868:	e070      	b.n	800794c <HAL_ETH_GetReceivedFrame+0xfc>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db5a      	blt.n	800793a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800788e:	2b00      	cmp	r3, #0
 8007890:	d030      	beq.n	80078f4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d103      	bne.n	80078ac <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80078c0:	3b04      	subs	r3, #4
 80078c2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e02b      	b.n	800794c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d010      	beq.n	8007924 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	461a      	mov	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	629a      	str	r2, [r3, #40]	@ 0x28
 8007922:	e00a      	b.n	800793a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr

08007956 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	460b      	mov	r3, r1
 8007960:	607a      	str	r2, [r7, #4]
 8007962:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b82      	cmp	r3, #130	@ 0x82
 8007976:	d101      	bne.n	800797c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8007978:	2302      	movs	r3, #2
 800797a:	e050      	b.n	8007a1e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2282      	movs	r2, #130	@ 0x82
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f003 031c 	and.w	r3, r3, #28
 8007992:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8a1b      	ldrh	r3, [r3, #16]
 8007998:	02db      	lsls	r3, r3, #11
 800799a:	b29b      	uxth	r3, r3
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80079a2:	897b      	ldrh	r3, [r7, #10]
 80079a4:	019b      	lsls	r3, r3, #6
 80079a6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f023 0302 	bic.w	r3, r3, #2
 80079b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079c8:	f7fe fb78 	bl	80060bc <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80079ce:	e015      	b.n	80079fc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80079d0:	f7fe fb74 	bl	80060bc <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079de:	d309      	bcc.n	80079f4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e014      	b.n	8007a1e <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e4      	bne.n	80079d0 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b42      	cmp	r3, #66	@ 0x42
 8007a46:	d101      	bne.n	8007a4c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e04e      	b.n	8007aea <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2242      	movs	r2, #66	@ 0x42
 8007a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f003 031c 	and.w	r3, r3, #28
 8007a62:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8a1b      	ldrh	r3, [r3, #16]
 8007a68:	02db      	lsls	r3, r3, #11
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8007a72:	897b      	ldrh	r3, [r7, #10]
 8007a74:	019b      	lsls	r3, r3, #6
 8007a76:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f043 0302 	orr.w	r3, r3, #2
 8007a86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aa2:	f7fe fb0b 	bl	80060bc <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007aa8:	e015      	b.n	8007ad6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8007aaa:	f7fe fb07 	bl	80060bc <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ab8:	d309      	bcc.n	8007ace <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e00d      	b.n	8007aea <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e4      	bne.n	8007aaa <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_ETH_Start+0x16>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e01f      	b.n	8007b48 <HAL_ETH_Start+0x56>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb3f 	bl	800819c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fb76 	bl	8008210 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc01 	bl	800832c <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fbaa 	bl	8008284 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fbd1 	bl	80082d8 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_ETH_Stop+0x16>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e01f      	b.n	8007ba6 <HAL_ETH_Stop+0x56>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2202      	movs	r2, #2
 8007b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fb99 	bl	80082ae <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fbc0 	bl	8008302 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fb61 	bl	800824a <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbcf 	bl	800832c <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fb21 	bl	80081d6 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_ETH_ConfigMAC+0x1c>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e0e4      	b.n	8007d96 <HAL_ETH_ConfigMAC+0x1e6>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80b1 	beq.w	8007d46 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4b6c      	ldr	r3, [pc, #432]	@ (8007da0 <HAL_ETH_ConfigMAC+0x1f0>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8007bfc:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8007c02:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8007c08:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8007c0e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8007c14:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8007c1a:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8007c20:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8007c26:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8007c2c:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8007c32:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8007c38:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8007c3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c56:	2001      	movs	r0, #1
 8007c58:	f7fe fa3a 	bl	80060d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007c6c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8007c72:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8007c78:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 8007c7e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8007c84:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8007c8a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8007c96:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007c98:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f7fe fa14 	bl	80060d0 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007cb8:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007cc2:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cda:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007ce0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8007ce6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8007cec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 8007cf2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8007cf8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d10:	2001      	movs	r0, #1
 8007d12:	f7fe f9dd 	bl	80060d0 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d36:	2001      	movs	r0, #1
 8007d38:	f7fe f9ca 	bl	80060d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	61da      	str	r2, [r3, #28]
 8007d44:	e01e      	b.n	8007d84 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8007d54:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d76:	2001      	movs	r0, #1
 8007d78:	f7fe f9aa 	bl	80060d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	ff20810f 	.word	0xff20810f

08007da4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b0b0      	sub	sp, #192	@ 0xc0
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d007      	beq.n	8007dca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dc0:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007dc8:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8007dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dee:	663b      	str	r3, [r7, #96]	@ 0x60
 8007df0:	e001      	b.n	8007df6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8007df6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dfa:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007e00:	2300      	movs	r3, #0
 8007e02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8007e10:	2340      	movs	r3, #64	@ 0x40
 8007e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8007e44:	2380      	movs	r3, #128	@ 0x80
 8007e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8007e62:	2300      	movs	r3, #0
 8007e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007e78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007e7c:	4baa      	ldr	r3, [pc, #680]	@ (8008128 <ETH_MACDMAConfig+0x384>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8007e84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8007e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8007e88:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8007e8c:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8007e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8007e90:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8007e96:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8007e98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8007e9a:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8007e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8007e9e:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8007ea4:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8007ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8007ea8:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8007eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8007eac:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8007eae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8007eb0:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8007eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8007eb4:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8007eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8007eb8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8007eba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f7fe f8f9 	bl	80060d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007ee6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8007ee8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8007eea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8007eec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8007eee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8007ef0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8007ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8007ef6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8007ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8007efc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8007efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8007f02:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8007f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8007f08:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8007f0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8007f14:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8007f16:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f22:	2001      	movs	r0, #1
 8007f24:	f7fe f8d4 	bl	80060d0 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007f30:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f3a:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007f44:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007f54:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007f58:	4013      	ands	r3, r2
 8007f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8007f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f62:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8007f64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8007f68:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8007f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8007f6e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8007f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8007f74:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8007f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8007f7a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8007f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8007f80:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8007f82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007f94:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	f7fe f895 	bl	80060d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007fae:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8007fb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8007fb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007fca:	2001      	movs	r0, #1
 8007fcc:	f7fe f880 	bl	80060d0 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007fd8:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8007fde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007fe2:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8007fe8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007fec:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8007ffe:	2304      	movs	r3, #4
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8008002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8008008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800800c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800800e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008018:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800801a:	2380      	movs	r3, #128	@ 0x80
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800801e:	2300      	movs	r3, #0
 8008020:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008022:	2300      	movs	r3, #0
 8008024:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8008034:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008038:	4b3c      	ldr	r3, [pc, #240]	@ (800812c <ETH_MACDMAConfig+0x388>)
 800803a:	4013      	ands	r3, r2
 800803c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008040:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8008042:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008044:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8008046:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8008048:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 800804a:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 800804c:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 800804e:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8008050:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8008052:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8008054:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8008056:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8008058:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 800805c:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 800805e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 8008060:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008062:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008074:	461a      	mov	r2, r3
 8008076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800807a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800808a:	2001      	movs	r0, #1
 800808c:	f7fe f820 	bl	80060d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008098:	461a      	mov	r2, r3
 800809a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800809e:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80080a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80080a4:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80080a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 80080a8:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80080ac:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80080ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 80080b0:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80080b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080b4:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80080b6:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80080b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80080ba:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80080c8:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80080d8:	2001      	movs	r0, #1
 80080da:	f7fd fff9 	bl	80060d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80080ec:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d10d      	bne.n	8008112 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008110:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	461a      	mov	r2, r3
 8008118:	2100      	movs	r1, #0
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f808 	bl	8008130 <ETH_MACAddressConfig>
}
 8008120:	bf00      	nop
 8008122:	37c0      	adds	r7, #192	@ 0xc0
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	ff20810f 	.word	0xff20810f
 800812c:	f8de3f23 	.word	0xf8de3f23

08008130 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3305      	adds	r3, #5
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	021b      	lsls	r3, r3, #8
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	3204      	adds	r2, #4
 8008148:	7812      	ldrb	r2, [r2, #0]
 800814a:	4313      	orrs	r3, r2
 800814c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	4b10      	ldr	r3, [pc, #64]	@ (8008194 <ETH_MACAddressConfig+0x64>)
 8008152:	4413      	add	r3, r2
 8008154:	461a      	mov	r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3303      	adds	r3, #3
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	061a      	lsls	r2, r3, #24
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3302      	adds	r3, #2
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3301      	adds	r3, #1
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	4313      	orrs	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <ETH_MACAddressConfig+0x68>)
 8008182:	4413      	add	r3, r2
 8008184:	461a      	mov	r2, r3
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	6013      	str	r3, [r2, #0]
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr
 8008194:	40028040 	.word	0x40028040
 8008198:	40028044 	.word	0x40028044

0800819c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0208 	orr.w	r2, r2, #8
 80081b6:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80081c0:	2001      	movs	r0, #1
 80081c2:	f000 f8d9 	bl	8008378 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	601a      	str	r2, [r3, #0]
}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0208 	bic.w	r2, r2, #8
 80081f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80081fa:	2001      	movs	r0, #1
 80081fc:	f000 f8bc 	bl	8008378 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	601a      	str	r2, [r3, #0]
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0204 	orr.w	r2, r2, #4
 800822a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008234:	2001      	movs	r0, #1
 8008236:	f000 f89f 	bl	8008378 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	601a      	str	r2, [r3, #0]
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0204 	bic.w	r2, r2, #4
 8008264:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800826e:	2001      	movs	r0, #1
 8008270:	f000 f882 	bl	8008378 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	601a      	str	r2, [r3, #0]
}
 800827c:	bf00      	nop
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800829e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082a2:	6193      	str	r3, [r2, #24]
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr

080082ae <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082cc:	6193      	str	r3, [r2, #24]
}
 80082ce:	bf00      	nop
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr

080082d8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	f043 0302 	orr.w	r3, r3, #2
 80082f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082f6:	6193      	str	r3, [r2, #24]
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr

08008302 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	f023 0302 	bic.w	r3, r3, #2
 800831c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008320:	6193      	str	r3, [r2, #24]
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6812      	ldr	r2, [r2, #0]
 8008346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800834a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800834e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800835c:	2001      	movs	r0, #1
 800835e:	f000 f80b 	bl	8008378 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800836c:	6193      	str	r3, [r2, #24]
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008380:	4b0a      	ldr	r3, [pc, #40]	@ (80083ac <ETH_Delay+0x34>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a0a      	ldr	r2, [pc, #40]	@ (80083b0 <ETH_Delay+0x38>)
 8008386:	fba2 2303 	umull	r2, r3, r2, r3
 800838a:	0a5b      	lsrs	r3, r3, #9
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	fb02 f303 	mul.w	r3, r2, r3
 8008392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008394:	bf00      	nop
  }
  while (Delay --);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1e5a      	subs	r2, r3, #1
 800839a:	60fa      	str	r2, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f9      	bne.n	8008394 <ETH_Delay+0x1c>
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	20000070 	.word	0x20000070
 80083b0:	10624dd3 	.word	0x10624dd3

080083b4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80083c6:	4b23      	ldr	r3, [pc, #140]	@ (8008454 <HAL_FLASH_Program+0xa0>)
 80083c8:	7e1b      	ldrb	r3, [r3, #24]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_FLASH_Program+0x1e>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e03b      	b.n	800844a <HAL_FLASH_Program+0x96>
 80083d2:	4b20      	ldr	r3, [pc, #128]	@ (8008454 <HAL_FLASH_Program+0xa0>)
 80083d4:	2201      	movs	r2, #1
 80083d6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80083d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80083dc:	f000 f870 	bl	80084c0 <FLASH_WaitForLastOperation>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d12b      	bne.n	8008442 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d105      	bne.n	80083fc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80083f0:	783b      	ldrb	r3, [r7, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68b8      	ldr	r0, [r7, #8]
 80083f6:	f000 f919 	bl	800862c <FLASH_Program_Byte>
 80083fa:	e016      	b.n	800842a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d105      	bne.n	800840e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008402:	883b      	ldrh	r3, [r7, #0]
 8008404:	4619      	mov	r1, r3
 8008406:	68b8      	ldr	r0, [r7, #8]
 8008408:	f000 f8ee 	bl	80085e8 <FLASH_Program_HalfWord>
 800840c:	e00d      	b.n	800842a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d105      	bne.n	8008420 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	4619      	mov	r1, r3
 8008418:	68b8      	ldr	r0, [r7, #8]
 800841a:	f000 f8c3 	bl	80085a4 <FLASH_Program_Word>
 800841e:	e004      	b.n	800842a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008424:	68b8      	ldr	r0, [r7, #8]
 8008426:	f000 f88b 	bl	8008540 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800842a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800842e:	f000 f847 	bl	80084c0 <FLASH_WaitForLastOperation>
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8008436:	4b08      	ldr	r3, [pc, #32]	@ (8008458 <HAL_FLASH_Program+0xa4>)
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	4a07      	ldr	r2, [pc, #28]	@ (8008458 <HAL_FLASH_Program+0xa4>)
 800843c:	f023 0301 	bic.w	r3, r3, #1
 8008440:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008442:	4b04      	ldr	r3, [pc, #16]	@ (8008454 <HAL_FLASH_Program+0xa0>)
 8008444:	2200      	movs	r2, #0
 8008446:	761a      	strb	r2, [r3, #24]
  
  return status;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20004fa0 	.word	0x20004fa0
 8008458:	40023c00 	.word	0x40023c00

0800845c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008466:	4b0b      	ldr	r3, [pc, #44]	@ (8008494 <HAL_FLASH_Unlock+0x38>)
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	da0b      	bge.n	8008486 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800846e:	4b09      	ldr	r3, [pc, #36]	@ (8008494 <HAL_FLASH_Unlock+0x38>)
 8008470:	4a09      	ldr	r2, [pc, #36]	@ (8008498 <HAL_FLASH_Unlock+0x3c>)
 8008472:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008474:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <HAL_FLASH_Unlock+0x38>)
 8008476:	4a09      	ldr	r2, [pc, #36]	@ (800849c <HAL_FLASH_Unlock+0x40>)
 8008478:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800847a:	4b06      	ldr	r3, [pc, #24]	@ (8008494 <HAL_FLASH_Unlock+0x38>)
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	da01      	bge.n	8008486 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008486:	79fb      	ldrb	r3, [r7, #7]
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40023c00 	.word	0x40023c00
 8008498:	45670123 	.word	0x45670123
 800849c:	cdef89ab 	.word	0xcdef89ab

080084a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80084a4:	4b05      	ldr	r3, [pc, #20]	@ (80084bc <HAL_FLASH_Lock+0x1c>)
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	4a04      	ldr	r2, [pc, #16]	@ (80084bc <HAL_FLASH_Lock+0x1c>)
 80084aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084ae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40023c00 	.word	0x40023c00

080084c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80084cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008538 <FLASH_WaitForLastOperation+0x78>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80084d2:	f7fd fdf3 	bl	80060bc <HAL_GetTick>
 80084d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80084d8:	e010      	b.n	80084fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e0:	d00c      	beq.n	80084fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <FLASH_WaitForLastOperation+0x38>
 80084e8:	f7fd fde8 	bl	80060bc <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d201      	bcs.n	80084fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e019      	b.n	8008530 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80084fc:	4b0f      	ldr	r3, [pc, #60]	@ (800853c <FLASH_WaitForLastOperation+0x7c>)
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e8      	bne.n	80084da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008508:	4b0c      	ldr	r3, [pc, #48]	@ (800853c <FLASH_WaitForLastOperation+0x7c>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008514:	4b09      	ldr	r3, [pc, #36]	@ (800853c <FLASH_WaitForLastOperation+0x7c>)
 8008516:	2201      	movs	r2, #1
 8008518:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800851a:	4b08      	ldr	r3, [pc, #32]	@ (800853c <FLASH_WaitForLastOperation+0x7c>)
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008526:	f000 f8a1 	bl	800866c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e000      	b.n	8008530 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800852e:	2300      	movs	r3, #0
  
}  
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20004fa0 	.word	0x20004fa0
 800853c:	40023c00 	.word	0x40023c00

08008540 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800854c:	4b14      	ldr	r3, [pc, #80]	@ (80085a0 <FLASH_Program_DoubleWord+0x60>)
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	4a13      	ldr	r2, [pc, #76]	@ (80085a0 <FLASH_Program_DoubleWord+0x60>)
 8008552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008556:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008558:	4b11      	ldr	r3, [pc, #68]	@ (80085a0 <FLASH_Program_DoubleWord+0x60>)
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	4a10      	ldr	r2, [pc, #64]	@ (80085a0 <FLASH_Program_DoubleWord+0x60>)
 800855e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008562:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008564:	4b0e      	ldr	r3, [pc, #56]	@ (80085a0 <FLASH_Program_DoubleWord+0x60>)
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	4a0d      	ldr	r2, [pc, #52]	@ (80085a0 <FLASH_Program_DoubleWord+0x60>)
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008576:	f3bf 8f6f 	isb	sy
}
 800857a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800857c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	f04f 0300 	mov.w	r3, #0
 8008588:	000a      	movs	r2, r1
 800858a:	2300      	movs	r3, #0
 800858c:	68f9      	ldr	r1, [r7, #12]
 800858e:	3104      	adds	r1, #4
 8008590:	4613      	mov	r3, r2
 8008592:	600b      	str	r3, [r1, #0]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40023c00 	.word	0x40023c00

080085a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <FLASH_Program_Word+0x40>)
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	4a0c      	ldr	r2, [pc, #48]	@ (80085e4 <FLASH_Program_Word+0x40>)
 80085b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80085ba:	4b0a      	ldr	r3, [pc, #40]	@ (80085e4 <FLASH_Program_Word+0x40>)
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	4a09      	ldr	r2, [pc, #36]	@ (80085e4 <FLASH_Program_Word+0x40>)
 80085c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80085c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80085c6:	4b07      	ldr	r3, [pc, #28]	@ (80085e4 <FLASH_Program_Word+0x40>)
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	4a06      	ldr	r2, [pc, #24]	@ (80085e4 <FLASH_Program_Word+0x40>)
 80085cc:	f043 0301 	orr.w	r3, r3, #1
 80085d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	601a      	str	r2, [r3, #0]
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40023c00 	.word	0x40023c00

080085e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80085f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008628 <FLASH_Program_HalfWord+0x40>)
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	4a0b      	ldr	r2, [pc, #44]	@ (8008628 <FLASH_Program_HalfWord+0x40>)
 80085fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008600:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <FLASH_Program_HalfWord+0x40>)
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	4a08      	ldr	r2, [pc, #32]	@ (8008628 <FLASH_Program_HalfWord+0x40>)
 8008606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800860a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800860c:	4b06      	ldr	r3, [pc, #24]	@ (8008628 <FLASH_Program_HalfWord+0x40>)
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	4a05      	ldr	r2, [pc, #20]	@ (8008628 <FLASH_Program_HalfWord+0x40>)
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	887a      	ldrh	r2, [r7, #2]
 800861c:	801a      	strh	r2, [r3, #0]
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr
 8008628:	40023c00 	.word	0x40023c00

0800862c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008638:	4b0b      	ldr	r3, [pc, #44]	@ (8008668 <FLASH_Program_Byte+0x3c>)
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	4a0a      	ldr	r2, [pc, #40]	@ (8008668 <FLASH_Program_Byte+0x3c>)
 800863e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008642:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008644:	4b08      	ldr	r3, [pc, #32]	@ (8008668 <FLASH_Program_Byte+0x3c>)
 8008646:	4a08      	ldr	r2, [pc, #32]	@ (8008668 <FLASH_Program_Byte+0x3c>)
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800864c:	4b06      	ldr	r3, [pc, #24]	@ (8008668 <FLASH_Program_Byte+0x3c>)
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	4a05      	ldr	r2, [pc, #20]	@ (8008668 <FLASH_Program_Byte+0x3c>)
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	701a      	strb	r2, [r3, #0]
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr
 8008668:	40023c00 	.word	0x40023c00

0800866c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008670:	4b27      	ldr	r3, [pc, #156]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800867c:	4b25      	ldr	r3, [pc, #148]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	f043 0308 	orr.w	r3, r3, #8
 8008684:	4a23      	ldr	r2, [pc, #140]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 8008686:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008688:	4b21      	ldr	r3, [pc, #132]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 800868a:	2210      	movs	r2, #16
 800868c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800868e:	4b20      	ldr	r3, [pc, #128]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800869a:	4b1e      	ldr	r3, [pc, #120]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f043 0304 	orr.w	r3, r3, #4
 80086a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 80086a4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80086a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 80086a8:	2220      	movs	r2, #32
 80086aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80086ac:	4b18      	ldr	r3, [pc, #96]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80086b8:	4b16      	ldr	r3, [pc, #88]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	f043 0302 	orr.w	r3, r3, #2
 80086c0:	4a14      	ldr	r2, [pc, #80]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 80086c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80086c4:	4b12      	ldr	r3, [pc, #72]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 80086c6:	2240      	movs	r2, #64	@ 0x40
 80086c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80086ca:	4b11      	ldr	r3, [pc, #68]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d008      	beq.n	80086e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80086d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f043 0301 	orr.w	r3, r3, #1
 80086de:	4a0d      	ldr	r2, [pc, #52]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 80086e0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80086e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 80086e4:	2280      	movs	r2, #128	@ 0x80
 80086e6:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80086e8:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80086f4:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	f043 0310 	orr.w	r3, r3, #16
 80086fc:	4a05      	ldr	r2, [pc, #20]	@ (8008714 <FLASH_SetErrorCode+0xa8>)
 80086fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008700:	4b03      	ldr	r3, [pc, #12]	@ (8008710 <FLASH_SetErrorCode+0xa4>)
 8008702:	2202      	movs	r2, #2
 8008704:	60da      	str	r2, [r3, #12]
  }
}
 8008706:	bf00      	nop
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40023c00 	.word	0x40023c00
 8008714:	20004fa0 	.word	0x20004fa0

08008718 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800872a:	4b31      	ldr	r3, [pc, #196]	@ (80087f0 <HAL_FLASHEx_Erase+0xd8>)
 800872c:	7e1b      	ldrb	r3, [r3, #24]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <HAL_FLASHEx_Erase+0x1e>
 8008732:	2302      	movs	r3, #2
 8008734:	e058      	b.n	80087e8 <HAL_FLASHEx_Erase+0xd0>
 8008736:	4b2e      	ldr	r3, [pc, #184]	@ (80087f0 <HAL_FLASHEx_Erase+0xd8>)
 8008738:	2201      	movs	r2, #1
 800873a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800873c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008740:	f7ff febe 	bl	80084c0 <FLASH_WaitForLastOperation>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d148      	bne.n	80087e0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f04f 32ff 	mov.w	r2, #4294967295
 8008754:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d115      	bne.n	800878a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4619      	mov	r1, r3
 800876a:	4610      	mov	r0, r2
 800876c:	f000 f8da 	bl	8008924 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008770:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008774:	f7ff fea4 	bl	80084c0 <FLASH_WaitForLastOperation>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800877c:	4b1d      	ldr	r3, [pc, #116]	@ (80087f4 <HAL_FLASHEx_Erase+0xdc>)
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	4a1c      	ldr	r2, [pc, #112]	@ (80087f4 <HAL_FLASHEx_Erase+0xdc>)
 8008782:	f023 0304 	bic.w	r3, r3, #4
 8008786:	6113      	str	r3, [r2, #16]
 8008788:	e028      	b.n	80087dc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	60bb      	str	r3, [r7, #8]
 8008790:	e01c      	b.n	80087cc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	4619      	mov	r1, r3
 800879a:	68b8      	ldr	r0, [r7, #8]
 800879c:	f000 f82c 	bl	80087f8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80087a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80087a4:	f7ff fe8c 	bl	80084c0 <FLASH_WaitForLastOperation>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80087ac:	4b11      	ldr	r3, [pc, #68]	@ (80087f4 <HAL_FLASHEx_Erase+0xdc>)
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	4a10      	ldr	r2, [pc, #64]	@ (80087f4 <HAL_FLASHEx_Erase+0xdc>)
 80087b2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80087b6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	601a      	str	r2, [r3, #0]
          break;
 80087c4:	e00a      	b.n	80087dc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60bb      	str	r3, [r7, #8]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	4413      	add	r3, r2
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d3da      	bcc.n	8008792 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80087dc:	f000 f85e 	bl	800889c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80087e0:	4b03      	ldr	r3, [pc, #12]	@ (80087f0 <HAL_FLASHEx_Erase+0xd8>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	761a      	strb	r2, [r3, #24]

  return status;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20004fa0 	.word	0x20004fa0
 80087f4:	40023c00 	.word	0x40023c00

080087f8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	e010      	b.n	8008836 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d103      	bne.n	8008822 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800881a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e009      	b.n	8008836 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d103      	bne.n	8008830 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e002      	b.n	8008836 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008830:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008834:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008836:	4b18      	ldr	r3, [pc, #96]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	4a17      	ldr	r2, [pc, #92]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 800883c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008840:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008842:	4b15      	ldr	r3, [pc, #84]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	4914      	ldr	r1, [pc, #80]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	4313      	orrs	r3, r2
 800884c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800884e:	4b12      	ldr	r3, [pc, #72]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	4a11      	ldr	r2, [pc, #68]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 8008854:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008858:	6113      	str	r3, [r2, #16]
 800885a:	23f8      	movs	r3, #248	@ 0xf8
 800885c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	fa93 f3a3 	rbit	r3, r3
 8008864:	60fb      	str	r3, [r7, #12]
  return result;
 8008866:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8008868:	fab3 f383 	clz	r3, r3
 800886c:	b2db      	uxtb	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4093      	lsls	r3, r2
 8008874:	f043 0202 	orr.w	r2, r3, #2
 8008878:	4b07      	ldr	r3, [pc, #28]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	4906      	ldr	r1, [pc, #24]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 800887e:	4313      	orrs	r3, r2
 8008880:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008882:	4b05      	ldr	r3, [pc, #20]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	4a04      	ldr	r2, [pc, #16]	@ (8008898 <FLASH_Erase_Sector+0xa0>)
 8008888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800888c:	6113      	str	r3, [r2, #16]
}
 800888e:	bf00      	nop
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr
 8008898:	40023c00 	.word	0x40023c00

0800889c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80088a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d017      	beq.n	80088dc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80088ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088b2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088b6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80088b8:	4b19      	ldr	r3, [pc, #100]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a18      	ldr	r2, [pc, #96]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	4b16      	ldr	r3, [pc, #88]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a15      	ldr	r2, [pc, #84]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088ce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80088d0:	4b13      	ldr	r3, [pc, #76]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a12      	ldr	r2, [pc, #72]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088da:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80088dc:	4b10      	ldr	r3, [pc, #64]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d017      	beq.n	8008918 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80088e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088f2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80088f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a09      	ldr	r2, [pc, #36]	@ (8008920 <FLASH_FlushCaches+0x84>)
 80088fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <FLASH_FlushCaches+0x84>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a06      	ldr	r2, [pc, #24]	@ (8008920 <FLASH_FlushCaches+0x84>)
 8008906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800890a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800890c:	4b04      	ldr	r3, [pc, #16]	@ (8008920 <FLASH_FlushCaches+0x84>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a03      	ldr	r2, [pc, #12]	@ (8008920 <FLASH_FlushCaches+0x84>)
 8008912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008916:	6013      	str	r3, [r2, #0]
  }
}
 8008918:	bf00      	nop
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr
 8008920:	40023c00 	.word	0x40023c00

08008924 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	6039      	str	r1, [r7, #0]
 800892e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008930:	4b0c      	ldr	r3, [pc, #48]	@ (8008964 <FLASH_MassErase+0x40>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	4a0b      	ldr	r2, [pc, #44]	@ (8008964 <FLASH_MassErase+0x40>)
 8008936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800893a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800893c:	4b09      	ldr	r3, [pc, #36]	@ (8008964 <FLASH_MassErase+0x40>)
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	4a08      	ldr	r2, [pc, #32]	@ (8008964 <FLASH_MassErase+0x40>)
 8008942:	f043 0304 	orr.w	r3, r3, #4
 8008946:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8008948:	4b06      	ldr	r3, [pc, #24]	@ (8008964 <FLASH_MassErase+0x40>)
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	4313      	orrs	r3, r2
 8008952:	4a04      	ldr	r2, [pc, #16]	@ (8008964 <FLASH_MassErase+0x40>)
 8008954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008958:	6113      	str	r3, [r2, #16]
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr
 8008964:	40023c00 	.word	0x40023c00

08008968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008976:	e16f      	b.n	8008c58 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	2101      	movs	r1, #1
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	4013      	ands	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 8161 	beq.w	8008c52 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f003 0303 	and.w	r3, r3, #3
 8008998:	2b01      	cmp	r3, #1
 800899a:	d005      	beq.n	80089a8 <HAL_GPIO_Init+0x40>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d130      	bne.n	8008a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	2203      	movs	r2, #3
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	43db      	mvns	r3, r3
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4013      	ands	r3, r2
 80089be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089de:	2201      	movs	r2, #1
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	43db      	mvns	r3, r3
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4013      	ands	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	091b      	lsrs	r3, r3, #4
 80089f4:	f003 0201 	and.w	r2, r3, #1
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	fa02 f303 	lsl.w	r3, r2, r3
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f003 0303 	and.w	r3, r3, #3
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d017      	beq.n	8008a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	2203      	movs	r2, #3
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	43db      	mvns	r3, r3
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f003 0303 	and.w	r3, r3, #3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d123      	bne.n	8008a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	08da      	lsrs	r2, r3, #3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3208      	adds	r2, #8
 8008a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	220f      	movs	r2, #15
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43db      	mvns	r3, r3
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	4013      	ands	r3, r2
 8008a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	fa02 f303 	lsl.w	r3, r2, r3
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	08da      	lsrs	r2, r3, #3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3208      	adds	r2, #8
 8008a94:	6939      	ldr	r1, [r7, #16]
 8008a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f003 0203 	and.w	r2, r3, #3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 80bb 	beq.w	8008c52 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008adc:	2300      	movs	r3, #0
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	4b64      	ldr	r3, [pc, #400]	@ (8008c74 <HAL_GPIO_Init+0x30c>)
 8008ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae4:	4a63      	ldr	r2, [pc, #396]	@ (8008c74 <HAL_GPIO_Init+0x30c>)
 8008ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008aea:	6453      	str	r3, [r2, #68]	@ 0x44
 8008aec:	4b61      	ldr	r3, [pc, #388]	@ (8008c74 <HAL_GPIO_Init+0x30c>)
 8008aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008af4:	60bb      	str	r3, [r7, #8]
 8008af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008af8:	4a5f      	ldr	r2, [pc, #380]	@ (8008c78 <HAL_GPIO_Init+0x310>)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	089b      	lsrs	r3, r3, #2
 8008afe:	3302      	adds	r3, #2
 8008b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	220f      	movs	r2, #15
 8008b10:	fa02 f303 	lsl.w	r3, r2, r3
 8008b14:	43db      	mvns	r3, r3
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a57      	ldr	r2, [pc, #348]	@ (8008c7c <HAL_GPIO_Init+0x314>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d031      	beq.n	8008b88 <HAL_GPIO_Init+0x220>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a56      	ldr	r2, [pc, #344]	@ (8008c80 <HAL_GPIO_Init+0x318>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d02b      	beq.n	8008b84 <HAL_GPIO_Init+0x21c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a55      	ldr	r2, [pc, #340]	@ (8008c84 <HAL_GPIO_Init+0x31c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d025      	beq.n	8008b80 <HAL_GPIO_Init+0x218>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a54      	ldr	r2, [pc, #336]	@ (8008c88 <HAL_GPIO_Init+0x320>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d01f      	beq.n	8008b7c <HAL_GPIO_Init+0x214>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a53      	ldr	r2, [pc, #332]	@ (8008c8c <HAL_GPIO_Init+0x324>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d019      	beq.n	8008b78 <HAL_GPIO_Init+0x210>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a52      	ldr	r2, [pc, #328]	@ (8008c90 <HAL_GPIO_Init+0x328>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d013      	beq.n	8008b74 <HAL_GPIO_Init+0x20c>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a51      	ldr	r2, [pc, #324]	@ (8008c94 <HAL_GPIO_Init+0x32c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00d      	beq.n	8008b70 <HAL_GPIO_Init+0x208>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a50      	ldr	r2, [pc, #320]	@ (8008c98 <HAL_GPIO_Init+0x330>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d007      	beq.n	8008b6c <HAL_GPIO_Init+0x204>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a4f      	ldr	r2, [pc, #316]	@ (8008c9c <HAL_GPIO_Init+0x334>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d101      	bne.n	8008b68 <HAL_GPIO_Init+0x200>
 8008b64:	2308      	movs	r3, #8
 8008b66:	e010      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b68:	2309      	movs	r3, #9
 8008b6a:	e00e      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b6c:	2307      	movs	r3, #7
 8008b6e:	e00c      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b70:	2306      	movs	r3, #6
 8008b72:	e00a      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b74:	2305      	movs	r3, #5
 8008b76:	e008      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	e006      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e004      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e002      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e000      	b.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	f002 0203 	and.w	r2, r2, #3
 8008b90:	0092      	lsls	r2, r2, #2
 8008b92:	4093      	lsls	r3, r2
 8008b94:	461a      	mov	r2, r3
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008b9c:	4936      	ldr	r1, [pc, #216]	@ (8008c78 <HAL_GPIO_Init+0x310>)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	089b      	lsrs	r3, r3, #2
 8008ba2:	3302      	adds	r3, #2
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008baa:	4b3d      	ldr	r3, [pc, #244]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008bce:	4a34      	ldr	r2, [pc, #208]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008bd4:	4b32      	ldr	r3, [pc, #200]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	43db      	mvns	r3, r3
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	4013      	ands	r3, r2
 8008be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008bf8:	4a29      	ldr	r2, [pc, #164]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008bfe:	4b28      	ldr	r3, [pc, #160]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	43db      	mvns	r3, r3
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008c22:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c28:	4b1d      	ldr	r3, [pc, #116]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	43db      	mvns	r3, r3
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4013      	ands	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008c4c:	4a14      	ldr	r2, [pc, #80]	@ (8008ca0 <HAL_GPIO_Init+0x338>)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	3301      	adds	r3, #1
 8008c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f47f ae88 	bne.w	8008978 <HAL_GPIO_Init+0x10>
  }
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr
 8008c74:	40023800 	.word	0x40023800
 8008c78:	40013800 	.word	0x40013800
 8008c7c:	40020000 	.word	0x40020000
 8008c80:	40020400 	.word	0x40020400
 8008c84:	40020800 	.word	0x40020800
 8008c88:	40020c00 	.word	0x40020c00
 8008c8c:	40021000 	.word	0x40021000
 8008c90:	40021400 	.word	0x40021400
 8008c94:	40021800 	.word	0x40021800
 8008c98:	40021c00 	.word	0x40021c00
 8008c9c:	40022000 	.word	0x40022000
 8008ca0:	40013c00 	.word	0x40013c00

08008ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691a      	ldr	r2, [r3, #16]
 8008cb4:	887b      	ldrh	r3, [r7, #2]
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	73fb      	strb	r3, [r7, #15]
 8008cc0:	e001      	b.n	8008cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr
	...

08008cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008cde:	4b08      	ldr	r3, [pc, #32]	@ (8008d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d006      	beq.n	8008cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008cea:	4a05      	ldr	r2, [pc, #20]	@ (8008d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008cec:	88fb      	ldrh	r3, [r7, #6]
 8008cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008cf0:	88fb      	ldrh	r3, [r7, #6]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f8 fd7a 	bl	80017ec <HAL_GPIO_EXTI_Callback>
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40013c00 	.word	0x40013c00

08008d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e12b      	b.n	8008f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d106      	bne.n	8008d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7fa ff9c 	bl	8003c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2224      	movs	r2, #36	@ 0x24
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0201 	bic.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008d68:	f001 f8a4 	bl	8009eb4 <HAL_RCC_GetPCLK1Freq>
 8008d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	4a81      	ldr	r2, [pc, #516]	@ (8008f78 <HAL_I2C_Init+0x274>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d807      	bhi.n	8008d88 <HAL_I2C_Init+0x84>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4a80      	ldr	r2, [pc, #512]	@ (8008f7c <HAL_I2C_Init+0x278>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	bf94      	ite	ls
 8008d80:	2301      	movls	r3, #1
 8008d82:	2300      	movhi	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	e006      	b.n	8008d96 <HAL_I2C_Init+0x92>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8008f80 <HAL_I2C_Init+0x27c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	bf94      	ite	ls
 8008d90:	2301      	movls	r3, #1
 8008d92:	2300      	movhi	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e0e7      	b.n	8008f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a78      	ldr	r2, [pc, #480]	@ (8008f84 <HAL_I2C_Init+0x280>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	0c9b      	lsrs	r3, r3, #18
 8008da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8008f78 <HAL_I2C_Init+0x274>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d802      	bhi.n	8008dd8 <HAL_I2C_Init+0xd4>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	e009      	b.n	8008dec <HAL_I2C_Init+0xe8>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008dde:	fb02 f303 	mul.w	r3, r2, r3
 8008de2:	4a69      	ldr	r2, [pc, #420]	@ (8008f88 <HAL_I2C_Init+0x284>)
 8008de4:	fba2 2303 	umull	r2, r3, r2, r3
 8008de8:	099b      	lsrs	r3, r3, #6
 8008dea:	3301      	adds	r3, #1
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6812      	ldr	r2, [r2, #0]
 8008df0:	430b      	orrs	r3, r1
 8008df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008dfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	495c      	ldr	r1, [pc, #368]	@ (8008f78 <HAL_I2C_Init+0x274>)
 8008e08:	428b      	cmp	r3, r1
 8008e0a:	d819      	bhi.n	8008e40 <HAL_I2C_Init+0x13c>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	1e59      	subs	r1, r3, #1
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e1a:	1c59      	adds	r1, r3, #1
 8008e1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008e20:	400b      	ands	r3, r1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <HAL_I2C_Init+0x138>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1e59      	subs	r1, r3, #1
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e34:	3301      	adds	r3, #1
 8008e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e3a:	e051      	b.n	8008ee0 <HAL_I2C_Init+0x1dc>
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	e04f      	b.n	8008ee0 <HAL_I2C_Init+0x1dc>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d111      	bne.n	8008e6c <HAL_I2C_Init+0x168>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	1e58      	subs	r0, r3, #1
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6859      	ldr	r1, [r3, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	440b      	add	r3, r1
 8008e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bf0c      	ite	eq
 8008e64:	2301      	moveq	r3, #1
 8008e66:	2300      	movne	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	e012      	b.n	8008e92 <HAL_I2C_Init+0x18e>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	1e58      	subs	r0, r3, #1
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6859      	ldr	r1, [r3, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	440b      	add	r3, r1
 8008e7a:	0099      	lsls	r1, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e82:	3301      	adds	r3, #1
 8008e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bf0c      	ite	eq
 8008e8c:	2301      	moveq	r3, #1
 8008e8e:	2300      	movne	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <HAL_I2C_Init+0x196>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e022      	b.n	8008ee0 <HAL_I2C_Init+0x1dc>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10e      	bne.n	8008ec0 <HAL_I2C_Init+0x1bc>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	1e58      	subs	r0, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6859      	ldr	r1, [r3, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	440b      	add	r3, r1
 8008eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ebe:	e00f      	b.n	8008ee0 <HAL_I2C_Init+0x1dc>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	1e58      	subs	r0, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6859      	ldr	r1, [r3, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	0099      	lsls	r1, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	6809      	ldr	r1, [r1, #0]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008f0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6911      	ldr	r1, [r2, #16]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	68d2      	ldr	r2, [r2, #12]
 8008f1a:	4311      	orrs	r1, r2
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6812      	ldr	r2, [r2, #0]
 8008f20:	430b      	orrs	r3, r1
 8008f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	000186a0 	.word	0x000186a0
 8008f7c:	001e847f 	.word	0x001e847f
 8008f80:	003d08ff 	.word	0x003d08ff
 8008f84:	431bde83 	.word	0x431bde83
 8008f88:	10624dd3 	.word	0x10624dd3

08008f8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af02      	add	r7, sp, #8
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	817b      	strh	r3, [r7, #10]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	813b      	strh	r3, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fa6:	f7fd f889 	bl	80060bc <HAL_GetTick>
 8008faa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b20      	cmp	r3, #32
 8008fb6:	f040 80d9 	bne.w	800916c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	2319      	movs	r3, #25
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	496d      	ldr	r1, [pc, #436]	@ (8009178 <HAL_I2C_Mem_Write+0x1ec>)
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 f971 	bl	80092ac <I2C_WaitOnFlagUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e0cc      	b.n	800916e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <HAL_I2C_Mem_Write+0x56>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e0c5      	b.n	800916e <HAL_I2C_Mem_Write+0x1e2>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d007      	beq.n	8009008 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0201 	orr.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2221      	movs	r2, #33	@ 0x21
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2240      	movs	r2, #64	@ 0x40
 8009024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a3a      	ldr	r2, [r7, #32]
 8009032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800903e:	b29a      	uxth	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a4d      	ldr	r2, [pc, #308]	@ (800917c <HAL_I2C_Mem_Write+0x1f0>)
 8009048:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800904a:	88f8      	ldrh	r0, [r7, #6]
 800904c:	893a      	ldrh	r2, [r7, #8]
 800904e:	8979      	ldrh	r1, [r7, #10]
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	4603      	mov	r3, r0
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 f890 	bl	8009180 <I2C_RequestMemoryWrite>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d052      	beq.n	800910c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e081      	b.n	800916e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fa36 	bl	80094e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00d      	beq.n	8009096 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907e:	2b04      	cmp	r3, #4
 8009080:	d107      	bne.n	8009092 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e06b      	b.n	800916e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090b0:	3b01      	subs	r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090bc:	b29b      	uxth	r3, r3
 80090be:	3b01      	subs	r3, #1
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d11b      	bne.n	800910c <HAL_I2C_Mem_Write+0x180>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d017      	beq.n	800910c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090f6:	3b01      	subs	r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009102:	b29b      	uxth	r3, r3
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1aa      	bne.n	800906a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fa29 	bl	8009570 <I2C_WaitOnBTFFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00d      	beq.n	8009140 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009128:	2b04      	cmp	r3, #4
 800912a:	d107      	bne.n	800913c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800913a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e016      	b.n	800916e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800914e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800916c:	2302      	movs	r3, #2
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	00100002 	.word	0x00100002
 800917c:	ffff0000 	.word	0xffff0000

08009180 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	4608      	mov	r0, r1
 800918a:	4611      	mov	r1, r2
 800918c:	461a      	mov	r2, r3
 800918e:	4603      	mov	r3, r0
 8009190:	817b      	strh	r3, [r7, #10]
 8009192:	460b      	mov	r3, r1
 8009194:	813b      	strh	r3, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f878 	bl	80092ac <I2C_WaitOnFlagUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00d      	beq.n	80091de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091d0:	d103      	bne.n	80091da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e05f      	b.n	800929e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091de:	897b      	ldrh	r3, [r7, #10]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	6a3a      	ldr	r2, [r7, #32]
 80091f2:	492d      	ldr	r1, [pc, #180]	@ (80092a8 <I2C_RequestMemoryWrite+0x128>)
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f8d3 	bl	80093a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e04c      	b.n	800929e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009204:	2300      	movs	r3, #0
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800921a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800921c:	6a39      	ldr	r1, [r7, #32]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f95e 	bl	80094e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00d      	beq.n	8009246 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	2b04      	cmp	r3, #4
 8009230:	d107      	bne.n	8009242 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e02b      	b.n	800929e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009246:	88fb      	ldrh	r3, [r7, #6]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d105      	bne.n	8009258 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800924c:	893b      	ldrh	r3, [r7, #8]
 800924e:	b2da      	uxtb	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	611a      	str	r2, [r3, #16]
 8009256:	e021      	b.n	800929c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009258:	893b      	ldrh	r3, [r7, #8]
 800925a:	0a1b      	lsrs	r3, r3, #8
 800925c:	b29b      	uxth	r3, r3
 800925e:	b2da      	uxtb	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009268:	6a39      	ldr	r1, [r7, #32]
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 f938 	bl	80094e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00d      	beq.n	8009292 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927a:	2b04      	cmp	r3, #4
 800927c:	d107      	bne.n	800928e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800928c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e005      	b.n	800929e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009292:	893b      	ldrh	r3, [r7, #8]
 8009294:	b2da      	uxtb	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	00010002 	.word	0x00010002

080092ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	4613      	mov	r3, r2
 80092ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092bc:	e048      	b.n	8009350 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d044      	beq.n	8009350 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092c6:	f7fc fef9 	bl	80060bc <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d302      	bcc.n	80092dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d139      	bne.n	8009350 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	0c1b      	lsrs	r3, r3, #16
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d10d      	bne.n	8009302 <I2C_WaitOnFlagUntilTimeout+0x56>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	43da      	mvns	r2, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4013      	ands	r3, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bf0c      	ite	eq
 80092f8:	2301      	moveq	r3, #1
 80092fa:	2300      	movne	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	e00c      	b.n	800931c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	43da      	mvns	r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	4013      	ands	r3, r2
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	bf0c      	ite	eq
 8009314:	2301      	moveq	r3, #1
 8009316:	2300      	movne	r3, #0
 8009318:	b2db      	uxtb	r3, r3
 800931a:	461a      	mov	r2, r3
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	429a      	cmp	r2, r3
 8009320:	d116      	bne.n	8009350 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2220      	movs	r2, #32
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933c:	f043 0220 	orr.w	r2, r3, #32
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e023      	b.n	8009398 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	0c1b      	lsrs	r3, r3, #16
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b01      	cmp	r3, #1
 8009358:	d10d      	bne.n	8009376 <I2C_WaitOnFlagUntilTimeout+0xca>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	43da      	mvns	r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	4013      	ands	r3, r2
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	bf0c      	ite	eq
 800936c:	2301      	moveq	r3, #1
 800936e:	2300      	movne	r3, #0
 8009370:	b2db      	uxtb	r3, r3
 8009372:	461a      	mov	r2, r3
 8009374:	e00c      	b.n	8009390 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	43da      	mvns	r2, r3
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	4013      	ands	r3, r2
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	bf0c      	ite	eq
 8009388:	2301      	moveq	r3, #1
 800938a:	2300      	movne	r3, #0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	461a      	mov	r2, r3
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	429a      	cmp	r2, r3
 8009394:	d093      	beq.n	80092be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093ae:	e071      	b.n	8009494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093be:	d123      	bne.n	8009408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80093d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f4:	f043 0204 	orr.w	r2, r3, #4
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e067      	b.n	80094d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	d041      	beq.n	8009494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009410:	f7fc fe54 	bl	80060bc <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	429a      	cmp	r2, r3
 800941e:	d302      	bcc.n	8009426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d136      	bne.n	8009494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	0c1b      	lsrs	r3, r3, #16
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b01      	cmp	r3, #1
 800942e:	d10c      	bne.n	800944a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	43da      	mvns	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	4013      	ands	r3, r2
 800943c:	b29b      	uxth	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	bf14      	ite	ne
 8009442:	2301      	movne	r3, #1
 8009444:	2300      	moveq	r3, #0
 8009446:	b2db      	uxtb	r3, r3
 8009448:	e00b      	b.n	8009462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	43da      	mvns	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4013      	ands	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	bf14      	ite	ne
 800945c:	2301      	movne	r3, #1
 800945e:	2300      	moveq	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d016      	beq.n	8009494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009480:	f043 0220 	orr.w	r2, r3, #32
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e021      	b.n	80094d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	0c1b      	lsrs	r3, r3, #16
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b01      	cmp	r3, #1
 800949c:	d10c      	bne.n	80094b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	43da      	mvns	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	4013      	ands	r3, r2
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bf14      	ite	ne
 80094b0:	2301      	movne	r3, #1
 80094b2:	2300      	moveq	r3, #0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	e00b      	b.n	80094d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	43da      	mvns	r2, r3
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	4013      	ands	r3, r2
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bf14      	ite	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	2300      	moveq	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f47f af6d 	bne.w	80093b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094ec:	e034      	b.n	8009558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 f886 	bl	8009600 <I2C_IsAcknowledgeFailed>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e034      	b.n	8009568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d028      	beq.n	8009558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009506:	f7fc fdd9 	bl	80060bc <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	429a      	cmp	r2, r3
 8009514:	d302      	bcc.n	800951c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d11d      	bne.n	8009558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009526:	2b80      	cmp	r3, #128	@ 0x80
 8009528:	d016      	beq.n	8009558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009544:	f043 0220 	orr.w	r2, r3, #32
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e007      	b.n	8009568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009562:	2b80      	cmp	r3, #128	@ 0x80
 8009564:	d1c3      	bne.n	80094ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800957c:	e034      	b.n	80095e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f83e 	bl	8009600 <I2C_IsAcknowledgeFailed>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e034      	b.n	80095f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d028      	beq.n	80095e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009596:	f7fc fd91 	bl	80060bc <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d302      	bcc.n	80095ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d11d      	bne.n	80095e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	f003 0304 	and.w	r3, r3, #4
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d016      	beq.n	80095e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d4:	f043 0220 	orr.w	r2, r3, #32
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e007      	b.n	80095f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	d1c3      	bne.n	800957e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009616:	d11b      	bne.n	8009650 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009620:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	f043 0204 	orr.w	r2, r3, #4
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e000      	b.n	8009652 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr

0800965c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009666:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	fa93 f3a3 	rbit	r3, r3
 800966e:	603b      	str	r3, [r7, #0]
  return result;
 8009670:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009672:	fab3 f383 	clz	r3, r3
 8009676:	b2db      	uxtb	r3, r3
 8009678:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800967c:	f503 3360 	add.w	r3, r3, #229376	@ 0x38000
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	461a      	mov	r2, r3
 8009684:	2301      	movs	r3, #1
 8009686:	6013      	str	r3, [r2, #0]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	bc80      	pop	{r7}
 8009690:	4770      	bx	lr
	...

08009694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08a      	sub	sp, #40	@ 0x28
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e23b      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d050      	beq.n	8009754 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096b2:	4b9e      	ldr	r3, [pc, #632]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f003 030c 	and.w	r3, r3, #12
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d00c      	beq.n	80096d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096be:	4b9b      	ldr	r3, [pc, #620]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	d112      	bne.n	80096f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096ca:	4b98      	ldr	r3, [pc, #608]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096d6:	d10b      	bne.n	80096f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096d8:	4b94      	ldr	r3, [pc, #592]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d036      	beq.n	8009752 <HAL_RCC_OscConfig+0xbe>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d132      	bne.n	8009752 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e216      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	4b8e      	ldr	r3, [pc, #568]	@ (8009930 <HAL_RCC_OscConfig+0x29c>)
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d013      	beq.n	800972a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009702:	f7fc fcdb 	bl	80060bc <HAL_GetTick>
 8009706:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009708:	e008      	b.n	800971c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800970a:	f7fc fcd7 	bl	80060bc <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b64      	cmp	r3, #100	@ 0x64
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e200      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800971c:	4b83      	ldr	r3, [pc, #524]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0f0      	beq.n	800970a <HAL_RCC_OscConfig+0x76>
 8009728:	e014      	b.n	8009754 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800972a:	f7fc fcc7 	bl	80060bc <HAL_GetTick>
 800972e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009730:	e008      	b.n	8009744 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009732:	f7fc fcc3 	bl	80060bc <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b64      	cmp	r3, #100	@ 0x64
 800973e:	d901      	bls.n	8009744 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e1ec      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009744:	4b79      	ldr	r3, [pc, #484]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1f0      	bne.n	8009732 <HAL_RCC_OscConfig+0x9e>
 8009750:	e000      	b.n	8009754 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009752:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d077      	beq.n	8009850 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009760:	4b72      	ldr	r3, [pc, #456]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f003 030c 	and.w	r3, r3, #12
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800976c:	4b6f      	ldr	r3, [pc, #444]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009774:	2b08      	cmp	r3, #8
 8009776:	d126      	bne.n	80097c6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009778:	4b6c      	ldr	r3, [pc, #432]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d120      	bne.n	80097c6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009784:	4b69      	ldr	r3, [pc, #420]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d005      	beq.n	800979c <HAL_RCC_OscConfig+0x108>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d001      	beq.n	800979c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e1c0      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800979c:	4b63      	ldr	r3, [pc, #396]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	21f8      	movs	r1, #248	@ 0xf8
 80097aa:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ac:	68f9      	ldr	r1, [r7, #12]
 80097ae:	fa91 f1a1 	rbit	r1, r1
 80097b2:	6139      	str	r1, [r7, #16]
  return result;
 80097b4:	6939      	ldr	r1, [r7, #16]
 80097b6:	fab1 f181 	clz	r1, r1
 80097ba:	b2c9      	uxtb	r1, r1
 80097bc:	408b      	lsls	r3, r1
 80097be:	495b      	ldr	r1, [pc, #364]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097c4:	e044      	b.n	8009850 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d02a      	beq.n	8009824 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097ce:	4b59      	ldr	r3, [pc, #356]	@ (8009934 <HAL_RCC_OscConfig+0x2a0>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097d4:	f7fc fc72 	bl	80060bc <HAL_GetTick>
 80097d8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097da:	e008      	b.n	80097ee <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097dc:	f7fc fc6e 	bl	80060bc <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e197      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ee:	4b4f      	ldr	r3, [pc, #316]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0f0      	beq.n	80097dc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097fa:	4b4c      	ldr	r3, [pc, #304]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	21f8      	movs	r1, #248	@ 0xf8
 8009808:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800980a:	6979      	ldr	r1, [r7, #20]
 800980c:	fa91 f1a1 	rbit	r1, r1
 8009810:	61b9      	str	r1, [r7, #24]
  return result;
 8009812:	69b9      	ldr	r1, [r7, #24]
 8009814:	fab1 f181 	clz	r1, r1
 8009818:	b2c9      	uxtb	r1, r1
 800981a:	408b      	lsls	r3, r1
 800981c:	4943      	ldr	r1, [pc, #268]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 800981e:	4313      	orrs	r3, r2
 8009820:	600b      	str	r3, [r1, #0]
 8009822:	e015      	b.n	8009850 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009824:	4b43      	ldr	r3, [pc, #268]	@ (8009934 <HAL_RCC_OscConfig+0x2a0>)
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800982a:	f7fc fc47 	bl	80060bc <HAL_GetTick>
 800982e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009830:	e008      	b.n	8009844 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009832:	f7fc fc43 	bl	80060bc <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e16c      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009844:	4b39      	ldr	r3, [pc, #228]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1f0      	bne.n	8009832 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b00      	cmp	r3, #0
 800985a:	d030      	beq.n	80098be <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d016      	beq.n	8009892 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009864:	4b34      	ldr	r3, [pc, #208]	@ (8009938 <HAL_RCC_OscConfig+0x2a4>)
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800986a:	f7fc fc27 	bl	80060bc <HAL_GetTick>
 800986e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009870:	e008      	b.n	8009884 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009872:	f7fc fc23 	bl	80060bc <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b02      	cmp	r3, #2
 800987e:	d901      	bls.n	8009884 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e14c      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009884:	4b29      	ldr	r3, [pc, #164]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 8009886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0f0      	beq.n	8009872 <HAL_RCC_OscConfig+0x1de>
 8009890:	e015      	b.n	80098be <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009892:	4b29      	ldr	r3, [pc, #164]	@ (8009938 <HAL_RCC_OscConfig+0x2a4>)
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009898:	f7fc fc10 	bl	80060bc <HAL_GetTick>
 800989c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800989e:	e008      	b.n	80098b2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098a0:	f7fc fc0c 	bl	80060bc <HAL_GetTick>
 80098a4:	4602      	mov	r2, r0
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d901      	bls.n	80098b2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e135      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098b2:	4b1e      	ldr	r3, [pc, #120]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80098b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1f0      	bne.n	80098a0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 8087 	beq.w	80099da <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098d2:	4b16      	ldr	r3, [pc, #88]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80098d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d110      	bne.n	8009900 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098de:	2300      	movs	r3, #0
 80098e0:	60bb      	str	r3, [r7, #8]
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80098e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e6:	4a11      	ldr	r2, [pc, #68]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80098e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80098ee:	4b0f      	ldr	r3, [pc, #60]	@ (800992c <HAL_RCC_OscConfig+0x298>)
 80098f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098f6:	60bb      	str	r3, [r7, #8]
 80098f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009900:	4b0e      	ldr	r3, [pc, #56]	@ (800993c <HAL_RCC_OscConfig+0x2a8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a0d      	ldr	r2, [pc, #52]	@ (800993c <HAL_RCC_OscConfig+0x2a8>)
 8009906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800990a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800990c:	4b0b      	ldr	r3, [pc, #44]	@ (800993c <HAL_RCC_OscConfig+0x2a8>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009914:	2b00      	cmp	r3, #0
 8009916:	d122      	bne.n	800995e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009918:	4b08      	ldr	r3, [pc, #32]	@ (800993c <HAL_RCC_OscConfig+0x2a8>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a07      	ldr	r2, [pc, #28]	@ (800993c <HAL_RCC_OscConfig+0x2a8>)
 800991e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009924:	f7fc fbca 	bl	80060bc <HAL_GetTick>
 8009928:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800992a:	e012      	b.n	8009952 <HAL_RCC_OscConfig+0x2be>
 800992c:	40023800 	.word	0x40023800
 8009930:	40023802 	.word	0x40023802
 8009934:	42470000 	.word	0x42470000
 8009938:	42470e80 	.word	0x42470e80
 800993c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009940:	f7fc fbbc 	bl	80060bc <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d901      	bls.n	8009952 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e0e5      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009952:	4b75      	ldr	r3, [pc, #468]	@ (8009b28 <HAL_RCC_OscConfig+0x494>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0f0      	beq.n	8009940 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	4b72      	ldr	r3, [pc, #456]	@ (8009b2c <HAL_RCC_OscConfig+0x498>)
 8009964:	b2d2      	uxtb	r2, r2
 8009966:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d015      	beq.n	800999c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009970:	f7fc fba4 	bl	80060bc <HAL_GetTick>
 8009974:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009976:	e00a      	b.n	800998e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009978:	f7fc fba0 	bl	80060bc <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009986:	4293      	cmp	r3, r2
 8009988:	d901      	bls.n	800998e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e0c7      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800998e:	4b68      	ldr	r3, [pc, #416]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 8009990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0ee      	beq.n	8009978 <HAL_RCC_OscConfig+0x2e4>
 800999a:	e014      	b.n	80099c6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800999c:	f7fc fb8e 	bl	80060bc <HAL_GetTick>
 80099a0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099a2:	e00a      	b.n	80099ba <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099a4:	f7fc fb8a 	bl	80060bc <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e0b1      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099ba:	4b5d      	ldr	r3, [pc, #372]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 80099bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1ee      	bne.n	80099a4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d105      	bne.n	80099da <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099ce:	4b58      	ldr	r3, [pc, #352]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 80099d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d2:	4a57      	ldr	r2, [pc, #348]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 80099d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 809c 	beq.w	8009b1c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099e4:	4b52      	ldr	r3, [pc, #328]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f003 030c 	and.w	r3, r3, #12
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d061      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d146      	bne.n	8009a86 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099f8:	4b4e      	ldr	r3, [pc, #312]	@ (8009b34 <HAL_RCC_OscConfig+0x4a0>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099fe:	f7fc fb5d 	bl	80060bc <HAL_GetTick>
 8009a02:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a04:	e008      	b.n	8009a18 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a06:	f7fc fb59 	bl	80060bc <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	2b64      	cmp	r3, #100	@ 0x64
 8009a12:	d901      	bls.n	8009a18 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e082      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a18:	4b45      	ldr	r3, [pc, #276]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f0      	bne.n	8009a06 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a24:	4b42      	ldr	r3, [pc, #264]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	4b43      	ldr	r3, [pc, #268]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	69d1      	ldr	r1, [r2, #28]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6a12      	ldr	r2, [r2, #32]
 8009a34:	4311      	orrs	r1, r2
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009a3a:	0192      	lsls	r2, r2, #6
 8009a3c:	4311      	orrs	r1, r2
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009a42:	0612      	lsls	r2, r2, #24
 8009a44:	4311      	orrs	r1, r2
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009a4a:	0852      	lsrs	r2, r2, #1
 8009a4c:	3a01      	subs	r2, #1
 8009a4e:	0412      	lsls	r2, r2, #16
 8009a50:	430a      	orrs	r2, r1
 8009a52:	4937      	ldr	r1, [pc, #220]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a58:	4b36      	ldr	r3, [pc, #216]	@ (8009b34 <HAL_RCC_OscConfig+0x4a0>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a5e:	f7fc fb2d 	bl	80060bc <HAL_GetTick>
 8009a62:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a64:	e008      	b.n	8009a78 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a66:	f7fc fb29 	bl	80060bc <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b64      	cmp	r3, #100	@ 0x64
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e052      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a78:	4b2d      	ldr	r3, [pc, #180]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0f0      	beq.n	8009a66 <HAL_RCC_OscConfig+0x3d2>
 8009a84:	e04a      	b.n	8009b1c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a86:	4b2b      	ldr	r3, [pc, #172]	@ (8009b34 <HAL_RCC_OscConfig+0x4a0>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a8c:	f7fc fb16 	bl	80060bc <HAL_GetTick>
 8009a90:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a94:	f7fc fb12 	bl	80060bc <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b64      	cmp	r3, #100	@ 0x64
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e03b      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aa6:	4b22      	ldr	r3, [pc, #136]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f0      	bne.n	8009a94 <HAL_RCC_OscConfig+0x400>
 8009ab2:	e033      	b.n	8009b1c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d101      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e02e      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8009ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b30 <HAL_RCC_OscConfig+0x49c>)
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d121      	bne.n	8009b18 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d11a      	bne.n	8009b18 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009ae8:	4013      	ands	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009aee:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d111      	bne.n	8009b18 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afe:	085b      	lsrs	r3, r3, #1
 8009b00:	3b01      	subs	r3, #1
 8009b02:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d107      	bne.n	8009b18 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b12:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d001      	beq.n	8009b1c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e000      	b.n	8009b1e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3728      	adds	r7, #40	@ 0x28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	40007000 	.word	0x40007000
 8009b2c:	40023870 	.word	0x40023870
 8009b30:	40023800 	.word	0x40023800
 8009b34:	42470060 	.word	0x42470060
 8009b38:	f0bc8000 	.word	0xf0bc8000

08009b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e0d2      	b.n	8009cf6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b50:	4b6b      	ldr	r3, [pc, #428]	@ (8009d00 <HAL_RCC_ClockConfig+0x1c4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 030f 	and.w	r3, r3, #15
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d90c      	bls.n	8009b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b5e:	4b68      	ldr	r3, [pc, #416]	@ (8009d00 <HAL_RCC_ClockConfig+0x1c4>)
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	b2d2      	uxtb	r2, r2
 8009b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b66:	4b66      	ldr	r3, [pc, #408]	@ (8009d00 <HAL_RCC_ClockConfig+0x1c4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 030f 	and.w	r3, r3, #15
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d001      	beq.n	8009b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e0be      	b.n	8009cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d020      	beq.n	8009bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b90:	4b5c      	ldr	r3, [pc, #368]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	4a5b      	ldr	r2, [pc, #364]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0308 	and.w	r3, r3, #8
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d005      	beq.n	8009bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8009ba8:	4b56      	ldr	r3, [pc, #344]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	4a55      	ldr	r2, [pc, #340]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009bb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bb4:	4b53      	ldr	r3, [pc, #332]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	4950      	ldr	r1, [pc, #320]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d040      	beq.n	8009c54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d107      	bne.n	8009bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bda:	4b4a      	ldr	r3, [pc, #296]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d115      	bne.n	8009c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e085      	b.n	8009cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d107      	bne.n	8009c02 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bf2:	4b44      	ldr	r3, [pc, #272]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e079      	b.n	8009cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c02:	4b40      	ldr	r3, [pc, #256]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e071      	b.n	8009cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c12:	4b3c      	ldr	r3, [pc, #240]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f023 0203 	bic.w	r2, r3, #3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	4939      	ldr	r1, [pc, #228]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c24:	f7fc fa4a 	bl	80060bc <HAL_GetTick>
 8009c28:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c2a:	e00a      	b.n	8009c42 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c2c:	f7fc fa46 	bl	80060bc <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e059      	b.n	8009cf6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c42:	4b30      	ldr	r3, [pc, #192]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f003 020c 	and.w	r2, r3, #12
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d1eb      	bne.n	8009c2c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c54:	4b2a      	ldr	r3, [pc, #168]	@ (8009d00 <HAL_RCC_ClockConfig+0x1c4>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 030f 	and.w	r3, r3, #15
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d20c      	bcs.n	8009c7c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c62:	4b27      	ldr	r3, [pc, #156]	@ (8009d00 <HAL_RCC_ClockConfig+0x1c4>)
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6a:	4b25      	ldr	r3, [pc, #148]	@ (8009d00 <HAL_RCC_ClockConfig+0x1c4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 030f 	and.w	r3, r3, #15
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d001      	beq.n	8009c7c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e03c      	b.n	8009cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d008      	beq.n	8009c9a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c88:	4b1e      	ldr	r3, [pc, #120]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	491b      	ldr	r1, [pc, #108]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0308 	and.w	r3, r3, #8
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d009      	beq.n	8009cba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ca6:	4b17      	ldr	r3, [pc, #92]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	4913      	ldr	r1, [pc, #76]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009cba:	f000 f82b 	bl	8009d14 <HAL_RCC_GetSysClockFreq>
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <HAL_RCC_ClockConfig+0x1c8>)
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cc8:	22f0      	movs	r2, #240	@ 0xf0
 8009cca:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	fa92 f2a2 	rbit	r2, r2
 8009cd2:	613a      	str	r2, [r7, #16]
  return result;
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	fab2 f282 	clz	r2, r2
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	40d3      	lsrs	r3, r2
 8009cde:	4a0a      	ldr	r2, [pc, #40]	@ (8009d08 <HAL_RCC_ClockConfig+0x1cc>)
 8009ce0:	5cd3      	ldrb	r3, [r2, r3]
 8009ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8009ce6:	4a09      	ldr	r2, [pc, #36]	@ (8009d0c <HAL_RCC_ClockConfig+0x1d0>)
 8009ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cea:	4b09      	ldr	r3, [pc, #36]	@ (8009d10 <HAL_RCC_ClockConfig+0x1d4>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fc f9a2 	bl	8006038 <HAL_InitTick>

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	40023c00 	.word	0x40023c00
 8009d04:	40023800 	.word	0x40023800
 8009d08:	08027364 	.word	0x08027364
 8009d0c:	20000070 	.word	0x20000070
 8009d10:	200000c0 	.word	0x200000c0

08009d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d18:	b090      	sub	sp, #64	@ 0x40
 8009d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d20:	2300      	movs	r3, #0
 8009d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d24:	2300      	movs	r3, #0
 8009d26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d2c:	4b59      	ldr	r3, [pc, #356]	@ (8009e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f003 030c 	and.w	r3, r3, #12
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d00d      	beq.n	8009d54 <HAL_RCC_GetSysClockFreq+0x40>
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	f200 80a2 	bhi.w	8009e82 <HAL_RCC_GetSysClockFreq+0x16e>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <HAL_RCC_GetSysClockFreq+0x34>
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d003      	beq.n	8009d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8009d46:	e09c      	b.n	8009e82 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d48:	4b53      	ldr	r3, [pc, #332]	@ (8009e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8009d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009d4c:	e09c      	b.n	8009e88 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d4e:	4b53      	ldr	r3, [pc, #332]	@ (8009e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8009d50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009d52:	e099      	b.n	8009e88 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d54:	4b4f      	ldr	r3, [pc, #316]	@ (8009e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8009e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d027      	beq.n	8009dba <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8009e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	099b      	lsrs	r3, r3, #6
 8009d70:	2200      	movs	r2, #0
 8009d72:	623b      	str	r3, [r7, #32]
 8009d74:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4b47      	ldr	r3, [pc, #284]	@ (8009e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8009d80:	fb03 f201 	mul.w	r2, r3, r1
 8009d84:	2300      	movs	r3, #0
 8009d86:	fb00 f303 	mul.w	r3, r0, r3
 8009d8a:	4413      	add	r3, r2
 8009d8c:	4a43      	ldr	r2, [pc, #268]	@ (8009e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8009d8e:	fba0 2102 	umull	r2, r1, r0, r2
 8009d92:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009d94:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d98:	4413      	add	r3, r2
 8009d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9e:	2200      	movs	r2, #0
 8009da0:	61bb      	str	r3, [r7, #24]
 8009da2:	61fa      	str	r2, [r7, #28]
 8009da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009da8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009dac:	f7f7 fa32 	bl	8001214 <__aeabi_uldivmod>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4613      	mov	r3, r2
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db8:	e055      	b.n	8009e66 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009dba:	4b36      	ldr	r3, [pc, #216]	@ (8009e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	099b      	lsrs	r3, r3, #6
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	613b      	str	r3, [r7, #16]
 8009dc4:	617a      	str	r2, [r7, #20]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009dcc:	f04f 0b00 	mov.w	fp, #0
 8009dd0:	4652      	mov	r2, sl
 8009dd2:	465b      	mov	r3, fp
 8009dd4:	f04f 0000 	mov.w	r0, #0
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	0159      	lsls	r1, r3, #5
 8009dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009de2:	0150      	lsls	r0, r2, #5
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	ebb2 080a 	subs.w	r8, r2, sl
 8009dec:	eb63 090b 	sbc.w	r9, r3, fp
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009dfc:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009e00:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009e04:	ebb2 0408 	subs.w	r4, r2, r8
 8009e08:	eb63 0509 	sbc.w	r5, r3, r9
 8009e0c:	f04f 0200 	mov.w	r2, #0
 8009e10:	f04f 0300 	mov.w	r3, #0
 8009e14:	00eb      	lsls	r3, r5, #3
 8009e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e1a:	00e2      	lsls	r2, r4, #3
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	461d      	mov	r5, r3
 8009e20:	eb14 030a 	adds.w	r3, r4, sl
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	eb45 030b 	adc.w	r3, r5, fp
 8009e2a:	607b      	str	r3, [r7, #4]
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e38:	4629      	mov	r1, r5
 8009e3a:	028b      	lsls	r3, r1, #10
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4604      	mov	r4, r0
 8009e42:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8009e46:	4601      	mov	r1, r0
 8009e48:	028a      	lsls	r2, r1, #10
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e50:	2200      	movs	r2, #0
 8009e52:	60bb      	str	r3, [r7, #8]
 8009e54:	60fa      	str	r2, [r7, #12]
 8009e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e5a:	f7f7 f9db 	bl	8001214 <__aeabi_uldivmod>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4613      	mov	r3, r2
 8009e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e66:	4b0b      	ldr	r3, [pc, #44]	@ (8009e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	0c1b      	lsrs	r3, r3, #16
 8009e6c:	f003 0303 	and.w	r3, r3, #3
 8009e70:	3301      	adds	r3, #1
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009e76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e80:	e002      	b.n	8009e88 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e82:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8009e84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3740      	adds	r7, #64	@ 0x40
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e94:	40023800 	.word	0x40023800
 8009e98:	00f42400 	.word	0x00f42400
 8009e9c:	017d7840 	.word	0x017d7840

08009ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ea4:	4b02      	ldr	r3, [pc, #8]	@ (8009eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr
 8009eb0:	20000070 	.word	0x20000070

08009eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8009eba:	f7ff fff1 	bl	8009ea0 <HAL_RCC_GetHCLKFreq>
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009ec8:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8009ecc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	fa92 f2a2 	rbit	r2, r2
 8009ed4:	603a      	str	r2, [r7, #0]
  return result;
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	fab2 f282 	clz	r2, r2
 8009edc:	b2d2      	uxtb	r2, r2
 8009ede:	40d3      	lsrs	r3, r2
 8009ee0:	4a04      	ldr	r2, [pc, #16]	@ (8009ef4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009ee2:	5cd3      	ldrb	r3, [r2, r3]
 8009ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	40023800 	.word	0x40023800
 8009ef4:	08027374 	.word	0x08027374

08009ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	@ 0x28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d14c      	bne.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009f1c:	4b6d      	ldr	r3, [pc, #436]	@ (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f22:	f7fc f8cb 	bl	80060bc <HAL_GetTick>
 8009f26:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f28:	e008      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f2a:	f7fc f8c7 	bl	80060bc <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d901      	bls.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e0c7      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f3c:	4b66      	ldr	r3, [pc, #408]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f0      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8009f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	fa92 f2a2 	rbit	r2, r2
 8009f58:	613a      	str	r2, [r7, #16]
  return result;
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	fab2 f282 	clz	r2, r2
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	fa03 f202 	lsl.w	r2, r3, r2
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8009f6e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f70:	69f9      	ldr	r1, [r7, #28]
 8009f72:	fa91 f1a1 	rbit	r1, r1
 8009f76:	61b9      	str	r1, [r7, #24]
  return result;
 8009f78:	69b9      	ldr	r1, [r7, #24]
 8009f7a:	fab1 f181 	clz	r1, r1
 8009f7e:	b2c9      	uxtb	r1, r1
 8009f80:	408b      	lsls	r3, r1
 8009f82:	4955      	ldr	r1, [pc, #340]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f8a:	4b52      	ldr	r3, [pc, #328]	@ (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f90:	f7fc f894 	bl	80060bc <HAL_GetTick>
 8009f94:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f96:	e008      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f98:	f7fc f890 	bl	80060bc <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e090      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009faa:	4b4b      	ldr	r3, [pc, #300]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0f0      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0304 	and.w	r3, r3, #4
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 8083 	beq.w	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	4b43      	ldr	r3, [pc, #268]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fcc:	4a42      	ldr	r2, [pc, #264]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8009fd4:	4b40      	ldr	r3, [pc, #256]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009fe0:	4b3e      	ldr	r3, [pc, #248]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a3d      	ldr	r2, [pc, #244]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fea:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8009fec:	f7fc f866 	bl	80060bc <HAL_GetTick>
 8009ff0:	6278      	str	r0, [r7, #36]	@ 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009ff2:	e008      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009ff4:	f7fc f862 	bl	80060bc <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d901      	bls.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e062      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a006:	4b35      	ldr	r3, [pc, #212]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0f0      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a012:	4b31      	ldr	r3, [pc, #196]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a01a:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d02f      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a02a:	6a3a      	ldr	r2, [r7, #32]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d028      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a030:	4b29      	ldr	r3, [pc, #164]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a038:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a03a:	4b29      	ldr	r3, [pc, #164]	@ (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a040:	4b27      	ldr	r3, [pc, #156]	@ (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a046:	4a24      	ldr	r2, [pc, #144]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a04c:	4b22      	ldr	r3, [pc, #136]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b01      	cmp	r3, #1
 800a056:	d114      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a058:	f7fc f830 	bl	80060bc <HAL_GetTick>
 800a05c:	6278      	str	r0, [r7, #36]	@ 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a05e:	e00a      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a060:	f7fc f82c 	bl	80060bc <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a06e:	4293      	cmp	r3, r2
 800a070:	d901      	bls.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e02a      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a076:	4b18      	ldr	r3, [pc, #96]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0ee      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a08a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a08e:	d10d      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a090:	4b11      	ldr	r3, [pc, #68]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a0a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0a4:	490c      	ldr	r1, [pc, #48]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	608b      	str	r3, [r1, #8]
 800a0aa:	e005      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	4a09      	ldr	r2, [pc, #36]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a0b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a0b6:	6093      	str	r3, [r2, #8]
 800a0b8:	4b07      	ldr	r3, [pc, #28]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a0ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0c4:	4904      	ldr	r1, [pc, #16]	@ (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3728      	adds	r7, #40	@ 0x28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	42470068 	.word	0x42470068
 800a0d8:	40023800 	.word	0x40023800
 800a0dc:	40007000 	.word	0x40007000
 800a0e0:	42470e40 	.word	0x42470e40

0800a0e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e085      	b.n	800a206 <HAL_RTC_Init+0x122>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7f5b      	ldrb	r3, [r3, #29]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7f9 fdf4 	bl	8003cf8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2202      	movs	r2, #2
 800a114:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f003 0310 	and.w	r3, r3, #16
 800a120:	2b10      	cmp	r3, #16
 800a122:	d055      	beq.n	800a1d0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	22ca      	movs	r2, #202	@ 0xca
 800a12a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2253      	movs	r2, #83	@ 0x53
 800a132:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa51 	bl	800a5dc <RTC_EnterInitMode>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d12c      	bne.n	800a19e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	6812      	ldr	r2, [r2, #0]
 800a14e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a156:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6899      	ldr	r1, [r3, #8]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	431a      	orrs	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	431a      	orrs	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	430a      	orrs	r2, r1
 800a174:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68d2      	ldr	r2, [r2, #12]
 800a17e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6919      	ldr	r1, [r3, #16]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	041a      	lsls	r2, r3, #16
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fa58 	bl	800a64a <RTC_ExitInitMode>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d110      	bne.n	800a1c6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a1b2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699a      	ldr	r2, [r3, #24]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	22ff      	movs	r2, #255	@ 0xff
 800a1cc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1ce:	e001      	b.n	800a1d4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	775a      	strb	r2, [r3, #29]
  }
  /* USER CODE BEGIN RTC_Init 0 */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60bb      	str	r3, [r7, #8]
 800a1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a210 <HAL_RTC_Init+0x12c>)
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e8:	4a09      	ldr	r2, [pc, #36]	@ (800a210 <HAL_RTC_Init+0x12c>)
 800a1ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1ee:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1f0:	4b07      	ldr	r3, [pc, #28]	@ (800a210 <HAL_RTC_Init+0x12c>)
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1f8:	60bb      	str	r3, [r7, #8]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess(); // Разрешаем доступ к backup-домену
 800a1fc:	f7ff fa2e 	bl	800965c <HAL_PWR_EnableBkUpAccess>

  // Проверяем, инициализирован ли уже RTC (если нет — включаем его)
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == RESET) {
 800a200:	4b03      	ldr	r3, [pc, #12]	@ (800a210 <HAL_RTC_Init+0x12c>)
 800a202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  }

  // Важно: не вызывать Reset backup domain здесь!
  /* USER CODE END RTC_Init 0 */

  return status;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	40023800 	.word	0x40023800

0800a214 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	7f1b      	ldrb	r3, [r3, #28]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_RTC_SetTime+0x1c>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e087      	b.n	800a340 <HAL_RTC_SetTime+0x12c>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2202      	movs	r2, #2
 800a23a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d126      	bne.n	800a290 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fa13 	bl	800a686 <RTC_ByteToBcd2>
 800a260:	4603      	mov	r3, r0
 800a262:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	785b      	ldrb	r3, [r3, #1]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 fa0c 	bl	800a686 <RTC_ByteToBcd2>
 800a26e:	4603      	mov	r3, r0
 800a270:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a272:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	789b      	ldrb	r3, [r3, #2]
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fa04 	bl	800a686 <RTC_ByteToBcd2>
 800a27e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a280:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	78db      	ldrb	r3, [r3, #3]
 800a288:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	e018      	b.n	800a2c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a2b0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a2b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	78db      	ldrb	r3, [r3, #3]
 800a2bc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	22ca      	movs	r2, #202	@ 0xca
 800a2c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2253      	movs	r2, #83	@ 0x53
 800a2d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f982 	bl	800a5dc <RTC_EnterInitMode>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a2dc:	7cfb      	ldrb	r3, [r7, #19]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d120      	bne.n	800a324 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a2ec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a2f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a300:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6899      	ldr	r1, [r3, #8]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	431a      	orrs	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 f995 	bl	800a64a <RTC_ExitInitMode>
 800a320:	4603      	mov	r3, r0
 800a322:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a324:	7cfb      	ldrb	r3, [r7, #19]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2201      	movs	r2, #1
 800a32e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	22ff      	movs	r2, #255	@ 0xff
 800a336:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	771a      	strb	r2, [r3, #28]

  return status;
 800a33e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a340:	4618      	mov	r0, r3
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}

0800a348 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a362:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a366:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	0c1b      	lsrs	r3, r3, #16
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a372:	b2da      	uxtb	r2, r3
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a382:	b2da      	uxtb	r2, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a390:	b2da      	uxtb	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	0d9b      	lsrs	r3, r3, #22
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d11a      	bne.n	800a3e2 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 f985 	bl	800a6c0 <RTC_Bcd2ToByte>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 f97c 	bl	800a6c0 <RTC_Bcd2ToByte>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	789b      	ldrb	r3, [r3, #2]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 f973 	bl	800a6c0 <RTC_Bcd2ToByte>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a3ec:	b590      	push	{r4, r7, lr}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	7f1b      	ldrb	r3, [r3, #28]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d101      	bne.n	800a408 <HAL_RTC_SetDate+0x1c>
 800a404:	2302      	movs	r3, #2
 800a406:	e071      	b.n	800a4ec <HAL_RTC_SetDate+0x100>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2201      	movs	r2, #1
 800a40c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2202      	movs	r2, #2
 800a412:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10e      	bne.n	800a438 <HAL_RTC_SetDate+0x4c>
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	785b      	ldrb	r3, [r3, #1]
 800a41e:	f003 0310 	and.w	r3, r3, #16
 800a422:	2b00      	cmp	r3, #0
 800a424:	d008      	beq.n	800a438 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	f023 0310 	bic.w	r3, r3, #16
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	330a      	adds	r3, #10
 800a432:	b2da      	uxtb	r2, r3
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d11c      	bne.n	800a478 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	78db      	ldrb	r3, [r3, #3]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f91f 	bl	800a686 <RTC_ByteToBcd2>
 800a448:	4603      	mov	r3, r0
 800a44a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f918 	bl	800a686 <RTC_ByteToBcd2>
 800a456:	4603      	mov	r3, r0
 800a458:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a45a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	789b      	ldrb	r3, [r3, #2]
 800a460:	4618      	mov	r0, r3
 800a462:	f000 f910 	bl	800a686 <RTC_ByteToBcd2>
 800a466:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a468:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a472:	4313      	orrs	r3, r2
 800a474:	617b      	str	r3, [r7, #20]
 800a476:	e00e      	b.n	800a496 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	78db      	ldrb	r3, [r3, #3]
 800a47c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a484:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a48a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a492:	4313      	orrs	r3, r2
 800a494:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	22ca      	movs	r2, #202	@ 0xca
 800a49c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2253      	movs	r2, #83	@ 0x53
 800a4a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f898 	bl	800a5dc <RTC_EnterInitMode>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a4b0:	7cfb      	ldrb	r3, [r7, #19]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10c      	bne.n	800a4d0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a4c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a4c4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 f8bf 	bl	800a64a <RTC_ExitInitMode>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a4d0:	7cfb      	ldrb	r3, [r7, #19]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d102      	bne.n	800a4dc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	22ff      	movs	r2, #255	@ 0xff
 800a4e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	771a      	strb	r2, [r3, #28]

  return status;
 800a4ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd90      	pop	{r4, r7, pc}

0800a4f4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a50e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a512:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	0c1b      	lsrs	r3, r3, #16
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	0a1b      	lsrs	r3, r3, #8
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 031f 	and.w	r3, r3, #31
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	b2db      	uxtb	r3, r3
 800a532:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a536:	b2da      	uxtb	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	0b5b      	lsrs	r3, r3, #13
 800a540:	b2db      	uxtb	r3, r3
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	b2da      	uxtb	r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d11a      	bne.n	800a588 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	78db      	ldrb	r3, [r3, #3]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 f8b2 	bl	800a6c0 <RTC_Bcd2ToByte>
 800a55c:	4603      	mov	r3, r0
 800a55e:	461a      	mov	r2, r3
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f8a9 	bl	800a6c0 <RTC_Bcd2ToByte>
 800a56e:	4603      	mov	r3, r0
 800a570:	461a      	mov	r2, r3
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	789b      	ldrb	r3, [r3, #2]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 f8a0 	bl	800a6c0 <RTC_Bcd2ToByte>
 800a580:	4603      	mov	r3, r0
 800a582:	461a      	mov	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f643 7257 	movw	r2, #16215	@ 0x3f57
 800a5a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a5a8:	f7fb fd88 	bl	80060bc <HAL_GetTick>
 800a5ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a5ae:	e009      	b.n	800a5c4 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a5b0:	f7fb fd84 	bl	80060bc <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5be:	d901      	bls.n	800a5c4 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e007      	b.n	800a5d4 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	f003 0320 	and.w	r3, r3, #32
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0ee      	beq.n	800a5b0 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d122      	bne.n	800a640 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a608:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a60a:	f7fb fd57 	bl	80060bc <HAL_GetTick>
 800a60e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a610:	e00c      	b.n	800a62c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a612:	f7fb fd53 	bl	80060bc <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a620:	d904      	bls.n	800a62c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2204      	movs	r2, #4
 800a626:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d102      	bne.n	800a640 <RTC_EnterInitMode+0x64>
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d1e8      	bne.n	800a612 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a640:	7bfb      	ldrb	r3, [r7, #15]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a664:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff ff93 	bl	800a592 <HAL_RTC_WaitForSynchro>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2204      	movs	r2, #4
 800a676:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a686:	b480      	push	{r7}
 800a688:	b085      	sub	sp, #20
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	4603      	mov	r3, r0
 800a68e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a694:	e005      	b.n	800a6a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a69c:	79fb      	ldrb	r3, [r7, #7]
 800a69e:	3b0a      	subs	r3, #10
 800a6a0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a6a2:	79fb      	ldrb	r3, [r7, #7]
 800a6a4:	2b09      	cmp	r3, #9
 800a6a6:	d8f6      	bhi.n	800a696 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	b2db      	uxtb	r3, r3
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bc80      	pop	{r7}
 800a6be:	4770      	bx	lr

0800a6c0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	091b      	lsrs	r3, r3, #4
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	f003 030f 	and.w	r3, r3, #15
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	b2db      	uxtb	r3, r3
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr

0800a6fa <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b087      	sub	sp, #28
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3350      	adds	r3, #80	@ 0x50
 800a710:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4413      	add	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	601a      	str	r2, [r3, #0]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	bc80      	pop	{r7}
 800a72a:	4770      	bx	lr

0800a72c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a736:	2300      	movs	r3, #0
 800a738:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3350      	adds	r3, #80	@ 0x50
 800a740:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	bc80      	pop	{r7}
 800a758:	4770      	bx	lr

0800a75a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b082      	sub	sp, #8
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d101      	bne.n	800a76c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e041      	b.n	800a7f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d106      	bne.n	800a786 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7f9 facf 	bl	8003d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2202      	movs	r2, #2
 800a78a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3304      	adds	r3, #4
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f000 f95b 	bl	800aa54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d001      	beq.n	800a810 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e046      	b.n	800a89e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a22      	ldr	r2, [pc, #136]	@ (800a8a8 <HAL_TIM_Base_Start+0xb0>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d022      	beq.n	800a868 <HAL_TIM_Base_Start+0x70>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82a:	d01d      	beq.n	800a868 <HAL_TIM_Base_Start+0x70>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a1e      	ldr	r2, [pc, #120]	@ (800a8ac <HAL_TIM_Base_Start+0xb4>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d018      	beq.n	800a868 <HAL_TIM_Base_Start+0x70>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a1d      	ldr	r2, [pc, #116]	@ (800a8b0 <HAL_TIM_Base_Start+0xb8>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d013      	beq.n	800a868 <HAL_TIM_Base_Start+0x70>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a1b      	ldr	r2, [pc, #108]	@ (800a8b4 <HAL_TIM_Base_Start+0xbc>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00e      	beq.n	800a868 <HAL_TIM_Base_Start+0x70>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8b8 <HAL_TIM_Base_Start+0xc0>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d009      	beq.n	800a868 <HAL_TIM_Base_Start+0x70>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a18      	ldr	r2, [pc, #96]	@ (800a8bc <HAL_TIM_Base_Start+0xc4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d004      	beq.n	800a868 <HAL_TIM_Base_Start+0x70>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a17      	ldr	r2, [pc, #92]	@ (800a8c0 <HAL_TIM_Base_Start+0xc8>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d111      	bne.n	800a88c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f003 0307 	and.w	r3, r3, #7
 800a872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b06      	cmp	r3, #6
 800a878:	d010      	beq.n	800a89c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f042 0201 	orr.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a88a:	e007      	b.n	800a89c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0201 	orr.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bc80      	pop	{r7}
 800a8a6:	4770      	bx	lr
 800a8a8:	40010000 	.word	0x40010000
 800a8ac:	40000400 	.word	0x40000400
 800a8b0:	40000800 	.word	0x40000800
 800a8b4:	40000c00 	.word	0x40000c00
 800a8b8:	40010400 	.word	0x40010400
 800a8bc:	40014000 	.word	0x40014000
 800a8c0:	40001800 	.word	0x40001800

0800a8c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d101      	bne.n	800a8e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e0b4      	b.n	800aa4a <HAL_TIM_ConfigClockSource+0x186>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a918:	d03e      	beq.n	800a998 <HAL_TIM_ConfigClockSource+0xd4>
 800a91a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a91e:	f200 8087 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a926:	f000 8086 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x172>
 800a92a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92e:	d87f      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a930:	2b70      	cmp	r3, #112	@ 0x70
 800a932:	d01a      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0xa6>
 800a934:	2b70      	cmp	r3, #112	@ 0x70
 800a936:	d87b      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a938:	2b60      	cmp	r3, #96	@ 0x60
 800a93a:	d050      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x11a>
 800a93c:	2b60      	cmp	r3, #96	@ 0x60
 800a93e:	d877      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a940:	2b50      	cmp	r3, #80	@ 0x50
 800a942:	d03c      	beq.n	800a9be <HAL_TIM_ConfigClockSource+0xfa>
 800a944:	2b50      	cmp	r3, #80	@ 0x50
 800a946:	d873      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a948:	2b40      	cmp	r3, #64	@ 0x40
 800a94a:	d058      	beq.n	800a9fe <HAL_TIM_ConfigClockSource+0x13a>
 800a94c:	2b40      	cmp	r3, #64	@ 0x40
 800a94e:	d86f      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a950:	2b30      	cmp	r3, #48	@ 0x30
 800a952:	d064      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a954:	2b30      	cmp	r3, #48	@ 0x30
 800a956:	d86b      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a958:	2b20      	cmp	r3, #32
 800a95a:	d060      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a95c:	2b20      	cmp	r3, #32
 800a95e:	d867      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
 800a960:	2b00      	cmp	r3, #0
 800a962:	d05c      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a964:	2b10      	cmp	r3, #16
 800a966:	d05a      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x15a>
 800a968:	e062      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a97a:	f000 f98c 	bl	800ac96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a98c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	609a      	str	r2, [r3, #8]
      break;
 800a996:	e04f      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9a8:	f000 f975 	bl	800ac96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9ba:	609a      	str	r2, [r3, #8]
      break;
 800a9bc:	e03c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f000 f8ec 	bl	800aba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2150      	movs	r1, #80	@ 0x50
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 f943 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800a9dc:	e02c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f000 f90a 	bl	800ac04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2160      	movs	r1, #96	@ 0x60
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 f933 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800a9fc:	e01c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f000 f8cc 	bl	800aba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2140      	movs	r1, #64	@ 0x40
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f923 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800aa1c:	e00c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f000 f91a 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800aa2e:	e003      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	73fb      	strb	r3, [r7, #15]
      break;
 800aa34:	e000      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
	...

0800aa54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a45      	ldr	r2, [pc, #276]	@ (800ab7c <TIM_Base_SetConfig+0x128>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d013      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa72:	d00f      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a42      	ldr	r2, [pc, #264]	@ (800ab80 <TIM_Base_SetConfig+0x12c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d00b      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a41      	ldr	r2, [pc, #260]	@ (800ab84 <TIM_Base_SetConfig+0x130>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d007      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a40      	ldr	r2, [pc, #256]	@ (800ab88 <TIM_Base_SetConfig+0x134>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a3f      	ldr	r2, [pc, #252]	@ (800ab8c <TIM_Base_SetConfig+0x138>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d108      	bne.n	800aaa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a34      	ldr	r2, [pc, #208]	@ (800ab7c <TIM_Base_SetConfig+0x128>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d02b      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aab4:	d027      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a31      	ldr	r2, [pc, #196]	@ (800ab80 <TIM_Base_SetConfig+0x12c>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d023      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a30      	ldr	r2, [pc, #192]	@ (800ab84 <TIM_Base_SetConfig+0x130>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d01f      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a2f      	ldr	r2, [pc, #188]	@ (800ab88 <TIM_Base_SetConfig+0x134>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d01b      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a2e      	ldr	r2, [pc, #184]	@ (800ab8c <TIM_Base_SetConfig+0x138>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d017      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a2d      	ldr	r2, [pc, #180]	@ (800ab90 <TIM_Base_SetConfig+0x13c>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d013      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a2c      	ldr	r2, [pc, #176]	@ (800ab94 <TIM_Base_SetConfig+0x140>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00f      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a2b      	ldr	r2, [pc, #172]	@ (800ab98 <TIM_Base_SetConfig+0x144>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d00b      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a2a      	ldr	r2, [pc, #168]	@ (800ab9c <TIM_Base_SetConfig+0x148>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d007      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a29      	ldr	r2, [pc, #164]	@ (800aba0 <TIM_Base_SetConfig+0x14c>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d003      	beq.n	800ab06 <TIM_Base_SetConfig+0xb2>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a28      	ldr	r2, [pc, #160]	@ (800aba4 <TIM_Base_SetConfig+0x150>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d108      	bne.n	800ab18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a0f      	ldr	r2, [pc, #60]	@ (800ab7c <TIM_Base_SetConfig+0x128>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a11      	ldr	r2, [pc, #68]	@ (800ab8c <TIM_Base_SetConfig+0x138>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d103      	bne.n	800ab54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d105      	bne.n	800ab72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f023 0201 	bic.w	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	611a      	str	r2, [r3, #16]
  }
}
 800ab72:	bf00      	nop
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr
 800ab7c:	40010000 	.word	0x40010000
 800ab80:	40000400 	.word	0x40000400
 800ab84:	40000800 	.word	0x40000800
 800ab88:	40000c00 	.word	0x40000c00
 800ab8c:	40010400 	.word	0x40010400
 800ab90:	40014000 	.word	0x40014000
 800ab94:	40014400 	.word	0x40014400
 800ab98:	40014800 	.word	0x40014800
 800ab9c:	40001800 	.word	0x40001800
 800aba0:	40001c00 	.word	0x40001c00
 800aba4:	40002000 	.word	0x40002000

0800aba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	f023 0201 	bic.w	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f023 030a 	bic.w	r3, r3, #10
 800abe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr

0800ac04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	f023 0210 	bic.w	r2, r3, #16
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	031b      	lsls	r3, r3, #12
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	011b      	lsls	r3, r3, #4
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	621a      	str	r2, [r3, #32]
}
 800ac58:	bf00      	nop
 800ac5a:	371c      	adds	r7, #28
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bc80      	pop	{r7}
 800ac60:	4770      	bx	lr

0800ac62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	f043 0307 	orr.w	r3, r3, #7
 800ac84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	609a      	str	r2, [r3, #8]
}
 800ac8c:	bf00      	nop
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bc80      	pop	{r7}
 800ac94:	4770      	bx	lr

0800ac96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b087      	sub	sp, #28
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
 800aca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	021a      	lsls	r2, r3, #8
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	431a      	orrs	r2, r3
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	609a      	str	r2, [r3, #8]
}
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bc80      	pop	{r7}
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d101      	bne.n	800acec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ace8:	2302      	movs	r3, #2
 800acea:	e05a      	b.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a20      	ldr	r2, [pc, #128]	@ (800adac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d022      	beq.n	800ad76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad38:	d01d      	beq.n	800ad76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a1c      	ldr	r2, [pc, #112]	@ (800adb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d018      	beq.n	800ad76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a1a      	ldr	r2, [pc, #104]	@ (800adb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d013      	beq.n	800ad76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a19      	ldr	r2, [pc, #100]	@ (800adb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d00e      	beq.n	800ad76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a17      	ldr	r2, [pc, #92]	@ (800adbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d009      	beq.n	800ad76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a16      	ldr	r2, [pc, #88]	@ (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d004      	beq.n	800ad76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a14      	ldr	r2, [pc, #80]	@ (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d10c      	bne.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr
 800adac:	40010000 	.word	0x40010000
 800adb0:	40000400 	.word	0x40000400
 800adb4:	40000800 	.word	0x40000800
 800adb8:	40000c00 	.word	0x40000c00
 800adbc:	40010400 	.word	0x40010400
 800adc0:	40014000 	.word	0x40014000
 800adc4:	40001800 	.word	0x40001800

0800adc8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800adce:	4b87      	ldr	r3, [pc, #540]	@ (800afec <MX_LWIP_Init+0x224>)
 800add0:	22c0      	movs	r2, #192	@ 0xc0
 800add2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800add4:	4b85      	ldr	r3, [pc, #532]	@ (800afec <MX_LWIP_Init+0x224>)
 800add6:	22a8      	movs	r2, #168	@ 0xa8
 800add8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800adda:	4b84      	ldr	r3, [pc, #528]	@ (800afec <MX_LWIP_Init+0x224>)
 800addc:	2201      	movs	r2, #1
 800adde:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 178;
 800ade0:	4b82      	ldr	r3, [pc, #520]	@ (800afec <MX_LWIP_Init+0x224>)
 800ade2:	22b2      	movs	r2, #178	@ 0xb2
 800ade4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ade6:	4b82      	ldr	r3, [pc, #520]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800ade8:	22ff      	movs	r2, #255	@ 0xff
 800adea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800adec:	4b80      	ldr	r3, [pc, #512]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800adee:	22ff      	movs	r2, #255	@ 0xff
 800adf0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800adf2:	4b7f      	ldr	r3, [pc, #508]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800adf4:	22ff      	movs	r2, #255	@ 0xff
 800adf6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800adf8:	4b7d      	ldr	r3, [pc, #500]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800adfe:	4b7d      	ldr	r3, [pc, #500]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800ae00:	22c0      	movs	r2, #192	@ 0xc0
 800ae02:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ae04:	4b7b      	ldr	r3, [pc, #492]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800ae06:	22a8      	movs	r2, #168	@ 0xa8
 800ae08:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ae0a:	4b7a      	ldr	r3, [pc, #488]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ae10:	4b78      	ldr	r3, [pc, #480]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800ae12:	2201      	movs	r2, #1
 800ae14:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800ae16:	f009 facb 	bl	80143b0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ae1a:	4b74      	ldr	r3, [pc, #464]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	061a      	lsls	r2, r3, #24
 800ae20:	4b72      	ldr	r3, [pc, #456]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae22:	785b      	ldrb	r3, [r3, #1]
 800ae24:	041b      	lsls	r3, r3, #16
 800ae26:	431a      	orrs	r2, r3
 800ae28:	4b70      	ldr	r3, [pc, #448]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae2a:	789b      	ldrb	r3, [r3, #2]
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	4a6e      	ldr	r2, [pc, #440]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae32:	78d2      	ldrb	r2, [r2, #3]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	061a      	lsls	r2, r3, #24
 800ae38:	4b6c      	ldr	r3, [pc, #432]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	0619      	lsls	r1, r3, #24
 800ae3e:	4b6b      	ldr	r3, [pc, #428]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae40:	785b      	ldrb	r3, [r3, #1]
 800ae42:	041b      	lsls	r3, r3, #16
 800ae44:	4319      	orrs	r1, r3
 800ae46:	4b69      	ldr	r3, [pc, #420]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae48:	789b      	ldrb	r3, [r3, #2]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	4967      	ldr	r1, [pc, #412]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae50:	78c9      	ldrb	r1, [r1, #3]
 800ae52:	430b      	orrs	r3, r1
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	4b63      	ldr	r3, [pc, #396]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	0619      	lsls	r1, r3, #24
 800ae62:	4b62      	ldr	r3, [pc, #392]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae64:	785b      	ldrb	r3, [r3, #1]
 800ae66:	041b      	lsls	r3, r3, #16
 800ae68:	4319      	orrs	r1, r3
 800ae6a:	4b60      	ldr	r3, [pc, #384]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae6c:	789b      	ldrb	r3, [r3, #2]
 800ae6e:	021b      	lsls	r3, r3, #8
 800ae70:	430b      	orrs	r3, r1
 800ae72:	495e      	ldr	r1, [pc, #376]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae74:	78c9      	ldrb	r1, [r1, #3]
 800ae76:	430b      	orrs	r3, r1
 800ae78:	0a1b      	lsrs	r3, r3, #8
 800ae7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	4b5a      	ldr	r3, [pc, #360]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	0619      	lsls	r1, r3, #24
 800ae86:	4b59      	ldr	r3, [pc, #356]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae88:	785b      	ldrb	r3, [r3, #1]
 800ae8a:	041b      	lsls	r3, r3, #16
 800ae8c:	4319      	orrs	r1, r3
 800ae8e:	4b57      	ldr	r3, [pc, #348]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae90:	789b      	ldrb	r3, [r3, #2]
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	430b      	orrs	r3, r1
 800ae96:	4955      	ldr	r1, [pc, #340]	@ (800afec <MX_LWIP_Init+0x224>)
 800ae98:	78c9      	ldrb	r1, [r1, #3]
 800ae9a:	430b      	orrs	r3, r1
 800ae9c:	0e1b      	lsrs	r3, r3, #24
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	4a55      	ldr	r2, [pc, #340]	@ (800aff8 <MX_LWIP_Init+0x230>)
 800aea2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800aea4:	4b52      	ldr	r3, [pc, #328]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	061a      	lsls	r2, r3, #24
 800aeaa:	4b51      	ldr	r3, [pc, #324]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	041b      	lsls	r3, r3, #16
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	4b4f      	ldr	r3, [pc, #316]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aeb4:	789b      	ldrb	r3, [r3, #2]
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	4a4d      	ldr	r2, [pc, #308]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aebc:	78d2      	ldrb	r2, [r2, #3]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	061a      	lsls	r2, r3, #24
 800aec2:	4b4b      	ldr	r3, [pc, #300]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	0619      	lsls	r1, r3, #24
 800aec8:	4b49      	ldr	r3, [pc, #292]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aeca:	785b      	ldrb	r3, [r3, #1]
 800aecc:	041b      	lsls	r3, r3, #16
 800aece:	4319      	orrs	r1, r3
 800aed0:	4b47      	ldr	r3, [pc, #284]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aed2:	789b      	ldrb	r3, [r3, #2]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	430b      	orrs	r3, r1
 800aed8:	4945      	ldr	r1, [pc, #276]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aeda:	78c9      	ldrb	r1, [r1, #3]
 800aedc:	430b      	orrs	r3, r1
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aee4:	431a      	orrs	r2, r3
 800aee6:	4b42      	ldr	r3, [pc, #264]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	0619      	lsls	r1, r3, #24
 800aeec:	4b40      	ldr	r3, [pc, #256]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aeee:	785b      	ldrb	r3, [r3, #1]
 800aef0:	041b      	lsls	r3, r3, #16
 800aef2:	4319      	orrs	r1, r3
 800aef4:	4b3e      	ldr	r3, [pc, #248]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aef6:	789b      	ldrb	r3, [r3, #2]
 800aef8:	021b      	lsls	r3, r3, #8
 800aefa:	430b      	orrs	r3, r1
 800aefc:	493c      	ldr	r1, [pc, #240]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800aefe:	78c9      	ldrb	r1, [r1, #3]
 800af00:	430b      	orrs	r3, r1
 800af02:	0a1b      	lsrs	r3, r3, #8
 800af04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af08:	431a      	orrs	r2, r3
 800af0a:	4b39      	ldr	r3, [pc, #228]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	0619      	lsls	r1, r3, #24
 800af10:	4b37      	ldr	r3, [pc, #220]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800af12:	785b      	ldrb	r3, [r3, #1]
 800af14:	041b      	lsls	r3, r3, #16
 800af16:	4319      	orrs	r1, r3
 800af18:	4b35      	ldr	r3, [pc, #212]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800af1a:	789b      	ldrb	r3, [r3, #2]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	430b      	orrs	r3, r1
 800af20:	4933      	ldr	r1, [pc, #204]	@ (800aff0 <MX_LWIP_Init+0x228>)
 800af22:	78c9      	ldrb	r1, [r1, #3]
 800af24:	430b      	orrs	r3, r1
 800af26:	0e1b      	lsrs	r3, r3, #24
 800af28:	4313      	orrs	r3, r2
 800af2a:	4a34      	ldr	r2, [pc, #208]	@ (800affc <MX_LWIP_Init+0x234>)
 800af2c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800af2e:	4b31      	ldr	r3, [pc, #196]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	061a      	lsls	r2, r3, #24
 800af34:	4b2f      	ldr	r3, [pc, #188]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af36:	785b      	ldrb	r3, [r3, #1]
 800af38:	041b      	lsls	r3, r3, #16
 800af3a:	431a      	orrs	r2, r3
 800af3c:	4b2d      	ldr	r3, [pc, #180]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af3e:	789b      	ldrb	r3, [r3, #2]
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	4313      	orrs	r3, r2
 800af44:	4a2b      	ldr	r2, [pc, #172]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af46:	78d2      	ldrb	r2, [r2, #3]
 800af48:	4313      	orrs	r3, r2
 800af4a:	061a      	lsls	r2, r3, #24
 800af4c:	4b29      	ldr	r3, [pc, #164]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	0619      	lsls	r1, r3, #24
 800af52:	4b28      	ldr	r3, [pc, #160]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af54:	785b      	ldrb	r3, [r3, #1]
 800af56:	041b      	lsls	r3, r3, #16
 800af58:	4319      	orrs	r1, r3
 800af5a:	4b26      	ldr	r3, [pc, #152]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af5c:	789b      	ldrb	r3, [r3, #2]
 800af5e:	021b      	lsls	r3, r3, #8
 800af60:	430b      	orrs	r3, r1
 800af62:	4924      	ldr	r1, [pc, #144]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af64:	78c9      	ldrb	r1, [r1, #3]
 800af66:	430b      	orrs	r3, r1
 800af68:	021b      	lsls	r3, r3, #8
 800af6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800af6e:	431a      	orrs	r2, r3
 800af70:	4b20      	ldr	r3, [pc, #128]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	0619      	lsls	r1, r3, #24
 800af76:	4b1f      	ldr	r3, [pc, #124]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af78:	785b      	ldrb	r3, [r3, #1]
 800af7a:	041b      	lsls	r3, r3, #16
 800af7c:	4319      	orrs	r1, r3
 800af7e:	4b1d      	ldr	r3, [pc, #116]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af80:	789b      	ldrb	r3, [r3, #2]
 800af82:	021b      	lsls	r3, r3, #8
 800af84:	430b      	orrs	r3, r1
 800af86:	491b      	ldr	r1, [pc, #108]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af88:	78c9      	ldrb	r1, [r1, #3]
 800af8a:	430b      	orrs	r3, r1
 800af8c:	0a1b      	lsrs	r3, r3, #8
 800af8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af92:	431a      	orrs	r2, r3
 800af94:	4b17      	ldr	r3, [pc, #92]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	0619      	lsls	r1, r3, #24
 800af9a:	4b16      	ldr	r3, [pc, #88]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800af9c:	785b      	ldrb	r3, [r3, #1]
 800af9e:	041b      	lsls	r3, r3, #16
 800afa0:	4319      	orrs	r1, r3
 800afa2:	4b14      	ldr	r3, [pc, #80]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800afa4:	789b      	ldrb	r3, [r3, #2]
 800afa6:	021b      	lsls	r3, r3, #8
 800afa8:	430b      	orrs	r3, r1
 800afaa:	4912      	ldr	r1, [pc, #72]	@ (800aff4 <MX_LWIP_Init+0x22c>)
 800afac:	78c9      	ldrb	r1, [r1, #3]
 800afae:	430b      	orrs	r3, r1
 800afb0:	0e1b      	lsrs	r3, r3, #24
 800afb2:	4313      	orrs	r3, r2
 800afb4:	4a12      	ldr	r2, [pc, #72]	@ (800b000 <MX_LWIP_Init+0x238>)
 800afb6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800afb8:	4b12      	ldr	r3, [pc, #72]	@ (800b004 <MX_LWIP_Init+0x23c>)
 800afba:	9302      	str	r3, [sp, #8]
 800afbc:	4b12      	ldr	r3, [pc, #72]	@ (800b008 <MX_LWIP_Init+0x240>)
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	2300      	movs	r3, #0
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	4b0e      	ldr	r3, [pc, #56]	@ (800b000 <MX_LWIP_Init+0x238>)
 800afc6:	4a0d      	ldr	r2, [pc, #52]	@ (800affc <MX_LWIP_Init+0x234>)
 800afc8:	490b      	ldr	r1, [pc, #44]	@ (800aff8 <MX_LWIP_Init+0x230>)
 800afca:	4810      	ldr	r0, [pc, #64]	@ (800b00c <MX_LWIP_Init+0x244>)
 800afcc:	f009 fe8e 	bl	8014cec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800afd0:	480e      	ldr	r0, [pc, #56]	@ (800b00c <MX_LWIP_Init+0x244>)
 800afd2:	f009 ff73 	bl	8014ebc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800afd6:	480d      	ldr	r0, [pc, #52]	@ (800b00c <MX_LWIP_Init+0x244>)
 800afd8:	f009 ff7e 	bl	8014ed8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800afdc:	490c      	ldr	r1, [pc, #48]	@ (800b010 <MX_LWIP_Init+0x248>)
 800afde:	480b      	ldr	r0, [pc, #44]	@ (800b00c <MX_LWIP_Init+0x244>)
 800afe0:	f009 fff8 	bl	8014fd4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800afe4:	bf00      	nop
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20005038 	.word	0x20005038
 800aff0:	2000503c 	.word	0x2000503c
 800aff4:	20005040 	.word	0x20005040
 800aff8:	2000502c 	.word	0x2000502c
 800affc:	20005030 	.word	0x20005030
 800b000:	20005034 	.word	0x20005034
 800b004:	08020921 	.word	0x08020921
 800b008:	0800b5b5 	.word	0x0800b5b5
 800b00c:	20004fc0 	.word	0x20004fc0
 800b010:	0800b621 	.word	0x0800b621

0800b014 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800b018:	4803      	ldr	r0, [pc, #12]	@ (800b028 <MX_LWIP_Process+0x14>)
 800b01a:	f000 faab 	bl	800b574 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800b01e:	f010 fb4d 	bl	801b6bc <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800b022:	bf00      	nop
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20004fc0 	.word	0x20004fc0

0800b02c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08e      	sub	sp, #56	@ 0x38
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	609a      	str	r2, [r3, #8]
 800b040:	60da      	str	r2, [r3, #12]
 800b042:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a46      	ldr	r2, [pc, #280]	@ (800b164 <HAL_ETH_MspInit+0x138>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	f040 8085 	bne.w	800b15a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b050:	2300      	movs	r3, #0
 800b052:	623b      	str	r3, [r7, #32]
 800b054:	4b44      	ldr	r3, [pc, #272]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b058:	4a43      	ldr	r2, [pc, #268]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b05a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b05e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b060:	4b41      	ldr	r3, [pc, #260]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b068:	623b      	str	r3, [r7, #32]
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	2300      	movs	r3, #0
 800b06e:	61fb      	str	r3, [r7, #28]
 800b070:	4b3d      	ldr	r3, [pc, #244]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b074:	4a3c      	ldr	r2, [pc, #240]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b076:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b07a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b07c:	4b3a      	ldr	r3, [pc, #232]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	2300      	movs	r3, #0
 800b08a:	61bb      	str	r3, [r7, #24]
 800b08c:	4b36      	ldr	r3, [pc, #216]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b090:	4a35      	ldr	r2, [pc, #212]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b092:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b096:	6313      	str	r3, [r2, #48]	@ 0x30
 800b098:	4b33      	ldr	r3, [pc, #204]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b09c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0a0:	61bb      	str	r3, [r7, #24]
 800b0a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	4b2f      	ldr	r3, [pc, #188]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ac:	4a2e      	ldr	r2, [pc, #184]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0ae:	f043 0304 	orr.w	r3, r3, #4
 800b0b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0b4:	4b2c      	ldr	r3, [pc, #176]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	4b28      	ldr	r3, [pc, #160]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c8:	4a27      	ldr	r2, [pc, #156]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0ca:	f043 0301 	orr.w	r3, r3, #1
 800b0ce:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0d0:	4b25      	ldr	r3, [pc, #148]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	613b      	str	r3, [r7, #16]
 800b0da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	4b21      	ldr	r3, [pc, #132]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0e4:	4a20      	ldr	r2, [pc, #128]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0e6:	f043 0302 	orr.w	r3, r3, #2
 800b0ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b168 <HAL_ETH_MspInit+0x13c>)
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b0f8:	2332      	movs	r3, #50	@ 0x32
 800b0fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b100:	2300      	movs	r3, #0
 800b102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b104:	2303      	movs	r3, #3
 800b106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b108:	230b      	movs	r3, #11
 800b10a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b10c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b110:	4619      	mov	r1, r3
 800b112:	4816      	ldr	r0, [pc, #88]	@ (800b16c <HAL_ETH_MspInit+0x140>)
 800b114:	f7fd fc28 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b118:	2386      	movs	r3, #134	@ 0x86
 800b11a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11c:	2302      	movs	r3, #2
 800b11e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b120:	2300      	movs	r3, #0
 800b122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b124:	2303      	movs	r3, #3
 800b126:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b128:	230b      	movs	r3, #11
 800b12a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b12c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b130:	4619      	mov	r1, r3
 800b132:	480f      	ldr	r0, [pc, #60]	@ (800b170 <HAL_ETH_MspInit+0x144>)
 800b134:	f7fd fc18 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800b138:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13e:	2302      	movs	r3, #2
 800b140:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b142:	2300      	movs	r3, #0
 800b144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b146:	2303      	movs	r3, #3
 800b148:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b14a:	230b      	movs	r3, #11
 800b14c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b14e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b152:	4619      	mov	r1, r3
 800b154:	4807      	ldr	r0, [pc, #28]	@ (800b174 <HAL_ETH_MspInit+0x148>)
 800b156:	f7fd fc07 	bl	8008968 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b15a:	bf00      	nop
 800b15c:	3738      	adds	r7, #56	@ 0x38
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	40028000 	.word	0x40028000
 800b168:	40023800 	.word	0x40023800
 800b16c:	40020800 	.word	0x40020800
 800b170:	40020000 	.word	0x40020000
 800b174:	40020400 	.word	0x40020400

0800b178 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b184:	4b4d      	ldr	r3, [pc, #308]	@ (800b2bc <low_level_init+0x144>)
 800b186:	4a4e      	ldr	r2, [pc, #312]	@ (800b2c0 <low_level_init+0x148>)
 800b188:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b18a:	4b4c      	ldr	r3, [pc, #304]	@ (800b2bc <low_level_init+0x144>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b190:	4b4a      	ldr	r3, [pc, #296]	@ (800b2bc <low_level_init+0x144>)
 800b192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b196:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b198:	4b48      	ldr	r3, [pc, #288]	@ (800b2bc <low_level_init+0x144>)
 800b19a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b19e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b1a0:	4b46      	ldr	r3, [pc, #280]	@ (800b2bc <low_level_init+0x144>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b1aa:	2380      	movs	r3, #128	@ 0x80
 800b1ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b1ae:	23e1      	movs	r3, #225	@ 0xe1
 800b1b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b1be:	4a3f      	ldr	r2, [pc, #252]	@ (800b2bc <low_level_init+0x144>)
 800b1c0:	f107 0308 	add.w	r3, r7, #8
 800b1c4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800b1c6:	4b3d      	ldr	r3, [pc, #244]	@ (800b2bc <low_level_init+0x144>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b1cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b2bc <low_level_init+0x144>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b1d2:	4b3a      	ldr	r3, [pc, #232]	@ (800b2bc <low_level_init+0x144>)
 800b1d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b1d8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b1da:	4838      	ldr	r0, [pc, #224]	@ (800b2bc <low_level_init+0x144>)
 800b1dc:	f7fb fff2 	bl	80071c4 <HAL_ETH_Init>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800b1e4:	7dfb      	ldrb	r3, [r7, #23]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d108      	bne.n	800b1fc <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b1f0:	f043 0304 	orr.w	r3, r3, #4
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	4a31      	ldr	r2, [pc, #196]	@ (800b2c4 <low_level_init+0x14c>)
 800b200:	4931      	ldr	r1, [pc, #196]	@ (800b2c8 <low_level_init+0x150>)
 800b202:	482e      	ldr	r0, [pc, #184]	@ (800b2bc <low_level_init+0x144>)
 800b204:	f7fc f96a 	bl	80074dc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b208:	2304      	movs	r3, #4
 800b20a:	4a30      	ldr	r2, [pc, #192]	@ (800b2cc <low_level_init+0x154>)
 800b20c:	4930      	ldr	r1, [pc, #192]	@ (800b2d0 <low_level_init+0x158>)
 800b20e:	482b      	ldr	r0, [pc, #172]	@ (800b2bc <low_level_init+0x144>)
 800b210:	f7fc f9cb 	bl	80075aa <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2206      	movs	r2, #6
 800b218:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b21c:	4b27      	ldr	r3, [pc, #156]	@ (800b2bc <low_level_init+0x144>)
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	781a      	ldrb	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b228:	4b24      	ldr	r3, [pc, #144]	@ (800b2bc <low_level_init+0x144>)
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	785a      	ldrb	r2, [r3, #1]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b234:	4b21      	ldr	r3, [pc, #132]	@ (800b2bc <low_level_init+0x144>)
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	789a      	ldrb	r2, [r3, #2]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b240:	4b1e      	ldr	r3, [pc, #120]	@ (800b2bc <low_level_init+0x144>)
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	78da      	ldrb	r2, [r3, #3]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b24c:	4b1b      	ldr	r3, [pc, #108]	@ (800b2bc <low_level_init+0x144>)
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	791a      	ldrb	r2, [r3, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b258:	4b18      	ldr	r3, [pc, #96]	@ (800b2bc <low_level_init+0x144>)
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	795a      	ldrb	r2, [r3, #5]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b26a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b272:	f043 030a 	orr.w	r3, r3, #10
 800b276:	b2da      	uxtb	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b27e:	480f      	ldr	r0, [pc, #60]	@ (800b2bc <low_level_init+0x144>)
 800b280:	f7fc fc37 	bl	8007af2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b284:	f107 0310 	add.w	r3, r7, #16
 800b288:	461a      	mov	r2, r3
 800b28a:	211d      	movs	r1, #29
 800b28c:	480b      	ldr	r0, [pc, #44]	@ (800b2bc <low_level_init+0x144>)
 800b28e:	f7fc fb62 	bl	8007956 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f043 030b 	orr.w	r3, r3, #11
 800b298:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	461a      	mov	r2, r3
 800b29e:	211d      	movs	r1, #29
 800b2a0:	4806      	ldr	r0, [pc, #24]	@ (800b2bc <low_level_init+0x144>)
 800b2a2:	f7fc fbc0 	bl	8007a26 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b2a6:	f107 0310 	add.w	r3, r7, #16
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	211d      	movs	r1, #29
 800b2ae:	4803      	ldr	r0, [pc, #12]	@ (800b2bc <low_level_init+0x144>)
 800b2b0:	f7fc fb51 	bl	8007956 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b2b4:	bf00      	nop
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	200080e4 	.word	0x200080e4
 800b2c0:	40028000 	.word	0x40028000
 800b2c4:	20006914 	.word	0x20006914
 800b2c8:	200050c4 	.word	0x200050c4
 800b2cc:	20005144 	.word	0x20005144
 800b2d0:	20005044 	.word	0x20005044

0800b2d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08a      	sub	sp, #40	@ 0x28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b2de:	4b4b      	ldr	r3, [pc, #300]	@ (800b40c <low_level_output+0x138>)
 800b2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b2f6:	4b45      	ldr	r3, [pc, #276]	@ (800b40c <low_level_output+0x138>)
 800b2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	623b      	str	r3, [r7, #32]
 800b304:	e05a      	b.n	800b3bc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da03      	bge.n	800b316 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b30e:	23f8      	movs	r3, #248	@ 0xf8
 800b310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800b314:	e05c      	b.n	800b3d0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	895b      	ldrh	r3, [r3, #10]
 800b31a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b320:	e02f      	b.n	800b382 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	18d0      	adds	r0, r2, r3
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	18d1      	adds	r1, r2, r3
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800b336:	3304      	adds	r3, #4
 800b338:	461a      	mov	r2, r3
 800b33a:	f016 fc9e 	bl	8021c7a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da03      	bge.n	800b354 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b34c:	23f8      	movs	r3, #248	@ 0xf8
 800b34e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800b352:	e03d      	b.n	800b3d0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800b364:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800b370:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800b37c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	4413      	add	r3, r2
 800b388:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d8c8      	bhi.n	800b322 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	18d0      	adds	r0, r2, r3
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	4413      	add	r3, r2
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	f016 fc6a 	bl	8021c7a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	623b      	str	r3, [r7, #32]
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1a1      	bne.n	800b306 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b3c2:	6979      	ldr	r1, [r7, #20]
 800b3c4:	4811      	ldr	r0, [pc, #68]	@ (800b40c <low_level_output+0x138>)
 800b3c6:	f7fc f95b 	bl	8007680 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b3d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b40c <low_level_output+0x138>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00d      	beq.n	800b3fe <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b3e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b40c <low_level_output+0x138>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	2320      	movs	r3, #32
 800b3ee:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b3f0:	4b06      	ldr	r3, [pc, #24]	@ (800b40c <low_level_output+0x138>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800b3fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b402:	4618      	mov	r0, r3
 800b404:	3728      	adds	r7, #40	@ 0x28
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	200080e4 	.word	0x200080e4

0800b410 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b08c      	sub	sp, #48	@ 0x30
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b418:	2300      	movs	r3, #0
 800b41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 800b41c:	2300      	movs	r3, #0
 800b41e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b430:	2300      	movs	r3, #0
 800b432:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800b434:	484e      	ldr	r0, [pc, #312]	@ (800b570 <low_level_input+0x160>)
 800b436:	f7fc fa0b 	bl	8007850 <HAL_ETH_GetReceivedFrame>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <low_level_input+0x34>

    return NULL;
 800b440:	2300      	movs	r3, #0
 800b442:	e090      	b.n	800b566 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b444:	4b4a      	ldr	r3, [pc, #296]	@ (800b570 <low_level_input+0x160>)
 800b446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b448:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b44a:	4b49      	ldr	r3, [pc, #292]	@ (800b570 <low_level_input+0x160>)
 800b44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b44e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 800b450:	89fb      	ldrh	r3, [r7, #14]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d006      	beq.n	800b464 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b456:	89fb      	ldrh	r3, [r7, #14]
 800b458:	2203      	movs	r2, #3
 800b45a:	4619      	mov	r1, r3
 800b45c:	2004      	movs	r0, #4
 800b45e:	f009 fdf9 	bl	8015054 <pbuf_alloc>
 800b462:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	2b00      	cmp	r3, #0
 800b468:	d04b      	beq.n	800b502 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b46a:	4b41      	ldr	r3, [pc, #260]	@ (800b570 <low_level_input+0x160>)
 800b46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b46e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b476:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b478:	e040      	b.n	800b4fc <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800b47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47c:	895b      	ldrh	r3, [r3, #10]
 800b47e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b484:	e021      	b.n	800b4ca <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	18d0      	adds	r0, r2, r3
 800b48e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	18d1      	adds	r1, r2, r3
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800b49a:	3304      	adds	r3, #4
 800b49c:	461a      	mov	r2, r3
 800b49e:	f016 fbec 	bl	8021c7a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b4ae:	69fa      	ldr	r2, [r7, #28]
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800b4b8:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800b4c4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d8d6      	bhi.n	800b486 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	18d0      	adds	r0, r2, r3
 800b4e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f016 fbc6 	bl	8021c7a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1bb      	bne.n	800b47a <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b502:	4b1b      	ldr	r3, [pc, #108]	@ (800b570 <low_level_input+0x160>)
 800b504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b506:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b508:	2300      	movs	r3, #0
 800b50a:	613b      	str	r3, [r7, #16]
 800b50c:	e00b      	b.n	800b526 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	3301      	adds	r3, #1
 800b524:	613b      	str	r3, [r7, #16]
 800b526:	4b12      	ldr	r3, [pc, #72]	@ (800b570 <low_level_input+0x160>)
 800b528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d3ee      	bcc.n	800b50e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b530:	4b0f      	ldr	r3, [pc, #60]	@ (800b570 <low_level_input+0x160>)
 800b532:	2200      	movs	r2, #0
 800b534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b536:	4b0e      	ldr	r3, [pc, #56]	@ (800b570 <low_level_input+0x160>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00d      	beq.n	800b564 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b548:	4b09      	ldr	r3, [pc, #36]	@ (800b570 <low_level_input+0x160>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b550:	461a      	mov	r2, r3
 800b552:	2380      	movs	r3, #128	@ 0x80
 800b554:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b556:	4b06      	ldr	r3, [pc, #24]	@ (800b570 <low_level_input+0x160>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b55e:	461a      	mov	r2, r3
 800b560:	2300      	movs	r3, #0
 800b562:	6093      	str	r3, [r2, #8]
  }
  return p;
 800b564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b566:	4618      	mov	r0, r3
 800b568:	3730      	adds	r7, #48	@ 0x30
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	200080e4 	.word	0x200080e4

0800b574 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff ff47 	bl	800b410 <low_level_input>
 800b582:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d010      	beq.n	800b5ac <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	4798      	blx	r3
 800b594:	4603      	mov	r3, r0
 800b596:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800b598:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d006      	beq.n	800b5ae <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f00a f8cf 	bl	8015744 <pbuf_free>
    p = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	e000      	b.n	800b5ae <ethernetif_input+0x3a>
  if (p == NULL) return;
 800b5ac:	bf00      	nop
  }
}
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <ethernetif_init+0x1c>
 800b5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b5fc <ethernetif_init+0x48>)
 800b5c4:	f240 220a 	movw	r2, #522	@ 0x20a
 800b5c8:	490d      	ldr	r1, [pc, #52]	@ (800b600 <ethernetif_init+0x4c>)
 800b5ca:	480e      	ldr	r0, [pc, #56]	@ (800b604 <ethernetif_init+0x50>)
 800b5cc:	f016 f8aa 	bl	8021724 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2273      	movs	r2, #115	@ 0x73
 800b5d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->name[1] = IFNAME1;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2274      	movs	r2, #116	@ 0x74
 800b5dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a09      	ldr	r2, [pc, #36]	@ (800b608 <ethernetif_init+0x54>)
 800b5e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a08      	ldr	r2, [pc, #32]	@ (800b60c <ethernetif_init+0x58>)
 800b5ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff fdc3 	bl	800b178 <low_level_init>

  return ERR_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	080247d4 	.word	0x080247d4
 800b600:	080247f0 	.word	0x080247f0
 800b604:	08024800 	.word	0x08024800
 800b608:	0801e679 	.word	0x0801e679
 800b60c:	0800b2d5 	.word	0x0800b2d5

0800b610 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b614:	f7fa fd52 	bl	80060bc <HAL_GetTick>
 800b618:	4603      	mov	r3, r0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b636:	089b      	lsrs	r3, r3, #2
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d066      	beq.n	800b710 <ethernetif_update_config+0xf0>
  {
	  /* Жёсткий перезапуск PHY при появлении линка для LAN8742 */
	      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_RESET);
 800b642:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b646:	2100      	movs	r1, #0
 800b648:	4836      	ldr	r0, [pc, #216]	@ (800b724 <ethernetif_update_config+0x104>)
 800b64a:	f7fc f9ec 	bl	8007a26 <HAL_ETH_WritePHYRegister>
	      HAL_Delay(2);
 800b64e:	2002      	movs	r0, #2
 800b650:	f7fa fd3e 	bl	80060d0 <HAL_Delay>
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b654:	4b33      	ldr	r3, [pc, #204]	@ (800b724 <ethernetif_update_config+0x104>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d03f      	beq.n	800b6dc <ethernetif_update_config+0xbc>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b65c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b660:	2100      	movs	r1, #0
 800b662:	4830      	ldr	r0, [pc, #192]	@ (800b724 <ethernetif_update_config+0x104>)
 800b664:	f7fc f9df 	bl	8007a26 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b668:	f7fa fd28 	bl	80060bc <HAL_GetTick>
 800b66c:	4603      	mov	r3, r0
 800b66e:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b670:	f107 0308 	add.w	r3, r7, #8
 800b674:	461a      	mov	r2, r3
 800b676:	2101      	movs	r1, #1
 800b678:	482a      	ldr	r0, [pc, #168]	@ (800b724 <ethernetif_update_config+0x104>)
 800b67a:	f7fc f96c 	bl	8007956 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b67e:	f7fa fd1d 	bl	80060bc <HAL_GetTick>
 800b682:	4602      	mov	r2, r0
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b68c:	d828      	bhi.n	800b6e0 <ethernetif_update_config+0xc0>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f003 0320 	and.w	r3, r3, #32
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0eb      	beq.n	800b670 <ethernetif_update_config+0x50>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b698:	f107 0308 	add.w	r3, r7, #8
 800b69c:	461a      	mov	r2, r3
 800b69e:	2110      	movs	r1, #16
 800b6a0:	4820      	ldr	r0, [pc, #128]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6a2:	f7fc f958 	bl	8007956 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	f003 0304 	and.w	r3, r3, #4
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <ethernetif_update_config+0x9a>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b6b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6b6:	60da      	str	r2, [r3, #12]
 800b6b8:	e002      	b.n	800b6c0 <ethernetif_update_config+0xa0>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b6ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <ethernetif_update_config+0xb2>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b6ca:	4b16      	ldr	r3, [pc, #88]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	609a      	str	r2, [r3, #8]
 800b6d0:	e016      	b.n	800b700 <ethernetif_update_config+0xe0>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b6d2:	4b14      	ldr	r3, [pc, #80]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b6d8:	609a      	str	r2, [r3, #8]
 800b6da:	e011      	b.n	800b700 <ethernetif_update_config+0xe0>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b6dc:	bf00      	nop
 800b6de:	e000      	b.n	800b6e2 <ethernetif_update_config+0xc2>
          goto error;
 800b6e0:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b6e2:	4b10      	ldr	r3, [pc, #64]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	08db      	lsrs	r3, r3, #3
 800b6e8:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b6ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	085b      	lsrs	r3, r3, #1
 800b6f0:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	480a      	ldr	r0, [pc, #40]	@ (800b724 <ethernetif_update_config+0x104>)
 800b6fc:	f7fc f993 	bl	8007a26 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b700:	2100      	movs	r1, #0
 800b702:	4808      	ldr	r0, [pc, #32]	@ (800b724 <ethernetif_update_config+0x104>)
 800b704:	f7fc fa54 	bl	8007bb0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b708:	4806      	ldr	r0, [pc, #24]	@ (800b724 <ethernetif_update_config+0x104>)
 800b70a:	f7fc f9f2 	bl	8007af2 <HAL_ETH_Start>
 800b70e:	e002      	b.n	800b716 <ethernetif_update_config+0xf6>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b710:	4804      	ldr	r0, [pc, #16]	@ (800b724 <ethernetif_update_config+0x104>)
 800b712:	f7fc fa1d 	bl	8007b50 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f806 	bl	800b728 <ethernetif_notify_conn_changed>
}
 800b71c:	bf00      	nop
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200080e4 	.word	0x200080e4

0800b728 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr
	...

0800b73c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <fs_open+0x16>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d102      	bne.n	800b758 <fs_open+0x1c>
     return ERR_ARG;
 800b752:	f06f 030f 	mvn.w	r3, #15
 800b756:	e037      	b.n	800b7c8 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f858 	bl	800b810 <fs_open_custom>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d004      	beq.n	800b770 <fs_open+0x34>
    file->is_custom_file = 1;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	e02b      	b.n	800b7c8 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b776:	4b16      	ldr	r3, [pc, #88]	@ (800b7d0 <fs_open+0x94>)
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	e020      	b.n	800b7be <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4619      	mov	r1, r3
 800b782:	6838      	ldr	r0, [r7, #0]
 800b784:	f7f4 fd20 	bl	80001c8 <strcmp>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d114      	bne.n	800b7b8 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	689a      	ldr	r2, [r3, #8]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	68da      	ldr	r2, [r3, #12]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	7c1a      	ldrb	r2, [r3, #16]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e007      	b.n	800b7c8 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1db      	bne.n	800b77c <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b7c4:	f06f 0305 	mvn.w	r3, #5
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	0802f5f4 	.word	0x0802f5f4

0800b7d4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	7c5b      	ldrb	r3, [r3, #17]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <fs_close+0x16>
    fs_close_custom(file);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f8bd 	bl	800b964 <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	1ad3      	subs	r3, r2, r3
}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	bc80      	pop	{r7}
 800b80c:	4770      	bx	lr
	...

0800b810 <fs_open_custom>:
#include "credentials.h"
#include <string.h>
extern volatile uint8_t g_is_authenticated; // флаг из main.c

int fs_open_custom(struct fs_file *file, const char *name)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  if (file == NULL || name == NULL) return 0;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <fs_open_custom+0x16>
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <fs_open_custom+0x1a>
 800b826:	2300      	movs	r3, #0
 800b828:	e080      	b.n	800b92c <fs_open_custom+0x11c>

  /* Разрешаем страницы логина и ошибки всегда */
  if (!strcmp(name, "/login.html") || !strcmp(name, "/login_failed.html")) {
 800b82a:	4942      	ldr	r1, [pc, #264]	@ (800b934 <fs_open_custom+0x124>)
 800b82c:	6838      	ldr	r0, [r7, #0]
 800b82e:	f7f4 fccb 	bl	80001c8 <strcmp>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d006      	beq.n	800b846 <fs_open_custom+0x36>
 800b838:	493f      	ldr	r1, [pc, #252]	@ (800b938 <fs_open_custom+0x128>)
 800b83a:	6838      	ldr	r0, [r7, #0]
 800b83c:	f7f4 fcc4 	bl	80001c8 <strcmp>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <fs_open_custom+0x3a>
    return 0; /* обычная отдача */
 800b846:	2300      	movs	r3, #0
 800b848:	e070      	b.n	800b92c <fs_open_custom+0x11c>
  }

  /* /login.cgi обрабатывается через CGI handler в main.c */
  if (!strncmp(name, "/login.cgi", 10)) {
 800b84a:	220a      	movs	r2, #10
 800b84c:	493b      	ldr	r1, [pc, #236]	@ (800b93c <fs_open_custom+0x12c>)
 800b84e:	6838      	ldr	r0, [r7, #0]
 800b850:	f016 f953 	bl	8021afa <strncmp>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <fs_open_custom+0x4e>
    return 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	e066      	b.n	800b92c <fs_open_custom+0x11c>
  }

  /* Logout */
  if (!strncmp(name, "/logout.cgi", 11)) {
 800b85e:	220b      	movs	r2, #11
 800b860:	4937      	ldr	r1, [pc, #220]	@ (800b940 <fs_open_custom+0x130>)
 800b862:	6838      	ldr	r0, [r7, #0]
 800b864:	f016 f949 	bl	8021afa <strncmp>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d117      	bne.n	800b89e <fs_open_custom+0x8e>
    g_is_authenticated = 0;
 800b86e:	4b35      	ldr	r3, [pc, #212]	@ (800b944 <fs_open_custom+0x134>)
 800b870:	2200      	movs	r2, #0
 800b872:	701a      	strb	r2, [r3, #0]
    file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a34      	ldr	r2, [pc, #208]	@ (800b948 <fs_open_custom+0x138>)
 800b878:	601a      	str	r2, [r3, #0]
    file->len = strlen(file->data);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f4 fcac 	bl	80001dc <strlen>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	605a      	str	r2, [r3, #4]
    file->index = file->len;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	609a      	str	r2, [r3, #8]
    file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	741a      	strb	r2, [r3, #16]
    return 1;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e046      	b.n	800b92c <fs_open_custom+0x11c>
  }

  /* Для остальных страниц — пропускаем, если авторизован; иначе редирект на login */
  if (!strcmp(name, "/") || !strcmp(name, "/index.html") || !strcmp(name, "/settings.html") ||
 800b89e:	492b      	ldr	r1, [pc, #172]	@ (800b94c <fs_open_custom+0x13c>)
 800b8a0:	6838      	ldr	r0, [r7, #0]
 800b8a2:	f7f4 fc91 	bl	80001c8 <strcmp>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d022      	beq.n	800b8f2 <fs_open_custom+0xe2>
 800b8ac:	4928      	ldr	r1, [pc, #160]	@ (800b950 <fs_open_custom+0x140>)
 800b8ae:	6838      	ldr	r0, [r7, #0]
 800b8b0:	f7f4 fc8a 	bl	80001c8 <strcmp>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d01b      	beq.n	800b8f2 <fs_open_custom+0xe2>
 800b8ba:	4926      	ldr	r1, [pc, #152]	@ (800b954 <fs_open_custom+0x144>)
 800b8bc:	6838      	ldr	r0, [r7, #0]
 800b8be:	f7f4 fc83 	bl	80001c8 <strcmp>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d014      	beq.n	800b8f2 <fs_open_custom+0xe2>
      !strcmp(name, "/event.html") || !strcmp(name, "/update.html") || strstr(name, ".shtml") != NULL) {
 800b8c8:	4923      	ldr	r1, [pc, #140]	@ (800b958 <fs_open_custom+0x148>)
 800b8ca:	6838      	ldr	r0, [r7, #0]
 800b8cc:	f7f4 fc7c 	bl	80001c8 <strcmp>
 800b8d0:	4603      	mov	r3, r0
  if (!strcmp(name, "/") || !strcmp(name, "/index.html") || !strcmp(name, "/settings.html") ||
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00d      	beq.n	800b8f2 <fs_open_custom+0xe2>
      !strcmp(name, "/event.html") || !strcmp(name, "/update.html") || strstr(name, ".shtml") != NULL) {
 800b8d6:	4921      	ldr	r1, [pc, #132]	@ (800b95c <fs_open_custom+0x14c>)
 800b8d8:	6838      	ldr	r0, [r7, #0]
 800b8da:	f7f4 fc75 	bl	80001c8 <strcmp>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d006      	beq.n	800b8f2 <fs_open_custom+0xe2>
 800b8e4:	491e      	ldr	r1, [pc, #120]	@ (800b960 <fs_open_custom+0x150>)
 800b8e6:	6838      	ldr	r0, [r7, #0]
 800b8e8:	f016 f92c 	bl	8021b44 <strstr>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d01b      	beq.n	800b92a <fs_open_custom+0x11a>
    if (g_is_authenticated) {
 800b8f2:	4b14      	ldr	r3, [pc, #80]	@ (800b944 <fs_open_custom+0x134>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <fs_open_custom+0xf0>
      return 0; /* отдать страницу обычно */
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e015      	b.n	800b92c <fs_open_custom+0x11c>
    } else {
      file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a11      	ldr	r2, [pc, #68]	@ (800b948 <fs_open_custom+0x138>)
 800b904:	601a      	str	r2, [r3, #0]
      file->len = strlen(file->data);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f4 fc66 	bl	80001dc <strlen>
 800b910:	4603      	mov	r3, r0
 800b912:	461a      	mov	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	605a      	str	r2, [r3, #4]
      file->index = file->len;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	609a      	str	r2, [r3, #8]
      file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	741a      	strb	r2, [r3, #16]
      return 1;
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <fs_open_custom+0x11c>
    }
  }
  return 0;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	08024828 	.word	0x08024828
 800b938:	08024834 	.word	0x08024834
 800b93c:	08024848 	.word	0x08024848
 800b940:	08024854 	.word	0x08024854
 800b944:	20002a70 	.word	0x20002a70
 800b948:	08024860 	.word	0x08024860
 800b94c:	08024890 	.word	0x08024890
 800b950:	08024894 	.word	0x08024894
 800b954:	080248a0 	.word	0x080248a0
 800b958:	080248b0 	.word	0x080248b0
 800b95c:	080248bc 	.word	0x080248bc
 800b960:	080248cc 	.word	0x080248cc

0800b964 <fs_close_custom>:

void fs_close_custom(struct fs_file *file)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(file);
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	bc80      	pop	{r7}
 800b974:	4770      	bx	lr
	...

0800b978 <ssi_handler>:
#include "clock/clock.h"

const char *ssi_tags[] = { "voltage1", "voltage2", "current", "spower", "netip", "netmask", "netgw", "datetime" };

u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
{
 800b978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b97a:	b091      	sub	sp, #68	@ 0x44
 800b97c:	af06      	add	r7, sp, #24
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
    int len = 0;
 800b984:	2300      	movs	r3, #0
 800b986:	627b      	str	r3, [r7, #36]	@ 0x24
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    switch (iIndex)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b07      	cmp	r3, #7
 800b98c:	f200 80a8 	bhi.w	800bae0 <ssi_handler+0x168>
 800b990:	a201      	add	r2, pc, #4	@ (adr r2, 800b998 <ssi_handler+0x20>)
 800b992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b996:	bf00      	nop
 800b998:	0800b9b9 	.word	0x0800b9b9
 800b99c:	0800b9db 	.word	0x0800b9db
 800b9a0:	0800b9fd 	.word	0x0800b9fd
 800b9a4:	0800ba1f 	.word	0x0800ba1f
 800b9a8:	0800ba4f 	.word	0x0800ba4f
 800b9ac:	0800ba67 	.word	0x0800ba67
 800b9b0:	0800ba7f 	.word	0x0800ba7f
 800b9b4:	0800ba97 	.word	0x0800ba97
    {
        case 0:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage1);
 800b9b8:	687c      	ldr	r4, [r7, #4]
 800b9ba:	4b50      	ldr	r3, [pc, #320]	@ (800bafc <ssi_handler+0x184>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7f4 fd78 	bl	80004b4 <__aeabi_f2d>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	e9cd 2300 	strd	r2, r3, [sp]
 800b9cc:	4a4c      	ldr	r2, [pc, #304]	@ (800bb00 <ssi_handler+0x188>)
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	68b8      	ldr	r0, [r7, #8]
 800b9d2:	f015 ff17 	bl	8021804 <sniprintf>
 800b9d6:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800b9d8:	e089      	b.n	800baee <ssi_handler+0x176>
        case 1:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage2);
 800b9da:	687c      	ldr	r4, [r7, #4]
 800b9dc:	4b49      	ldr	r3, [pc, #292]	@ (800bb04 <ssi_handler+0x18c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7f4 fd67 	bl	80004b4 <__aeabi_f2d>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	e9cd 2300 	strd	r2, r3, [sp]
 800b9ee:	4a44      	ldr	r2, [pc, #272]	@ (800bb00 <ssi_handler+0x188>)
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	68b8      	ldr	r0, [r7, #8]
 800b9f4:	f015 ff06 	bl	8021804 <sniprintf>
 800b9f8:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800b9fa:	e078      	b.n	800baee <ssi_handler+0x176>
        case 2:
            len = snprintf(pcInsert, iInsertLen, "%.2f", current);
 800b9fc:	687c      	ldr	r4, [r7, #4]
 800b9fe:	4b42      	ldr	r3, [pc, #264]	@ (800bb08 <ssi_handler+0x190>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f4 fd56 	bl	80004b4 <__aeabi_f2d>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	e9cd 2300 	strd	r2, r3, [sp]
 800ba10:	4a3b      	ldr	r2, [pc, #236]	@ (800bb00 <ssi_handler+0x188>)
 800ba12:	4621      	mov	r1, r4
 800ba14:	68b8      	ldr	r0, [r7, #8]
 800ba16:	f015 fef5 	bl	8021804 <sniprintf>
 800ba1a:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800ba1c:	e067      	b.n	800baee <ssi_handler+0x176>
        case 3:
            len = snprintf(pcInsert, iInsertLen, "%.2f", selected_voltage * current);
 800ba1e:	687c      	ldr	r4, [r7, #4]
 800ba20:	4b3a      	ldr	r3, [pc, #232]	@ (800bb0c <ssi_handler+0x194>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a38      	ldr	r2, [pc, #224]	@ (800bb08 <ssi_handler+0x190>)
 800ba26:	6812      	ldr	r2, [r2, #0]
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7f5 f9d0 	bl	8000dd0 <__aeabi_fmul>
 800ba30:	4603      	mov	r3, r0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7f4 fd3e 	bl	80004b4 <__aeabi_f2d>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	e9cd 2300 	strd	r2, r3, [sp]
 800ba40:	4a2f      	ldr	r2, [pc, #188]	@ (800bb00 <ssi_handler+0x188>)
 800ba42:	4621      	mov	r1, r4
 800ba44:	68b8      	ldr	r0, [r7, #8]
 800ba46:	f015 fedd 	bl	8021804 <sniprintf>
 800ba4a:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800ba4c:	e04f      	b.n	800baee <ssi_handler+0x176>
        case 4:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.ip_addr));
 800ba4e:	687c      	ldr	r4, [r7, #4]
 800ba50:	482f      	ldr	r0, [pc, #188]	@ (800bb10 <ssi_handler+0x198>)
 800ba52:	f014 f8b3 	bl	801fbbc <ip4addr_ntoa>
 800ba56:	4603      	mov	r3, r0
 800ba58:	4a2e      	ldr	r2, [pc, #184]	@ (800bb14 <ssi_handler+0x19c>)
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	68b8      	ldr	r0, [r7, #8]
 800ba5e:	f015 fed1 	bl	8021804 <sniprintf>
 800ba62:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800ba64:	e043      	b.n	800baee <ssi_handler+0x176>
        case 5:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.netmask));
 800ba66:	687c      	ldr	r4, [r7, #4]
 800ba68:	482b      	ldr	r0, [pc, #172]	@ (800bb18 <ssi_handler+0x1a0>)
 800ba6a:	f014 f8a7 	bl	801fbbc <ip4addr_ntoa>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	4a28      	ldr	r2, [pc, #160]	@ (800bb14 <ssi_handler+0x19c>)
 800ba72:	4621      	mov	r1, r4
 800ba74:	68b8      	ldr	r0, [r7, #8]
 800ba76:	f015 fec5 	bl	8021804 <sniprintf>
 800ba7a:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800ba7c:	e037      	b.n	800baee <ssi_handler+0x176>
        case 6:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.gw));
 800ba7e:	687c      	ldr	r4, [r7, #4]
 800ba80:	4826      	ldr	r0, [pc, #152]	@ (800bb1c <ssi_handler+0x1a4>)
 800ba82:	f014 f89b 	bl	801fbbc <ip4addr_ntoa>
 800ba86:	4603      	mov	r3, r0
 800ba88:	4a22      	ldr	r2, [pc, #136]	@ (800bb14 <ssi_handler+0x19c>)
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	68b8      	ldr	r0, [r7, #8]
 800ba8e:	f015 feb9 	bl	8021804 <sniprintf>
 800ba92:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800ba94:	e02b      	b.n	800baee <ssi_handler+0x176>
        case 7:
            // Получаем текущие дату и время
            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ba96:	f107 0318 	add.w	r3, r7, #24
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4820      	ldr	r0, [pc, #128]	@ (800bb20 <ssi_handler+0x1a8>)
 800baa0:	f7fe fc52 	bl	800a348 <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800baa4:	f107 0314 	add.w	r3, r7, #20
 800baa8:	2200      	movs	r2, #0
 800baaa:	4619      	mov	r1, r3
 800baac:	481c      	ldr	r0, [pc, #112]	@ (800bb20 <ssi_handler+0x1a8>)
 800baae:	f7fe fd21 	bl	800a4f4 <HAL_RTC_GetDate>
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800bab2:	6879      	ldr	r1, [r7, #4]
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800bab4:	7dbb      	ldrb	r3, [r7, #22]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800bab6:	461e      	mov	r6, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800bab8:	7d7b      	ldrb	r3, [r7, #21]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800baba:	461a      	mov	r2, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800babc:	7dfb      	ldrb	r3, [r7, #23]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800babe:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                           sTime.Hours, sTime.Minutes, sTime.Seconds);
 800bac2:	7e38      	ldrb	r0, [r7, #24]
 800bac4:	7e7c      	ldrb	r4, [r7, #25]
 800bac6:	7ebd      	ldrb	r5, [r7, #26]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800bac8:	9504      	str	r5, [sp, #16]
 800baca:	9403      	str	r4, [sp, #12]
 800bacc:	9002      	str	r0, [sp, #8]
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	9200      	str	r2, [sp, #0]
 800bad2:	4633      	mov	r3, r6
 800bad4:	4a13      	ldr	r2, [pc, #76]	@ (800bb24 <ssi_handler+0x1ac>)
 800bad6:	68b8      	ldr	r0, [r7, #8]
 800bad8:	f015 fe94 	bl	8021804 <sniprintf>
 800badc:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bade:	e006      	b.n	800baee <ssi_handler+0x176>
        default:
            len = snprintf(pcInsert, iInsertLen, "---");
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a11      	ldr	r2, [pc, #68]	@ (800bb28 <ssi_handler+0x1b0>)
 800bae4:	4619      	mov	r1, r3
 800bae6:	68b8      	ldr	r0, [r7, #8]
 800bae8:	f015 fe8c 	bl	8021804 <sniprintf>
 800baec:	6278      	str	r0, [r7, #36]	@ 0x24
    }
    return (u16_t)len;
 800baee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf0:	b29b      	uxth	r3, r3
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	372c      	adds	r7, #44	@ 0x2c
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bafa:	bf00      	nop
 800bafc:	20004b60 	.word	0x20004b60
 800bb00:	08024940 	.word	0x08024940
 800bb04:	20004b64 	.word	0x20004b64
 800bb08:	20004b68 	.word	0x20004b68
 800bb0c:	20004b6c 	.word	0x20004b6c
 800bb10:	20004fc4 	.word	0x20004fc4
 800bb14:	08024948 	.word	0x08024948
 800bb18:	20004fc8 	.word	0x20004fc8
 800bb1c:	20004fcc 	.word	0x20004fcc
 800bb20:	20002a08 	.word	0x20002a08
 800bb24:	0802494c 	.word	0x0802494c
 800bb28:	0802496c 	.word	0x0802496c

0800bb2c <httpd_ssi_init_custom>:

void httpd_ssi_init_custom(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
    http_set_ssi_handler(ssi_handler, ssi_tags, sizeof(ssi_tags) / sizeof(char*));
 800bb30:	2208      	movs	r2, #8
 800bb32:	4903      	ldr	r1, [pc, #12]	@ (800bb40 <httpd_ssi_init_custom+0x14>)
 800bb34:	4803      	ldr	r0, [pc, #12]	@ (800bb44 <httpd_ssi_init_custom+0x18>)
 800bb36:	f001 fc2b 	bl	800d390 <http_set_ssi_handler>
}
 800bb3a:	bf00      	nop
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	200000c8 	.word	0x200000c8
 800bb44:	0800b979 	.word	0x0800b979

0800bb48 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800bb4e:	20dc      	movs	r0, #220	@ 0xdc
 800bb50:	f008 fe9c 	bl	801488c <mem_malloc>
 800bb54:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800bb5c:	22dc      	movs	r2, #220	@ 0xdc
 800bb5e:	2100      	movs	r1, #0
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f015 ffb5 	bl	8021ad0 <memset>
  }
  return ret;
 800bb66:	687b      	ldr	r3, [r7, #4]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f008 fd0a 	bl	8014598 <mem_free>
  }
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800bb94:	22b4      	movs	r2, #180	@ 0xb4
 800bb96:	2100      	movs	r1, #0
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f015 ff99 	bl	8021ad0 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800bb9e:	bf00      	nop
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b082      	sub	sp, #8
 800bbaa:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800bbac:	20b4      	movs	r0, #180	@ 0xb4
 800bbae:	f008 fe6d 	bl	801488c <mem_malloc>
 800bbb2:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d002      	beq.n	800bbc0 <http_state_alloc+0x1a>
    http_state_init(ret);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7ff ffe6 	bl	800bb8c <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800bbc0:	687b      	ldr	r3, [r7, #4]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	695b      	ldr	r3, [r3, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d007      	beq.n	800bbea <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fdf8 	bl	800b7d4 <fs_close>
    hs->handle = NULL;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d007      	beq.n	800bc02 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff ffba 	bl	800bb70 <http_ssi_state_free>
    hs->ssi = NULL;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d007      	beq.n	800bc1a <http_state_eof+0x50>
    pbuf_free(hs->req);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f009 fd98 	bl	8015744 <pbuf_free>
    hs->req = NULL;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d005      	beq.n	800bc3c <http_state_free+0x1a>
    http_state_eof(hs);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f7ff ffca 	bl	800bbca <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f008 fcae 	bl	8014598 <mem_free>
  }
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d106      	bne.n	800bc66 <http_write+0x22>
 800bc58:	4b2c      	ldr	r3, [pc, #176]	@ (800bd0c <http_write+0xc8>)
 800bc5a:	f240 2252 	movw	r2, #594	@ 0x252
 800bc5e:	492c      	ldr	r1, [pc, #176]	@ (800bd10 <http_write+0xcc>)
 800bc60:	482c      	ldr	r0, [pc, #176]	@ (800bd14 <http_write+0xd0>)
 800bc62:	f015 fd5f 	bl	8021724 <iprintf>
  len = *length;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800bc6c:	8afb      	ldrh	r3, [r7, #22]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <http_write+0x32>
    return ERR_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e045      	b.n	800bd02 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc7c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800bc7e:	8aba      	ldrh	r2, [r7, #20]
 800bc80:	8afb      	ldrh	r3, [r7, #22]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d201      	bcs.n	800bc8a <http_write+0x46>
    len = max_len;
 800bc86:	8abb      	ldrh	r3, [r7, #20]
 800bc88:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800bc92:	8afa      	ldrh	r2, [r7, #22]
 800bc94:	8abb      	ldrh	r3, [r7, #20]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d901      	bls.n	800bc9e <http_write+0x5a>
    len = max_len;
 800bc9a:	8abb      	ldrh	r3, [r7, #20]
 800bc9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800bc9e:	78fb      	ldrb	r3, [r7, #3]
 800bca0:	8afa      	ldrh	r2, [r7, #22]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f00e fa21 	bl	801a0ec <tcp_write>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800bcae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d10f      	bne.n	800bcd8 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d004      	beq.n	800bccc <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d902      	bls.n	800bcd2 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800bccc:	2301      	movs	r3, #1
 800bcce:	82fb      	strh	r3, [r7, #22]
 800bcd0:	e002      	b.n	800bcd8 <http_write+0x94>
      } else {
        len /= 2;
 800bcd2:	8afb      	ldrh	r3, [r7, #22]
 800bcd4:	085b      	lsrs	r3, r3, #1
 800bcd6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800bcd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce0:	d102      	bne.n	800bce8 <http_write+0xa4>
 800bce2:	8afb      	ldrh	r3, [r7, #22]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d8da      	bhi.n	800bc9e <http_write+0x5a>

  if (err == ERR_OK) {
 800bce8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d103      	bne.n	800bcf8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	8afa      	ldrh	r2, [r7, #22]
 800bcf4:	801a      	strh	r2, [r3, #0]
 800bcf6:	e002      	b.n	800bcfe <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800bcfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	080249bc 	.word	0x080249bc
 800bd10:	080249f4 	.word	0x080249f4
 800bd14:	08024a04 	.word	0x08024a04

0800bd18 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void*)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00c      	beq.n	800bd46 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d007      	beq.n	800bd46 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
       || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800bd36:	4b1f      	ldr	r3, [pc, #124]	@ (800bdb4 <http_close_or_abort_conn+0x9c>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800bd3c:	223f      	movs	r2, #63	@ 0x3f
 800bd3e:	491d      	ldr	r1, [pc, #116]	@ (800bdb4 <http_close_or_abort_conn+0x9c>)
 800bd40:	68b8      	ldr	r0, [r7, #8]
 800bd42:	f7f6 fda5 	bl	8002890 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800bd46:	2100      	movs	r1, #0
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f00b fb09 	bl	8017360 <tcp_arg>
  tcp_recv(pcb, NULL);
 800bd4e:	2100      	movs	r1, #0
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f00b fb15 	bl	8017380 <tcp_recv>
  tcp_err(pcb, NULL);
 800bd56:	2100      	movs	r1, #0
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f00b fb53 	bl	8017404 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2100      	movs	r1, #0
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f00b fb86 	bl	8017474 <tcp_poll>
  tcp_sent(pcb, NULL);
 800bd68:	2100      	movs	r1, #0
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f00b fb2a 	bl	80173c4 <tcp_sent>
  if (hs != NULL) {
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800bd76:	68b8      	ldr	r0, [r7, #8]
 800bd78:	f7ff ff53 	bl	800bc22 <http_state_free>
  }

  if (abort_conn) {
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d004      	beq.n	800bd8c <http_close_or_abort_conn+0x74>
    tcp_abort(pcb);
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f00a fb28 	bl	80163d8 <tcp_abort>
    return ERR_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e00f      	b.n	800bdac <http_close_or_abort_conn+0x94>
  }
  err = tcp_close(pcb);
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f00a fa59 	bl	8016244 <tcp_close>
 800bd92:	4603      	mov	r3, r0
 800bd94:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800bd96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800bd9e:	2204      	movs	r2, #4
 800bda0:	4905      	ldr	r1, [pc, #20]	@ (800bdb8 <http_close_or_abort_conn+0xa0>)
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f00b fb66 	bl	8017474 <tcp_poll>
  }
  return err;
 800bda8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	2000852c 	.word	0x2000852c
 800bdb8:	0800d0b7 	.word	0x0800d0b7

0800bdbc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff ffa4 	bl	800bd18 <http_close_or_abort_conn>
 800bdd0:	4603      	mov	r3, r0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff ffe8 	bl	800bdbc <http_close_conn>
  }
}
 800bdec:	bf00      	nop
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d003      	beq.n	800be0c <extract_uri_parameters+0x18>
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <extract_uri_parameters+0x1c>
      return(0);
 800be0c:	2300      	movs	r3, #0
 800be0e:	e04b      	b.n	800bea8 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800be14:	2300      	movs	r3, #0
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	e03f      	b.n	800be9a <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	320c      	adds	r2, #12
 800be20:	6979      	ldr	r1, [r7, #20]
 800be22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800be2a:	2126      	movs	r1, #38	@ 0x26
 800be2c:	6978      	ldr	r0, [r7, #20]
 800be2e:	f015 fe57 	bl	8021ae0 <strchr>
 800be32:	6178      	str	r0, [r7, #20]
    if(pair) {
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d006      	beq.n	800be48 <extract_uri_parameters+0x54>
      *pair = '\0';
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
      pair++;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	3301      	adds	r3, #1
 800be44:	617b      	str	r3, [r7, #20]
 800be46:	e00c      	b.n	800be62 <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800be48:	2120      	movs	r1, #32
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f015 fe48 	bl	8021ae0 <strchr>
 800be50:	6178      	str	r0, [r7, #20]
        if(pair) {
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <extract_uri_parameters+0x6a>
            *pair = '\0';
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800be5e:	2300      	movs	r3, #0
 800be60:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800be62:	213d      	movs	r1, #61	@ 0x3d
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f015 fe3b 	bl	8021ae0 <strchr>
 800be6a:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <extract_uri_parameters+0x94>
      *equals = '\0';
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	1c59      	adds	r1, r3, #1
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	321c      	adds	r2, #28
 800be82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800be86:	e005      	b.n	800be94 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	321c      	adds	r2, #28
 800be8e:	2100      	movs	r1, #0
 800be90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	3301      	adds	r3, #1
 800be98:	613b      	str	r3, [r7, #16]
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b0f      	cmp	r3, #15
 800be9e:	dc02      	bgt.n	800bea6 <extract_uri_parameters+0xb2>
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1b9      	bne.n	800be1a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800bea6:	693b      	ldr	r3, [r7, #16]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <get_tag_insert+0x1c>
 800bebe:	4b51      	ldr	r3, [pc, #324]	@ (800c004 <get_tag_insert+0x154>)
 800bec0:	f240 323d 	movw	r2, #829	@ 0x33d
 800bec4:	4950      	ldr	r1, [pc, #320]	@ (800c008 <get_tag_insert+0x158>)
 800bec6:	4851      	ldr	r0, [pc, #324]	@ (800c00c <get_tag_insert+0x15c>)
 800bec8:	f015 fc2c 	bl	8021724 <iprintf>
  ssi = hs->ssi;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed0:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d106      	bne.n	800bee6 <get_tag_insert+0x36>
 800bed8:	4b4a      	ldr	r3, [pc, #296]	@ (800c004 <get_tag_insert+0x154>)
 800beda:	f240 323f 	movw	r2, #831	@ 0x33f
 800bede:	494c      	ldr	r1, [pc, #304]	@ (800c010 <get_tag_insert+0x160>)
 800bee0:	484a      	ldr	r0, [pc, #296]	@ (800c00c <get_tag_insert+0x15c>)
 800bee2:	f015 fc1f 	bl	8021724 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800bee6:	4b4b      	ldr	r3, [pc, #300]	@ (800c014 <get_tag_insert+0x164>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d02e      	beq.n	800bf4c <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 800beee:	4b4a      	ldr	r3, [pc, #296]	@ (800c018 <get_tag_insert+0x168>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d02a      	beq.n	800bf4c <get_tag_insert+0x9c>
 800bef6:	4b49      	ldr	r3, [pc, #292]	@ (800c01c <get_tag_insert+0x16c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d026      	beq.n	800bf4c <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	e01e      	b.n	800bf42 <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	f103 0011 	add.w	r0, r3, #17
 800bf0a:	4b43      	ldr	r3, [pc, #268]	@ (800c018 <get_tag_insert+0x168>)
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4619      	mov	r1, r3
 800bf18:	f7f4 f956 	bl	80001c8 <strcmp>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10c      	bne.n	800bf3c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 800bf22:	4b3c      	ldr	r3, [pc, #240]	@ (800c014 <get_tag_insert+0x164>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	f102 011a 	add.w	r1, r2, #26
 800bf2c:	22c0      	movs	r2, #192	@ 0xc0
 800bf2e:	6978      	ldr	r0, [r7, #20]
 800bf30:	4798      	blx	r3
 800bf32:	4603      	mov	r3, r0
 800bf34:	461a      	mov	r2, r3
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800bf3a:	e060      	b.n	800bffe <get_tag_insert+0x14e>
    for(tag = 0; tag < g_iNumTags; tag++) {
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	617b      	str	r3, [r7, #20]
 800bf42:	4b36      	ldr	r3, [pc, #216]	@ (800c01c <get_tag_insert+0x16c>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	dbdb      	blt.n	800bf04 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	3311      	adds	r3, #17
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f4 f943 	bl	80001dc <strlen>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2ba6      	cmp	r3, #166	@ 0xa6
 800bf5a:	d818      	bhi.n	800bf8e <get_tag_insert+0xde>
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	3311      	adds	r3, #17
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7f4 f93b 	bl	80001dc <strlen>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b09      	cmp	r3, #9
 800bf6a:	d810      	bhi.n	800bf8e <get_tag_insert+0xde>
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	3311      	adds	r3, #17
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f4 f933 	bl	80001dc <strlen>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2ba6      	cmp	r3, #166	@ 0xa6
 800bf7a:	d806      	bhi.n	800bf8a <get_tag_insert+0xda>
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	3311      	adds	r3, #17
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f4 f92b 	bl	80001dc <strlen>
 800bf86:	4603      	mov	r3, r0
 800bf88:	e002      	b.n	800bf90 <get_tag_insert+0xe0>
 800bf8a:	23a7      	movs	r3, #167	@ 0xa7
 800bf8c:	e000      	b.n	800bf90 <get_tag_insert+0xe0>
 800bf8e:	2309      	movs	r3, #9
 800bf90:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	331a      	adds	r3, #26
 800bf96:	2212      	movs	r2, #18
 800bf98:	4921      	ldr	r1, [pc, #132]	@ (800c020 <get_tag_insert+0x170>)
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f015 fe6d 	bl	8021c7a <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	3311      	adds	r3, #17
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	4619      	mov	r1, r3
 800bfae:	f015 fe64 	bl	8021c7a <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3312      	adds	r3, #18
 800bfb6:	3318      	adds	r3, #24
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	4413      	add	r3, r2
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	2207      	movs	r2, #7
 800bfc0:	4918      	ldr	r1, [pc, #96]	@ (800c024 <get_tag_insert+0x174>)
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f015 fe59 	bl	8021c7a <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	3319      	adds	r3, #25
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	4413      	add	r3, r2
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	331a      	adds	r3, #26
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7f4 f8ff 	bl	80001dc <strlen>
 800bfde:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfe6:	d306      	bcc.n	800bff6 <get_tag_insert+0x146>
 800bfe8:	4b06      	ldr	r3, [pc, #24]	@ (800c004 <get_tag_insert+0x154>)
 800bfea:	f44f 725e 	mov.w	r2, #888	@ 0x378
 800bfee:	490e      	ldr	r1, [pc, #56]	@ (800c028 <get_tag_insert+0x178>)
 800bff0:	4806      	ldr	r0, [pc, #24]	@ (800c00c <get_tag_insert+0x15c>)
 800bff2:	f015 fb97 	bl	8021724 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	81da      	strh	r2, [r3, #14]
}
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	080249bc 	.word	0x080249bc
 800c008:	08024a2c 	.word	0x08024a2c
 800c00c:	08024a04 	.word	0x08024a04
 800c010:	08024a38 	.word	0x08024a38
 800c014:	2000856c 	.word	0x2000856c
 800c018:	20008574 	.word	0x20008574
 800c01c:	20008570 	.word	0x20008570
 800c020:	08024a44 	.word	0x08024a44
 800c024:	08024a58 	.word	0x08024a58
 800c028:	08024a60 	.word	0x08024a60

0800c02c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d105      	bne.n	800c04a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7ff feca 	bl	800bdda <http_eof>
    return 0;
 800c046:	2300      	movs	r3, #0
 800c048:	e016      	b.n	800c078 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff fbcf 	bl	800b7f2 <fs_bytes_left>
 800c054:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dc05      	bgt.n	800c068 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff febb 	bl	800bdda <http_eof>
    return 0;
 800c064:	2300      	movs	r3, #0
 800c066:	e007      	b.n	800c078 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800c068:	4b05      	ldr	r3, [pc, #20]	@ (800c080 <http_check_eof+0x54>)
 800c06a:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 800c06e:	4905      	ldr	r1, [pc, #20]	@ (800c084 <http_check_eof+0x58>)
 800c070:	4805      	ldr	r0, [pc, #20]	@ (800c088 <http_check_eof+0x5c>)
 800c072:	f015 fb57 	bl	8021724 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800c076:	2301      	movs	r3, #1
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	080249bc 	.word	0x080249bc
 800c084:	08024a70 	.word	0x08024a70
 800c088:	08024a04 	.word	0x08024a04

0800c08c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d803      	bhi.n	800c0ae <http_send_data_nonssi+0x22>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	e001      	b.n	800c0b2 <http_send_data_nonssi+0x26>
 800c0ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0b2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	6999      	ldr	r1, [r3, #24]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	bf14      	ite	ne
 800c0c0:	2301      	movne	r3, #1
 800c0c2:	2300      	moveq	r3, #0
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	f107 020c 	add.w	r2, r7, #12
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fdba 	bl	800bc44 <http_write>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800c0d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10d      	bne.n	800c0f8 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	89ba      	ldrh	r2, [r7, #12]
 800c0e6:	441a      	add	r2, r3
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f0:	89ba      	ldrh	r2, [r7, #12]
 800c0f2:	1a9a      	subs	r2, r3, r2
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d106      	bne.n	800c130 <http_send_data_ssi+0x2c>
 800c122:	4b8e      	ldr	r3, [pc, #568]	@ (800c35c <http_send_data_ssi+0x258>)
 800c124:	f240 42f2 	movw	r2, #1266	@ 0x4f2
 800c128:	498d      	ldr	r1, [pc, #564]	@ (800c360 <http_send_data_ssi+0x25c>)
 800c12a:	488e      	ldr	r0, [pc, #568]	@ (800c364 <http_send_data_ssi+0x260>)
 800c12c:	f015 fafa 	bl	8021724 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c136:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	429a      	cmp	r2, r3
 800c142:	f240 824d 	bls.w	800c5e0 <http_send_data_ssi+0x4dc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c154:	4293      	cmp	r3, r2
 800c156:	dc06      	bgt.n	800c166 <http_send_data_ssi+0x62>
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	b29b      	uxth	r3, r3
 800c164:	e001      	b.n	800c16a <http_send_data_ssi+0x66>
 800c166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c16a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	6999      	ldr	r1, [r3, #24]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c174:	2b00      	cmp	r3, #0
 800c176:	bf14      	ite	ne
 800c178:	2301      	movne	r3, #1
 800c17a:	2300      	moveq	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	f107 020e 	add.w	r2, r7, #14
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff fd5e 	bl	800bc44 <http_write>
 800c188:	4603      	mov	r3, r0
 800c18a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c18c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10d      	bne.n	800c1b0 <http_send_data_ssi+0xac>
      data_to_send = 1;
 800c194:	2301      	movs	r3, #1
 800c196:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	89fa      	ldrh	r2, [r7, #14]
 800c19e:	441a      	add	r2, r3
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a8:	89fa      	ldrh	r2, [r7, #14]
 800c1aa:	1a9a      	subs	r2, r3, r2
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f040 8212 	bne.w	800c5e0 <http_send_data_ssi+0x4dc>
      return data_to_send;
 800c1bc:	7dbb      	ldrb	r3, [r7, #22]
 800c1be:	e25b      	b.n	800c678 <http_send_data_ssi+0x574>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800c1c0:	89fb      	ldrh	r3, [r7, #14]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <http_send_data_ssi+0xc6>
      return data_to_send;
 800c1c6:	7dbb      	ldrb	r3, [r7, #22]
 800c1c8:	e256      	b.n	800c678 <http_send_data_ssi+0x574>
    }
    switch(ssi->tag_state) {
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800c1d0:	2b04      	cmp	r3, #4
 800c1d2:	f200 8200 	bhi.w	800c5d6 <http_send_data_ssi+0x4d2>
 800c1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1dc <http_send_data_ssi+0xd8>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c1f1 	.word	0x0800c1f1
 800c1e0:	0800c223 	.word	0x0800c223
 800c1e4:	0800c27b 	.word	0x0800c27b
 800c1e8:	0800c3b7 	.word	0x0800c3b7
 800c1ec:	0800c4f1 	.word	0x0800c4f1
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	781a      	ldrb	r2, [r3, #0]
 800c1f6:	4b5c      	ldr	r3, [pc, #368]	@ (800c368 <http_send_data_ssi+0x264>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d106      	bne.n	800c20c <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->tag_index = 1;
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	2201      	movs	r2, #1
 800c20a:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	1e5a      	subs	r2, r3, #1
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	601a      	str	r2, [r3, #0]
        break;
 800c220:	e1de      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	899b      	ldrh	r3, [r3, #12]
 800c226:	2b05      	cmp	r3, #5
 800c228:	d107      	bne.n	800c23a <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	2200      	movs	r2, #0
 800c22e:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	2202      	movs	r2, #2
 800c234:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 800c238:	e1d2      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	781a      	ldrb	r2, [r3, #0]
 800c240:	4949      	ldr	r1, [pc, #292]	@ (800c368 <http_send_data_ssi+0x264>)
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	899b      	ldrh	r3, [r3, #12]
 800c246:	440b      	add	r3, r1
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d106      	bne.n	800c25c <http_send_data_ssi+0x158>
            ssi->tag_index++;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	899b      	ldrh	r3, [r3, #12]
 800c252:	3301      	adds	r3, #1
 800c254:	b29a      	uxth	r2, r3
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	819a      	strh	r2, [r3, #12]
 800c25a:	e003      	b.n	800c264 <http_send_data_ssi+0x160>
            ssi->tag_state = TAG_NONE;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->parse_left--;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	1e5a      	subs	r2, r3, #1
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	601a      	str	r2, [r3, #0]
        break;
 800c278:	e1b2      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	899b      	ldrh	r3, [r3, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d11e      	bne.n	800c2c0 <http_send_data_ssi+0x1bc>
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b20      	cmp	r3, #32
 800c28a:	d00e      	beq.n	800c2aa <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c292:	2b09      	cmp	r3, #9
 800c294:	d009      	beq.n	800c2aa <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b0a      	cmp	r3, #10
 800c29e:	d004      	beq.n	800c2aa <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c2a6:	2b0d      	cmp	r3, #13
 800c2a8:	d10a      	bne.n	800c2c0 <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	1e5a      	subs	r2, r3, #1
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	601a      	str	r2, [r3, #0]
          break;
 800c2be:	e18f      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	4b29      	ldr	r3, [pc, #164]	@ (800c36c <http_send_data_ssi+0x268>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d013      	beq.n	800c2f6 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800c2d4:	2b20      	cmp	r3, #32
 800c2d6:	d00e      	beq.n	800c2f6 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b09      	cmp	r3, #9
 800c2e0:	d009      	beq.n	800c2f6 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c2e8:	2b0a      	cmp	r3, #10
 800c2ea:	d004      	beq.n	800c2f6 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	2b0d      	cmp	r3, #13
 800c2f4:	d13e      	bne.n	800c374 <http_send_data_ssi+0x270>

          if(ssi->tag_index == 0) {
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	899b      	ldrh	r3, [r3, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d104      	bne.n	800c308 <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          if(ssi->tag_index == 0) {
 800c306:	e04b      	b.n	800c3a0 <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	2203      	movs	r2, #3
 800c30c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	899b      	ldrh	r3, [r3, #12]
 800c314:	2bff      	cmp	r3, #255	@ 0xff
 800c316:	d906      	bls.n	800c326 <http_send_data_ssi+0x222>
 800c318:	4b10      	ldr	r3, [pc, #64]	@ (800c35c <http_send_data_ssi+0x258>)
 800c31a:	f240 525d 	movw	r2, #1373	@ 0x55d
 800c31e:	4914      	ldr	r1, [pc, #80]	@ (800c370 <http_send_data_ssi+0x26c>)
 800c320:	4810      	ldr	r0, [pc, #64]	@ (800c364 <http_send_data_ssi+0x260>)
 800c322:	f015 f9ff 	bl	8021724 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	899b      	ldrh	r3, [r3, #12]
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	899b      	ldrh	r3, [r3, #12]
 800c334:	461a      	mov	r2, r3
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	4413      	add	r3, r2
 800c33a:	2200      	movs	r2, #0
 800c33c:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	781a      	ldrb	r2, [r3, #0]
 800c344:	4b09      	ldr	r3, [pc, #36]	@ (800c36c <http_send_data_ssi+0x268>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d103      	bne.n	800c354 <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	2201      	movs	r2, #1
 800c350:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800c352:	e025      	b.n	800c3a0 <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	2200      	movs	r2, #0
 800c358:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800c35a:	e021      	b.n	800c3a0 <http_send_data_ssi+0x29c>
 800c35c:	080249bc 	.word	0x080249bc
 800c360:	08024a38 	.word	0x08024a38
 800c364:	08024a04 	.word	0x08024a04
 800c368:	080249b0 	.word	0x080249b0
 800c36c:	080249b8 	.word	0x080249b8
 800c370:	08024aa8 	.word	0x08024aa8
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	899b      	ldrh	r3, [r3, #12]
 800c378:	2b07      	cmp	r3, #7
 800c37a:	d80d      	bhi.n	800c398 <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	899b      	ldrh	r3, [r3, #12]
 800c384:	1c59      	adds	r1, r3, #1
 800c386:	b288      	uxth	r0, r1
 800c388:	6939      	ldr	r1, [r7, #16]
 800c38a:	8188      	strh	r0, [r1, #12]
 800c38c:	4619      	mov	r1, r3
 800c38e:	7812      	ldrb	r2, [r2, #0]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	440b      	add	r3, r1
 800c394:	745a      	strb	r2, [r3, #17]
 800c396:	e003      	b.n	800c3a0 <http_send_data_ssi+0x29c>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	1e5a      	subs	r2, r3, #1
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	601a      	str	r2, [r3, #0]

        break;
 800c3b4:	e114      	b.n	800c5e0 <http_send_data_ssi+0x4dc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	899b      	ldrh	r3, [r3, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d11e      	bne.n	800c3fc <http_send_data_ssi+0x2f8>
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d00e      	beq.n	800c3e6 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	d009      	beq.n	800c3e6 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b0a      	cmp	r3, #10
 800c3da:	d004      	beq.n	800c3e6 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c3e2:	2b0d      	cmp	r3, #13
 800c3e4:	d10a      	bne.n	800c3fc <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	1e5a      	subs	r2, r3, #1
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	1c5a      	adds	r2, r3, #1
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	601a      	str	r2, [r3, #0]
          break;
 800c3fa:	e0f1      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	781a      	ldrb	r2, [r3, #0]
 800c402:	4989      	ldr	r1, [pc, #548]	@ (800c628 <http_send_data_ssi+0x524>)
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	899b      	ldrh	r3, [r3, #12]
 800c408:	440b      	add	r3, r1
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d160      	bne.n	800c4d2 <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	1e5a      	subs	r2, r3, #1
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	1c5a      	adds	r2, r3, #1
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	899b      	ldrh	r3, [r3, #12]
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d14b      	bne.n	800c4c4 <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800c42c:	6838      	ldr	r0, [r7, #0]
 800c42e:	f7ff fd3f 	bl	800beb0 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2200      	movs	r2, #0
 800c436:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	2204      	movs	r2, #4
 800c43c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            ssi->tag_end = ssi->parsed;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	429a      	cmp	r2, r3
 800c452:	f240 80c2 	bls.w	800c5da <http_send_data_ssi+0x4d6>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c464:	4293      	cmp	r3, r2
 800c466:	dc06      	bgt.n	800c476 <http_send_data_ssi+0x372>
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	b29b      	uxth	r3, r3
 800c474:	e001      	b.n	800c47a <http_send_data_ssi+0x376>
 800c476:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c47a:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	6999      	ldr	r1, [r3, #24]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c484:	2b00      	cmp	r3, #0
 800c486:	bf14      	ite	ne
 800c488:	2301      	movne	r3, #1
 800c48a:	2300      	moveq	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	f107 020e 	add.w	r2, r7, #14
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f7ff fbd6 	bl	800bc44 <http_write>
 800c498:	4603      	mov	r3, r0
 800c49a:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800c49c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f040 809a 	bne.w	800c5da <http_send_data_ssi+0x4d6>
                data_to_send = 1;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	89fa      	ldrh	r2, [r7, #14]
 800c4b0:	441a      	add	r2, r3
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ba:	89fa      	ldrh	r2, [r7, #14]
 800c4bc:	1a9a      	subs	r2, r3, r2
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 800c4c2:	e08a      	b.n	800c5da <http_send_data_ssi+0x4d6>
            ssi->tag_index++;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	899b      	ldrh	r3, [r3, #12]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	819a      	strh	r2, [r3, #12]
        break;
 800c4d0:	e083      	b.n	800c5da <http_send_data_ssi+0x4d6>
          ssi->parse_left--;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	1e5a      	subs	r2, r3, #1
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        break;
 800c4ee:	e074      	b.n	800c5da <http_send_data_ssi+0x4d6>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d93b      	bls.n	800c574 <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c50a:	4293      	cmp	r3, r2
 800c50c:	dc06      	bgt.n	800c51c <http_send_data_ssi+0x418>
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	b29b      	uxth	r3, r3
 800c51a:	e001      	b.n	800c520 <http_send_data_ssi+0x41c>
 800c51c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c520:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800c522:	89fb      	ldrh	r3, [r7, #14]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d010      	beq.n	800c54a <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	6999      	ldr	r1, [r3, #24]
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	bf14      	ite	ne
 800c534:	2301      	movne	r3, #1
 800c536:	2300      	moveq	r3, #0
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	f107 020e 	add.w	r2, r7, #14
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff fb80 	bl	800bc44 <http_write>
 800c544:	4603      	mov	r3, r0
 800c546:	75fb      	strb	r3, [r7, #23]
 800c548:	e001      	b.n	800c54e <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800c54e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d144      	bne.n	800c5e0 <http_send_data_ssi+0x4dc>
            data_to_send = 1;
 800c556:	2301      	movs	r3, #1
 800c558:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	89fa      	ldrh	r2, [r7, #14]
 800c560:	441a      	add	r2, r3
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c56a:	89fa      	ldrh	r2, [r7, #14]
 800c56c:	1a9a      	subs	r2, r3, r2
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	625a      	str	r2, [r3, #36]	@ 0x24
 800c572:	e035      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	899a      	ldrh	r2, [r3, #12]
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	89db      	ldrh	r3, [r3, #14]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d222      	bcs.n	800c5c6 <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	89da      	ldrh	r2, [r3, #14]
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	899b      	ldrh	r3, [r3, #12]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	899b      	ldrh	r3, [r3, #12]
 800c592:	3318      	adds	r3, #24
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	4413      	add	r3, r2
 800c598:	1c99      	adds	r1, r3, #2
 800c59a:	f107 020e 	add.w	r2, r7, #14
 800c59e:	2301      	movs	r3, #1
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff fb4f 	bl	800bc44 <http_write>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800c5aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d115      	bne.n	800c5de <http_send_data_ssi+0x4da>
              data_to_send = 1;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	899a      	ldrh	r2, [r3, #12]
 800c5ba:	89fb      	ldrh	r3, [r7, #14]
 800c5bc:	4413      	add	r3, r2
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800c5c4:	e00b      	b.n	800c5de <http_send_data_ssi+0x4da>
              ssi->tag_index = 0;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          break;
 800c5d4:	e003      	b.n	800c5de <http_send_data_ssi+0x4da>
        default:
          break;
 800c5d6:	bf00      	nop
 800c5d8:	e002      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
        break;
 800c5da:	bf00      	nop
 800c5dc:	e000      	b.n	800c5e0 <http_send_data_ssi+0x4dc>
          break;
 800c5de:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <http_send_data_ssi+0x4ee>
 800c5e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f43f ade7 	beq.w	800c1c0 <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800c5f8:	2b04      	cmp	r3, #4
 800c5fa:	d03c      	beq.n	800c676 <http_send_data_ssi+0x572>
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	429a      	cmp	r2, r3
 800c606:	d936      	bls.n	800c676 <http_send_data_ssi+0x572>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c616:	4293      	cmp	r3, r2
 800c618:	dc08      	bgt.n	800c62c <http_send_data_ssi+0x528>
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	b29b      	uxth	r3, r3
 800c626:	e003      	b.n	800c630 <http_send_data_ssi+0x52c>
 800c628:	080249b8 	.word	0x080249b8
 800c62c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c630:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	6999      	ldr	r1, [r3, #24]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bf14      	ite	ne
 800c63e:	2301      	movne	r3, #1
 800c640:	2300      	moveq	r3, #0
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f107 020e 	add.w	r2, r7, #14
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff fafb 	bl	800bc44 <http_write>
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10d      	bne.n	800c676 <http_send_data_ssi+0x572>
      data_to_send = 1;
 800c65a:	2301      	movs	r3, #1
 800c65c:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	89fa      	ldrh	r2, [r7, #14]
 800c664:	441a      	add	r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66e:	89fa      	ldrh	r2, [r7, #14]
 800c670:	1a9a      	subs	r2, r3, r2
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 800c676:	7dbb      	ldrb	r3, [r7, #22]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3718      	adds	r7, #24
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800c68a:	2300      	movs	r3, #0
 800c68c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <http_send+0x18>
    return 0;
 800c694:	2300      	movs	r3, #0
 800c696:	e030      	b.n	800c6fa <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d108      	bne.n	800c6b2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff fcc2 	bl	800c02c <http_check_eof>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <http_send+0x32>
      return 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e023      	b.n	800c6fa <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d006      	beq.n	800c6c8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f7ff fd21 	bl	800c104 <http_send_data_ssi>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	73fb      	strb	r3, [r7, #15]
 800c6c6:	e005      	b.n	800c6d4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fcde 	bl	800c08c <http_send_data_nonssi>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10d      	bne.n	800c6f8 <http_send+0x78>
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7ff f886 	bl	800b7f2 <fs_bytes_left>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	dc05      	bgt.n	800c6f8 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7ff fb73 	bl	800bdda <http_eof>
    return 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e000      	b.n	800c6fa <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	4a1c      	ldr	r2, [pc, #112]	@ (800c784 <http_get_404_file+0x80>)
 800c712:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4619      	mov	r1, r3
 800c71c:	4610      	mov	r0, r2
 800c71e:	f7ff f80d 	bl	800b73c <fs_open>
 800c722:	4603      	mov	r3, r0
 800c724:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d024      	beq.n	800c778 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	4a15      	ldr	r2, [pc, #84]	@ (800c788 <http_get_404_file+0x84>)
 800c732:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4619      	mov	r1, r3
 800c73c:	4610      	mov	r0, r2
 800c73e:	f7fe fffd 	bl	800b73c <fs_open>
 800c742:	4603      	mov	r3, r0
 800c744:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d014      	beq.n	800c778 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	4a0e      	ldr	r2, [pc, #56]	@ (800c78c <http_get_404_file+0x88>)
 800c752:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4619      	mov	r1, r3
 800c75c:	4610      	mov	r0, r2
 800c75e:	f7fe ffed 	bl	800b73c <fs_open>
 800c762:	4603      	mov	r3, r0
 800c764:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800c766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2200      	movs	r2, #0
 800c772:	601a      	str	r2, [r3, #0]
        return NULL;
 800c774:	2300      	movs	r3, #0
 800c776:	e000      	b.n	800c77a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800c778:	687b      	ldr	r3, [r7, #4]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	08024ac0 	.word	0x08024ac0
 800c788:	08024acc 	.word	0x08024acc
 800c78c:	08024ad8 	.word	0x08024ad8

0800c790 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800c798:	4b08      	ldr	r3, [pc, #32]	@ (800c7bc <http_handle_post_finished+0x2c>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800c79e:	223f      	movs	r2, #63	@ 0x3f
 800c7a0:	4906      	ldr	r1, [pc, #24]	@ (800c7bc <http_handle_post_finished+0x2c>)
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7f6 f874 	bl	8002890 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	4904      	ldr	r1, [pc, #16]	@ (800c7bc <http_handle_post_finished+0x2c>)
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fa57 	bl	800cc60 <http_find_file>
 800c7b2:	4603      	mov	r3, r0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	2000852c 	.word	0x2000852c

0800c7c0 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d014      	beq.n	800c7fa <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	8912      	ldrh	r2, [r2, #8]
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d204      	bcs.n	800c7e8 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800c7e6:	e008      	b.n	800c7fa <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	8912      	ldrh	r2, [r2, #8]
 800c7f2:	1a9a      	subs	r2, r3, r2
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  err = httpd_post_receive_data(hs, p);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7f5 ffcf 	bl	80027a0 <httpd_post_receive_data>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800c806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d003      	beq.n	800c816 <http_post_rxpbuf+0x56>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
  if (hs->post_content_len_left == 0) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d104      	bne.n	800c82a <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
       return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff ffb5 	bl	800c790 <http_handle_post_finished>
 800c826:	4603      	mov	r3, r0
 800c828:	e000      	b.n	800c82c <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b092      	sub	sp, #72	@ 0x48
 800c838:	af04      	add	r7, sp, #16
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800c842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c844:	1c58      	adds	r0, r3, #1
 800c846:	887a      	ldrh	r2, [r7, #2]
 800c848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c84a:	1c59      	adds	r1, r3, #1
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	1acb      	subs	r3, r1, r3
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	461a      	mov	r2, r3
 800c854:	4967      	ldr	r1, [pc, #412]	@ (800c9f4 <http_post_request+0x1c0>)
 800c856:	f007 fd42 	bl	80142de <lwip_strnstr>
 800c85a:	62b8      	str	r0, [r7, #40]	@ 0x28

  if (crlfcrlf != NULL) {
 800c85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 80c1 	beq.w	800c9e6 <http_post_request+0x1b2>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800c864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c866:	1c58      	adds	r0, r3, #1
 800c868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c86a:	3301      	adds	r3, #1
 800c86c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	461a      	mov	r2, r3
 800c872:	4961      	ldr	r1, [pc, #388]	@ (800c9f8 <http_post_request+0x1c4>)
 800c874:	f007 fd33 	bl	80142de <lwip_strnstr>
 800c878:	6278      	str	r0, [r7, #36]	@ 0x24
    if (scontent_len != NULL) {
 800c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 80af 	beq.w	800c9e0 <http_post_request+0x1ac>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c884:	3310      	adds	r3, #16
 800c886:	220a      	movs	r2, #10
 800c888:	495c      	ldr	r1, [pc, #368]	@ (800c9fc <http_post_request+0x1c8>)
 800c88a:	4618      	mov	r0, r3
 800c88c:	f007 fd27 	bl	80142de <lwip_strnstr>
 800c890:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 80a3 	beq.w	800c9e0 <http_post_request+0x1ac>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89c:	3310      	adds	r3, #16
 800c89e:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800c8a0:	69f8      	ldr	r0, [r7, #28]
 800c8a2:	f014 f953 	bl	8020b4c <atoi>
 800c8a6:	6378      	str	r0, [r7, #52]	@ 0x34
        if (content_len == 0) {
 800c8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10b      	bne.n	800c8c6 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b30      	cmp	r3, #48	@ 0x30
 800c8b4:	d104      	bne.n	800c8c0 <http_post_request+0x8c>
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	2b0d      	cmp	r3, #13
 800c8be:	d002      	beq.n	800c8c6 <http_post_request+0x92>
            content_len = -1;
 800c8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
        }
        if (content_len >= 0) {
 800c8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f2c0 8086 	blt.w	800c9da <http_post_request+0x1a6>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800c8ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800c8d4:	887a      	ldrh	r2, [r7, #2]
 800c8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d8:	1d19      	adds	r1, r3, #4
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	1acb      	subs	r3, r1, r3
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	db05      	blt.n	800c8ee <http_post_request+0xba>
 800c8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e4:	1d1a      	adds	r2, r3, #4
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	e000      	b.n	800c8f0 <http_post_request+0xbc>
 800c8ee:	887b      	ldrh	r3, [r7, #2]
 800c8f0:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800c8f2:	887a      	ldrh	r2, [r7, #2]
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	1d19      	adds	r1, r3, #4
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	1acb      	subs	r3, r1, r3
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	db05      	blt.n	800c90c <http_post_request+0xd8>
 800c900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c902:	1d1a      	adds	r2, r3, #4
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	b29b      	uxth	r3, r3
 800c90a:	e000      	b.n	800c90e <http_post_request+0xda>
 800c90c:	887b      	ldrh	r3, [r7, #2]
 800c90e:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800c910:	2301      	movs	r3, #1
 800c912:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800c914:	4b3a      	ldr	r3, [pc, #232]	@ (800ca00 <http_post_request+0x1cc>)
 800c916:	2200      	movs	r2, #0
 800c918:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800c91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c91c:	2200      	movs	r2, #0
 800c91e:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800c920:	8aba      	ldrh	r2, [r7, #20]
 800c922:	f107 0312 	add.w	r3, r7, #18
 800c926:	9303      	str	r3, [sp, #12]
 800c928:	233f      	movs	r3, #63	@ 0x3f
 800c92a:	9302      	str	r3, [sp, #8]
 800c92c:	4b34      	ldr	r3, [pc, #208]	@ (800ca00 <http_post_request+0x1cc>)
 800c92e:	9301      	str	r3, [sp, #4]
 800c930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	4613      	mov	r3, r2
 800c936:	69ba      	ldr	r2, [r7, #24]
 800c938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c93a:	68b8      	ldr	r0, [r7, #8]
 800c93c:	f7f5 feb8 	bl	80026b0 <httpd_post_begin>
 800c940:	4603      	mov	r3, r0
 800c942:	74fb      	strb	r3, [r7, #19]
            http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800c944:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d13f      	bne.n	800c9cc <http_post_request+0x198>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	633b      	str	r3, [r7, #48]	@ 0x30
            u16_t start_offset = hdr_len;
 800c950:	8afb      	ldrh	r3, [r7, #22]
 800c952:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800c954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            /* get to the pbuf where the body starts */
            while((q != NULL) && (q->len <= start_offset)) {
 800c95c:	e007      	b.n	800c96e <http_post_request+0x13a>
              start_offset -= q->len;
 800c95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c960:	895b      	ldrh	r3, [r3, #10]
 800c962:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	85fb      	strh	r3, [r7, #46]	@ 0x2e
              q = q->next;
 800c968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	633b      	str	r3, [r7, #48]	@ 0x30
            while((q != NULL) && (q->len <= start_offset)) {
 800c96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c970:	2b00      	cmp	r3, #0
 800c972:	d004      	beq.n	800c97e <http_post_request+0x14a>
 800c974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c976:	895b      	ldrh	r3, [r3, #10]
 800c978:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d2ef      	bcs.n	800c95e <http_post_request+0x12a>
            }
            if (q != NULL) {
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	2b00      	cmp	r3, #0
 800c982:	d010      	beq.n	800c9a6 <http_post_request+0x172>
              /* hide the remaining HTTP header */
              pbuf_header(q, -(s16_t)start_offset);
 800c984:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c986:	425b      	negs	r3, r3
 800c988:	b29b      	uxth	r3, r3
 800c98a:	b21b      	sxth	r3, r3
 800c98c:	4619      	mov	r1, r3
 800c98e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c990:	f008 feb4 	bl	80156fc <pbuf_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800c994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c996:	f008 ff7f 	bl	8015898 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800c99a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c99c:	68b8      	ldr	r0, [r7, #8]
 800c99e:	f7ff ff0f 	bl	800c7c0 <http_post_rxpbuf>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	e021      	b.n	800c9ea <http_post_request+0x1b6>
            } else if (hs->post_content_len_left == 0) {
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10b      	bne.n	800c9c8 <http_post_request+0x194>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	2004      	movs	r0, #4
 800c9b6:	f008 fb4d 	bl	8015054 <pbuf_alloc>
 800c9ba:	6338      	str	r0, [r7, #48]	@ 0x30
              return http_post_rxpbuf(hs, q);
 800c9bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c9be:	68b8      	ldr	r0, [r7, #8]
 800c9c0:	f7ff fefe 	bl	800c7c0 <http_post_rxpbuf>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	e010      	b.n	800c9ea <http_post_request+0x1b6>
            } else {
              return ERR_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e00e      	b.n	800c9ea <http_post_request+0x1b6>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	490c      	ldr	r1, [pc, #48]	@ (800ca00 <http_post_request+0x1cc>)
 800c9d0:	68b8      	ldr	r0, [r7, #8]
 800c9d2:	f000 f945 	bl	800cc60 <http_find_file>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	e007      	b.n	800c9ea <http_post_request+0x1b6>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
            content_len_num));
          return ERR_ARG;
 800c9da:	f06f 030f 	mvn.w	r3, #15
 800c9de:	e004      	b.n	800c9ea <http_post_request+0x1b6>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800c9e0:	f06f 030f 	mvn.w	r3, #15
 800c9e4:	e001      	b.n	800c9ea <http_post_request+0x1b6>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800c9e6:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3738      	adds	r7, #56	@ 0x38
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08024ae4 	.word	0x08024ae4
 800c9f8:	08024aec 	.word	0x08024aec
 800c9fc:	08024b00 	.word	0x08024b00
 800ca00:	2000852c 	.word	0x2000852c

0800ca04 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b092      	sub	sp, #72	@ 0x48
 800ca08:	af02      	add	r7, sp, #8
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d106      	bne.n	800ca28 <http_parse_request+0x24>
 800ca1a:	4b87      	ldr	r3, [pc, #540]	@ (800cc38 <http_parse_request+0x234>)
 800ca1c:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 800ca20:	4986      	ldr	r1, [pc, #536]	@ (800cc3c <http_parse_request+0x238>)
 800ca22:	4887      	ldr	r0, [pc, #540]	@ (800cc40 <http_parse_request+0x23c>)
 800ca24:	f014 fe7e 	bl	8021724 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d106      	bne.n	800ca3c <http_parse_request+0x38>
 800ca2e:	4b82      	ldr	r3, [pc, #520]	@ (800cc38 <http_parse_request+0x234>)
 800ca30:	f240 72c1 	movw	r2, #1985	@ 0x7c1
 800ca34:	4983      	ldr	r1, [pc, #524]	@ (800cc44 <http_parse_request+0x240>)
 800ca36:	4882      	ldr	r0, [pc, #520]	@ (800cc40 <http_parse_request+0x23c>)
 800ca38:	f014 fe74 	bl	8021724 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d103      	bne.n	800ca4c <http_parse_request+0x48>
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ca4c:	f06f 0307 	mvn.w	r3, #7
 800ca50:	e0ed      	b.n	800cc2e <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d103      	bne.n	800ca62 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca5e:	621a      	str	r2, [r3, #32]
 800ca60:	e005      	b.n	800ca6e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f008 ff37 	bl	80158dc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ca6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca70:	f008 ff12 	bl	8015898 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	6a1b      	ldr	r3, [r3, #32]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d012      	beq.n	800caa4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	891b      	ldrh	r3, [r3, #8]
 800ca84:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	bf28      	it	cs
 800ca8c:	4613      	movcs	r3, r2
 800ca8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	6a18      	ldr	r0, [r3, #32]
 800ca94:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ca96:	2300      	movs	r3, #0
 800ca98:	496b      	ldr	r1, [pc, #428]	@ (800cc48 <http_parse_request+0x244>)
 800ca9a:	f009 f851 	bl	8015b40 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ca9e:	4b6a      	ldr	r3, [pc, #424]	@ (800cc48 <http_parse_request+0x244>)
 800caa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800caa2:	e005      	b.n	800cab0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800caa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    data_len = p->len;
 800caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caac:	895b      	ldrh	r3, [r3, #10]
 800caae:	877b      	strh	r3, [r7, #58]	@ 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800cab0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cab2:	2b06      	cmp	r3, #6
 800cab4:	f240 80a1 	bls.w	800cbfa <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800cab8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800caba:	461a      	mov	r2, r3
 800cabc:	4963      	ldr	r1, [pc, #396]	@ (800cc4c <http_parse_request+0x248>)
 800cabe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cac0:	f007 fc0d 	bl	80142de <lwip_strnstr>
 800cac4:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 8096 	beq.w	800cbfa <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	633b      	str	r3, [r7, #48]	@ 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800cad6:	2204      	movs	r2, #4
 800cad8:	495d      	ldr	r1, [pc, #372]	@ (800cc50 <http_parse_request+0x24c>)
 800cada:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cadc:	f015 f80d 	bl	8021afa <strncmp>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d103      	bne.n	800caee <http_parse_request+0xea>
        sp1 = data + 3;
 800cae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cae8:	3303      	adds	r3, #3
 800caea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800caec:	e014      	b.n	800cb18 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800caee:	2205      	movs	r2, #5
 800caf0:	4958      	ldr	r1, [pc, #352]	@ (800cc54 <http_parse_request+0x250>)
 800caf2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800caf4:	f015 f801 	bl	8021afa <strncmp>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d105      	bne.n	800cb0a <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800cafe:	2301      	movs	r3, #1
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
        sp1 = data + 4;
 800cb02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb04:	3304      	adds	r3, #4
 800cb06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb08:	e006      	b.n	800cb18 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800cb0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
 800cb12:	f06f 030f 	mvn.w	r3, #15
 800cb16:	e08a      	b.n	800cc2e <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800cb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	8bfa      	ldrh	r2, [r7, #30]
 800cb2e:	494a      	ldr	r1, [pc, #296]	@ (800cc58 <http_parse_request+0x254>)
 800cb30:	4618      	mov	r0, r3
 800cb32:	f007 fbd4 	bl	80142de <lwip_strnstr>
 800cb36:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800cb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10c      	bne.n	800cb58 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800cb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb40:	3301      	adds	r3, #1
 800cb42:	8bfa      	ldrh	r2, [r7, #30]
 800cb44:	4941      	ldr	r1, [pc, #260]	@ (800cc4c <http_parse_request+0x248>)
 800cb46:	4618      	mov	r0, r3
 800cb48:	f007 fbc9 	bl	80142de <lwip_strnstr>
 800cb4c:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	633b      	str	r3, [r7, #48]	@ 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800cb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d163      	bne.n	800cc20 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800cb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800cb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d048      	beq.n	800cbfa <http_parse_request+0x1f6>
 800cb68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d944      	bls.n	800cbfa <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800cb70:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cb72:	461a      	mov	r2, r3
 800cb74:	4939      	ldr	r1, [pc, #228]	@ (800cc5c <http_parse_request+0x258>)
 800cb76:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb78:	f007 fbb1 	bl	80142de <lwip_strnstr>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d03b      	beq.n	800cbfa <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800cb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb84:	3301      	adds	r3, #1
 800cb86:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800cb8e:	8bbb      	ldrh	r3, [r7, #28]
 800cb90:	69ba      	ldr	r2, [r7, #24]
 800cb92:	4413      	add	r3, r2
 800cb94:	2200      	movs	r2, #0
 800cb96:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                      data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800cb98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d026      	beq.n	800cbec <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800cba4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	6978      	ldr	r0, [r7, #20]
 800cbb6:	f7ff fe3d 	bl	800c834 <http_post_request>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800cbbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00a      	beq.n	800cbdc <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800cbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc8:	2220      	movs	r2, #32
 800cbca:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800cbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbce:	2220      	movs	r2, #32
 800cbd0:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800cbd2:	8bbb      	ldrh	r3, [r7, #28]
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	2220      	movs	r2, #32
 800cbda:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800cbdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbe0:	f113 0f10 	cmn.w	r3, #16
 800cbe4:	d01e      	beq.n	800cc24 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800cbe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbea:	e020      	b.n	800cc2e <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800cbec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbee:	69b9      	ldr	r1, [r7, #24]
 800cbf0:	68b8      	ldr	r0, [r7, #8]
 800cbf2:	f000 f835 	bl	800cc60 <http_find_file>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	e019      	b.n	800cc2e <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f008 fe34 	bl	801586c <pbuf_clen>
 800cc04:	4603      	mov	r3, r0
 800cc06:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	891b      	ldrh	r3, [r3, #8]
 800cc0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc12:	d209      	bcs.n	800cc28 <http_parse_request+0x224>
 800cc14:	8a3b      	ldrh	r3, [r7, #16]
 800cc16:	2b05      	cmp	r3, #5
 800cc18:	d806      	bhi.n	800cc28 <http_parse_request+0x224>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800cc1a:	f06f 0304 	mvn.w	r3, #4
 800cc1e:	e006      	b.n	800cc2e <http_parse_request+0x22a>
          goto badrequest;
 800cc20:	bf00      	nop
 800cc22:	e002      	b.n	800cc2a <http_parse_request+0x226>
              goto badrequest;
 800cc24:	bf00      	nop
 800cc26:	e000      	b.n	800cc2a <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800cc28:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800cc2a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3740      	adds	r7, #64	@ 0x40
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	080249bc 	.word	0x080249bc
 800cc3c:	08024b04 	.word	0x08024b04
 800cc40:	08024a04 	.word	0x08024a04
 800cc44:	08024a2c 	.word	0x08024a2c
 800cc48:	2000812c 	.word	0x2000812c
 800cc4c:	08024b00 	.word	0x08024b00
 800cc50:	08024b10 	.word	0x08024b10
 800cc54:	08024b18 	.word	0x08024b18
 800cc58:	08024b20 	.word	0x08024b20
 800cc5c:	08024ae4 	.word	0x08024ae4

0800cc60 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800cc60:	b590      	push	{r4, r7, lr}
 800cc62:	b097      	sub	sp, #92	@ 0x5c
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  char *params = NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f3 faad 	bl	80001dc <strlen>
 800cc82:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800cc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d06c      	beq.n	800cd64 <http_find_file+0x104>
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4413      	add	r3, r2
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc96:	d165      	bne.n	800cd64 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800cc98:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800cc9a:	4a97      	ldr	r2, [pc, #604]	@ (800cef8 <http_find_file+0x298>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d102      	bne.n	800cca6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800cca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d15e      	bne.n	800cd64 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800cca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	2b3f      	cmp	r3, #63	@ 0x3f
 800ccac:	bf28      	it	cs
 800ccae:	233f      	movcs	r3, #63	@ 0x3f
 800ccb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (copy_len > 0) {
 800ccb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00a      	beq.n	800ccce <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	488e      	ldr	r0, [pc, #568]	@ (800cef8 <http_find_file+0x298>)
 800ccc0:	f014 ffdb 	bl	8021c7a <memcpy>
      http_uri_buf[copy_len] = 0;
 800ccc4:	4a8c      	ldr	r2, [pc, #560]	@ (800cef8 <http_find_file+0x298>)
 800ccc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc8:	4413      	add	r3, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ccce:	2300      	movs	r3, #0
 800ccd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccd2:	e044      	b.n	800cd5e <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800ccd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d022      	beq.n	800cd20 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800ccda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccdc:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800cce0:	627b      	str	r3, [r7, #36]	@ 0x24
        if (len_left > 0) {
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d018      	beq.n	800cd1a <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800cce8:	4a84      	ldr	r2, [pc, #528]	@ (800cefc <http_find_file+0x29c>)
 800ccea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7f3 fa73 	bl	80001dc <strlen>
 800ccf6:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ccf8:	6a3a      	ldr	r2, [r7, #32]
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	bf28      	it	cs
 800cd00:	4613      	movcs	r3, r2
 800cd02:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800cd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd06:	4a7c      	ldr	r2, [pc, #496]	@ (800cef8 <http_find_file+0x298>)
 800cd08:	1898      	adds	r0, r3, r2
 800cd0a:	4a7c      	ldr	r2, [pc, #496]	@ (800cefc <http_find_file+0x29c>)
 800cd0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd12:	69fa      	ldr	r2, [r7, #28]
 800cd14:	4619      	mov	r1, r3
 800cd16:	f014 ffb0 	bl	8021c7a <memcpy>
        }
        file_name = http_uri_buf;
 800cd1a:	4b77      	ldr	r3, [pc, #476]	@ (800cef8 <http_find_file+0x298>)
 800cd1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd1e:	e004      	b.n	800cd2a <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800cd20:	4a76      	ldr	r2, [pc, #472]	@ (800cefc <http_find_file+0x29c>)
 800cd22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd28:	63bb      	str	r3, [r7, #56]	@ 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fd04 	bl	800b73c <fs_open>
 800cd34:	4603      	mov	r3, r0
 800cd36:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 800cd38:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10b      	bne.n	800cd58 <http_find_file+0xf8>
        uri = file_name;
 800cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd42:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	64bb      	str	r3, [r7, #72]	@ 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 800cd48:	4a6c      	ldr	r2, [pc, #432]	@ (800cefc <http_find_file+0x29c>)
 800cd4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	4413      	add	r3, r2
 800cd50:	791b      	ldrb	r3, [r3, #4]
 800cd52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800cd56:	e005      	b.n	800cd64 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800cd58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd60:	2b04      	cmp	r3, #4
 800cd62:	d9b7      	bls.n	800ccd4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800cd64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f040 80ab 	bne.w	800cec2 <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	213f      	movs	r1, #63	@ 0x3f
 800cd70:	4618      	mov	r0, r3
 800cd72:	f014 feb5 	bl	8021ae0 <strchr>
 800cd76:	6478      	str	r0, [r7, #68]	@ 0x44
    if (params != NULL) {
 800cd78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d005      	beq.n	800cd8a <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800cd7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd80:	2200      	movs	r2, #0
 800cd82:	701a      	strb	r2, [r3, #0]
      params++;
 800cd84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd86:	3301      	adds	r3, #1
 800cd88:	647b      	str	r3, [r7, #68]	@ 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800cd8a:	4b5d      	ldr	r3, [pc, #372]	@ (800cf00 <http_find_file+0x2a0>)
 800cd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd90:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800cd92:	4b5c      	ldr	r3, [pc, #368]	@ (800cf04 <http_find_file+0x2a4>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d034      	beq.n	800ce04 <http_find_file+0x1a4>
 800cd9a:	4b5b      	ldr	r3, [pc, #364]	@ (800cf08 <http_find_file+0x2a8>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d030      	beq.n	800ce04 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800cda2:	2300      	movs	r3, #0
 800cda4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cda6:	e028      	b.n	800cdfa <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800cda8:	68b8      	ldr	r0, [r7, #8]
 800cdaa:	4b57      	ldr	r3, [pc, #348]	@ (800cf08 <http_find_file+0x2a8>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	4413      	add	r3, r2
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	f7f3 fa06 	bl	80001c8 <strcmp>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d118      	bne.n	800cdf4 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800cdc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7ff f815 	bl	800bdf4 <extract_uri_parameters>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	4a4c      	ldr	r2, [pc, #304]	@ (800cf00 <http_find_file+0x2a0>)
 800cdce:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800cdd0:	4b4d      	ldr	r3, [pc, #308]	@ (800cf08 <http_find_file+0x2a8>)
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	4413      	add	r3, r2
 800cdda:	685c      	ldr	r4, [r3, #4]
 800cddc:	4b48      	ldr	r3, [pc, #288]	@ (800cf00 <http_find_file+0x2a0>)
 800cdde:	6819      	ldr	r1, [r3, #0]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                          hs->param_vals);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	3370      	adds	r3, #112	@ 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800cdea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800cdec:	47a0      	blx	r4
 800cdee:	4603      	mov	r3, r0
 800cdf0:	60bb      	str	r3, [r7, #8]
           break;
 800cdf2:	e007      	b.n	800ce04 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800cdf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdfa:	4b42      	ldr	r3, [pc, #264]	@ (800cf04 <http_find_file+0x2a4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce00:	429a      	cmp	r2, r3
 800ce02:	dbd1      	blt.n	800cda8 <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	4611      	mov	r1, r2
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe fc96 	bl	800b73c <fs_open>
 800ce10:	4603      	mov	r3, r0
 800ce12:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 800ce14:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d102      	bne.n	800ce22 <http_find_file+0x1c2>
       file = &hs->file_handle;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce20:	e006      	b.n	800ce30 <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 800ce22:	f107 0308 	add.w	r3, r7, #8
 800ce26:	4619      	mov	r1, r3
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7ff fc6b 	bl	800c704 <http_get_404_file>
 800ce2e:	64b8      	str	r0, [r7, #72]	@ 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800ce30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d045      	beq.n	800cec2 <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 800ce36:	2300      	movs	r3, #0
 800ce38:	637b      	str	r3, [r7, #52]	@ 0x34
      char* param = (char*)strstr(uri, "?");
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	213f      	movs	r1, #63	@ 0x3f
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f014 fe4e 	bl	8021ae0 <strchr>
 800ce44:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d002      	beq.n	800ce52 <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	633b      	str	r3, [r7, #48]	@ 0x30
      ext = uri;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	637b      	str	r3, [r7, #52]	@ 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800ce5a:	212e      	movs	r1, #46	@ 0x2e
 800ce5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce5e:	f014 fe3f 	bl	8021ae0 <strchr>
 800ce62:	6338      	str	r0, [r7, #48]	@ 0x30
 800ce64:	e009      	b.n	800ce7a <http_find_file+0x21a>
      {
         ext = sub;
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	637b      	str	r3, [r7, #52]	@ 0x34
         sub++;
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800ce70:	212e      	movs	r1, #46	@ 0x2e
 800ce72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce74:	f014 fe34 	bl	8021ae0 <strchr>
 800ce78:	6338      	str	r0, [r7, #48]	@ 0x30
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f2      	bne.n	800ce66 <http_find_file+0x206>
      }
      tag_check = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800ce86:	2300      	movs	r3, #0
 800ce88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce8a:	e011      	b.n	800ceb0 <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800ce8c:	4a1f      	ldr	r2, [pc, #124]	@ (800cf0c <http_find_file+0x2ac>)
 800ce8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce94:	4619      	mov	r1, r3
 800ce96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ce98:	f007 fa57 	bl	801434a <lwip_stricmp>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d103      	bne.n	800ceaa <http_find_file+0x24a>
          tag_check = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          break;
 800cea8:	e005      	b.n	800ceb6 <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800ceaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ceac:	3301      	adds	r3, #1
 800ceae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ceb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	d9ea      	bls.n	800ce8c <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d002      	beq.n	800cec2 <http_find_file+0x262>
         *param = '?';
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	223f      	movs	r2, #63	@ 0x3f
 800cec0:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800cec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d106      	bne.n	800ced6 <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800cec8:	f107 0308 	add.w	r3, r7, #8
 800cecc:	4619      	mov	r1, r3
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7ff fc18 	bl	800c704 <http_get_404_file>
 800ced4:	64b8      	str	r0, [r7, #72]	@ 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceda:	9301      	str	r3, [sp, #4]
 800cedc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	4613      	mov	r3, r2
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f000 f811 	bl	800cf10 <http_init_file>
 800ceee:	4603      	mov	r3, r0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3754      	adds	r7, #84	@ 0x54
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd90      	pop	{r4, r7, pc}
 800cef8:	2000852c 	.word	0x2000852c
 800cefc:	0802f618 	.word	0x0802f618
 800cf00:	20008580 	.word	0x20008580
 800cf04:	2000857c 	.word	0x2000857c
 800cf08:	20008578 	.word	0x20008578
 800cf0c:	0802f608 	.word	0x0802f608

0800cf10 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b088      	sub	sp, #32
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d07e      	beq.n	800d022 <http_init_file+0x112>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 800cf24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d01c      	beq.n	800cf66 <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800cf2c:	f7fe fe0c 	bl	800bb48 <http_ssi_state_alloc>
 800cf30:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d016      	beq.n	800cf66 <http_init_file+0x56>
        ssi->tag_index = 0;
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        ssi->parsed = file->data;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	461a      	mov	r2, r3
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	69fa      	ldr	r2, [r7, #28]
 800cf64:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	da06      	bge.n	800cf8a <http_init_file+0x7a>
 800cf7c:	4b32      	ldr	r3, [pc, #200]	@ (800d048 <http_init_file+0x138>)
 800cf7e:	f640 1211 	movw	r2, #2321	@ 0x911
 800cf82:	4932      	ldr	r1, [pc, #200]	@ (800d04c <http_init_file+0x13c>)
 800cf84:	4832      	ldr	r0, [pc, #200]	@ (800d050 <http_init_file+0x140>)
 800cf86:	f014 fbcd 	bl	8021724 <iprintf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	7c5b      	ldrb	r3, [r3, #17]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d007      	beq.n	800cfa2 <http_init_file+0x92>
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d103      	bne.n	800cfa2 <http_init_file+0x92>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	625a      	str	r2, [r3, #36]	@ 0x24
 800cfa0:	e004      	b.n	800cfac <http_init_file+0x9c>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	7c1b      	ldrb	r3, [r3, #16]
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d106      	bne.n	800cfd0 <http_init_file+0xc0>
 800cfc2:	4b21      	ldr	r3, [pc, #132]	@ (800d048 <http_init_file+0x138>)
 800cfc4:	f44f 6212 	mov.w	r2, #2336	@ 0x920
 800cfc8:	4922      	ldr	r1, [pc, #136]	@ (800d054 <http_init_file+0x144>)
 800cfca:	4821      	ldr	r0, [pc, #132]	@ (800d050 <http_init_file+0x140>)
 800cfcc:	f014 fbaa 	bl	8021724 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d032      	beq.n	800d03c <http_init_file+0x12c>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	7c1b      	ldrb	r3, [r3, #16]
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d02b      	beq.n	800d03c <http_init_file+0x12c>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6998      	ldr	r0, [r3, #24]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfec:	461a      	mov	r2, r3
 800cfee:	491a      	ldr	r1, [pc, #104]	@ (800d058 <http_init_file+0x148>)
 800cff0:	f007 f975 	bl	80142de <lwip_strnstr>
 800cff4:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01f      	beq.n	800d03c <http_init_file+0x12c>
        size_t diff = file_start + 4 - hs->file;
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	699a      	ldr	r2, [r3, #24]
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	441a      	add	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	1ad2      	subs	r2, r2, r3
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d020:	e00c      	b.n	800d03c <http_init_file+0x12c>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3720      	adds	r7, #32
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	080249bc 	.word	0x080249bc
 800d04c:	08024b24 	.word	0x08024b24
 800d050:	08024a04 	.word	0x08024a04
 800d054:	08024b44 	.word	0x08024b44
 800d058:	08024ae4 	.word	0x08024ae4

0800d05c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	460b      	mov	r3, r1
 800d066:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <http_err+0x1c>
    http_state_free(hs);
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7fe fdd5 	bl	800bc22 <http_state_free>
  }
}
 800d078:	bf00      	nop
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	4613      	mov	r3, r2
 800d08c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d101      	bne.n	800d09c <http_sent+0x1c>
    return ERR_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	e008      	b.n	800d0ae <http_sent+0x2e>
  }

  hs->retries = 0;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800d0a4:	6979      	ldr	r1, [r7, #20]
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f7ff faea 	bl	800c680 <http_send>

  return ERR_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3718      	adds	r7, #24
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d107      	bne.n	800d0da <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	6838      	ldr	r0, [r7, #0]
 800d0ce:	f7fe fe75 	bl	800bdbc <http_close_conn>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e024      	b.n	800d124 <http_poll+0x6e>
  } else {
    hs->retries++;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0f0:	2b04      	cmp	r3, #4
 800d0f2:	d105      	bne.n	800d100 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800d0f4:	68f9      	ldr	r1, [r7, #12]
 800d0f6:	6838      	ldr	r0, [r7, #0]
 800d0f8:	f7fe fe60 	bl	800bdbc <http_close_conn>
      return ERR_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e011      	b.n	800d124 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00d      	beq.n	800d122 <http_poll+0x6c>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d009      	beq.n	800d122 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800d10e:	68f9      	ldr	r1, [r7, #12]
 800d110:	6838      	ldr	r0, [r7, #0]
 800d112:	f7ff fab5 	bl	800c680 <http_send>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800d11c:	6838      	ldr	r0, [r7, #0]
 800d11e:	f00d fcbb 	bl	801aa98 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
 800d138:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800d13e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d105      	bne.n	800d152 <http_recv+0x26>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <http_recv+0x26>
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d111      	bne.n	800d176 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d008      	beq.n	800d16a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	891b      	ldrh	r3, [r3, #8]
 800d15c:	4619      	mov	r1, r3
 800d15e:	68b8      	ldr	r0, [r7, #8]
 800d160:	f009 fae0 	bl	8016724 <tcp_recved>
      pbuf_free(p);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f008 faed 	bl	8015744 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800d16a:	6979      	ldr	r1, [r7, #20]
 800d16c:	68b8      	ldr	r0, [r7, #8]
 800d16e:	f7fe fe25 	bl	800bdbc <http_close_conn>
    return ERR_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	e072      	b.n	800d25c <http_recv+0x130>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	891b      	ldrh	r3, [r3, #8]
 800d17a:	4619      	mov	r1, r3
 800d17c:	68b8      	ldr	r0, [r7, #8]
 800d17e:	f009 fad1 	bl	8016724 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d012      	beq.n	800d1b2 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800d194:	6879      	ldr	r1, [r7, #4]
 800d196:	6978      	ldr	r0, [r7, #20]
 800d198:	f7ff fb12 	bl	800c7c0 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d103      	bne.n	800d1ae <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800d1a6:	6979      	ldr	r1, [r7, #20]
 800d1a8:	68b8      	ldr	r0, [r7, #8]
 800d1aa:	f7ff fa69 	bl	800c680 <http_send>
    }
    return ERR_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e054      	b.n	800d25c <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d14c      	bne.n	800d254 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	6979      	ldr	r1, [r7, #20]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff fc20 	bl	800ca04 <http_parse_request>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800d1c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d015      	beq.n	800d1fc <http_recv+0xd0>
 800d1d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1d4:	f113 0f05 	cmn.w	r3, #5
 800d1d8:	d010      	beq.n	800d1fc <http_recv+0xd0>
 800d1da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1de:	f113 0f10 	cmn.w	r3, #16
 800d1e2:	d00b      	beq.n	800d1fc <http_recv+0xd0>
 800d1e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1e8:	f113 0f08 	cmn.w	r3, #8
 800d1ec:	d006      	beq.n	800d1fc <http_recv+0xd0>
 800d1ee:	4b1d      	ldr	r3, [pc, #116]	@ (800d264 <http_recv+0x138>)
 800d1f0:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 800d1f4:	491c      	ldr	r1, [pc, #112]	@ (800d268 <http_recv+0x13c>)
 800d1f6:	481d      	ldr	r0, [pc, #116]	@ (800d26c <http_recv+0x140>)
 800d1f8:	f014 fa94 	bl	8021724 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800d1fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d200:	f113 0f05 	cmn.w	r3, #5
 800d204:	d00b      	beq.n	800d21e <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	6a1b      	ldr	r3, [r3, #32]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d007      	beq.n	800d21e <http_recv+0xf2>
          pbuf_free(hs->req);
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	6a1b      	ldr	r3, [r3, #32]
 800d212:	4618      	mov	r0, r3
 800d214:	f008 fa96 	bl	8015744 <pbuf_free>
          hs->req = NULL;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	2200      	movs	r2, #0
 800d21c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f008 fa90 	bl	8015744 <pbuf_free>
      if (parsed == ERR_OK) {
 800d224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d109      	bne.n	800d240 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d111      	bne.n	800d25a <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800d236:	6979      	ldr	r1, [r7, #20]
 800d238:	68b8      	ldr	r0, [r7, #8]
 800d23a:	f7ff fa21 	bl	800c680 <http_send>
 800d23e:	e00c      	b.n	800d25a <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800d240:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d244:	f113 0f10 	cmn.w	r3, #16
 800d248:	d107      	bne.n	800d25a <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800d24a:	6979      	ldr	r1, [r7, #20]
 800d24c:	68b8      	ldr	r0, [r7, #8]
 800d24e:	f7fe fdb5 	bl	800bdbc <http_close_conn>
 800d252:	e002      	b.n	800d25a <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f008 fa75 	bl	8015744 <pbuf_free>
    }
  }
  return ERR_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	080249bc 	.word	0x080249bc
 800d268:	08024b70 	.word	0x08024b70
 800d26c:	08024a04 	.word	0x08024a04

0800d270 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	4613      	mov	r3, r2
 800d27c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800d27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <http_accept+0x1c>
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <http_accept+0x22>
    return ERR_VAL;
 800d28c:	f06f 0305 	mvn.w	r3, #5
 800d290:	e025      	b.n	800d2de <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d292:	2101      	movs	r1, #1
 800d294:	68b8      	ldr	r0, [r7, #8]
 800d296:	f009 fea1 	bl	8016fdc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800d29a:	f7fe fc84 	bl	800bba6 <http_state_alloc>
 800d29e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d102      	bne.n	800d2ac <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800d2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2aa:	e018      	b.n	800d2de <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800d2b2:	6979      	ldr	r1, [r7, #20]
 800d2b4:	68b8      	ldr	r0, [r7, #8]
 800d2b6:	f00a f853 	bl	8017360 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800d2ba:	490b      	ldr	r1, [pc, #44]	@ (800d2e8 <http_accept+0x78>)
 800d2bc:	68b8      	ldr	r0, [r7, #8]
 800d2be:	f00a f85f 	bl	8017380 <tcp_recv>
  tcp_err(pcb, http_err);
 800d2c2:	490a      	ldr	r1, [pc, #40]	@ (800d2ec <http_accept+0x7c>)
 800d2c4:	68b8      	ldr	r0, [r7, #8]
 800d2c6:	f00a f89d 	bl	8017404 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d2ca:	2204      	movs	r2, #4
 800d2cc:	4908      	ldr	r1, [pc, #32]	@ (800d2f0 <http_accept+0x80>)
 800d2ce:	68b8      	ldr	r0, [r7, #8]
 800d2d0:	f00a f8d0 	bl	8017474 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800d2d4:	4907      	ldr	r1, [pc, #28]	@ (800d2f4 <http_accept+0x84>)
 800d2d6:	68b8      	ldr	r0, [r7, #8]
 800d2d8:	f00a f874 	bl	80173c4 <tcp_sent>

  return ERR_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3718      	adds	r7, #24
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	0800d12d 	.word	0x0800d12d
 800d2ec:	0800d05d 	.word	0x0800d05d
 800d2f0:	0800d0b7 	.word	0x0800d0b7
 800d2f4:	0800d081 	.word	0x0800d081

0800d2f8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800d2fe:	202e      	movs	r0, #46	@ 0x2e
 800d300:	f00a f820 	bl	8017344 <tcp_new_ip_type>
 800d304:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d106      	bne.n	800d31a <httpd_init+0x22>
 800d30c:	4b19      	ldr	r3, [pc, #100]	@ (800d374 <httpd_init+0x7c>)
 800d30e:	f640 2252 	movw	r2, #2642	@ 0xa52
 800d312:	4919      	ldr	r1, [pc, #100]	@ (800d378 <httpd_init+0x80>)
 800d314:	4819      	ldr	r0, [pc, #100]	@ (800d37c <httpd_init+0x84>)
 800d316:	f014 fa05 	bl	8021724 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d31a:	2101      	movs	r1, #1
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f009 fe5d 	bl	8016fdc <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800d322:	2250      	movs	r2, #80	@ 0x50
 800d324:	4916      	ldr	r1, [pc, #88]	@ (800d380 <httpd_init+0x88>)
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f009 f862 	bl	80163f0 <tcp_bind>
 800d32c:	4603      	mov	r3, r0
 800d32e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800d330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d006      	beq.n	800d346 <httpd_init+0x4e>
 800d338:	4b0e      	ldr	r3, [pc, #56]	@ (800d374 <httpd_init+0x7c>)
 800d33a:	f640 2257 	movw	r2, #2647	@ 0xa57
 800d33e:	4911      	ldr	r1, [pc, #68]	@ (800d384 <httpd_init+0x8c>)
 800d340:	480e      	ldr	r0, [pc, #56]	@ (800d37c <httpd_init+0x84>)
 800d342:	f014 f9ef 	bl	8021724 <iprintf>
  pcb = tcp_listen(pcb);
 800d346:	21ff      	movs	r1, #255	@ 0xff
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f009 f8f3 	bl	8016534 <tcp_listen_with_backlog>
 800d34e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d106      	bne.n	800d364 <httpd_init+0x6c>
 800d356:	4b07      	ldr	r3, [pc, #28]	@ (800d374 <httpd_init+0x7c>)
 800d358:	f640 2259 	movw	r2, #2649	@ 0xa59
 800d35c:	490a      	ldr	r1, [pc, #40]	@ (800d388 <httpd_init+0x90>)
 800d35e:	4807      	ldr	r0, [pc, #28]	@ (800d37c <httpd_init+0x84>)
 800d360:	f014 f9e0 	bl	8021724 <iprintf>
  tcp_accept(pcb, http_accept);
 800d364:	4909      	ldr	r1, [pc, #36]	@ (800d38c <httpd_init+0x94>)
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f00a f86e 	bl	8017448 <tcp_accept>
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	080249bc 	.word	0x080249bc
 800d378:	08024b9c 	.word	0x08024b9c
 800d37c:	08024a04 	.word	0x08024a04
 800d380:	0803064c 	.word	0x0803064c
 800d384:	08024bb8 	.word	0x08024bb8
 800d388:	08024bd4 	.word	0x08024bd4
 800d38c:	0800d271 	.word	0x0800d271

0800d390 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <http_set_ssi_handler+0x20>
 800d3a2:	4b14      	ldr	r3, [pc, #80]	@ (800d3f4 <http_set_ssi_handler+0x64>)
 800d3a4:	f640 226a 	movw	r2, #2666	@ 0xa6a
 800d3a8:	4913      	ldr	r1, [pc, #76]	@ (800d3f8 <http_set_ssi_handler+0x68>)
 800d3aa:	4814      	ldr	r0, [pc, #80]	@ (800d3fc <http_set_ssi_handler+0x6c>)
 800d3ac:	f014 f9ba 	bl	8021724 <iprintf>
  g_pfnSSIHandler = ssi_handler;
 800d3b0:	4a13      	ldr	r2, [pc, #76]	@ (800d400 <http_set_ssi_handler+0x70>)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <http_set_ssi_handler+0x3a>
 800d3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f4 <http_set_ssi_handler+0x64>)
 800d3be:	f640 2271 	movw	r2, #2673	@ 0xa71
 800d3c2:	4910      	ldr	r1, [pc, #64]	@ (800d404 <http_set_ssi_handler+0x74>)
 800d3c4:	480d      	ldr	r0, [pc, #52]	@ (800d3fc <http_set_ssi_handler+0x6c>)
 800d3c6:	f014 f9ad 	bl	8021724 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dc06      	bgt.n	800d3de <http_set_ssi_handler+0x4e>
 800d3d0:	4b08      	ldr	r3, [pc, #32]	@ (800d3f4 <http_set_ssi_handler+0x64>)
 800d3d2:	f640 2272 	movw	r2, #2674	@ 0xa72
 800d3d6:	490c      	ldr	r1, [pc, #48]	@ (800d408 <http_set_ssi_handler+0x78>)
 800d3d8:	4808      	ldr	r0, [pc, #32]	@ (800d3fc <http_set_ssi_handler+0x6c>)
 800d3da:	f014 f9a3 	bl	8021724 <iprintf>

  g_ppcTags = tags;
 800d3de:	4a0b      	ldr	r2, [pc, #44]	@ (800d40c <http_set_ssi_handler+0x7c>)
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 800d3e4:	4a0a      	ldr	r2, [pc, #40]	@ (800d410 <http_set_ssi_handler+0x80>)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800d3ea:	bf00      	nop
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	080249bc 	.word	0x080249bc
 800d3f8:	08024bf4 	.word	0x08024bf4
 800d3fc:	08024a04 	.word	0x08024a04
 800d400:	2000856c 	.word	0x2000856c
 800d404:	08024c0c 	.word	0x08024c0c
 800d408:	08024c1c 	.word	0x08024c1c
 800d40c:	20008574 	.word	0x20008574
 800d410:	20008570 	.word	0x20008570

0800d414 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d106      	bne.n	800d432 <http_set_cgi_handlers+0x1e>
 800d424:	4b0d      	ldr	r3, [pc, #52]	@ (800d45c <http_set_cgi_handlers+0x48>)
 800d426:	f640 2284 	movw	r2, #2692	@ 0xa84
 800d42a:	490d      	ldr	r1, [pc, #52]	@ (800d460 <http_set_cgi_handlers+0x4c>)
 800d42c:	480d      	ldr	r0, [pc, #52]	@ (800d464 <http_set_cgi_handlers+0x50>)
 800d42e:	f014 f979 	bl	8021724 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	dc06      	bgt.n	800d446 <http_set_cgi_handlers+0x32>
 800d438:	4b08      	ldr	r3, [pc, #32]	@ (800d45c <http_set_cgi_handlers+0x48>)
 800d43a:	f640 2285 	movw	r2, #2693	@ 0xa85
 800d43e:	490a      	ldr	r1, [pc, #40]	@ (800d468 <http_set_cgi_handlers+0x54>)
 800d440:	4808      	ldr	r0, [pc, #32]	@ (800d464 <http_set_cgi_handlers+0x50>)
 800d442:	f014 f96f 	bl	8021724 <iprintf>

  g_pCGIs = cgis;
 800d446:	4a09      	ldr	r2, [pc, #36]	@ (800d46c <http_set_cgi_handlers+0x58>)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800d44c:	4a08      	ldr	r2, [pc, #32]	@ (800d470 <http_set_cgi_handlers+0x5c>)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	6013      	str	r3, [r2, #0]
}
 800d452:	bf00      	nop
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	080249bc 	.word	0x080249bc
 800d460:	08024c34 	.word	0x08024c34
 800d464:	08024a04 	.word	0x08024a04
 800d468:	08024c44 	.word	0x08024c44
 800d46c:	20008578 	.word	0x20008578
 800d470:	2000857c 	.word	0x2000857c

0800d474 <snmp_ans1_enc_tlv>:
 * @param tlv TLV to encode
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_ans1_enc_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  u8_t data;
  u8_t length_bytes_required;

  /* write type */
  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	f003 031f 	and.w	r3, r3, #31
 800d486:	2b1f      	cmp	r3, #31
 800d488:	d102      	bne.n	800d490 <snmp_ans1_enc_tlv+0x1c>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_ARG;
 800d48a:	f06f 030f 	mvn.w	r3, #15
 800d48e:	e078      	b.n	800d582 <snmp_ans1_enc_tlv+0x10e>
  }
  if (tlv->type_len != 0) {
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	785b      	ldrb	r3, [r3, #1]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <snmp_ans1_enc_tlv+0x2a>
    /* any other value as auto is not accepted for type (we always use one byte because extended syntax is prohibited) */
    return ERR_ARG;
 800d498:	f06f 030f 	mvn.w	r3, #15
 800d49c:	e071      	b.n	800d582 <snmp_ans1_enc_tlv+0x10e>
  }

  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, tlv->type));
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f005 fdca 	bl	801303e <snmp_pbuf_stream_write>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <snmp_ans1_enc_tlv+0x42>
 800d4b0:	f06f 0301 	mvn.w	r3, #1
 800d4b4:	e065      	b.n	800d582 <snmp_ans1_enc_tlv+0x10e>
  tlv->type_len = 1;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	705a      	strb	r2, [r3, #1]

  /* write length */
  if (tlv->value_len <= 127) {
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	889b      	ldrh	r3, [r3, #4]
 800d4c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4c2:	d802      	bhi.n	800d4ca <snmp_ans1_enc_tlv+0x56>
    length_bytes_required = 1;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	73bb      	strb	r3, [r7, #14]
 800d4c8:	e008      	b.n	800d4dc <snmp_ans1_enc_tlv+0x68>
  } else if (tlv->value_len <= 255) {
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	889b      	ldrh	r3, [r3, #4]
 800d4ce:	2bff      	cmp	r3, #255	@ 0xff
 800d4d0:	d802      	bhi.n	800d4d8 <snmp_ans1_enc_tlv+0x64>
    length_bytes_required = 2;
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	73bb      	strb	r3, [r7, #14]
 800d4d6:	e001      	b.n	800d4dc <snmp_ans1_enc_tlv+0x68>
  } else  {
    length_bytes_required = 3;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	73bb      	strb	r3, [r7, #14]
  }

  /* check for forced min length */
  if (tlv->length_len > 0) {
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	789b      	ldrb	r3, [r3, #2]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00b      	beq.n	800d4fc <snmp_ans1_enc_tlv+0x88>
    if (tlv->length_len < length_bytes_required) {
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	789b      	ldrb	r3, [r3, #2]
 800d4e8:	7bba      	ldrb	r2, [r7, #14]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d902      	bls.n	800d4f4 <snmp_ans1_enc_tlv+0x80>
      /* unable to code requested length in requested number of bytes */
      return ERR_ARG;
 800d4ee:	f06f 030f 	mvn.w	r3, #15
 800d4f2:	e046      	b.n	800d582 <snmp_ans1_enc_tlv+0x10e>
    }

    length_bytes_required = tlv->length_len;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	789b      	ldrb	r3, [r3, #2]
 800d4f8:	73bb      	strb	r3, [r7, #14]
 800d4fa:	e002      	b.n	800d502 <snmp_ans1_enc_tlv+0x8e>
  } else {
    tlv->length_len = length_bytes_required;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	7bba      	ldrb	r2, [r7, #14]
 800d500:	709a      	strb	r2, [r3, #2]
  }

  if (length_bytes_required > 1) {
 800d502:	7bbb      	ldrb	r3, [r7, #14]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d92d      	bls.n	800d564 <snmp_ans1_enc_tlv+0xf0>
    /* multi byte representation required */
    length_bytes_required--;
 800d508:	7bbb      	ldrb	r3, [r7, #14]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	73bb      	strb	r3, [r7, #14]
    data = 0x80 | length_bytes_required; /* extended length definition, 1 length byte follows */
 800d50e:	7bbb      	ldrb	r3, [r7, #14]
 800d510:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d514:	73fb      	strb	r3, [r7, #15]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800d516:	7bfb      	ldrb	r3, [r7, #15]
 800d518:	4619      	mov	r1, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f005 fd8f 	bl	801303e <snmp_pbuf_stream_write>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d01b      	beq.n	800d55e <snmp_ans1_enc_tlv+0xea>
 800d526:	f06f 0301 	mvn.w	r3, #1
 800d52a:	e02a      	b.n	800d582 <snmp_ans1_enc_tlv+0x10e>

    while (length_bytes_required > 1) {
      if (length_bytes_required == 2) {
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d105      	bne.n	800d53e <snmp_ans1_enc_tlv+0xca>
        /* append high byte */
        data = (u8_t)(tlv->value_len >> 8);
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	889b      	ldrh	r3, [r3, #4]
 800d536:	0a1b      	lsrs	r3, r3, #8
 800d538:	b29b      	uxth	r3, r3
 800d53a:	73fb      	strb	r3, [r7, #15]
 800d53c:	e001      	b.n	800d542 <snmp_ans1_enc_tlv+0xce>
      } else {
        /* append leading 0x00 */
        data = 0x00;
 800d53e:	2300      	movs	r3, #0
 800d540:	73fb      	strb	r3, [r7, #15]
      }

      PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800d542:	7bfb      	ldrb	r3, [r7, #15]
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f005 fd79 	bl	801303e <snmp_pbuf_stream_write>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <snmp_ans1_enc_tlv+0xe4>
 800d552:	f06f 0301 	mvn.w	r3, #1
 800d556:	e014      	b.n	800d582 <snmp_ans1_enc_tlv+0x10e>
      length_bytes_required--;
 800d558:	7bbb      	ldrb	r3, [r7, #14]
 800d55a:	3b01      	subs	r3, #1
 800d55c:	73bb      	strb	r3, [r7, #14]
    while (length_bytes_required > 1) {
 800d55e:	7bbb      	ldrb	r3, [r7, #14]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d8e3      	bhi.n	800d52c <snmp_ans1_enc_tlv+0xb8>
    }
  }

  /* append low byte */
  data = (u8_t)(tlv->value_len & 0xFF);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	889b      	ldrh	r3, [r3, #4]
 800d568:	73fb      	strb	r3, [r7, #15]
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
 800d56c:	4619      	mov	r1, r3
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f005 fd65 	bl	801303e <snmp_pbuf_stream_write>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d002      	beq.n	800d580 <snmp_ans1_enc_tlv+0x10c>
 800d57a:	f06f 0301 	mvn.w	r3, #1
 800d57e:	e000      	b.n	800d582 <snmp_ans1_enc_tlv+0x10e>

  return ERR_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <snmp_asn1_enc_raw>:
 * @param raw points raw data
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_raw(struct snmp_pbuf_stream* pbuf_stream, const u8_t *raw, u16_t raw_len)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	60f8      	str	r0, [r7, #12]
 800d592:	60b9      	str	r1, [r7, #8]
 800d594:	4613      	mov	r3, r2
 800d596:	80fb      	strh	r3, [r7, #6]
  PBUF_OP_EXEC(snmp_pbuf_stream_writebuf(pbuf_stream, raw, raw_len));
 800d598:	88fb      	ldrh	r3, [r7, #6]
 800d59a:	461a      	mov	r2, r3
 800d59c:	68b9      	ldr	r1, [r7, #8]
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f005 fd5e 	bl	8013060 <snmp_pbuf_stream_writebuf>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d002      	beq.n	800d5b0 <snmp_asn1_enc_raw+0x26>
 800d5aa:	f06f 0301 	mvn.w	r3, #1
 800d5ae:	e000      	b.n	800d5b2 <snmp_asn1_enc_raw+0x28>

  return ERR_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <snmp_asn1_enc_u32t>:
 *
 * @see snmp_asn1_enc_u32t_cnt()
 */
err_t
snmp_asn1_enc_u32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, u32_t value)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	607a      	str	r2, [r7, #4]
 800d5c6:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 5) {
 800d5c8:	897b      	ldrh	r3, [r7, #10]
 800d5ca:	2b05      	cmp	r3, #5
 800d5cc:	d902      	bls.n	800d5d4 <snmp_asn1_enc_u32t+0x1a>
    return ERR_ARG;
 800d5ce:	f06f 030f 	mvn.w	r3, #15
 800d5d2:	e033      	b.n	800d63c <snmp_asn1_enc_u32t+0x82>
  }
  if (octets_needed == 5) {
 800d5d4:	897b      	ldrh	r3, [r7, #10]
 800d5d6:	2b05      	cmp	r3, #5
 800d5d8:	d120      	bne.n	800d61c <snmp_asn1_enc_u32t+0x62>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800d5da:	2100      	movs	r1, #0
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f005 fd2e 	bl	801303e <snmp_pbuf_stream_write>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <snmp_asn1_enc_u32t+0x34>
 800d5e8:	f06f 0301 	mvn.w	r3, #1
 800d5ec:	e026      	b.n	800d63c <snmp_asn1_enc_u32t+0x82>
    octets_needed--;
 800d5ee:	897b      	ldrh	r3, [r7, #10]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 1) {
 800d5f4:	e012      	b.n	800d61c <snmp_asn1_enc_u32t+0x62>
    octets_needed--;
 800d5f6:	897b      	ldrh	r3, [r7, #10]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800d5fc:	897b      	ldrh	r3, [r7, #10]
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	fa22 f303 	lsr.w	r3, r2, r3
 800d606:	b2db      	uxtb	r3, r3
 800d608:	4619      	mov	r1, r3
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f005 fd17 	bl	801303e <snmp_pbuf_stream_write>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d002      	beq.n	800d61c <snmp_asn1_enc_u32t+0x62>
 800d616:	f06f 0301 	mvn.w	r3, #1
 800d61a:	e00f      	b.n	800d63c <snmp_asn1_enc_u32t+0x82>
  while (octets_needed > 1) {
 800d61c:	897b      	ldrh	r3, [r7, #10]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d8e9      	bhi.n	800d5f6 <snmp_asn1_enc_u32t+0x3c>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	4619      	mov	r1, r3
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f005 fd08 	bl	801303e <snmp_pbuf_stream_write>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <snmp_asn1_enc_u32t+0x80>
 800d634:	f06f 0301 	mvn.w	r3, #1
 800d638:	e000      	b.n	800d63c <snmp_asn1_enc_u32t+0x82>

  return ERR_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <snmp_asn1_enc_u64t>:
 *
 * @see snmp_asn1_enc_u64t_cnt()
 */
err_t
snmp_asn1_enc_u64t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, const u32_t* value)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	460b      	mov	r3, r1
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 9) {
 800d652:	897b      	ldrh	r3, [r7, #10]
 800d654:	2b09      	cmp	r3, #9
 800d656:	d902      	bls.n	800d65e <snmp_asn1_enc_u64t+0x1a>
    return ERR_ARG;
 800d658:	f06f 030f 	mvn.w	r3, #15
 800d65c:	e051      	b.n	800d702 <snmp_asn1_enc_u64t+0xbe>
  }
  if (octets_needed == 9) {
 800d65e:	897b      	ldrh	r3, [r7, #10]
 800d660:	2b09      	cmp	r3, #9
 800d662:	d122      	bne.n	800d6aa <snmp_asn1_enc_u64t+0x66>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800d664:	2100      	movs	r1, #0
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f005 fce9 	bl	801303e <snmp_pbuf_stream_write>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <snmp_asn1_enc_u64t+0x34>
 800d672:	f06f 0301 	mvn.w	r3, #1
 800d676:	e044      	b.n	800d702 <snmp_asn1_enc_u64t+0xbe>
    octets_needed--;
 800d678:	897b      	ldrh	r3, [r7, #10]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 4) {
 800d67e:	e014      	b.n	800d6aa <snmp_asn1_enc_u64t+0x66>
    octets_needed--;
 800d680:	897b      	ldrh	r3, [r7, #10]
 800d682:	3b01      	subs	r3, #1
 800d684:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> ((octets_needed-4) << 3))));
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	897b      	ldrh	r3, [r7, #10]
 800d68c:	3b04      	subs	r3, #4
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	fa22 f303 	lsr.w	r3, r2, r3
 800d694:	b2db      	uxtb	r3, r3
 800d696:	4619      	mov	r1, r3
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f005 fcd0 	bl	801303e <snmp_pbuf_stream_write>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d002      	beq.n	800d6aa <snmp_asn1_enc_u64t+0x66>
 800d6a4:	f06f 0301 	mvn.w	r3, #1
 800d6a8:	e02b      	b.n	800d702 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 4) {
 800d6aa:	897b      	ldrh	r3, [r7, #10]
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d8e7      	bhi.n	800d680 <snmp_asn1_enc_u64t+0x3c>
  }

  /* skip to low u32 */
  value++;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	607b      	str	r3, [r7, #4]

  while (octets_needed > 1) {
 800d6b6:	e013      	b.n	800d6e0 <snmp_asn1_enc_u64t+0x9c>
    octets_needed--;
 800d6b8:	897b      	ldrh	r3, [r7, #10]
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> (octets_needed << 3))));
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	897b      	ldrh	r3, [r7, #10]
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f005 fcb5 	bl	801303e <snmp_pbuf_stream_write>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d002      	beq.n	800d6e0 <snmp_asn1_enc_u64t+0x9c>
 800d6da:	f06f 0301 	mvn.w	r3, #1
 800d6de:	e010      	b.n	800d702 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 1) {
 800d6e0:	897b      	ldrh	r3, [r7, #10]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d8e8      	bhi.n	800d6b8 <snmp_asn1_enc_u64t+0x74>
  }

  /* always write at least one octet (also in case of value == 0) */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value)));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f005 fca5 	bl	801303e <snmp_pbuf_stream_write>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <snmp_asn1_enc_u64t+0xbc>
 800d6fa:	f06f 0301 	mvn.w	r3, #1
 800d6fe:	e000      	b.n	800d702 <snmp_asn1_enc_u64t+0xbe>

  return ERR_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <snmp_asn1_enc_s32t>:
 *
 * @see snmp_asn1_enc_s32t_cnt()
 */
err_t
snmp_asn1_enc_s32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, s32_t value)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b084      	sub	sp, #16
 800d70e:	af00      	add	r7, sp, #0
 800d710:	60f8      	str	r0, [r7, #12]
 800d712:	460b      	mov	r3, r1
 800d714:	607a      	str	r2, [r7, #4]
 800d716:	817b      	strh	r3, [r7, #10]
  while (octets_needed > 1) {
 800d718:	e012      	b.n	800d740 <snmp_asn1_enc_s32t+0x36>
    octets_needed--;
 800d71a:	897b      	ldrh	r3, [r7, #10]
 800d71c:	3b01      	subs	r3, #1
 800d71e:	817b      	strh	r3, [r7, #10]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800d720:	897b      	ldrh	r3, [r7, #10]
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	fa42 f303 	asr.w	r3, r2, r3
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	4619      	mov	r1, r3
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f005 fc85 	bl	801303e <snmp_pbuf_stream_write>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <snmp_asn1_enc_s32t+0x36>
 800d73a:	f06f 0301 	mvn.w	r3, #1
 800d73e:	e00f      	b.n	800d760 <snmp_asn1_enc_s32t+0x56>
  while (octets_needed > 1) {
 800d740:	897b      	ldrh	r3, [r7, #10]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d8e9      	bhi.n	800d71a <snmp_asn1_enc_s32t+0x10>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	4619      	mov	r1, r3
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f005 fc76 	bl	801303e <snmp_pbuf_stream_write>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <snmp_asn1_enc_s32t+0x54>
 800d758:	f06f 0301 	mvn.w	r3, #1
 800d75c:	e000      	b.n	800d760 <snmp_asn1_enc_s32t+0x56>

  return ERR_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <snmp_asn1_enc_oid>:
 * @param oid_len object identifier array length
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_oid(struct snmp_pbuf_stream* pbuf_stream, const u32_t *oid, u16_t oid_len)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	4613      	mov	r3, r2
 800d774:	80fb      	strh	r3, [r7, #6]
  if (oid_len > 1) {
 800d776:	88fb      	ldrh	r3, [r7, #6]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d91e      	bls.n	800d7ba <snmp_asn1_enc_oid+0x52>
    /* write compressed first two sub id's */
    u32_t compressed_byte = ((oid[0] * 40) + oid[1]);
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	4613      	mov	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	00db      	lsls	r3, r3, #3
 800d788:	461a      	mov	r2, r3
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	3304      	adds	r3, #4
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4413      	add	r3, r2
 800d792:	61bb      	str	r3, [r7, #24]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)compressed_byte));
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	b2db      	uxtb	r3, r3
 800d798:	4619      	mov	r1, r3
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f005 fc4f 	bl	801303e <snmp_pbuf_stream_write>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <snmp_asn1_enc_oid+0x44>
 800d7a6:	f06f 0301 	mvn.w	r3, #1
 800d7aa:	e04b      	b.n	800d844 <snmp_asn1_enc_oid+0xdc>
    oid_len -= 2;
 800d7ac:	88fb      	ldrh	r3, [r7, #6]
 800d7ae:	3b02      	subs	r3, #2
 800d7b0:	80fb      	strh	r3, [r7, #6]
    oid += 2;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	60bb      	str	r3, [r7, #8]
    /* @bug:  allow empty varbinds for symmetry (we must decode them for getnext), allow partial compression?? */
    /* ident_len <= 1, at least we need zeroDotZero (0.0) (ident_len == 2) */
    return ERR_ARG;
  }

  while (oid_len > 0) {
 800d7b8:	e040      	b.n	800d83c <snmp_asn1_enc_oid+0xd4>
    return ERR_ARG;
 800d7ba:	f06f 030f 	mvn.w	r3, #15
 800d7be:	e041      	b.n	800d844 <snmp_asn1_enc_oid+0xdc>
    u32_t sub_id;
    u8_t shift, tail;

    oid_len--;
 800d7c0:	88fb      	ldrh	r3, [r7, #6]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	80fb      	strh	r3, [r7, #6]
    sub_id = *oid;
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	617b      	str	r3, [r7, #20]
    tail = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	77bb      	strb	r3, [r7, #30]
    shift = 28;
 800d7d0:	231c      	movs	r3, #28
 800d7d2:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800d7d4:	e01d      	b.n	800d812 <snmp_asn1_enc_oid+0xaa>
      u8_t code;

      code = (u8_t)(sub_id >> shift);
 800d7d6:	7ffb      	ldrb	r3, [r7, #31]
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	fa22 f303 	lsr.w	r3, r2, r3
 800d7de:	74fb      	strb	r3, [r7, #19]
      if ((code != 0) || (tail != 0)) {
 800d7e0:	7cfb      	ldrb	r3, [r7, #19]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d102      	bne.n	800d7ec <snmp_asn1_enc_oid+0x84>
 800d7e6:	7fbb      	ldrb	r3, [r7, #30]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00f      	beq.n	800d80c <snmp_asn1_enc_oid+0xa4>
        tail = 1;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	77bb      	strb	r3, [r7, #30]
        PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, code | 0x80));
 800d7f0:	7cfb      	ldrb	r3, [r7, #19]
 800d7f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f005 fc1f 	bl	801303e <snmp_pbuf_stream_write>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <snmp_asn1_enc_oid+0xa4>
 800d806:	f06f 0301 	mvn.w	r3, #1
 800d80a:	e01b      	b.n	800d844 <snmp_asn1_enc_oid+0xdc>
      }
      shift -= 7;
 800d80c:	7ffb      	ldrb	r3, [r7, #31]
 800d80e:	3b07      	subs	r3, #7
 800d810:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800d812:	7ffb      	ldrb	r3, [r7, #31]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1de      	bne.n	800d7d6 <snmp_asn1_enc_oid+0x6e>
    }
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)sub_id & 0x7F));
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d820:	b2db      	uxtb	r3, r3
 800d822:	4619      	mov	r1, r3
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f005 fc0a 	bl	801303e <snmp_pbuf_stream_write>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d002      	beq.n	800d836 <snmp_asn1_enc_oid+0xce>
 800d830:	f06f 0301 	mvn.w	r3, #1
 800d834:	e006      	b.n	800d844 <snmp_asn1_enc_oid+0xdc>

    /* proceed to next sub-identifier */
    oid++;
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	3304      	adds	r3, #4
 800d83a:	60bb      	str	r3, [r7, #8]
  while (oid_len > 0) {
 800d83c:	88fb      	ldrh	r3, [r7, #6]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1be      	bne.n	800d7c0 <snmp_asn1_enc_oid+0x58>
  }
  return ERR_OK;
 800d842:	2300      	movs	r3, #0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3720      	adds	r7, #32
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <snmp_asn1_enc_length_cnt>:
 * @param length parameter length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	6039      	str	r1, [r7, #0]
 800d856:	80fb      	strh	r3, [r7, #6]
  if (length < 0x80U) {
 800d858:	88fb      	ldrh	r3, [r7, #6]
 800d85a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d85c:	d803      	bhi.n	800d866 <snmp_asn1_enc_length_cnt+0x1a>
    *octets_needed = 1;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2201      	movs	r2, #1
 800d862:	701a      	strb	r2, [r3, #0]
  } else if (length < 0x100U) {
    *octets_needed = 2;
  } else {
    *octets_needed = 3;
  }
}
 800d864:	e009      	b.n	800d87a <snmp_asn1_enc_length_cnt+0x2e>
  } else if (length < 0x100U) {
 800d866:	88fb      	ldrh	r3, [r7, #6]
 800d868:	2bff      	cmp	r3, #255	@ 0xff
 800d86a:	d803      	bhi.n	800d874 <snmp_asn1_enc_length_cnt+0x28>
    *octets_needed = 2;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2202      	movs	r2, #2
 800d870:	701a      	strb	r2, [r3, #0]
}
 800d872:	e002      	b.n	800d87a <snmp_asn1_enc_length_cnt+0x2e>
    *octets_needed = 3;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2203      	movs	r2, #3
 800d878:	701a      	strb	r2, [r3, #0]
}
 800d87a:	bf00      	nop
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	bc80      	pop	{r7}
 800d882:	4770      	bx	lr

0800d884 <snmp_asn1_enc_u32t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  if (value < 0x80UL) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2b7f      	cmp	r3, #127	@ 0x7f
 800d892:	d803      	bhi.n	800d89c <snmp_asn1_enc_u32t_cnt+0x18>
    *octets_needed = 1;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2201      	movs	r2, #1
 800d898:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x80000000UL) {
    *octets_needed = 4;
  } else {
    *octets_needed = 5;
  }
}
 800d89a:	e019      	b.n	800d8d0 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x8000UL) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8a2:	d203      	bcs.n	800d8ac <snmp_asn1_enc_u32t_cnt+0x28>
    *octets_needed = 2;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	801a      	strh	r2, [r3, #0]
}
 800d8aa:	e011      	b.n	800d8d0 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x800000UL) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d8b2:	d203      	bcs.n	800d8bc <snmp_asn1_enc_u32t_cnt+0x38>
    *octets_needed = 3;
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	2203      	movs	r2, #3
 800d8b8:	801a      	strh	r2, [r3, #0]
}
 800d8ba:	e009      	b.n	800d8d0 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x80000000UL) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	db03      	blt.n	800d8ca <snmp_asn1_enc_u32t_cnt+0x46>
    *octets_needed = 4;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	801a      	strh	r2, [r3, #0]
}
 800d8c8:	e002      	b.n	800d8d0 <snmp_asn1_enc_u32t_cnt+0x4c>
    *octets_needed = 5;
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2205      	movs	r2, #5
 800d8ce:	801a      	strh	r2, [r3, #0]
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bc80      	pop	{r7}
 800d8d8:	4770      	bx	lr

0800d8da <snmp_asn1_enc_u64t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u64t_cnt(const u32_t *value, u16_t *octets_needed)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	6039      	str	r1, [r7, #0]
  /* check if high u32 is 0 */
  if (*value == 0x00) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d109      	bne.n	800d900 <snmp_asn1_enc_u64t_cnt+0x26>
    /* only low u32 is important */
    value++;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	607b      	str	r3, [r7, #4]
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7ff ffc3 	bl	800d884 <snmp_asn1_enc_u32t_cnt>
  } else {
    /* low u32 does not matter for length determination */
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
  }
}
 800d8fe:	e00b      	b.n	800d918 <snmp_asn1_enc_u64t_cnt+0x3e>
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff ffbc 	bl	800d884 <snmp_asn1_enc_u32t_cnt>
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	881b      	ldrh	r3, [r3, #0]
 800d910:	3304      	adds	r3, #4
 800d912:	b29a      	uxth	r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	801a      	strh	r2, [r3, #0]
}
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <snmp_asn1_enc_s32t_cnt>:
 *
 * @note ASN coded integers are _always_ signed.
 */
void
snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  if (value < 0) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da02      	bge.n	800d936 <snmp_asn1_enc_s32t_cnt+0x16>
    value = ~value;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	43db      	mvns	r3, r3
 800d934:	607b      	str	r3, [r7, #4]
  }
  if (value < 0x80L) {
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b7f      	cmp	r3, #127	@ 0x7f
 800d93a:	dc03      	bgt.n	800d944 <snmp_asn1_enc_s32t_cnt+0x24>
    *octets_needed = 1;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	2201      	movs	r2, #1
 800d940:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x800000L) {
    *octets_needed = 3;
  } else {
    *octets_needed = 4;
  }
}
 800d942:	e012      	b.n	800d96a <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x8000L) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d94a:	da03      	bge.n	800d954 <snmp_asn1_enc_s32t_cnt+0x34>
    *octets_needed = 2;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2202      	movs	r2, #2
 800d950:	801a      	strh	r2, [r3, #0]
}
 800d952:	e00a      	b.n	800d96a <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x800000L) {
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d95a:	da03      	bge.n	800d964 <snmp_asn1_enc_s32t_cnt+0x44>
    *octets_needed = 3;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2203      	movs	r2, #3
 800d960:	801a      	strh	r2, [r3, #0]
}
 800d962:	e002      	b.n	800d96a <snmp_asn1_enc_s32t_cnt+0x4a>
    *octets_needed = 4;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2204      	movs	r2, #4
 800d968:	801a      	strh	r2, [r3, #0]
}
 800d96a:	bf00      	nop
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	bc80      	pop	{r7}
 800d972:	4770      	bx	lr

0800d974 <snmp_asn1_enc_oid_cnt>:
 * @param oid_len object identifier array length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_oid_cnt(const u32_t *oid, u16_t oid_len, u16_t *octets_needed)
{
 800d974:	b480      	push	{r7}
 800d976:	b087      	sub	sp, #28
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	460b      	mov	r3, r1
 800d97e:	607a      	str	r2, [r7, #4]
 800d980:	817b      	strh	r3, [r7, #10]
  u32_t sub_id;

  *octets_needed = 0;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	801a      	strh	r2, [r3, #0]
  if (oid_len > 1) {
 800d988:	897b      	ldrh	r3, [r7, #10]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d92b      	bls.n	800d9e6 <snmp_asn1_enc_oid_cnt+0x72>
    /* compressed prefix in one octet */
    (*octets_needed)++;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	881b      	ldrh	r3, [r3, #0]
 800d992:	3301      	adds	r3, #1
 800d994:	b29a      	uxth	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	801a      	strh	r2, [r3, #0]
    oid_len -= 2;
 800d99a:	897b      	ldrh	r3, [r7, #10]
 800d99c:	3b02      	subs	r3, #2
 800d99e:	817b      	strh	r3, [r7, #10]
    oid += 2;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	60fb      	str	r3, [r7, #12]
  }
  while (oid_len > 0) {
 800d9a6:	e01e      	b.n	800d9e6 <snmp_asn1_enc_oid_cnt+0x72>
    oid_len--;
 800d9a8:	897b      	ldrh	r3, [r7, #10]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	817b      	strh	r3, [r7, #10]
    sub_id = *oid;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	617b      	str	r3, [r7, #20]

    sub_id >>= 7;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	09db      	lsrs	r3, r3, #7
 800d9b8:	617b      	str	r3, [r7, #20]
    (*octets_needed)++;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800d9c6:	e008      	b.n	800d9da <snmp_asn1_enc_oid_cnt+0x66>
      sub_id >>= 7;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	09db      	lsrs	r3, r3, #7
 800d9cc:	617b      	str	r3, [r7, #20]
      (*octets_needed)++;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1f3      	bne.n	800d9c8 <snmp_asn1_enc_oid_cnt+0x54>
    }
    oid++;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	60fb      	str	r3, [r7, #12]
  while (oid_len > 0) {
 800d9e6:	897b      	ldrh	r3, [r7, #10]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1dd      	bne.n	800d9a8 <snmp_asn1_enc_oid_cnt+0x34>
  }
}
 800d9ec:	bf00      	nop
 800d9ee:	bf00      	nop
 800d9f0:	371c      	adds	r7, #28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bc80      	pop	{r7}
 800d9f6:	4770      	bx	lr

0800d9f8 <snmp_asn1_dec_tlv>:
 * @param tlv returns decoded TLV
 * @return ERR_OK if successful, ERR_VAL if we can't decode
 */
err_t
snmp_asn1_dec_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  u8_t data;

  /* decode type first */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800da02:	f107 030e 	add.w	r3, r7, #14
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f005 faed 	bl	8012fe8 <snmp_pbuf_stream_read>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <snmp_asn1_dec_tlv+0x22>
 800da14:	f06f 0301 	mvn.w	r3, #1
 800da18:	e069      	b.n	800daee <snmp_asn1_dec_tlv+0xf6>
  tlv->type = data;
 800da1a:	7bba      	ldrb	r2, [r7, #14]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	701a      	strb	r2, [r3, #0]

  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	f003 031f 	and.w	r3, r3, #31
 800da28:	2b1f      	cmp	r3, #31
 800da2a:	d102      	bne.n	800da32 <snmp_asn1_dec_tlv+0x3a>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_VAL;
 800da2c:	f06f 0305 	mvn.w	r3, #5
 800da30:	e05d      	b.n	800daee <snmp_asn1_dec_tlv+0xf6>
  }
  tlv->type_len = 1;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2201      	movs	r2, #1
 800da36:	705a      	strb	r2, [r3, #1]

  /* now, decode length */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800da38:	f107 030e 	add.w	r3, r7, #14
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f005 fad2 	bl	8012fe8 <snmp_pbuf_stream_read>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d002      	beq.n	800da50 <snmp_asn1_dec_tlv+0x58>
 800da4a:	f06f 0301 	mvn.w	r3, #1
 800da4e:	e04e      	b.n	800daee <snmp_asn1_dec_tlv+0xf6>

  if (data < 0x80) { /* short form */
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	b25b      	sxtb	r3, r3
 800da54:	2b00      	cmp	r3, #0
 800da56:	db07      	blt.n	800da68 <snmp_asn1_dec_tlv+0x70>
    tlv->length_len = 1;
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2201      	movs	r2, #1
 800da5c:	709a      	strb	r2, [r3, #2]
    tlv->value_len  = data;
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	461a      	mov	r2, r3
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	809a      	strh	r2, [r3, #4]
 800da66:	e041      	b.n	800daec <snmp_asn1_dec_tlv+0xf4>
  } else if (data > 0x80) { /* long form */
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	2b80      	cmp	r3, #128	@ 0x80
 800da6c:	d93b      	bls.n	800dae6 <snmp_asn1_dec_tlv+0xee>
    u8_t length_bytes = data - 0x80;
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
 800da70:	3b80      	subs	r3, #128	@ 0x80
 800da72:	73fb      	strb	r3, [r7, #15]
    tlv->length_len = length_bytes + 1; /* this byte + defined number of length bytes following */
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	3301      	adds	r3, #1
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	709a      	strb	r2, [r3, #2]
    tlv->value_len = 0;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2200      	movs	r2, #0
 800da82:	809a      	strh	r2, [r3, #4]

    while (length_bytes > 0) {
 800da84:	e02b      	b.n	800dade <snmp_asn1_dec_tlv+0xe6>
      /* we only support up to u16.maxvalue-1 (2 bytes) but have to accept leading zero bytes */
      if (tlv->value_len > 0xFF) {
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	889b      	ldrh	r3, [r3, #4]
 800da8a:	2bff      	cmp	r3, #255	@ 0xff
 800da8c:	d902      	bls.n	800da94 <snmp_asn1_dec_tlv+0x9c>
        return ERR_VAL;
 800da8e:	f06f 0305 	mvn.w	r3, #5
 800da92:	e02c      	b.n	800daee <snmp_asn1_dec_tlv+0xf6>
      }
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800da94:	f107 030e 	add.w	r3, r7, #14
 800da98:	4619      	mov	r1, r3
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f005 faa4 	bl	8012fe8 <snmp_pbuf_stream_read>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <snmp_asn1_dec_tlv+0xb4>
 800daa6:	f06f 0301 	mvn.w	r3, #1
 800daaa:	e020      	b.n	800daee <snmp_asn1_dec_tlv+0xf6>
      tlv->value_len <<= 8;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	889b      	ldrh	r3, [r3, #4]
 800dab0:	021b      	lsls	r3, r3, #8
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	809a      	strh	r2, [r3, #4]
      tlv->value_len |= data;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	889b      	ldrh	r3, [r3, #4]
 800dabc:	7bba      	ldrb	r2, [r7, #14]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	809a      	strh	r2, [r3, #4]

      /* take care for special value used for indefinite length */
      if (tlv->value_len == 0xFFFF) {
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	889b      	ldrh	r3, [r3, #4]
 800daca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dace:	4293      	cmp	r3, r2
 800dad0:	d102      	bne.n	800dad8 <snmp_asn1_dec_tlv+0xe0>
        return ERR_VAL;
 800dad2:	f06f 0305 	mvn.w	r3, #5
 800dad6:	e00a      	b.n	800daee <snmp_asn1_dec_tlv+0xf6>
      }

      length_bytes--;
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	3b01      	subs	r3, #1
 800dadc:	73fb      	strb	r3, [r7, #15]
    while (length_bytes > 0) {
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1d0      	bne.n	800da86 <snmp_asn1_dec_tlv+0x8e>
 800dae4:	e002      	b.n	800daec <snmp_asn1_dec_tlv+0xf4>
    }
  } else { /* data == 0x80 indefinite length form */
    /* (not allowed for SNMP; RFC 1157, 3.2.2) */
    return ERR_VAL;
 800dae6:	f06f 0305 	mvn.w	r3, #5
 800daea:	e000      	b.n	800daee <snmp_asn1_dec_tlv+0xf6>
  }

  return ERR_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <snmp_asn1_dec_u32t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b086      	sub	sp, #24
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	460b      	mov	r3, r1
 800db00:	607a      	str	r2, [r7, #4]
 800db02:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len <= 5)) {
 800db04:	897b      	ldrh	r3, [r7, #10]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d042      	beq.n	800db90 <snmp_asn1_dec_u32t+0x9a>
 800db0a:	897b      	ldrh	r3, [r7, #10]
 800db0c:	2b05      	cmp	r3, #5
 800db0e:	d83f      	bhi.n	800db90 <snmp_asn1_dec_u32t+0x9a>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800db10:	f107 0317 	add.w	r3, r7, #23
 800db14:	4619      	mov	r1, r3
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f005 fa66 	bl	8012fe8 <snmp_pbuf_stream_read>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d002      	beq.n	800db28 <snmp_asn1_dec_u32t+0x32>
 800db22:	f06f 0301 	mvn.w	r3, #1
 800db26:	e035      	b.n	800db94 <snmp_asn1_dec_u32t+0x9e>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 5) && (data == 0x00)) || ((len < 5) && ((data & 0x80) == 0))) {
 800db28:	897b      	ldrh	r3, [r7, #10]
 800db2a:	2b05      	cmp	r3, #5
 800db2c:	d102      	bne.n	800db34 <snmp_asn1_dec_u32t+0x3e>
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d006      	beq.n	800db42 <snmp_asn1_dec_u32t+0x4c>
 800db34:	897b      	ldrh	r3, [r7, #10]
 800db36:	2b04      	cmp	r3, #4
 800db38:	d82a      	bhi.n	800db90 <snmp_asn1_dec_u32t+0x9a>
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	b25b      	sxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	db26      	blt.n	800db90 <snmp_asn1_dec_u32t+0x9a>
      *value = data;
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	461a      	mov	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	601a      	str	r2, [r3, #0]
      len--;
 800db4a:	897b      	ldrh	r3, [r7, #10]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800db50:	e019      	b.n	800db86 <snmp_asn1_dec_u32t+0x90>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800db52:	f107 0317 	add.w	r3, r7, #23
 800db56:	4619      	mov	r1, r3
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f005 fa45 	bl	8012fe8 <snmp_pbuf_stream_read>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <snmp_asn1_dec_u32t+0x74>
 800db64:	f06f 0301 	mvn.w	r3, #1
 800db68:	e014      	b.n	800db94 <snmp_asn1_dec_u32t+0x9e>
        len--;
 800db6a:	897b      	ldrh	r3, [r7, #10]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	817b      	strh	r3, [r7, #10]

        *value <<= 8;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	021a      	lsls	r2, r3, #8
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	601a      	str	r2, [r3, #0]
        *value |= data;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	7dfa      	ldrb	r2, [r7, #23]
 800db80:	431a      	orrs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	601a      	str	r2, [r3, #0]
      while (len > 0) {
 800db86:	897b      	ldrh	r3, [r7, #10]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1e2      	bne.n	800db52 <snmp_asn1_dec_u32t+0x5c>
      }

      return ERR_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	e001      	b.n	800db94 <snmp_asn1_dec_u32t+0x9e>
    }
  }

  return ERR_VAL;
 800db90:	f06f 0305 	mvn.w	r3, #5
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <snmp_asn1_dec_u64t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	460b      	mov	r3, r1
 800dba6:	607a      	str	r2, [r7, #4]
 800dba8:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if (len <= 4) {
 800dbaa:	897b      	ldrh	r3, [r7, #10]
 800dbac:	2b04      	cmp	r3, #4
 800dbae:	d805      	bhi.n	800dbbc <snmp_asn1_dec_u64t+0x20>
    /* high u32 is 0 */
    *value = 0;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
    /* directly skip to low u32 */
    value++;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	607b      	str	r3, [r7, #4]
  }

  if ((len > 0) && (len <= 9)) {
 800dbbc:	897b      	ldrh	r3, [r7, #10]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d04c      	beq.n	800dc5c <snmp_asn1_dec_u64t+0xc0>
 800dbc2:	897b      	ldrh	r3, [r7, #10]
 800dbc4:	2b09      	cmp	r3, #9
 800dbc6:	d849      	bhi.n	800dc5c <snmp_asn1_dec_u64t+0xc0>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800dbc8:	f107 0317 	add.w	r3, r7, #23
 800dbcc:	4619      	mov	r1, r3
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f005 fa0a 	bl	8012fe8 <snmp_pbuf_stream_read>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <snmp_asn1_dec_u64t+0x44>
 800dbda:	f06f 0301 	mvn.w	r3, #1
 800dbde:	e03f      	b.n	800dc60 <snmp_asn1_dec_u64t+0xc4>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 9) && (data == 0x00)) || ((len < 9) && ((data & 0x80) == 0))) {
 800dbe0:	897b      	ldrh	r3, [r7, #10]
 800dbe2:	2b09      	cmp	r3, #9
 800dbe4:	d102      	bne.n	800dbec <snmp_asn1_dec_u64t+0x50>
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d006      	beq.n	800dbfa <snmp_asn1_dec_u64t+0x5e>
 800dbec:	897b      	ldrh	r3, [r7, #10]
 800dbee:	2b08      	cmp	r3, #8
 800dbf0:	d834      	bhi.n	800dc5c <snmp_asn1_dec_u64t+0xc0>
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	b25b      	sxtb	r3, r3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	db30      	blt.n	800dc5c <snmp_asn1_dec_u64t+0xc0>
      *value = data;
 800dbfa:	7dfb      	ldrb	r3, [r7, #23]
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	601a      	str	r2, [r3, #0]
      len--;
 800dc02:	897b      	ldrh	r3, [r7, #10]
 800dc04:	3b01      	subs	r3, #1
 800dc06:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800dc08:	e023      	b.n	800dc52 <snmp_asn1_dec_u64t+0xb6>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800dc0a:	f107 0317 	add.w	r3, r7, #23
 800dc0e:	4619      	mov	r1, r3
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f005 f9e9 	bl	8012fe8 <snmp_pbuf_stream_read>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <snmp_asn1_dec_u64t+0x86>
 800dc1c:	f06f 0301 	mvn.w	r3, #1
 800dc20:	e01e      	b.n	800dc60 <snmp_asn1_dec_u64t+0xc4>

        if (len == 4) {
 800dc22:	897b      	ldrh	r3, [r7, #10]
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d106      	bne.n	800dc36 <snmp_asn1_dec_u64t+0x9a>
          /* skip to low u32 */
          value++;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	607b      	str	r3, [r7, #4]
          *value = 0;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	e004      	b.n	800dc40 <snmp_asn1_dec_u64t+0xa4>
        } else {
          *value <<= 8;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	021a      	lsls	r2, r3, #8
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	601a      	str	r2, [r3, #0]
        }

        *value |= data;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	7dfa      	ldrb	r2, [r7, #23]
 800dc46:	431a      	orrs	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	601a      	str	r2, [r3, #0]
        len--;
 800dc4c:	897b      	ldrh	r3, [r7, #10]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	817b      	strh	r3, [r7, #10]
      while (len > 0) {
 800dc52:	897b      	ldrh	r3, [r7, #10]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1d8      	bne.n	800dc0a <snmp_asn1_dec_u64t+0x6e>
      }

      return ERR_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e001      	b.n	800dc60 <snmp_asn1_dec_u64t+0xc4>
    }
  }

  return ERR_VAL;
 800dc5c:	f06f 0305 	mvn.w	r3, #5
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <snmp_asn1_dec_s32t>:
 *
 * @note ASN coded integers are _always_ signed!
 */
err_t
snmp_asn1_dec_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, s32_t *value)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	460b      	mov	r3, r1
 800dc72:	607a      	str	r2, [r7, #4]
 800dc74:	817b      	strh	r3, [r7, #10]
#if BYTE_ORDER == LITTLE_ENDIAN
  u8_t *lsb_ptr = (u8_t*)value;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	61bb      	str	r3, [r7, #24]
  u8_t *lsb_ptr = (u8_t*)value + sizeof(s32_t) - 1;
#endif
  u8_t sign;
  u8_t data;

  if ((len > 0) && (len < 5)) {
 800dc7a:	897b      	ldrh	r3, [r7, #10]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d05e      	beq.n	800dd3e <snmp_asn1_dec_s32t+0xd6>
 800dc80:	897b      	ldrh	r3, [r7, #10]
 800dc82:	2b04      	cmp	r3, #4
 800dc84:	d85b      	bhi.n	800dd3e <snmp_asn1_dec_s32t+0xd6>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800dc86:	f107 0317 	add.w	r3, r7, #23
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f005 f9ab 	bl	8012fe8 <snmp_pbuf_stream_read>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <snmp_asn1_dec_s32t+0x36>
 800dc98:	f06f 0301 	mvn.w	r3, #1
 800dc9c:	e051      	b.n	800dd42 <snmp_asn1_dec_s32t+0xda>
    len--;
 800dc9e:	897b      	ldrh	r3, [r7, #10]
 800dca0:	3b01      	subs	r3, #1
 800dca2:	817b      	strh	r3, [r7, #10]

    if (data & 0x80) {
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	b25b      	sxtb	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	da0d      	bge.n	800dcc8 <snmp_asn1_dec_s32t+0x60>
      /* negative, start from -1 */
      *value = -1;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f04f 32ff 	mov.w	r2, #4294967295
 800dcb2:	601a      	str	r2, [r3, #0]
      sign = 1;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr &= data;
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	781a      	ldrb	r2, [r3, #0]
 800dcbc:	7dfb      	ldrb	r3, [r7, #23]
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	e035      	b.n	800dd34 <snmp_asn1_dec_s32t+0xcc>
    } else {
      /* positive, start from 0 */
      *value = 0;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
      sign = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr |= data;
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	701a      	strb	r2, [r3, #0]
    }

    /* OR/AND octets with value */
    while (len > 0) {
 800dce0:	e028      	b.n	800dd34 <snmp_asn1_dec_s32t+0xcc>
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800dce2:	f107 0317 	add.w	r3, r7, #23
 800dce6:	4619      	mov	r1, r3
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f005 f97d 	bl	8012fe8 <snmp_pbuf_stream_read>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d002      	beq.n	800dcfa <snmp_asn1_dec_s32t+0x92>
 800dcf4:	f06f 0301 	mvn.w	r3, #1
 800dcf8:	e023      	b.n	800dd42 <snmp_asn1_dec_s32t+0xda>
      len--;
 800dcfa:	897b      	ldrh	r3, [r7, #10]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	817b      	strh	r3, [r7, #10]

#if BYTE_ORDER == LITTLE_ENDIAN
      *value <<= 8;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	021a      	lsls	r2, r3, #8
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	601a      	str	r2, [r3, #0]
#endif
#if BYTE_ORDER == BIG_ENDIAN
      *value >>= 8;
#endif

      if (sign) {
 800dd0a:	7ffb      	ldrb	r3, [r7, #31]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00a      	beq.n	800dd26 <snmp_asn1_dec_s32t+0xbe>
        *lsb_ptr |= 255;
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	22ff      	movs	r2, #255	@ 0xff
 800dd14:	701a      	strb	r2, [r3, #0]
        *lsb_ptr &= data;
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	781a      	ldrb	r2, [r3, #0]
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	701a      	strb	r2, [r3, #0]
 800dd24:	e006      	b.n	800dd34 <snmp_asn1_dec_s32t+0xcc>
      } else {
        *lsb_ptr |= data;
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	781a      	ldrb	r2, [r3, #0]
 800dd2a:	7dfb      	ldrb	r3, [r7, #23]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	701a      	strb	r2, [r3, #0]
    while (len > 0) {
 800dd34:	897b      	ldrh	r3, [r7, #10]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1d3      	bne.n	800dce2 <snmp_asn1_dec_s32t+0x7a>
      }
    }

    return ERR_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	e001      	b.n	800dd42 <snmp_asn1_dec_s32t+0xda>
  }

  return ERR_VAL;
 800dd3e:	f06f 0305 	mvn.w	r3, #5
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3720      	adds	r7, #32
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <snmp_asn1_dec_oid>:
 * @param oid_max_len size of oid buffer
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_oid(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t* oid, u8_t* oid_len, u8_t oid_max_len)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b088      	sub	sp, #32
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	60f8      	str	r0, [r7, #12]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]
 800dd56:	460b      	mov	r3, r1
 800dd58:	817b      	strh	r3, [r7, #10]
  u32_t *oid_ptr;
  u8_t data;

  *oid_len = 0;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	701a      	strb	r2, [r3, #0]
  oid_ptr = oid;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	61fb      	str	r3, [r7, #28]
  if (len > 0) {
 800dd64:	897b      	ldrh	r3, [r7, #10]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d05a      	beq.n	800de20 <snmp_asn1_dec_oid+0xd6>
    if (oid_max_len < 2) {
 800dd6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d802      	bhi.n	800dd78 <snmp_asn1_dec_oid+0x2e>
      return ERR_MEM;
 800dd72:	f04f 33ff 	mov.w	r3, #4294967295
 800dd76:	e0b2      	b.n	800dede <snmp_asn1_dec_oid+0x194>
    }

    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800dd78:	f107 0317 	add.w	r3, r7, #23
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f005 f932 	bl	8012fe8 <snmp_pbuf_stream_read>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d002      	beq.n	800dd90 <snmp_asn1_dec_oid+0x46>
 800dd8a:	f06f 0301 	mvn.w	r3, #1
 800dd8e:	e0a6      	b.n	800dede <snmp_asn1_dec_oid+0x194>
    len--;
 800dd90:	897b      	ldrh	r3, [r7, #10]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	817b      	strh	r3, [r7, #10]

    /* first compressed octet */
    if (data == 0x2B) {
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd9a:	d10c      	bne.n	800ddb6 <snmp_asn1_dec_oid+0x6c>
      /* (most) common case 1.3 (iso.org) */
      *oid_ptr = 1;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	3304      	adds	r3, #4
 800dda6:	61fb      	str	r3, [r7, #28]
      *oid_ptr = 3;
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	2203      	movs	r2, #3
 800ddac:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	61fb      	str	r3, [r7, #28]
 800ddb4:	e030      	b.n	800de18 <snmp_asn1_dec_oid+0xce>
    } else if (data < 40) {
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	2b27      	cmp	r3, #39	@ 0x27
 800ddba:	d80d      	bhi.n	800ddd8 <snmp_asn1_dec_oid+0x8e>
      *oid_ptr = 0;
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data;
 800ddc8:	7dfb      	ldrb	r3, [r7, #23]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	61fb      	str	r3, [r7, #28]
 800ddd6:	e01f      	b.n	800de18 <snmp_asn1_dec_oid+0xce>
    } else if (data < 80) {
 800ddd8:	7dfb      	ldrb	r3, [r7, #23]
 800ddda:	2b4f      	cmp	r3, #79	@ 0x4f
 800dddc:	d80e      	bhi.n	800ddfc <snmp_asn1_dec_oid+0xb2>
      *oid_ptr = 1;
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	2201      	movs	r2, #1
 800dde2:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	3304      	adds	r3, #4
 800dde8:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 40;
 800ddea:	7dfb      	ldrb	r3, [r7, #23]
 800ddec:	3b28      	subs	r3, #40	@ 0x28
 800ddee:	461a      	mov	r2, r3
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	61fb      	str	r3, [r7, #28]
 800ddfa:	e00d      	b.n	800de18 <snmp_asn1_dec_oid+0xce>
    } else {
      *oid_ptr = 2;
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	2202      	movs	r2, #2
 800de00:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	3304      	adds	r3, #4
 800de06:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 80;
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	3b50      	subs	r3, #80	@ 0x50
 800de0c:	461a      	mov	r2, r3
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	3304      	adds	r3, #4
 800de16:	61fb      	str	r3, [r7, #28]
    }
    *oid_len = 2;
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	2202      	movs	r2, #2
 800de1c:	701a      	strb	r2, [r3, #0]
  } else {
    /* accepting zero length identifiers e.g. for getnext operation. uncommon but valid */
    return ERR_OK;
  }

  while ((len > 0) && (*oid_len < oid_max_len)) {
 800de1e:	e04e      	b.n	800debe <snmp_asn1_dec_oid+0x174>
    return ERR_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	e05c      	b.n	800dede <snmp_asn1_dec_oid+0x194>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800de24:	f107 0317 	add.w	r3, r7, #23
 800de28:	4619      	mov	r1, r3
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f005 f8dc 	bl	8012fe8 <snmp_pbuf_stream_read>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <snmp_asn1_dec_oid+0xf2>
 800de36:	f06f 0301 	mvn.w	r3, #1
 800de3a:	e050      	b.n	800dede <snmp_asn1_dec_oid+0x194>
    len--;
 800de3c:	897b      	ldrh	r3, [r7, #10]
 800de3e:	3b01      	subs	r3, #1
 800de40:	817b      	strh	r3, [r7, #10]

    if ((data & 0x80) == 0x00) {
 800de42:	7dfb      	ldrb	r3, [r7, #23]
 800de44:	b25b      	sxtb	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	db04      	blt.n	800de54 <snmp_asn1_dec_oid+0x10a>
      /* sub-identifier uses single octet */
      *oid_ptr = data;
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	461a      	mov	r2, r3
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	e02b      	b.n	800deac <snmp_asn1_dec_oid+0x162>
    } else {
      /* sub-identifier uses multiple octets */
      u32_t sub_id = (data & ~0x80);
 800de54:	7dfb      	ldrb	r3, [r7, #23]
 800de56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de5a:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800de5c:	e015      	b.n	800de8a <snmp_asn1_dec_oid+0x140>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800de5e:	f107 0317 	add.w	r3, r7, #23
 800de62:	4619      	mov	r1, r3
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f005 f8bf 	bl	8012fe8 <snmp_pbuf_stream_read>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <snmp_asn1_dec_oid+0x12c>
 800de70:	f06f 0301 	mvn.w	r3, #1
 800de74:	e033      	b.n	800dede <snmp_asn1_dec_oid+0x194>
        len--;
 800de76:	897b      	ldrh	r3, [r7, #10]
 800de78:	3b01      	subs	r3, #1
 800de7a:	817b      	strh	r3, [r7, #10]

        sub_id = (sub_id << 7) + (data & ~0x80);
 800de7c:	69bb      	ldr	r3, [r7, #24]
 800de7e:	01da      	lsls	r2, r3, #7
 800de80:	7dfb      	ldrb	r3, [r7, #23]
 800de82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de86:	4413      	add	r3, r2
 800de88:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800de8a:	897b      	ldrh	r3, [r7, #10]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d003      	beq.n	800de98 <snmp_asn1_dec_oid+0x14e>
 800de90:	7dfb      	ldrb	r3, [r7, #23]
 800de92:	b25b      	sxtb	r3, r3
 800de94:	2b00      	cmp	r3, #0
 800de96:	dbe2      	blt.n	800de5e <snmp_asn1_dec_oid+0x114>
      }

      if ((data & 0x80) != 0) {
 800de98:	7dfb      	ldrb	r3, [r7, #23]
 800de9a:	b25b      	sxtb	r3, r3
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	da02      	bge.n	800dea6 <snmp_asn1_dec_oid+0x15c>
        /* "more bytes following" bit still set at end of len */
        return ERR_VAL;
 800dea0:	f06f 0305 	mvn.w	r3, #5
 800dea4:	e01b      	b.n	800dede <snmp_asn1_dec_oid+0x194>
      }
      *oid_ptr = sub_id;
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	69ba      	ldr	r2, [r7, #24]
 800deaa:	601a      	str	r2, [r3, #0]
    }
    oid_ptr++;
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	3304      	adds	r3, #4
 800deb0:	61fb      	str	r3, [r7, #28]
    (*oid_len)++;
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	701a      	strb	r2, [r3, #0]
  while ((len > 0) && (*oid_len < oid_max_len)) {
 800debe:	897b      	ldrh	r3, [r7, #10]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d005      	beq.n	800ded0 <snmp_asn1_dec_oid+0x186>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800decc:	429a      	cmp	r2, r3
 800dece:	d8a9      	bhi.n	800de24 <snmp_asn1_dec_oid+0xda>
  }

  if (len > 0) {
 800ded0:	897b      	ldrh	r3, [r7, #10]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <snmp_asn1_dec_oid+0x192>
    /* OID to long to fit in our buffer */
    return ERR_MEM;
 800ded6:	f04f 33ff 	mov.w	r3, #4294967295
 800deda:	e000      	b.n	800dede <snmp_asn1_dec_oid+0x194>
  }

  return ERR_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3720      	adds	r7, #32
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <snmp_asn1_dec_raw>:
 * @param buf_max_len buffer size
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_raw(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u8_t *buf, u16_t* buf_len, u16_t buf_max_len)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b084      	sub	sp, #16
 800deea:	af00      	add	r7, sp, #0
 800deec:	60f8      	str	r0, [r7, #12]
 800deee:	607a      	str	r2, [r7, #4]
 800def0:	603b      	str	r3, [r7, #0]
 800def2:	460b      	mov	r3, r1
 800def4:	817b      	strh	r3, [r7, #10]
  if (len > buf_max_len) {
 800def6:	897a      	ldrh	r2, [r7, #10]
 800def8:	8b3b      	ldrh	r3, [r7, #24]
 800defa:	429a      	cmp	r2, r3
 800defc:	d902      	bls.n	800df04 <snmp_asn1_dec_raw+0x1e>
    /* not enough dst space */
    return ERR_MEM;
 800defe:	f04f 33ff 	mov.w	r3, #4294967295
 800df02:	e017      	b.n	800df34 <snmp_asn1_dec_raw+0x4e>
  }
  *buf_len = len;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	897a      	ldrh	r2, [r7, #10]
 800df08:	801a      	strh	r2, [r3, #0]

  while (len > 0) {
 800df0a:	e00f      	b.n	800df2c <snmp_asn1_dec_raw+0x46>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, buf));
 800df0c:	6879      	ldr	r1, [r7, #4]
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f005 f86a 	bl	8012fe8 <snmp_pbuf_stream_read>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <snmp_asn1_dec_raw+0x3a>
 800df1a:	f06f 0301 	mvn.w	r3, #1
 800df1e:	e009      	b.n	800df34 <snmp_asn1_dec_raw+0x4e>
    buf++;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	3301      	adds	r3, #1
 800df24:	607b      	str	r3, [r7, #4]
    len--;
 800df26:	897b      	ldrh	r3, [r7, #10]
 800df28:	3b01      	subs	r3, #1
 800df2a:	817b      	strh	r3, [r7, #10]
  while (len > 0) {
 800df2c:	897b      	ldrh	r3, [r7, #10]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1ec      	bne.n	800df0c <snmp_asn1_dec_raw+0x26>
  }

  return ERR_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <snmp_set_mibs>:
 * };
 * snmp_set_mibs(my_snmp_mibs, LWIP_ARRAYSIZE(my_snmp_mibs));
 */
void
snmp_set_mibs(const struct snmp_mib **mibs, u8_t num_mibs)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	460b      	mov	r3, r1
 800df46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("mibs pointer must be != NULL", (mibs != NULL));
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d105      	bne.n	800df5a <snmp_set_mibs+0x1e>
 800df4e:	4b0c      	ldr	r3, [pc, #48]	@ (800df80 <snmp_set_mibs+0x44>)
 800df50:	22de      	movs	r2, #222	@ 0xde
 800df52:	490c      	ldr	r1, [pc, #48]	@ (800df84 <snmp_set_mibs+0x48>)
 800df54:	480c      	ldr	r0, [pc, #48]	@ (800df88 <snmp_set_mibs+0x4c>)
 800df56:	f013 fbe5 	bl	8021724 <iprintf>
  LWIP_ASSERT("num_mibs pointer must be != 0", (num_mibs != 0));
 800df5a:	78fb      	ldrb	r3, [r7, #3]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d105      	bne.n	800df6c <snmp_set_mibs+0x30>
 800df60:	4b07      	ldr	r3, [pc, #28]	@ (800df80 <snmp_set_mibs+0x44>)
 800df62:	22df      	movs	r2, #223	@ 0xdf
 800df64:	4909      	ldr	r1, [pc, #36]	@ (800df8c <snmp_set_mibs+0x50>)
 800df66:	4808      	ldr	r0, [pc, #32]	@ (800df88 <snmp_set_mibs+0x4c>)
 800df68:	f013 fbdc 	bl	8021724 <iprintf>
  snmp_mibs     = mibs;
 800df6c:	4a08      	ldr	r2, [pc, #32]	@ (800df90 <snmp_set_mibs+0x54>)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6013      	str	r3, [r2, #0]
  snmp_num_mibs = num_mibs;
 800df72:	4a08      	ldr	r2, [pc, #32]	@ (800df94 <snmp_set_mibs+0x58>)
 800df74:	78fb      	ldrb	r3, [r7, #3]
 800df76:	7013      	strb	r3, [r2, #0]
}
 800df78:	bf00      	nop
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	08024c60 	.word	0x08024c60
 800df84:	08024c9c 	.word	0x08024c9c
 800df88:	08024cbc 	.word	0x08024cbc
 800df8c:	08024ce4 	.word	0x08024ce4
 800df90:	200000f0 	.word	0x200000f0
 800df94:	200000ec 	.word	0x200000ec

0800df98 <snmp_get_device_enterprise_oid>:
/**
 * @ingroup snmp_core
 * Get 'device enterprise oid' 
 */
const struct snmp_obj_id* snmp_get_device_enterprise_oid(void)
{
 800df98:	b480      	push	{r7}
 800df9a:	af00      	add	r7, sp, #0
  return snmp_device_enterprise_oid;
 800df9c:	4b02      	ldr	r3, [pc, #8]	@ (800dfa8 <snmp_get_device_enterprise_oid+0x10>)
 800df9e:	681b      	ldr	r3, [r3, #0]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bc80      	pop	{r7}
 800dfa6:	4770      	bx	lr
 800dfa8:	200000e8 	.word	0x200000e8

0800dfac <snmp_oid_to_ip4>:
 * @param oid points to u32_t ident[4] input
 * @param ip points to output struct
 */
u8_t
snmp_oid_to_ip4(const u32_t *oid, ip4_addr_t *ip)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  if ((oid[0] > 0xFF) ||
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2bff      	cmp	r3, #255	@ 0xff
 800dfbc:	d80e      	bhi.n	800dfdc <snmp_oid_to_ip4+0x30>
      (oid[1] > 0xFF) ||
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	681b      	ldr	r3, [r3, #0]
  if ((oid[0] > 0xFF) ||
 800dfc4:	2bff      	cmp	r3, #255	@ 0xff
 800dfc6:	d809      	bhi.n	800dfdc <snmp_oid_to_ip4+0x30>
      (oid[2] > 0xFF) ||
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	681b      	ldr	r3, [r3, #0]
      (oid[1] > 0xFF) ||
 800dfce:	2bff      	cmp	r3, #255	@ 0xff
 800dfd0:	d804      	bhi.n	800dfdc <snmp_oid_to_ip4+0x30>
      (oid[3] > 0xFF)) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	330c      	adds	r3, #12
 800dfd6:	681b      	ldr	r3, [r3, #0]
      (oid[2] > 0xFF) ||
 800dfd8:	2bff      	cmp	r3, #255	@ 0xff
 800dfda:	d905      	bls.n	800dfe8 <snmp_oid_to_ip4+0x3c>
    ip4_addr_copy(*ip, *IP4_ADDR_ANY4);
 800dfdc:	4b36      	ldr	r3, [pc, #216]	@ (800e0b8 <snmp_oid_to_ip4+0x10c>)
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	601a      	str	r2, [r3, #0]
    return 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e061      	b.n	800e0ac <snmp_oid_to_ip4+0x100>
  }

  IP4_ADDR(ip, oid[0], oid[1], oid[2], oid[3]);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	061a      	lsls	r2, r3, #24
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3304      	adds	r3, #4
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	041b      	lsls	r3, r3, #16
 800dff6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3308      	adds	r3, #8
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	021b      	lsls	r3, r3, #8
 800e004:	b29b      	uxth	r3, r3
 800e006:	431a      	orrs	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	330c      	adds	r3, #12
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	4313      	orrs	r3, r2
 800e012:	061a      	lsls	r2, r3, #24
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	0619      	lsls	r1, r3, #24
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3304      	adds	r3, #4
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	041b      	lsls	r3, r3, #16
 800e022:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e026:	4319      	orrs	r1, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3308      	adds	r3, #8
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	021b      	lsls	r3, r3, #8
 800e030:	b29b      	uxth	r3, r3
 800e032:	4319      	orrs	r1, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	330c      	adds	r3, #12
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	430b      	orrs	r3, r1
 800e03e:	021b      	lsls	r3, r3, #8
 800e040:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e044:	431a      	orrs	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	0619      	lsls	r1, r3, #24
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	3304      	adds	r3, #4
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	041b      	lsls	r3, r3, #16
 800e054:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e058:	4319      	orrs	r1, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	3308      	adds	r3, #8
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	b29b      	uxth	r3, r3
 800e064:	4319      	orrs	r1, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	330c      	adds	r3, #12
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	430b      	orrs	r3, r1
 800e070:	0a1b      	lsrs	r3, r3, #8
 800e072:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e076:	431a      	orrs	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	0619      	lsls	r1, r3, #24
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	3304      	adds	r3, #4
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	041b      	lsls	r3, r3, #16
 800e086:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e08a:	4319      	orrs	r1, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	3308      	adds	r3, #8
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	021b      	lsls	r3, r3, #8
 800e094:	b29b      	uxth	r3, r3
 800e096:	4319      	orrs	r1, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	330c      	adds	r3, #12
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	430b      	orrs	r3, r1
 800e0a2:	0e1b      	lsrs	r3, r3, #24
 800e0a4:	431a      	orrs	r2, r3
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	601a      	str	r2, [r3, #0]
  return 1;
 800e0aa:	2301      	movs	r3, #1
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bc80      	pop	{r7}
 800e0b4:	4770      	bx	lr
 800e0b6:	bf00      	nop
 800e0b8:	0803064c 	.word	0x0803064c

0800e0bc <snmp_ip4_to_oid>:
 * @param ip points to input struct
 * @param oid points to u32_t ident[4] output
 */
void
snmp_ip4_to_oid(const ip4_addr_t *ip, u32_t *oid)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  oid[0] = ip4_addr1(ip);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	601a      	str	r2, [r3, #0]
  oid[1] = ip4_addr2(ip);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	781a      	ldrb	r2, [r3, #0]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	3304      	adds	r3, #4
 800e0da:	601a      	str	r2, [r3, #0]
  oid[2] = ip4_addr3(ip);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	3302      	adds	r3, #2
 800e0e0:	781a      	ldrb	r2, [r3, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	3308      	adds	r3, #8
 800e0e6:	601a      	str	r2, [r3, #0]
  oid[3] = ip4_addr4(ip);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3303      	adds	r3, #3
 800e0ec:	781a      	ldrb	r2, [r3, #0]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	330c      	adds	r3, #12
 800e0f2:	601a      	str	r2, [r3, #0]
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bc80      	pop	{r7}
 800e0fc:	4770      	bx	lr

0800e0fe <snmp_ip_port_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_port_to_oid(const ip_addr_t *ip, u16_t port, u32_t *oid)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b086      	sub	sp, #24
 800e102:	af00      	add	r7, sp, #0
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	460b      	mov	r3, r1
 800e108:	607a      	str	r2, [r7, #4]
 800e10a:	817b      	strh	r3, [r7, #10]
  u8_t idx;

  idx = snmp_ip_to_oid(ip, oid);
 800e10c:	6879      	ldr	r1, [r7, #4]
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f000 f810 	bl	800e134 <snmp_ip_to_oid>
 800e114:	4603      	mov	r3, r0
 800e116:	75fb      	strb	r3, [r7, #23]
  oid[idx] = port;
 800e118:	7dfb      	ldrb	r3, [r7, #23]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	4413      	add	r3, r2
 800e120:	897a      	ldrh	r2, [r7, #10]
 800e122:	601a      	str	r2, [r3, #0]
  idx++;
 800e124:	7dfb      	ldrb	r3, [r7, #23]
 800e126:	3301      	adds	r3, #1
 800e128:	75fb      	strb	r3, [r7, #23]

  return idx;
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <snmp_ip_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_to_oid(const ip_addr_t *ip, u32_t *oid)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
#else /* LWIP_IPV6 */
    return 0;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    oid[0] = 1; /* ipv4 */
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	2201      	movs	r2, #1
 800e142:	601a      	str	r2, [r3, #0]
    oid[1] = 4; /* 4 InetAddressIPv4 OIDs follow */
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	3304      	adds	r3, #4
 800e148:	2204      	movs	r2, #4
 800e14a:	601a      	str	r2, [r3, #0]
    snmp_ip4_to_oid(ip_2_ip4(ip), &oid[2]);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	3308      	adds	r3, #8
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7ff ffb2 	bl	800e0bc <snmp_ip4_to_oid>
    return 6;
 800e158:	2306      	movs	r3, #6
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  }
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <snmp_oid_to_ip>:
 * @param ip IP address
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip(const u32_t *oid, u8_t oid_len, ip_addr_t *ip)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	460b      	mov	r3, r1
 800e16c:	607a      	str	r2, [r7, #4]
 800e16e:	72fb      	strb	r3, [r7, #11]
  /* InetAddressType */
  if (oid_len < 1) {
 800e170:	7afb      	ldrb	r3, [r7, #11]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <snmp_oid_to_ip+0x18>
    return 0;
 800e176:	2300      	movs	r3, #0
 800e178:	e03a      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
  }

  if (oid[0] == 0) { /* any */
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d112      	bne.n	800e1a8 <snmp_oid_to_ip+0x46>
    /* 1x InetAddressType, 1x OID len */
    if (oid_len < 2) {
 800e182:	7afb      	ldrb	r3, [r7, #11]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d801      	bhi.n	800e18c <snmp_oid_to_ip+0x2a>
      return 0;
 800e188:	2300      	movs	r3, #0
 800e18a:	e031      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
    }
    if (oid[1] != 0) {
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3304      	adds	r3, #4
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d001      	beq.n	800e19a <snmp_oid_to_ip+0x38>
      return 0;
 800e196:	2300      	movs	r3, #0
 800e198:	e02a      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
    }

    memset(ip, 0, sizeof(*ip));
 800e19a:	2204      	movs	r2, #4
 800e19c:	2100      	movs	r1, #0
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f013 fc96 	bl	8021ad0 <memset>
    IP_SET_TYPE(ip, IPADDR_TYPE_ANY);

    return 2;
 800e1a4:	2302      	movs	r3, #2
 800e1a6:	e023      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
  } else if (oid[0] == 1) { /* ipv4 */
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d118      	bne.n	800e1e2 <snmp_oid_to_ip+0x80>
#if LWIP_IPV4
    /* 1x InetAddressType, 1x OID len, 4x InetAddressIPv4 */
    if (oid_len < 6) {
 800e1b0:	7afb      	ldrb	r3, [r7, #11]
 800e1b2:	2b05      	cmp	r3, #5
 800e1b4:	d801      	bhi.n	800e1ba <snmp_oid_to_ip+0x58>
      return 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e01a      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
    }

    /* 4x ipv4 OID */
    if (oid[1] != 4) {
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	d001      	beq.n	800e1c8 <snmp_oid_to_ip+0x66>
      return 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	e013      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
    }

    IP_SET_TYPE(ip, IPADDR_TYPE_V4);
    if (!snmp_oid_to_ip4(&oid[2], ip_2_ip4(ip))) {
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	3308      	adds	r3, #8
 800e1cc:	6879      	ldr	r1, [r7, #4]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7ff feec 	bl	800dfac <snmp_oid_to_ip4>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d101      	bne.n	800e1de <snmp_oid_to_ip+0x7c>
      return 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e008      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
    }

    return 6;
 800e1de:	2306      	movs	r3, #6
 800e1e0:	e006      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  } else if (oid[0] == 2) { /* ipv6 */
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d101      	bne.n	800e1ee <snmp_oid_to_ip+0x8c>
      return 0;
    }

    return 18;
#else /* LWIP_IPV6 */
    return 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e000      	b.n	800e1f0 <snmp_oid_to_ip+0x8e>
#endif /* LWIP_IPV6 */
  } else { /* unsupported InetAddressType */
    return 0;
 800e1ee:	2300      	movs	r3, #0
  }
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <snmp_oid_to_ip_port>:
 * @param port Port
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip_port(const u32_t *oid, u8_t oid_len, ip_addr_t *ip, u16_t *port)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	607a      	str	r2, [r7, #4]
 800e202:	603b      	str	r3, [r7, #0]
 800e204:	460b      	mov	r3, r1
 800e206:	72fb      	strb	r3, [r7, #11]
  u8_t idx = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	75fb      	strb	r3, [r7, #23]

  /* InetAddressType + InetAddress */
  idx += snmp_oid_to_ip(&oid[idx], oid_len-idx, ip);
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	18d0      	adds	r0, r2, r3
 800e214:	7afa      	ldrb	r2, [r7, #11]
 800e216:	7dfb      	ldrb	r3, [r7, #23]
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	4619      	mov	r1, r3
 800e220:	f7ff ff9f 	bl	800e162 <snmp_oid_to_ip>
 800e224:	4603      	mov	r3, r0
 800e226:	461a      	mov	r2, r3
 800e228:	7dfb      	ldrb	r3, [r7, #23]
 800e22a:	4413      	add	r3, r2
 800e22c:	75fb      	strb	r3, [r7, #23]
  if (idx == 0) {
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d101      	bne.n	800e238 <snmp_oid_to_ip_port+0x40>
    return 0;
 800e234:	2300      	movs	r3, #0
 800e236:	e01b      	b.n	800e270 <snmp_oid_to_ip_port+0x78>
  }

  /* InetPortNumber */
  if (oid_len < (idx+1)) {
 800e238:	7dfa      	ldrb	r2, [r7, #23]
 800e23a:	7afb      	ldrb	r3, [r7, #11]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d301      	bcc.n	800e244 <snmp_oid_to_ip_port+0x4c>
    return 0;
 800e240:	2300      	movs	r3, #0
 800e242:	e015      	b.n	800e270 <snmp_oid_to_ip_port+0x78>
  }
  if (oid[idx] > 0xffff) {
 800e244:	7dfb      	ldrb	r3, [r7, #23]
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	4413      	add	r3, r2
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e252:	d301      	bcc.n	800e258 <snmp_oid_to_ip_port+0x60>
    return 0;
 800e254:	2300      	movs	r3, #0
 800e256:	e00b      	b.n	800e270 <snmp_oid_to_ip_port+0x78>
  }
  *port = (u16_t)oid[idx];
 800e258:	7dfb      	ldrb	r3, [r7, #23]
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	4413      	add	r3, r2
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	b29a      	uxth	r2, r3
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	801a      	strh	r2, [r3, #0]
  idx++;
 800e268:	7dfb      	ldrb	r3, [r7, #23]
 800e26a:	3301      	adds	r3, #1
 800e26c:	75fb      	strb	r3, [r7, #23]

  return idx;
 800e26e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <snmp_oid_assign>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_assign(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	4613      	mov	r3, r2
 800e284:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("oid_len <= LWIP_SNMP_OBJ_ID_LEN", oid_len <= SNMP_MAX_OBJ_ID_LEN);
 800e286:	79fb      	ldrb	r3, [r7, #7]
 800e288:	2b32      	cmp	r3, #50	@ 0x32
 800e28a:	d906      	bls.n	800e29a <snmp_oid_assign+0x22>
 800e28c:	4b0c      	ldr	r3, [pc, #48]	@ (800e2c0 <snmp_oid_assign+0x48>)
 800e28e:	f240 2213 	movw	r2, #531	@ 0x213
 800e292:	490c      	ldr	r1, [pc, #48]	@ (800e2c4 <snmp_oid_assign+0x4c>)
 800e294:	480c      	ldr	r0, [pc, #48]	@ (800e2c8 <snmp_oid_assign+0x50>)
 800e296:	f013 fa45 	bl	8021724 <iprintf>

  target->len = oid_len;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	79fa      	ldrb	r2, [r7, #7]
 800e29e:	701a      	strb	r2, [r3, #0]

  if (oid_len > 0) {
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d007      	beq.n	800e2b6 <snmp_oid_assign+0x3e>
    MEMCPY(target->id, oid, oid_len * sizeof(u32_t));
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	1d18      	adds	r0, r3, #4
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	68b9      	ldr	r1, [r7, #8]
 800e2b2:	f013 fce2 	bl	8021c7a <memcpy>
  }
}
 800e2b6:	bf00      	nop
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	08024c60 	.word	0x08024c60
 800e2c4:	08024d04 	.word	0x08024d04
 800e2c8:	08024cbc 	.word	0x08024cbc

0800e2cc <snmp_oid_append>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_append(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("offset + oid_len <= LWIP_SNMP_OBJ_ID_LEN", (target->len + oid_len) <= SNMP_MAX_OBJ_ID_LEN);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	79fb      	ldrb	r3, [r7, #7]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	2b32      	cmp	r3, #50	@ 0x32
 800e2e6:	dd06      	ble.n	800e2f6 <snmp_oid_append+0x2a>
 800e2e8:	4b10      	ldr	r3, [pc, #64]	@ (800e32c <snmp_oid_append+0x60>)
 800e2ea:	f240 224b 	movw	r2, #587	@ 0x24b
 800e2ee:	4910      	ldr	r1, [pc, #64]	@ (800e330 <snmp_oid_append+0x64>)
 800e2f0:	4810      	ldr	r0, [pc, #64]	@ (800e334 <snmp_oid_append+0x68>)
 800e2f2:	f013 fa17 	bl	8021724 <iprintf>

  if (oid_len > 0) {
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d012      	beq.n	800e322 <snmp_oid_append+0x56>
    MEMCPY(&target->id[target->len], oid, oid_len * sizeof(u32_t));
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	4413      	add	r3, r2
 800e306:	1d18      	adds	r0, r3, #4
 800e308:	79fb      	ldrb	r3, [r7, #7]
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	461a      	mov	r2, r3
 800e30e:	68b9      	ldr	r1, [r7, #8]
 800e310:	f013 fcb3 	bl	8021c7a <memcpy>
    target->len += oid_len;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	781a      	ldrb	r2, [r3, #0]
 800e318:	79fb      	ldrb	r3, [r7, #7]
 800e31a:	4413      	add	r3, r2
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	701a      	strb	r2, [r3, #0]
  }
}
 800e322:	bf00      	nop
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	08024c60 	.word	0x08024c60
 800e330:	08024d54 	.word	0x08024d54
 800e334:	08024cbc 	.word	0x08024cbc

0800e338 <snmp_oid_compare>:
 * @param oid2_len OID 2 length
 * @return -1: OID1&lt;OID2  1: OID1 &gt;OID2 0: equal
 */
s8_t
snmp_oid_compare(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	607a      	str	r2, [r7, #4]
 800e342:	461a      	mov	r2, r3
 800e344:	460b      	mov	r3, r1
 800e346:	72fb      	strb	r3, [r7, #11]
 800e348:	4613      	mov	r3, r2
 800e34a:	72bb      	strb	r3, [r7, #10]
  u8_t level = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	75fb      	strb	r3, [r7, #23]
  LWIP_ASSERT("'oid1' param must not be NULL or 'oid1_len' param be 0!", (oid1 != NULL) || (oid1_len == 0));
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d109      	bne.n	800e36a <snmp_oid_compare+0x32>
 800e356:	7afb      	ldrb	r3, [r7, #11]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d006      	beq.n	800e36a <snmp_oid_compare+0x32>
 800e35c:	4b24      	ldr	r3, [pc, #144]	@ (800e3f0 <snmp_oid_compare+0xb8>)
 800e35e:	f240 225f 	movw	r2, #607	@ 0x25f
 800e362:	4924      	ldr	r1, [pc, #144]	@ (800e3f4 <snmp_oid_compare+0xbc>)
 800e364:	4824      	ldr	r0, [pc, #144]	@ (800e3f8 <snmp_oid_compare+0xc0>)
 800e366:	f013 f9dd 	bl	8021724 <iprintf>
  LWIP_ASSERT("'oid2' param must not be NULL or 'oid2_len' param be 0!", (oid2 != NULL) || (oid2_len == 0));
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d124      	bne.n	800e3ba <snmp_oid_compare+0x82>
 800e370:	7abb      	ldrb	r3, [r7, #10]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d021      	beq.n	800e3ba <snmp_oid_compare+0x82>
 800e376:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f0 <snmp_oid_compare+0xb8>)
 800e378:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800e37c:	491f      	ldr	r1, [pc, #124]	@ (800e3fc <snmp_oid_compare+0xc4>)
 800e37e:	481e      	ldr	r0, [pc, #120]	@ (800e3f8 <snmp_oid_compare+0xc0>)
 800e380:	f013 f9d0 	bl	8021724 <iprintf>

  while ((level < oid1_len) && (level < oid2_len)) {
 800e384:	e019      	b.n	800e3ba <snmp_oid_compare+0x82>
    if (*oid1 < *oid2) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d202      	bcs.n	800e398 <snmp_oid_compare+0x60>
      return -1;
 800e392:	f04f 33ff 	mov.w	r3, #4294967295
 800e396:	e026      	b.n	800e3e6 <snmp_oid_compare+0xae>
    }
    if (*oid1 > *oid2) {
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d901      	bls.n	800e3a8 <snmp_oid_compare+0x70>
      return 1;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e01e      	b.n	800e3e6 <snmp_oid_compare+0xae>
    }

    level++;
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	75fb      	strb	r3, [r7, #23]
    oid1++;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	60fb      	str	r3, [r7, #12]
    oid2++;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	607b      	str	r3, [r7, #4]
  while ((level < oid1_len) && (level < oid2_len)) {
 800e3ba:	7dfa      	ldrb	r2, [r7, #23]
 800e3bc:	7afb      	ldrb	r3, [r7, #11]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d203      	bcs.n	800e3ca <snmp_oid_compare+0x92>
 800e3c2:	7dfa      	ldrb	r2, [r7, #23]
 800e3c4:	7abb      	ldrb	r3, [r7, #10]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d3dd      	bcc.n	800e386 <snmp_oid_compare+0x4e>
  }

  /* common part of both OID's is equal, compare length */
  if (oid1_len < oid2_len) {
 800e3ca:	7afa      	ldrb	r2, [r7, #11]
 800e3cc:	7abb      	ldrb	r3, [r7, #10]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d202      	bcs.n	800e3d8 <snmp_oid_compare+0xa0>
    return -1;
 800e3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d6:	e006      	b.n	800e3e6 <snmp_oid_compare+0xae>
  }
  if (oid1_len > oid2_len) {
 800e3d8:	7afa      	ldrb	r2, [r7, #11]
 800e3da:	7abb      	ldrb	r3, [r7, #10]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d901      	bls.n	800e3e4 <snmp_oid_compare+0xac>
    return 1;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e000      	b.n	800e3e6 <snmp_oid_compare+0xae>
  }

  /* they are equal */
  return 0;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	08024c60 	.word	0x08024c60
 800e3f4:	08024d80 	.word	0x08024d80
 800e3f8:	08024cbc 	.word	0x08024cbc
 800e3fc:	08024db8 	.word	0x08024db8

0800e400 <netif_to_num>:
 * @param netif netif
 * @return index
 */
u8_t
netif_to_num(const struct netif *netif)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  u8_t result = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	73fb      	strb	r3, [r7, #15]
  struct netif *netif_iterator = netif_list;
 800e40c:	4b0f      	ldr	r3, [pc, #60]	@ (800e44c <netif_to_num+0x4c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	60bb      	str	r3, [r7, #8]

  while (netif_iterator != NULL) {
 800e412:	e00b      	b.n	800e42c <netif_to_num+0x2c>
    result++;
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	3301      	adds	r3, #1
 800e418:	73fb      	strb	r3, [r7, #15]

    if (netif_iterator == netif) {
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d101      	bne.n	800e426 <netif_to_num+0x26>
      return result;
 800e422:	7bfb      	ldrb	r3, [r7, #15]
 800e424:	e00d      	b.n	800e442 <netif_to_num+0x42>
    }

    netif_iterator = netif_iterator->next;
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	60bb      	str	r3, [r7, #8]
  while (netif_iterator != NULL) {
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1f0      	bne.n	800e414 <netif_to_num+0x14>
  }

  LWIP_ASSERT("netif not found in netif_list", 0);
 800e432:	4b07      	ldr	r3, [pc, #28]	@ (800e450 <netif_to_num+0x50>)
 800e434:	f240 229f 	movw	r2, #671	@ 0x29f
 800e438:	4906      	ldr	r1, [pc, #24]	@ (800e454 <netif_to_num+0x54>)
 800e43a:	4807      	ldr	r0, [pc, #28]	@ (800e458 <netif_to_num+0x58>)
 800e43c:	f013 f972 	bl	8021724 <iprintf>
  return 0;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	2000bc18 	.word	0x2000bc18
 800e450:	08024c60 	.word	0x08024c60
 800e454:	08024df0 	.word	0x08024df0
 800e458:	08024cbc 	.word	0x08024cbc

0800e45c <snmp_get_mib_from_oid>:

static const struct snmp_mib*
snmp_get_mib_from_oid(const u32_t *oid, u8_t oid_len)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	460b      	mov	r3, r1
 800e466:	70fb      	strb	r3, [r7, #3]
  const u32_t* list_oid;
  const u32_t* searched_oid;
  u8_t i, l;

  u8_t max_match_len = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	737b      	strb	r3, [r7, #13]
  const struct snmp_mib* matched_mib = NULL;
 800e46c:	2300      	movs	r3, #0
 800e46e:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <snmp_get_mib_from_oid+0x28>
 800e476:	4b44      	ldr	r3, [pc, #272]	@ (800e588 <snmp_get_mib_from_oid+0x12c>)
 800e478:	f240 22ad 	movw	r2, #685	@ 0x2ad
 800e47c:	4943      	ldr	r1, [pc, #268]	@ (800e58c <snmp_get_mib_from_oid+0x130>)
 800e47e:	4844      	ldr	r0, [pc, #272]	@ (800e590 <snmp_get_mib_from_oid+0x134>)
 800e480:	f013 f950 	bl	8021724 <iprintf>

  if (oid_len == 0) {
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d101      	bne.n	800e48e <snmp_get_mib_from_oid+0x32>
    return NULL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	e077      	b.n	800e57e <snmp_get_mib_from_oid+0x122>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800e48e:	2300      	movs	r3, #0
 800e490:	73fb      	strb	r3, [r7, #15]
 800e492:	e06e      	b.n	800e572 <snmp_get_mib_from_oid+0x116>
    LWIP_ASSERT("MIB array not initialized correctly", (snmp_mibs[i] != NULL));
 800e494:	4b3f      	ldr	r3, [pc, #252]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4413      	add	r3, r2
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d106      	bne.n	800e4b2 <snmp_get_mib_from_oid+0x56>
 800e4a4:	4b38      	ldr	r3, [pc, #224]	@ (800e588 <snmp_get_mib_from_oid+0x12c>)
 800e4a6:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 800e4aa:	493b      	ldr	r1, [pc, #236]	@ (800e598 <snmp_get_mib_from_oid+0x13c>)
 800e4ac:	4838      	ldr	r0, [pc, #224]	@ (800e590 <snmp_get_mib_from_oid+0x134>)
 800e4ae:	f013 f939 	bl	8021724 <iprintf>
    LWIP_ASSERT("MIB array not initialized correctly - base OID is NULL", (snmp_mibs[i]->base_oid != NULL));
 800e4b2:	4b38      	ldr	r3, [pc, #224]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <snmp_get_mib_from_oid+0x76>
 800e4c4:	4b30      	ldr	r3, [pc, #192]	@ (800e588 <snmp_get_mib_from_oid+0x12c>)
 800e4c6:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800e4ca:	4934      	ldr	r1, [pc, #208]	@ (800e59c <snmp_get_mib_from_oid+0x140>)
 800e4cc:	4830      	ldr	r0, [pc, #192]	@ (800e590 <snmp_get_mib_from_oid+0x134>)
 800e4ce:	f013 f929 	bl	8021724 <iprintf>

    if (oid_len >= snmp_mibs[i]->base_oid_len) {
 800e4d2:	4b30      	ldr	r3, [pc, #192]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	4413      	add	r3, r2
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	791b      	ldrb	r3, [r3, #4]
 800e4e0:	78fa      	ldrb	r2, [r7, #3]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d342      	bcc.n	800e56c <snmp_get_mib_from_oid+0x110>
      l            = snmp_mibs[i]->base_oid_len;
 800e4e6:	4b2b      	ldr	r3, [pc, #172]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	7bfb      	ldrb	r3, [r7, #15]
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	791b      	ldrb	r3, [r3, #4]
 800e4f4:	73bb      	strb	r3, [r7, #14]
      list_oid     = snmp_mibs[i]->base_oid;
 800e4f6:	4b27      	ldr	r3, [pc, #156]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	7bfb      	ldrb	r3, [r7, #15]
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4413      	add	r3, r2
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	617b      	str	r3, [r7, #20]
      searched_oid = oid;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	613b      	str	r3, [r7, #16]

      while (l > 0) {
 800e50a:	e00e      	b.n	800e52a <snmp_get_mib_from_oid+0xce>
        if (*list_oid != *searched_oid) {
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	429a      	cmp	r2, r3
 800e516:	d10c      	bne.n	800e532 <snmp_get_mib_from_oid+0xd6>
          break;
        }

        l--;
 800e518:	7bbb      	ldrb	r3, [r7, #14]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	73bb      	strb	r3, [r7, #14]
        list_oid++;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	3304      	adds	r3, #4
 800e522:	617b      	str	r3, [r7, #20]
        searched_oid++;
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	3304      	adds	r3, #4
 800e528:	613b      	str	r3, [r7, #16]
      while (l > 0) {
 800e52a:	7bbb      	ldrb	r3, [r7, #14]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1ed      	bne.n	800e50c <snmp_get_mib_from_oid+0xb0>
 800e530:	e000      	b.n	800e534 <snmp_get_mib_from_oid+0xd8>
          break;
 800e532:	bf00      	nop
      }

      if ((l == 0) && (snmp_mibs[i]->base_oid_len > max_match_len)) {
 800e534:	7bbb      	ldrb	r3, [r7, #14]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d118      	bne.n	800e56c <snmp_get_mib_from_oid+0x110>
 800e53a:	4b16      	ldr	r3, [pc, #88]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	791b      	ldrb	r3, [r3, #4]
 800e548:	7b7a      	ldrb	r2, [r7, #13]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d20e      	bcs.n	800e56c <snmp_get_mib_from_oid+0x110>
        max_match_len = snmp_mibs[i]->base_oid_len;
 800e54e:	4b11      	ldr	r3, [pc, #68]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4413      	add	r3, r2
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	791b      	ldrb	r3, [r3, #4]
 800e55c:	737b      	strb	r3, [r7, #13]
        matched_mib = snmp_mibs[i];
 800e55e:	4b0d      	ldr	r3, [pc, #52]	@ (800e594 <snmp_get_mib_from_oid+0x138>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	7bfb      	ldrb	r3, [r7, #15]
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4413      	add	r3, r2
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800e56c:	7bfb      	ldrb	r3, [r7, #15]
 800e56e:	3301      	adds	r3, #1
 800e570:	73fb      	strb	r3, [r7, #15]
 800e572:	4b0b      	ldr	r3, [pc, #44]	@ (800e5a0 <snmp_get_mib_from_oid+0x144>)
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	7bfa      	ldrb	r2, [r7, #15]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d38b      	bcc.n	800e494 <snmp_get_mib_from_oid+0x38>
      }
    }
  }

  return matched_mib;
 800e57c:	68bb      	ldr	r3, [r7, #8]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3718      	adds	r7, #24
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	08024c60 	.word	0x08024c60
 800e58c:	08024e10 	.word	0x08024e10
 800e590:	08024cbc 	.word	0x08024cbc
 800e594:	200000f0 	.word	0x200000f0
 800e598:	08024e30 	.word	0x08024e30
 800e59c:	08024e54 	.word	0x08024e54
 800e5a0:	200000ec 	.word	0x200000ec

0800e5a4 <snmp_get_next_mib>:

static const struct snmp_mib*
snmp_get_next_mib(const u32_t *oid, u8_t oid_len)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	70fb      	strb	r3, [r7, #3]
  u8_t i;
  const struct snmp_mib* next_mib = NULL;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d106      	bne.n	800e5c8 <snmp_get_next_mib+0x24>
 800e5ba:	4b2d      	ldr	r3, [pc, #180]	@ (800e670 <snmp_get_next_mib+0xcc>)
 800e5bc:	f240 22d6 	movw	r2, #726	@ 0x2d6
 800e5c0:	492c      	ldr	r1, [pc, #176]	@ (800e674 <snmp_get_next_mib+0xd0>)
 800e5c2:	482d      	ldr	r0, [pc, #180]	@ (800e678 <snmp_get_next_mib+0xd4>)
 800e5c4:	f013 f8ae 	bl	8021724 <iprintf>

  if (oid_len == 0) {
 800e5c8:	78fb      	ldrb	r3, [r7, #3]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d101      	bne.n	800e5d2 <snmp_get_next_mib+0x2e>
    return NULL;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e04a      	b.n	800e668 <snmp_get_next_mib+0xc4>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	73fb      	strb	r3, [r7, #15]
 800e5d6:	e041      	b.n	800e65c <snmp_get_next_mib+0xb8>
    if (snmp_mibs[i]->base_oid != NULL) {
 800e5d8:	4b28      	ldr	r3, [pc, #160]	@ (800e67c <snmp_get_next_mib+0xd8>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d035      	beq.n	800e656 <snmp_get_next_mib+0xb2>
      /* check if mib is located behind starting point */
      if (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len, oid, oid_len) > 0) {
 800e5ea:	4b24      	ldr	r3, [pc, #144]	@ (800e67c <snmp_get_next_mib+0xd8>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	7bfb      	ldrb	r3, [r7, #15]
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	6818      	ldr	r0, [r3, #0]
 800e5f8:	4b20      	ldr	r3, [pc, #128]	@ (800e67c <snmp_get_next_mib+0xd8>)
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	4413      	add	r3, r2
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	7919      	ldrb	r1, [r3, #4]
 800e606:	78fb      	ldrb	r3, [r7, #3]
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	f7ff fe95 	bl	800e338 <snmp_oid_compare>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	dd20      	ble.n	800e656 <snmp_get_next_mib+0xb2>
        if ((next_mib == NULL) ||
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d016      	beq.n	800e648 <snmp_get_next_mib+0xa4>
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800e61a:	4b18      	ldr	r3, [pc, #96]	@ (800e67c <snmp_get_next_mib+0xd8>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	7bfb      	ldrb	r3, [r7, #15]
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6818      	ldr	r0, [r3, #0]
 800e628:	4b14      	ldr	r3, [pc, #80]	@ (800e67c <snmp_get_next_mib+0xd8>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	7919      	ldrb	r1, [r3, #4]
                              next_mib->base_oid, next_mib->base_oid_len) < 0)) {
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	791b      	ldrb	r3, [r3, #4]
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800e63e:	f7ff fe7b 	bl	800e338 <snmp_oid_compare>
 800e642:	4603      	mov	r3, r0
        if ((next_mib == NULL) ||
 800e644:	2b00      	cmp	r3, #0
 800e646:	da06      	bge.n	800e656 <snmp_get_next_mib+0xb2>
          next_mib = snmp_mibs[i];
 800e648:	4b0c      	ldr	r3, [pc, #48]	@ (800e67c <snmp_get_next_mib+0xd8>)
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	4413      	add	r3, r2
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800e656:	7bfb      	ldrb	r3, [r7, #15]
 800e658:	3301      	adds	r3, #1
 800e65a:	73fb      	strb	r3, [r7, #15]
 800e65c:	4b08      	ldr	r3, [pc, #32]	@ (800e680 <snmp_get_next_mib+0xdc>)
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	7bfa      	ldrb	r2, [r7, #15]
 800e662:	429a      	cmp	r2, r3
 800e664:	d3b8      	bcc.n	800e5d8 <snmp_get_next_mib+0x34>
        }
      }
    }
  }

  return next_mib;
 800e666:	68bb      	ldr	r3, [r7, #8]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	08024c60 	.word	0x08024c60
 800e674:	08024e10 	.word	0x08024e10
 800e678:	08024cbc 	.word	0x08024cbc
 800e67c:	200000f0 	.word	0x200000f0
 800e680:	200000ec 	.word	0x200000ec

0800e684 <snmp_get_mib_between>:

static const struct snmp_mib*
snmp_get_mib_between(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	607a      	str	r2, [r7, #4]
 800e68e:	461a      	mov	r2, r3
 800e690:	460b      	mov	r3, r1
 800e692:	72fb      	strb	r3, [r7, #11]
 800e694:	4613      	mov	r3, r2
 800e696:	72bb      	strb	r3, [r7, #10]
  const struct snmp_mib* next_mib = snmp_get_next_mib(oid1, oid1_len);
 800e698:	7afb      	ldrb	r3, [r7, #11]
 800e69a:	4619      	mov	r1, r3
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f7ff ff81 	bl	800e5a4 <snmp_get_next_mib>
 800e6a2:	6178      	str	r0, [r7, #20]

  LWIP_ASSERT("'oid2' param must not be NULL!", (oid2 != NULL));
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d106      	bne.n	800e6b8 <snmp_get_mib_between+0x34>
 800e6aa:	4b13      	ldr	r3, [pc, #76]	@ (800e6f8 <snmp_get_mib_between+0x74>)
 800e6ac:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e6b0:	4912      	ldr	r1, [pc, #72]	@ (800e6fc <snmp_get_mib_between+0x78>)
 800e6b2:	4813      	ldr	r0, [pc, #76]	@ (800e700 <snmp_get_mib_between+0x7c>)
 800e6b4:	f013 f836 	bl	8021724 <iprintf>
  LWIP_ASSERT("'oid2_len' param must be greater than 0!", (oid2_len > 0));
 800e6b8:	7abb      	ldrb	r3, [r7, #10]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d106      	bne.n	800e6cc <snmp_get_mib_between+0x48>
 800e6be:	4b0e      	ldr	r3, [pc, #56]	@ (800e6f8 <snmp_get_mib_between+0x74>)
 800e6c0:	f240 22f2 	movw	r2, #754	@ 0x2f2
 800e6c4:	490f      	ldr	r1, [pc, #60]	@ (800e704 <snmp_get_mib_between+0x80>)
 800e6c6:	480e      	ldr	r0, [pc, #56]	@ (800e700 <snmp_get_mib_between+0x7c>)
 800e6c8:	f013 f82c 	bl	8021724 <iprintf>

  if (next_mib != NULL) {
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00c      	beq.n	800e6ec <snmp_get_mib_between+0x68>
    if (snmp_oid_compare(next_mib->base_oid, next_mib->base_oid_len, oid2, oid2_len) < 0) {
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	6818      	ldr	r0, [r3, #0]
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	7919      	ldrb	r1, [r3, #4]
 800e6da:	7abb      	ldrb	r3, [r7, #10]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	f7ff fe2b 	bl	800e338 <snmp_oid_compare>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	da01      	bge.n	800e6ec <snmp_get_mib_between+0x68>
      return next_mib;
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	e000      	b.n	800e6ee <snmp_get_mib_between+0x6a>
    }
  }

  return NULL;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	08024c60 	.word	0x08024c60
 800e6fc:	08024e8c 	.word	0x08024e8c
 800e700:	08024cbc 	.word	0x08024cbc
 800e704:	08024eac 	.word	0x08024eac

0800e708 <snmp_get_node_instance_from_oid>:

u8_t
snmp_get_node_instance_from_oid(const u32_t *oid, u8_t oid_len, struct snmp_node_instance* node_instance)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b08a      	sub	sp, #40	@ 0x28
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	460b      	mov	r3, r1
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	72fb      	strb	r3, [r7, #11]
  u8_t result = SNMP_ERR_NOSUCHOBJECT;
 800e716:	23f0      	movs	r3, #240	@ 0xf0
 800e718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  const struct snmp_mib *mib;
  const struct snmp_node *mn = NULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	623b      	str	r3, [r7, #32]

  mib = snmp_get_mib_from_oid(oid, oid_len);
 800e720:	7afb      	ldrb	r3, [r7, #11]
 800e722:	4619      	mov	r1, r3
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f7ff fe99 	bl	800e45c <snmp_get_mib_from_oid>
 800e72a:	61f8      	str	r0, [r7, #28]
  if (mib != NULL) {
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d02b      	beq.n	800e78a <snmp_get_node_instance_from_oid+0x82>
    u8_t oid_instance_len;

    mn = snmp_mib_tree_resolve_exact(mib, oid, oid_len, &oid_instance_len);
 800e732:	f107 0317 	add.w	r3, r7, #23
 800e736:	7afa      	ldrb	r2, [r7, #11]
 800e738:	68f9      	ldr	r1, [r7, #12]
 800e73a:	69f8      	ldr	r0, [r7, #28]
 800e73c:	f000 f981 	bl	800ea42 <snmp_mib_tree_resolve_exact>
 800e740:	6238      	str	r0, [r7, #32]
    if ((mn != NULL) && (mn->node_type != SNMP_NODE_TREE)) {
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d020      	beq.n	800e78a <snmp_get_node_instance_from_oid+0x82>
 800e748:	6a3b      	ldr	r3, [r7, #32]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01c      	beq.n	800e78a <snmp_get_node_instance_from_oid+0x82>
      /* get instance */
      const struct snmp_leaf_node* leaf_node = (const struct snmp_leaf_node*)(const void*)mn;
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	61bb      	str	r3, [r7, #24]

      node_instance->node = mn;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a3a      	ldr	r2, [r7, #32]
 800e758:	601a      	str	r2, [r3, #0]
      snmp_oid_assign(&node_instance->instance_oid, oid + (oid_len - oid_instance_len), oid_instance_len);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	1d18      	adds	r0, r3, #4
 800e75e:	7afb      	ldrb	r3, [r7, #11]
 800e760:	7dfa      	ldrb	r2, [r7, #23]
 800e762:	1a9b      	subs	r3, r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	4413      	add	r3, r2
 800e76a:	7dfa      	ldrb	r2, [r7, #23]
 800e76c:	4619      	mov	r1, r3
 800e76e:	f7ff fd83 	bl	800e278 <snmp_oid_assign>

      result = leaf_node->get_instance(
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	7dfa      	ldrb	r2, [r7, #23]
 800e778:	7af9      	ldrb	r1, [r7, #11]
 800e77a:	1a8a      	subs	r2, r1, r2
 800e77c:	b2d1      	uxtb	r1, r2
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	4798      	blx	r3
 800e784:	4603      	mov	r3, r0
 800e786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
#endif
    }
  }

  return result;
 800e78a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3728      	adds	r7, #40	@ 0x28
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <snmp_get_next_node_instance_from_oid>:

u8_t
snmp_get_next_node_instance_from_oid(const u32_t *oid, u8_t oid_len, snmp_validate_node_instance_method validate_node_instance_method, void* validate_node_instance_arg, struct snmp_obj_id* node_oid, struct snmp_node_instance* node_instance)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b08c      	sub	sp, #48	@ 0x30
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	60f8      	str	r0, [r7, #12]
 800e79e:	607a      	str	r2, [r7, #4]
 800e7a0:	603b      	str	r3, [r7, #0]
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	72fb      	strb	r3, [r7, #11]
  const struct snmp_mib      *mib;
  const struct snmp_node *mn = NULL;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  const u32_t* start_oid     = NULL;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	627b      	str	r3, [r7, #36]	@ 0x24
  u8_t         start_oid_len = 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* resolve target MIB from passed OID */
  mib = snmp_get_mib_from_oid(oid, oid_len);
 800e7b4:	7afb      	ldrb	r3, [r7, #11]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7ff fe4f 	bl	800e45c <snmp_get_mib_from_oid>
 800e7be:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (mib == NULL) {
 800e7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d111      	bne.n	800e7ea <snmp_get_next_node_instance_from_oid+0x54>
    /* passed OID does not reference any known MIB, start at the next closest MIB */
    mib = snmp_get_next_mib(oid, oid_len);
 800e7c6:	7afb      	ldrb	r3, [r7, #11]
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f7ff feea 	bl	800e5a4 <snmp_get_next_mib>
 800e7d0:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (mib != NULL) {
 800e7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f000 8123 	beq.w	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
      start_oid     = mib->base_oid;
 800e7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	627b      	str	r3, [r7, #36]	@ 0x24
      start_oid_len = mib->base_oid_len;
 800e7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e2:	791b      	ldrb	r3, [r3, #4]
 800e7e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e7e8:	e11a      	b.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
    }
  } else {
    start_oid     = oid;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	627b      	str	r3, [r7, #36]	@ 0x24
    start_oid_len = oid_len;
 800e7ee:	7afb      	ldrb	r3, [r7, #11]
 800e7f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* resolve target node from MIB, skip to next MIB if no suitable node is found in current MIB */
  while ((mib != NULL) && (mn == NULL)) {
 800e7f4:	e114      	b.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
    u8_t oid_instance_len;

    /* check if OID directly references a node inside current MIB, in this case we have to ask this node for the next instance */
    mn = snmp_mib_tree_resolve_exact(mib, start_oid, start_oid_len, &oid_instance_len);
 800e7f6:	f107 0317 	add.w	r3, r7, #23
 800e7fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800e7fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e802:	f000 f91e 	bl	800ea42 <snmp_mib_tree_resolve_exact>
 800e806:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (mn != NULL) {
 800e808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d017      	beq.n	800e83e <snmp_get_next_node_instance_from_oid+0xa8>
      snmp_oid_assign(node_oid, start_oid, start_oid_len - oid_instance_len); /* set oid to node */
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	b2db      	uxtb	r3, r3
 800e818:	461a      	mov	r2, r3
 800e81a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e81c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e81e:	f7ff fd2b 	bl	800e278 <snmp_oid_assign>
      snmp_oid_assign(&node_instance->instance_oid, start_oid + (start_oid_len - oid_instance_len), oid_instance_len); /* set (relative) instance oid */
 800e822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e824:	1d18      	adds	r0, r3, #4
 800e826:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e82a:	7dfa      	ldrb	r2, [r7, #23]
 800e82c:	1a9b      	subs	r3, r3, r2
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e832:	4413      	add	r3, r2
 800e834:	7dfa      	ldrb	r2, [r7, #23]
 800e836:	4619      	mov	r1, r3
 800e838:	f7ff fd1e 	bl	800e278 <snmp_oid_assign>
 800e83c:	e00a      	b.n	800e854 <snmp_get_next_node_instance_from_oid+0xbe>
    } else {
      /* OID does not reference a node, search for the next closest node inside MIB; set instance_oid.len to zero because we want the first instance of this node */
      mn = snmp_mib_tree_resolve_next(mib, start_oid, start_oid_len, node_oid);
 800e83e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800e842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e844:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e848:	f000 f94d 	bl	800eae6 <snmp_mib_tree_resolve_next>
 800e84c:	62b8      	str	r0, [r7, #40]	@ 0x28
      node_instance->instance_oid.len = 0;
 800e84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e850:	2200      	movs	r2, #0
 800e852:	711a      	strb	r2, [r3, #4]
    }

    /* validate the node; if the node has no further instance or the returned instance is invalid, search for the next in MIB and validate again */
    node_instance->node = mn;
 800e854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e858:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800e85a:	e073      	b.n	800e944 <snmp_get_next_node_instance_from_oid+0x1ae>
       u8_t result;

      /* clear fields which may have values from previous loops */
      node_instance->asn1_type        = 0;
 800e85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e85e:	2200      	movs	r2, #0
 800e860:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      node_instance->access           = SNMP_NODE_INSTANCE_NOT_ACCESSIBLE;
 800e864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e866:	2200      	movs	r2, #0
 800e868:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      node_instance->get_value        = NULL;
 800e86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e86e:	2200      	movs	r2, #0
 800e870:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      node_instance->set_test         = NULL;
 800e874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e876:	2200      	movs	r2, #0
 800e878:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      node_instance->set_value        = NULL;
 800e87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e87e:	2200      	movs	r2, #0
 800e880:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      node_instance->release_instance = NULL;
 800e884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e886:	2200      	movs	r2, #0
 800e888:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
      node_instance->reference.ptr    = NULL;
 800e88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e88e:	2200      	movs	r2, #0
 800e890:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      node_instance->reference_len    = 0;
 800e894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800e89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e89e:	68db      	ldr	r3, [r3, #12]
        node_oid->id,
 800e8a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8a2:	1d10      	adds	r0, r2, #4
      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800e8a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8a6:	7811      	ldrb	r1, [r2, #0]
 800e8a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e8aa:	4798      	blx	r3
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        node_oid->len,
        node_instance);

      if (result == SNMP_ERR_NOERROR) {
 800e8b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d11e      	bne.n	800e8f8 <snmp_get_next_node_instance_from_oid+0x162>
          LWIP_DEBUGF(SNMP_DEBUG, ("SNMP inconsistent access: node is writable but no set_value function is specified\n"));
        }
#endif

        /* validate node because the node may be not accessible for example (but let the caller decide what is valid */
        if ((validate_node_instance_method == NULL) ||
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d006      	beq.n	800e8ce <snmp_get_next_node_instance_from_oid+0x138>
            (validate_node_instance_method(node_instance, validate_node_instance_arg) == SNMP_ERR_NOERROR)) {
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6839      	ldr	r1, [r7, #0]
 800e8c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e8c6:	4798      	blx	r3
 800e8c8:	4603      	mov	r3, r0
        if ((validate_node_instance_method == NULL) ||
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d109      	bne.n	800e8e2 <snmp_get_next_node_instance_from_oid+0x14c>
          /* node_oid "returns" the full result OID (including the instance part) */
          snmp_oid_append(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800e8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8d0:	f103 0108 	add.w	r1, r3, #8
 800e8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8d6:	791b      	ldrb	r3, [r3, #4]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e8dc:	f7ff fcf6 	bl	800e2cc <snmp_oid_append>
          break;
 800e8e0:	e033      	b.n	800e94a <snmp_get_next_node_instance_from_oid+0x1b4>
        }

        if (node_instance->release_instance != NULL) {
 800e8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d02b      	beq.n	800e944 <snmp_get_next_node_instance_from_oid+0x1ae>
          node_instance->release_instance(node_instance);
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e8f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e8f4:	4798      	blx	r3
 800e8f6:	e025      	b.n	800e944 <snmp_get_next_node_instance_from_oid+0x1ae>
        the instance itself is not valid, ask for next instance from same node.
        we don't have to change any variables because node_instance->instance_oid is used as input (starting point)
        as well as output (resulting next OID), so we have to simply call get_next_instance method again
        */
      } else {
        if (node_instance->release_instance != NULL) {
 800e8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d004      	beq.n	800e90c <snmp_get_next_node_instance_from_oid+0x176>
          node_instance->release_instance(node_instance);
 800e902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e908:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e90a:	4798      	blx	r3
        }

        /* the node has no further instance, skip to next node */
        mn = snmp_mib_tree_resolve_next(mib, node_oid->id, node_oid->len, &node_instance->instance_oid); /* misuse node_instance->instance_oid as tmp buffer */
 800e90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e90e:	1d19      	adds	r1, r3, #4
 800e910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e912:	781a      	ldrb	r2, [r3, #0]
 800e914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e916:	3304      	adds	r3, #4
 800e918:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e91a:	f000 f8e4 	bl	800eae6 <snmp_mib_tree_resolve_next>
 800e91e:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (mn != NULL) {
 800e920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00e      	beq.n	800e944 <snmp_get_next_node_instance_from_oid+0x1ae>
          /* prepare for next loop */
          snmp_oid_assign(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800e926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e928:	f103 0108 	add.w	r1, r3, #8
 800e92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e92e:	791b      	ldrb	r3, [r3, #4]
 800e930:	461a      	mov	r2, r3
 800e932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e934:	f7ff fca0 	bl	800e278 <snmp_oid_assign>
          node_instance->instance_oid.len = 0;
 800e938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e93a:	2200      	movs	r2, #0
 800e93c:	711a      	strb	r2, [r3, #4]
          node_instance->node = mn;
 800e93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e942:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800e944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e946:	2b00      	cmp	r3, #0
 800e948:	d188      	bne.n	800e85c <snmp_get_next_node_instance_from_oid+0xc6>
        }
      }
    }

    if (mn != NULL) {
 800e94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d022      	beq.n	800e996 <snmp_get_next_node_instance_from_oid+0x200>
      this is possible because MIB's may be located anywhere in the global tree, that means also in 
      the subtree of another MIB (e.g. if searched OID is .2 and resulting OID is .4, then another
      MIB having .3 as root node may exist)
      */
      const struct snmp_mib *intermediate_mib;
      intermediate_mib = snmp_get_mib_between(start_oid, start_oid_len, node_oid->id, node_oid->len);
 800e950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e952:	1d1a      	adds	r2, r3, #4
 800e954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800e95c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e95e:	f7ff fe91 	bl	800e684 <snmp_get_mib_between>
 800e962:	61b8      	str	r0, [r7, #24]

      if (intermediate_mib != NULL) {
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d05a      	beq.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
        /* search for first node inside intermediate mib in next loop */
        if (node_instance->release_instance != NULL) {
 800e96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e96c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d004      	beq.n	800e97e <snmp_get_next_node_instance_from_oid+0x1e8>
          node_instance->release_instance(node_instance);
 800e974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e97a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e97c:	4798      	blx	r3
        }

        mn            = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	62bb      	str	r3, [r7, #40]	@ 0x28
        mib           = intermediate_mib;
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800e986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800e98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98e:	791b      	ldrb	r3, [r3, #4]
 800e990:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e994:	e044      	b.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
      1. search for inner MIB's (whose root is located inside tree of current MIB)
      2. search for surrouding MIB's (where the current MIB is the inner MIB) and continue there if any
      3. take the next closest MIB (not being related to the current MIB)
      */
      const struct snmp_mib *next_mib;
      next_mib = snmp_get_next_mib(start_oid, start_oid_len); /* returns MIB's related to point 1 and 3 */
 800e996:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e99a:	4619      	mov	r1, r3
 800e99c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e99e:	f7ff fe01 	bl	800e5a4 <snmp_get_next_mib>
 800e9a2:	61f8      	str	r0, [r7, #28]

      /* is the found MIB an inner MIB? (point 1) */
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d01c      	beq.n	800e9e4 <snmp_get_next_node_instance_from_oid+0x24e>
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	791a      	ldrb	r2, [r3, #4]
 800e9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9b0:	791b      	ldrb	r3, [r3, #4]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d916      	bls.n	800e9e4 <snmp_get_next_node_instance_from_oid+0x24e>
          (snmp_oid_compare(next_mib->base_oid, mib->base_oid_len, mib->base_oid, mib->base_oid_len) == 0)) {
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9bc:	7919      	ldrb	r1, [r3, #4]
 800e9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c4:	791b      	ldrb	r3, [r3, #4]
 800e9c6:	f7ff fcb7 	bl	800e338 <snmp_oid_compare>
 800e9ca:	4603      	mov	r3, r0
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d109      	bne.n	800e9e4 <snmp_get_next_node_instance_from_oid+0x24e>
        /* yes it is -> continue at inner MIB */
        mib = next_mib;
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800e9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800e9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9dc:	791b      	ldrb	r3, [r3, #4]
 800e9de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e9e2:	e01d      	b.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
      } else {
        /* check if there is a surrounding mib where to continue (point 2) (only possible if OID length > 1) */
        if (mib->base_oid_len > 1) {
 800e9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e6:	791b      	ldrb	r3, [r3, #4]
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d919      	bls.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
          mib = snmp_get_mib_from_oid(mib->base_oid, mib->base_oid_len - 1);
 800e9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f2:	791b      	ldrb	r3, [r3, #4]
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	f7ff fd2e 	bl	800e45c <snmp_get_mib_from_oid>
 800ea00:	62f8      	str	r0, [r7, #44]	@ 0x2c

          if (mib == NULL) {
 800ea02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10b      	bne.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
            /* no surrounding mib, use next mib encountered above (point 3) */
            mib = next_mib;
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (mib != NULL) {
 800ea0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d006      	beq.n	800ea20 <snmp_get_next_node_instance_from_oid+0x28a>
              start_oid     = mib->base_oid;
 800ea12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	627b      	str	r3, [r7, #36]	@ 0x24
              start_oid_len = mib->base_oid_len;
 800ea18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1a:	791b      	ldrb	r3, [r3, #4]
 800ea1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while ((mib != NULL) && (mn == NULL)) {
 800ea20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <snmp_get_next_node_instance_from_oid+0x298>
 800ea26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f43f aee4 	beq.w	800e7f6 <snmp_get_next_node_instance_from_oid+0x60>
        }
      }
    }
  }

  if (mib == NULL) {
 800ea2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d101      	bne.n	800ea38 <snmp_get_next_node_instance_from_oid+0x2a2>
    /* loop is only left when mib == null (error) or mib_node != NULL (success) */
    return SNMP_ERR_ENDOFMIBVIEW;
 800ea34:	23f2      	movs	r3, #242	@ 0xf2
 800ea36:	e000      	b.n	800ea3a <snmp_get_next_node_instance_from_oid+0x2a4>
  }

  return SNMP_ERR_NOERROR;
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3730      	adds	r7, #48	@ 0x30
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <snmp_mib_tree_resolve_exact>:
 * Searches tree for the supplied object identifier.
 *
 */
const struct snmp_node *
snmp_mib_tree_resolve_exact(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, u8_t* oid_instance_len)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b089      	sub	sp, #36	@ 0x24
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	60f8      	str	r0, [r7, #12]
 800ea4a:	60b9      	str	r1, [r7, #8]
 800ea4c:	603b      	str	r3, [r7, #0]
 800ea4e:	4613      	mov	r3, r2
 800ea50:	71fb      	strb	r3, [r7, #7]
  const struct snmp_node* const* node = &mib->root_node;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	3308      	adds	r3, #8
 800ea56:	61fb      	str	r3, [r7, #28]
  u8_t oid_offset = mib->base_oid_len;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	791b      	ldrb	r3, [r3, #4]
 800ea5c:	76fb      	strb	r3, [r7, #27]

  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800ea5e:	e025      	b.n	800eaac <snmp_mib_tree_resolve_exact+0x6a>
    /* search for matching sub node */
    u32_t subnode_oid = *(oid + oid_offset);
 800ea60:	7efb      	ldrb	r3, [r7, #27]
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	4413      	add	r3, r2
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	613b      	str	r3, [r7, #16]

    u32_t i = (*(const struct snmp_tree_node* const*)node)->subnode_count;
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	891b      	ldrh	r3, [r3, #8]
 800ea72:	617b      	str	r3, [r7, #20]
    node    = (*(const struct snmp_tree_node* const*)node)->subnodes;
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	61fb      	str	r3, [r7, #28]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800ea7c:	e005      	b.n	800ea8a <snmp_mib_tree_resolve_exact+0x48>
      node++;
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	3304      	adds	r3, #4
 800ea82:	61fb      	str	r3, [r7, #28]
      i--;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	3b01      	subs	r3, #1
 800ea88:	617b      	str	r3, [r7, #20]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d005      	beq.n	800ea9c <snmp_mib_tree_resolve_exact+0x5a>
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d1f0      	bne.n	800ea7e <snmp_mib_tree_resolve_exact+0x3c>
    }

    if (i == 0) {
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d101      	bne.n	800eaa6 <snmp_mib_tree_resolve_exact+0x64>
      /* no matching subnode found */
      return NULL;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e01a      	b.n	800eadc <snmp_mib_tree_resolve_exact+0x9a>
    }

    oid_offset++;
 800eaa6:	7efb      	ldrb	r3, [r7, #27]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	76fb      	strb	r3, [r7, #27]
  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800eaac:	7efa      	ldrb	r2, [r7, #27]
 800eaae:	79fb      	ldrb	r3, [r7, #7]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d204      	bcs.n	800eabe <snmp_mib_tree_resolve_exact+0x7c>
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d0d0      	beq.n	800ea60 <snmp_mib_tree_resolve_exact+0x1e>
  }

  if ((*node)->node_type != SNMP_NODE_TREE) {
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d008      	beq.n	800eada <snmp_mib_tree_resolve_exact+0x98>
    /* we found a leaf node */
    *oid_instance_len = oid_len - oid_offset;
 800eac8:	79fa      	ldrb	r2, [r7, #7]
 800eaca:	7efb      	ldrb	r3, [r7, #27]
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	b2da      	uxtb	r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	701a      	strb	r2, [r3, #0]
    return (*node);
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	e000      	b.n	800eadc <snmp_mib_tree_resolve_exact+0x9a>
  }

  return NULL;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3724      	adds	r7, #36	@ 0x24
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bc80      	pop	{r7}
 800eae4:	4770      	bx	lr

0800eae6 <snmp_mib_tree_resolve_next>:

const struct snmp_node*
snmp_mib_tree_resolve_next(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, struct snmp_obj_id* oidret)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b0be      	sub	sp, #248	@ 0xf8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	60f8      	str	r0, [r7, #12]
 800eaee:	60b9      	str	r1, [r7, #8]
 800eaf0:	603b      	str	r3, [r7, #0]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	71fb      	strb	r3, [r7, #7]
  u8_t  oid_offset = mib->base_oid_len;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	791b      	ldrb	r3, [r3, #4]
 800eafa:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  const struct snmp_node* const* node;
  const struct snmp_tree_node* node_stack[SNMP_MAX_OBJ_ID_LEN];
  s32_t nsi = 0; /* NodeStackIndex */
 800eafe:	2300      	movs	r3, #0
 800eb00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  u32_t subnode_oid;

  if (mib->root_node->node_type != SNMP_NODE_TREE) {
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <snmp_mib_tree_resolve_next+0x2c>
    /* a next operation on a mib with only a leaf node will always return NULL because there is no other node */
    return NULL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e131      	b.n	800ed76 <snmp_mib_tree_resolve_next+0x290>
  }

  /* first build node stack related to passed oid (as far as possible), then go backwards to determine the next node */
  node_stack[nsi] = (const struct snmp_tree_node*)(const void*)mib->root_node;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	689a      	ldr	r2, [r3, #8]
 800eb16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	33f8      	adds	r3, #248	@ 0xf8
 800eb1e:	443b      	add	r3, r7
 800eb20:	f843 2ce4 	str.w	r2, [r3, #-228]
  while (oid_offset < oid_len) {
 800eb24:	e050      	b.n	800ebc8 <snmp_mib_tree_resolve_next+0xe2>
    /* search for matching sub node */
    u32_t i = node_stack[nsi]->subnode_count;
 800eb26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	33f8      	adds	r3, #248	@ 0xf8
 800eb2e:	443b      	add	r3, r7
 800eb30:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800eb34:	891b      	ldrh	r3, [r3, #8]
 800eb36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    node    = node_stack[nsi]->subnodes;
 800eb3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	33f8      	adds	r3, #248	@ 0xf8
 800eb42:	443b      	add	r3, r7
 800eb44:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    subnode_oid = *(oid + oid_offset);
 800eb4e:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	4413      	add	r3, r2
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800eb5e:	e009      	b.n	800eb74 <snmp_mib_tree_resolve_next+0x8e>
      node++;
 800eb60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800eb64:	3304      	adds	r3, #4
 800eb66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800eb6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800eb74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d007      	beq.n	800eb8c <snmp_mib_tree_resolve_next+0xa6>
 800eb7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d1e9      	bne.n	800eb60 <snmp_mib_tree_resolve_next+0x7a>
    }

    if ((i == 0) || ((*node)->node_type != SNMP_NODE_TREE)) {
 800eb8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d01e      	beq.n	800ebd2 <snmp_mib_tree_resolve_next+0xec>
 800eb94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d118      	bne.n	800ebd2 <snmp_mib_tree_resolve_next+0xec>
      /* no (matching) tree-subnode found */
      break;
    }
    nsi++;
 800eba0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eba4:	3301      	adds	r3, #1
 800eba6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    node_stack[nsi] = (const struct snmp_tree_node*)(const void*)(*node);
 800ebaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	33f8      	adds	r3, #248	@ 0xf8
 800ebb8:	443b      	add	r3, r7
 800ebba:	f843 2ce4 	str.w	r2, [r3, #-228]

    oid_offset++;
 800ebbe:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  while (oid_offset < oid_len) {
 800ebc8:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800ebcc:	79fb      	ldrb	r3, [r7, #7]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d3a9      	bcc.n	800eb26 <snmp_mib_tree_resolve_next+0x40>
  }


  if (oid_offset >= oid_len) {
 800ebd2:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800ebd6:	79fb      	ldrb	r3, [r7, #7]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d303      	bcc.n	800ebe4 <snmp_mib_tree_resolve_next+0xfe>
    /* passed oid references a tree node -> return first useable sub node of it */
    subnode_oid = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ebe2:	e0c2      	b.n	800ed6a <snmp_mib_tree_resolve_next+0x284>
  } else {
    subnode_oid = *(oid + oid_offset) + 1;
 800ebe4:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	4413      	add	r3, r2
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  }

  while (nsi >= 0) {
 800ebf6:	e0b8      	b.n	800ed6a <snmp_mib_tree_resolve_next+0x284>
    const struct snmp_node* subnode = NULL;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    /* find next node on current level */
    s32_t i        = node_stack[nsi]->subnode_count;
 800ebfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	33f8      	adds	r3, #248	@ 0xf8
 800ec06:	443b      	add	r3, r7
 800ec08:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800ec0c:	891b      	ldrh	r3, [r3, #8]
 800ec0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    node           = node_stack[nsi]->subnodes;
 800ec12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	33f8      	adds	r3, #248	@ 0xf8
 800ec1a:	443b      	add	r3, r7
 800ec1c:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    while (i > 0) {
 800ec26:	e031      	b.n	800ec8c <snmp_mib_tree_resolve_next+0x1a6>
      if ((*node)->oid == subnode_oid) {
 800ec28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d105      	bne.n	800ec44 <snmp_mib_tree_resolve_next+0x15e>
        subnode = *node;
 800ec38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        break;
 800ec42:	e027      	b.n	800ec94 <snmp_mib_tree_resolve_next+0x1ae>
      } else if (((*node)->oid > subnode_oid) && ((subnode == NULL) || ((*node)->oid < subnode->oid))) {
 800ec44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d211      	bcs.n	800ec78 <snmp_mib_tree_resolve_next+0x192>
 800ec54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d008      	beq.n	800ec6e <snmp_mib_tree_resolve_next+0x188>
 800ec5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	685a      	ldr	r2, [r3, #4]
 800ec64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d204      	bcs.n	800ec78 <snmp_mib_tree_resolve_next+0x192>
        subnode = *node;
 800ec6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      }

      node++;
 800ec78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800ec82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec86:	3b01      	subs	r3, #1
 800ec88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    while (i > 0) {
 800ec8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	dcc9      	bgt.n	800ec28 <snmp_mib_tree_resolve_next+0x142>
    }

    if (subnode == NULL) {
 800ec94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d110      	bne.n	800ecbe <snmp_mib_tree_resolve_next+0x1d8>
      /* no further node found on this level, go one level up and start searching with index of current node*/
      subnode_oid = node_stack[nsi]->node.oid + 1;
 800ec9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	33f8      	adds	r3, #248	@ 0xf8
 800eca4:	443b      	add	r3, r7
 800eca6:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	3301      	adds	r3, #1
 800ecae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      nsi--;
 800ecb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ecbc:	e055      	b.n	800ed6a <snmp_mib_tree_resolve_next+0x284>
    } else {
      if (subnode->node_type == SNMP_NODE_TREE) {
 800ecbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d111      	bne.n	800ecec <snmp_mib_tree_resolve_next+0x206>
        /* next is a tree node, go into it and start searching */
        nsi++;
 800ecc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eccc:	3301      	adds	r3, #1
 800ecce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        node_stack[nsi] = (const struct snmp_tree_node*)(const void*)subnode;
 800ecd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	33f8      	adds	r3, #248	@ 0xf8
 800ecda:	443b      	add	r3, r7
 800ecdc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ece0:	f843 2ce4 	str.w	r2, [r3, #-228]
        subnode_oid = 0;
 800ece4:	2300      	movs	r3, #0
 800ece6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ecea:	e03e      	b.n	800ed6a <snmp_mib_tree_resolve_next+0x284>
      } else {
        /* we found a leaf node -> fill oidret and return it */
        snmp_oid_assign(oidret, mib->base_oid, mib->base_oid_len);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6819      	ldr	r1, [r3, #0]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	791b      	ldrb	r3, [r3, #4]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	6838      	ldr	r0, [r7, #0]
 800ecf8:	f7ff fabe 	bl	800e278 <snmp_oid_assign>
        i = 1;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800ed02:	e019      	b.n	800ed38 <snmp_mib_tree_resolve_next+0x252>
          oidret->id[oidret->len] = node_stack[i]->node.oid;
 800ed04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	33f8      	adds	r3, #248	@ 0xf8
 800ed0c:	443b      	add	r3, r7
 800ed0e:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	7812      	ldrb	r2, [r2, #0]
 800ed16:	4610      	mov	r0, r2
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	6839      	ldr	r1, [r7, #0]
 800ed1c:	0083      	lsls	r3, r0, #2
 800ed1e:	440b      	add	r3, r1
 800ed20:	605a      	str	r2, [r3, #4]
          oidret->len++;
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	3301      	adds	r3, #1
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	701a      	strb	r2, [r3, #0]
          i++;
 800ed2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed32:	3301      	adds	r3, #1
 800ed34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800ed38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ed3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed40:	429a      	cmp	r2, r3
 800ed42:	dddf      	ble.n	800ed04 <snmp_mib_tree_resolve_next+0x21e>
        }

        oidret->id[oidret->len] = subnode->oid;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed4e:	685a      	ldr	r2, [r3, #4]
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	0083      	lsls	r3, r0, #2
 800ed54:	440b      	add	r3, r1
 800ed56:	605a      	str	r2, [r3, #4]
        oidret->len++;
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	701a      	strb	r2, [r3, #0]

        return subnode;
 800ed64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed68:	e005      	b.n	800ed76 <snmp_mib_tree_resolve_next+0x290>
  while (nsi >= 0) {
 800ed6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f6bf af42 	bge.w	800ebf8 <snmp_mib_tree_resolve_next+0x112>
      }
    }
  }

  return NULL;
 800ed74:	2300      	movs	r3, #0
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	37f8      	adds	r7, #248	@ 0xf8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <snmp_next_oid_init>:
/** initialize struct next_oid_state using this function before passing it to next_oid_check */
void
snmp_next_oid_init(struct snmp_next_oid_state *state,
  const u32_t *start_oid, u8_t start_oid_len,
  u32_t *next_oid_buf, u8_t next_oid_max_len)
{
 800ed7e:	b480      	push	{r7}
 800ed80:	b085      	sub	sp, #20
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	60f8      	str	r0, [r7, #12]
 800ed86:	60b9      	str	r1, [r7, #8]
 800ed88:	603b      	str	r3, [r7, #0]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	71fb      	strb	r3, [r7, #7]
  state->start_oid        = start_oid;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	601a      	str	r2, [r3, #0]
  state->start_oid_len    = start_oid_len;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	79fa      	ldrb	r2, [r7, #7]
 800ed98:	711a      	strb	r2, [r3, #4]
  state->next_oid         = next_oid_buf;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	609a      	str	r2, [r3, #8]
  state->next_oid_len     = 0;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2200      	movs	r2, #0
 800eda4:	731a      	strb	r2, [r3, #12]
  state->next_oid_max_len = next_oid_max_len;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	7e3a      	ldrb	r2, [r7, #24]
 800edaa:	735a      	strb	r2, [r3, #13]
  state->status           = SNMP_NEXT_OID_STATUS_NO_MATCH;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2201      	movs	r2, #1
 800edb0:	739a      	strb	r2, [r3, #14]
}
 800edb2:	bf00      	nop
 800edb4:	3714      	adds	r7, #20
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bc80      	pop	{r7}
 800edba:	4770      	bx	lr

0800edbc <snmp_next_oid_check>:
}

/** checks the passed OID if it is a candidate to be the next one (get_next); returns !=0 if passed oid is currently closest, otherwise 0 */
u8_t
snmp_next_oid_check(struct snmp_next_oid_state *state, const u32_t *oid, const u8_t oid_len, void* reference)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	4613      	mov	r3, r2
 800edca:	71fb      	strb	r3, [r7, #7]
  /* do not overwrite a fail result */
  if (state->status != SNMP_NEXT_OID_STATUS_BUF_TO_SMALL) {
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	7b9b      	ldrb	r3, [r3, #14]
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d034      	beq.n	800ee3e <snmp_next_oid_check+0x82>
    /* check passed OID is located behind start offset */
    if (snmp_oid_compare(oid, oid_len, state->start_oid, state->start_oid_len) > 0) {
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	791b      	ldrb	r3, [r3, #4]
 800eddc:	79f9      	ldrb	r1, [r7, #7]
 800edde:	68b8      	ldr	r0, [r7, #8]
 800ede0:	f7ff faaa 	bl	800e338 <snmp_oid_compare>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	dd29      	ble.n	800ee3e <snmp_next_oid_check+0x82>
      /* check if new oid is located closer to start oid than current closest oid */
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	7b9b      	ldrb	r3, [r3, #14]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d00a      	beq.n	800ee08 <snmp_next_oid_check+0x4c>
        (snmp_oid_compare(oid, oid_len, state->next_oid, state->next_oid_len) < 0)) {
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	689a      	ldr	r2, [r3, #8]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	7b1b      	ldrb	r3, [r3, #12]
 800edfa:	79f9      	ldrb	r1, [r7, #7]
 800edfc:	68b8      	ldr	r0, [r7, #8]
 800edfe:	f7ff fa9b 	bl	800e338 <snmp_oid_compare>
 800ee02:	4603      	mov	r3, r0
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	da1a      	bge.n	800ee3e <snmp_next_oid_check+0x82>
        if (oid_len <= state->next_oid_max_len) {
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	7b5b      	ldrb	r3, [r3, #13]
 800ee0c:	79fa      	ldrb	r2, [r7, #7]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d812      	bhi.n	800ee38 <snmp_next_oid_check+0x7c>
          MEMCPY(state->next_oid, oid, oid_len * sizeof(u32_t));
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6898      	ldr	r0, [r3, #8]
 800ee16:	79fb      	ldrb	r3, [r7, #7]
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	68b9      	ldr	r1, [r7, #8]
 800ee1e:	f012 ff2c 	bl	8021c7a <memcpy>
          state->next_oid_len = oid_len;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	79fa      	ldrb	r2, [r7, #7]
 800ee26:	731a      	strb	r2, [r3, #12]
          state->status       = SNMP_NEXT_OID_STATUS_SUCCESS;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	739a      	strb	r2, [r3, #14]
          state->reference    = reference;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	683a      	ldr	r2, [r7, #0]
 800ee32:	611a      	str	r2, [r3, #16]
          return 1;
 800ee34:	2301      	movs	r3, #1
 800ee36:	e003      	b.n	800ee40 <snmp_next_oid_check+0x84>
        } else {
          state->status = SNMP_NEXT_OID_STATUS_BUF_TO_SMALL;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	739a      	strb	r2, [r3, #14]
        }
      }
    }
  }

  return 0;
 800ee3e:	2300      	movs	r3, #0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <snmp_oid_in_range>:

u8_t
snmp_oid_in_range(const u32_t *oid_in, u8_t oid_len, const struct snmp_oid_range *oid_ranges, u8_t oid_ranges_len)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	607a      	str	r2, [r7, #4]
 800ee52:	461a      	mov	r2, r3
 800ee54:	460b      	mov	r3, r1
 800ee56:	72fb      	strb	r3, [r7, #11]
 800ee58:	4613      	mov	r3, r2
 800ee5a:	72bb      	strb	r3, [r7, #10]
  u8_t i;

  if (oid_len != oid_ranges_len) {
 800ee5c:	7afa      	ldrb	r2, [r7, #11]
 800ee5e:	7abb      	ldrb	r3, [r7, #10]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d001      	beq.n	800ee68 <snmp_oid_in_range+0x20>
    return 0;
 800ee64:	2300      	movs	r3, #0
 800ee66:	e024      	b.n	800eeb2 <snmp_oid_in_range+0x6a>
  }

  for (i = 0; i < oid_ranges_len; i++) {
 800ee68:	2300      	movs	r3, #0
 800ee6a:	75fb      	strb	r3, [r7, #23]
 800ee6c:	e01c      	b.n	800eea8 <snmp_oid_in_range+0x60>
    if ((oid_in[i] < oid_ranges[i].min) || (oid_in[i] > oid_ranges[i].max)) {
 800ee6e:	7dfb      	ldrb	r3, [r7, #23]
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	4413      	add	r3, r2
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	7dfb      	ldrb	r3, [r7, #23]
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	6879      	ldr	r1, [r7, #4]
 800ee7e:	440b      	add	r3, r1
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d30b      	bcc.n	800ee9e <snmp_oid_in_range+0x56>
 800ee86:	7dfb      	ldrb	r3, [r7, #23]
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	68fa      	ldr	r2, [r7, #12]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	00db      	lsls	r3, r3, #3
 800ee94:	6879      	ldr	r1, [r7, #4]
 800ee96:	440b      	add	r3, r1
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d901      	bls.n	800eea2 <snmp_oid_in_range+0x5a>
      return 0;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e007      	b.n	800eeb2 <snmp_oid_in_range+0x6a>
  for (i = 0; i < oid_ranges_len; i++) {
 800eea2:	7dfb      	ldrb	r3, [r7, #23]
 800eea4:	3301      	adds	r3, #1
 800eea6:	75fb      	strb	r3, [r7, #23]
 800eea8:	7dfa      	ldrb	r2, [r7, #23]
 800eeaa:	7abb      	ldrb	r3, [r7, #10]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d3de      	bcc.n	800ee6e <snmp_oid_in_range+0x26>
    }
  }

  return 1;
 800eeb0:	2301      	movs	r3, #1
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	371c      	adds	r7, #28
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bc80      	pop	{r7}
 800eeba:	4770      	bx	lr

0800eebc <icmp_get_value>:

/* --- icmp .1.3.6.1.2.1.5 ----------------------------------------------------- */

static s16_t
icmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	60fb      	str	r3, [r7, #12]

  switch (node->oid) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3b01      	subs	r3, #1
 800eed0:	2b19      	cmp	r3, #25
 800eed2:	f200 80df 	bhi.w	800f094 <icmp_get_value+0x1d8>
 800eed6:	a201      	add	r2, pc, #4	@ (adr r2, 800eedc <icmp_get_value+0x20>)
 800eed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eedc:	0800ef45 	.word	0x0800ef45
 800eee0:	0800ef53 	.word	0x0800ef53
 800eee4:	0800ef61 	.word	0x0800ef61
 800eee8:	0800ef6f 	.word	0x0800ef6f
 800eeec:	0800ef7d 	.word	0x0800ef7d
 800eef0:	0800ef8b 	.word	0x0800ef8b
 800eef4:	0800ef99 	.word	0x0800ef99
 800eef8:	0800efa7 	.word	0x0800efa7
 800eefc:	0800efb5 	.word	0x0800efb5
 800ef00:	0800efc3 	.word	0x0800efc3
 800ef04:	0800efd1 	.word	0x0800efd1
 800ef08:	0800efdf 	.word	0x0800efdf
 800ef0c:	0800efed 	.word	0x0800efed
 800ef10:	0800effb 	.word	0x0800effb
 800ef14:	0800f009 	.word	0x0800f009
 800ef18:	0800f017 	.word	0x0800f017
 800ef1c:	0800f025 	.word	0x0800f025
 800ef20:	0800f033 	.word	0x0800f033
 800ef24:	0800f03d 	.word	0x0800f03d
 800ef28:	0800f047 	.word	0x0800f047
 800ef2c:	0800f051 	.word	0x0800f051
 800ef30:	0800f05f 	.word	0x0800f05f
 800ef34:	0800f06d 	.word	0x0800f06d
 800ef38:	0800f077 	.word	0x0800f077
 800ef3c:	0800f081 	.word	0x0800f081
 800ef40:	0800f08b 	.word	0x0800f08b
  case 1: /* icmpInMsgs */
    *uint_ptr = STATS_GET(mib2.icmpinmsgs);
 800ef44:	4b57      	ldr	r3, [pc, #348]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800ef46:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ef4e:	2304      	movs	r3, #4
 800ef50:	e0a2      	b.n	800f098 <icmp_get_value+0x1dc>
  case 2: /* icmpInErrors */
    *uint_ptr = STATS_GET(mib2.icmpinerrors);
 800ef52:	4b54      	ldr	r3, [pc, #336]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800ef54:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ef5c:	2304      	movs	r3, #4
 800ef5e:	e09b      	b.n	800f098 <icmp_get_value+0x1dc>
  case 3: /* icmpInDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpindestunreachs);
 800ef60:	4b50      	ldr	r3, [pc, #320]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800ef62:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ef6a:	2304      	movs	r3, #4
 800ef6c:	e094      	b.n	800f098 <icmp_get_value+0x1dc>
  case 4: /* icmpInTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpintimeexcds);
 800ef6e:	4b4d      	ldr	r3, [pc, #308]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800ef70:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ef78:	2304      	movs	r3, #4
 800ef7a:	e08d      	b.n	800f098 <icmp_get_value+0x1dc>
  case 5: /* icmpInParmProbs */
    *uint_ptr = STATS_GET(mib2.icmpinparmprobs);
 800ef7c:	4b49      	ldr	r3, [pc, #292]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800ef7e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ef86:	2304      	movs	r3, #4
 800ef88:	e086      	b.n	800f098 <icmp_get_value+0x1dc>
  case 6: /* icmpInSrcQuenchs */
    *uint_ptr = STATS_GET(mib2.icmpinsrcquenchs);
 800ef8a:	4b46      	ldr	r3, [pc, #280]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800ef8c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ef94:	2304      	movs	r3, #4
 800ef96:	e07f      	b.n	800f098 <icmp_get_value+0x1dc>
  case 7: /* icmpInRedirects */
    *uint_ptr = STATS_GET(mib2.icmpinredirects);
 800ef98:	4b42      	ldr	r3, [pc, #264]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800ef9a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efa2:	2304      	movs	r3, #4
 800efa4:	e078      	b.n	800f098 <icmp_get_value+0x1dc>
  case 8: /* icmpInEchos */
    *uint_ptr = STATS_GET(mib2.icmpinechos);
 800efa6:	4b3f      	ldr	r3, [pc, #252]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800efa8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efb0:	2304      	movs	r3, #4
 800efb2:	e071      	b.n	800f098 <icmp_get_value+0x1dc>
  case 9: /* icmpInEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpinechoreps);
 800efb4:	4b3b      	ldr	r3, [pc, #236]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800efb6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efbe:	2304      	movs	r3, #4
 800efc0:	e06a      	b.n	800f098 <icmp_get_value+0x1dc>
  case 10: /* icmpInTimestamps */
    *uint_ptr = STATS_GET(mib2.icmpintimestamps);
 800efc2:	4b38      	ldr	r3, [pc, #224]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800efc4:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efcc:	2304      	movs	r3, #4
 800efce:	e063      	b.n	800f098 <icmp_get_value+0x1dc>
  case 11: /* icmpInTimestampReps */
    *uint_ptr = STATS_GET(mib2.icmpintimestampreps);
 800efd0:	4b34      	ldr	r3, [pc, #208]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800efd2:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efda:	2304      	movs	r3, #4
 800efdc:	e05c      	b.n	800f098 <icmp_get_value+0x1dc>
  case 12: /* icmpInAddrMasks */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmasks);
 800efde:	4b31      	ldr	r3, [pc, #196]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800efe0:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efe8:	2304      	movs	r3, #4
 800efea:	e055      	b.n	800f098 <icmp_get_value+0x1dc>
  case 13: /* icmpInAddrMaskReps */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmaskreps);
 800efec:	4b2d      	ldr	r3, [pc, #180]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800efee:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800eff6:	2304      	movs	r3, #4
 800eff8:	e04e      	b.n	800f098 <icmp_get_value+0x1dc>
  case 14: /* icmpOutMsgs */
    *uint_ptr = STATS_GET(mib2.icmpoutmsgs);
 800effa:	4b2a      	ldr	r3, [pc, #168]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800effc:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f004:	2304      	movs	r3, #4
 800f006:	e047      	b.n	800f098 <icmp_get_value+0x1dc>
  case 15: /* icmpOutErrors */
    *uint_ptr = STATS_GET(mib2.icmpouterrors);
 800f008:	4b26      	ldr	r3, [pc, #152]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800f00a:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f012:	2304      	movs	r3, #4
 800f014:	e040      	b.n	800f098 <icmp_get_value+0x1dc>
  case 16: /* icmpOutDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpoutdestunreachs);
 800f016:	4b23      	ldr	r3, [pc, #140]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800f018:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f020:	2304      	movs	r3, #4
 800f022:	e039      	b.n	800f098 <icmp_get_value+0x1dc>
  case 17: /* icmpOutTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpouttimeexcds);
 800f024:	4b1f      	ldr	r3, [pc, #124]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800f026:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f02e:	2304      	movs	r3, #4
 800f030:	e032      	b.n	800f098 <icmp_get_value+0x1dc>
  case 18: /* icmpOutParmProbs: not supported -> always 0 */
    *uint_ptr = 0;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2200      	movs	r2, #0
 800f036:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f038:	2304      	movs	r3, #4
 800f03a:	e02d      	b.n	800f098 <icmp_get_value+0x1dc>
  case 19: /* icmpOutSrcQuenchs: not supported -> always 0 */
    *uint_ptr = 0;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2200      	movs	r2, #0
 800f040:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f042:	2304      	movs	r3, #4
 800f044:	e028      	b.n	800f098 <icmp_get_value+0x1dc>
  case 20: /* icmpOutRedirects: not supported -> always 0 */
    *uint_ptr = 0;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2200      	movs	r2, #0
 800f04a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f04c:	2304      	movs	r3, #4
 800f04e:	e023      	b.n	800f098 <icmp_get_value+0x1dc>
  case 21: /* icmpOutEchos */
    *uint_ptr = STATS_GET(mib2.icmpoutechos);
 800f050:	4b14      	ldr	r3, [pc, #80]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800f052:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f05a:	2304      	movs	r3, #4
 800f05c:	e01c      	b.n	800f098 <icmp_get_value+0x1dc>
  case 22: /* icmpOutEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpoutechoreps);
 800f05e:	4b11      	ldr	r3, [pc, #68]	@ (800f0a4 <icmp_get_value+0x1e8>)
 800f060:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f068:	2304      	movs	r3, #4
 800f06a:	e015      	b.n	800f098 <icmp_get_value+0x1dc>
  case 23: /* icmpOutTimestamps: not supported -> always 0 */
    *uint_ptr = 0;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f072:	2304      	movs	r3, #4
 800f074:	e010      	b.n	800f098 <icmp_get_value+0x1dc>
  case 24: /* icmpOutTimestampReps: not supported -> always 0 */
    *uint_ptr = 0;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f07c:	2304      	movs	r3, #4
 800f07e:	e00b      	b.n	800f098 <icmp_get_value+0x1dc>
  case 25: /* icmpOutAddrMasks: not supported -> always 0 */
    *uint_ptr = 0;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f086:	2304      	movs	r3, #4
 800f088:	e006      	b.n	800f098 <icmp_get_value+0x1dc>
  case 26: /* icmpOutAddrMaskReps: not supported -> always 0 */
    *uint_ptr = 0;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f090:	2304      	movs	r3, #4
 800f092:	e001      	b.n	800f098 <icmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("icmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    break;
 800f094:	bf00      	nop
  }

  return 0;
 800f096:	2300      	movs	r3, #0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bc80      	pop	{r7}
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	2000bc24 	.word	0x2000bc24

0800f0a8 <interfaces_get_value>:

/* --- interfaces .1.3.6.1.2.1.2 ----------------------------------------------------- */

static s16_t
interfaces_get_value(struct snmp_node_instance* instance, void* value)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b087      	sub	sp, #28
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  if (instance->node->oid == 1) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d115      	bne.n	800f0e8 <interfaces_get_value+0x40>
    s32_t *sint_ptr = (s32_t*)value;
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	60fb      	str	r3, [r7, #12]
    s32_t num_netifs = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	617b      	str	r3, [r7, #20]

    struct netif *netif = netif_list;
 800f0c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f0f4 <interfaces_get_value+0x4c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800f0ca:	e005      	b.n	800f0d8 <interfaces_get_value+0x30>
      num_netifs++;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	617b      	str	r3, [r7, #20]
      netif = netif->next;
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d1f6      	bne.n	800f0cc <interfaces_get_value+0x24>
    }

    *sint_ptr = num_netifs;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	697a      	ldr	r2, [r7, #20]
 800f0e2:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800f0e4:	2304      	movs	r3, #4
 800f0e6:	e000      	b.n	800f0ea <interfaces_get_value+0x42>
  }

  return 0;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	371c      	adds	r7, #28
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bc80      	pop	{r7}
 800f0f2:	4770      	bx	lr
 800f0f4:	2000bc18 	.word	0x2000bc18

0800f0f8 <interfaces_Table_get_cell_instance>:
static const u8_t iftable_ifAdminStatus_lowerLayerDown = 7;
static const u8_t iftable_ifAdminStatus_down           = 2;

static snmp_err_t
interfaces_Table_get_cell_instance(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, struct snmp_node_instance* cell_instance)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b086      	sub	sp, #24
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	603b      	str	r3, [r7, #0]
 800f104:	4613      	mov	r3, r2
 800f106:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_UNUSED_ARG(column);

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, interfaces_Table_oid_ranges, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges))) {
 800f108:	79f9      	ldrb	r1, [r7, #7]
 800f10a:	2301      	movs	r3, #1
 800f10c:	4a14      	ldr	r2, [pc, #80]	@ (800f160 <interfaces_Table_get_cell_instance+0x68>)
 800f10e:	68b8      	ldr	r0, [r7, #8]
 800f110:	f7ff fe9a 	bl	800ee48 <snmp_oid_in_range>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <interfaces_Table_get_cell_instance+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f11a:	23f1      	movs	r3, #241	@ 0xf1
 800f11c:	e01b      	b.n	800f156 <interfaces_Table_get_cell_instance+0x5e>
  }

  /* get netif index from incoming OID */
  ifIndex = row_oid[0];
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	613b      	str	r3, [r7, #16]

  /* find netif with index */
  netif = netif_list;
 800f124:	4b0f      	ldr	r3, [pc, #60]	@ (800f164 <interfaces_Table_get_cell_instance+0x6c>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800f12a:	e010      	b.n	800f14e <interfaces_Table_get_cell_instance+0x56>
    if (netif_to_num(netif) == ifIndex) {
 800f12c:	6978      	ldr	r0, [r7, #20]
 800f12e:	f7ff f967 	bl	800e400 <netif_to_num>
 800f132:	4603      	mov	r3, r0
 800f134:	461a      	mov	r2, r3
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	4293      	cmp	r3, r2
 800f13a:	d105      	bne.n	800f148 <interfaces_Table_get_cell_instance+0x50>
      /* store netif pointer for subsequent operations (get/test/set) */
      cell_instance->reference.ptr = netif;
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      return SNMP_ERR_NOERROR;
 800f144:	2300      	movs	r3, #0
 800f146:	e006      	b.n	800f156 <interfaces_Table_get_cell_instance+0x5e>
    }
    netif = netif->next;
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1eb      	bne.n	800f12c <interfaces_Table_get_cell_instance+0x34>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f154:	23f1      	movs	r3, #241	@ 0xf1
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	0802f868 	.word	0x0802f868
 800f164:	2000bc18 	.word	0x2000bc18

0800f168 <interfaces_Table_get_next_cell_instance>:

static snmp_err_t
interfaces_Table_get_next_cell_instance(const u32_t* column, struct snmp_obj_id* row_oid, struct snmp_node_instance* cell_instance)
{
 800f168:	b590      	push	{r4, r7, lr}
 800f16a:	b08f      	sub	sp, #60	@ 0x3c
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
  u32_t result_temp[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];

  LWIP_UNUSED_ARG(column);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges));
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	1d19      	adds	r1, r3, #4
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	781a      	ldrb	r2, [r3, #0]
 800f17c:	f107 0314 	add.w	r3, r7, #20
 800f180:	f107 0018 	add.w	r0, r7, #24
 800f184:	2401      	movs	r4, #1
 800f186:	9400      	str	r4, [sp, #0]
 800f188:	f7ff fdf9 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800f18c:	4b16      	ldr	r3, [pc, #88]	@ (800f1e8 <interfaces_Table_get_next_cell_instance+0x80>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800f192:	e00f      	b.n	800f1b4 <interfaces_Table_get_next_cell_instance+0x4c>
    u32_t test_oid[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];
    test_oid[0] = netif_to_num(netif);
 800f194:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f196:	f7ff f933 	bl	800e400 <netif_to_num>
 800f19a:	4603      	mov	r3, r0
 800f19c:	613b      	str	r3, [r7, #16]

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges), netif);
 800f19e:	f107 0110 	add.w	r1, r7, #16
 800f1a2:	f107 0018 	add.w	r0, r7, #24
 800f1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f7ff fe07 	bl	800edbc <snmp_next_oid_check>

    netif = netif->next;
 800f1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800f1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1ec      	bne.n	800f194 <interfaces_Table_get_next_cell_instance+0x2c>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800f1ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10c      	bne.n	800f1dc <interfaces_Table_get_next_cell_instance+0x74>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	68b8      	ldr	r0, [r7, #8]
 800f1cc:	f7ff f854 	bl	800e278 <snmp_oid_assign>
    /* store netif pointer for subsequent operations (get/test/set) */
    cell_instance->reference.ptr = /* (struct netif*) */state.reference;
 800f1d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    return SNMP_ERR_NOERROR;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	e000      	b.n	800f1de <interfaces_Table_get_next_cell_instance+0x76>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f1dc:	23f1      	movs	r3, #241	@ 0xf1
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3734      	adds	r7, #52	@ 0x34
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd90      	pop	{r4, r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	2000bc18 	.word	0x2000bc18

0800f1ec <interfaces_Table_get_value>:

static s16_t
interfaces_Table_get_value(struct snmp_node_instance* instance, void* value)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  struct netif *netif = (struct netif*)instance->reference.ptr;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f1fc:	613b      	str	r3, [r7, #16]
  u32_t* value_u32 = (u32_t*)value;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	60fb      	str	r3, [r7, #12]
  s32_t* value_s32 = (s32_t*)value;
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	60bb      	str	r3, [r7, #8]
  u16_t value_len;

  switch (SNMP_TABLE_GET_COLUMN_FROM_OID(instance->instance_oid.id))
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	3b01      	subs	r3, #1
 800f20c:	2b15      	cmp	r3, #21
 800f20e:	f200 8102 	bhi.w	800f416 <interfaces_Table_get_value+0x22a>
 800f212:	a201      	add	r2, pc, #4	@ (adr r2, 800f218 <interfaces_Table_get_value+0x2c>)
 800f214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f218:	0800f271 	.word	0x0800f271
 800f21c:	0800f285 	.word	0x0800f285
 800f220:	0800f299 	.word	0x0800f299
 800f224:	0800f2ab 	.word	0x0800f2ab
 800f228:	0800f2bb 	.word	0x0800f2bb
 800f22c:	0800f2c9 	.word	0x0800f2c9
 800f230:	0800f2dd 	.word	0x0800f2dd
 800f234:	0800f305 	.word	0x0800f305
 800f238:	0800f349 	.word	0x0800f349
 800f23c:	0800f357 	.word	0x0800f357
 800f240:	0800f365 	.word	0x0800f365
 800f244:	0800f373 	.word	0x0800f373
 800f248:	0800f381 	.word	0x0800f381
 800f24c:	0800f38f 	.word	0x0800f38f
 800f250:	0800f39d 	.word	0x0800f39d
 800f254:	0800f3ab 	.word	0x0800f3ab
 800f258:	0800f3b9 	.word	0x0800f3b9
 800f25c:	0800f3c7 	.word	0x0800f3c7
 800f260:	0800f3d5 	.word	0x0800f3d5
 800f264:	0800f3e3 	.word	0x0800f3e3
 800f268:	0800f3f1 	.word	0x0800f3f1
 800f26c:	0800f3ff 	.word	0x0800f3ff
  {
  case 1: /* ifIndex */
    *value_s32 = netif_to_num(netif);
 800f270:	6938      	ldr	r0, [r7, #16]
 800f272:	f7ff f8c5 	bl	800e400 <netif_to_num>
 800f276:	4603      	mov	r3, r0
 800f278:	461a      	mov	r2, r3
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800f27e:	2304      	movs	r3, #4
 800f280:	82fb      	strh	r3, [r7, #22]
    break;
 800f282:	e0ca      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 2: /* ifDescr */
    value_len = sizeof(netif->name);
 800f284:	2302      	movs	r3, #2
 800f286:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, netif->name, value_len);
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	3334      	adds	r3, #52	@ 0x34
 800f28c:	8afa      	ldrh	r2, [r7, #22]
 800f28e:	4619      	mov	r1, r3
 800f290:	6838      	ldr	r0, [r7, #0]
 800f292:	f012 fcf2 	bl	8021c7a <memcpy>
    break;
 800f296:	e0c0      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 3: /* ifType */
    *value_s32 = netif->link_type;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800f29e:	461a      	mov	r2, r3
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800f2a4:	2304      	movs	r3, #4
 800f2a6:	82fb      	strh	r3, [r7, #22]
    break;
 800f2a8:	e0b7      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 4: /* ifMtu */
    *value_s32 = netif->mtu;
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800f2b4:	2304      	movs	r3, #4
 800f2b6:	82fb      	strh	r3, [r7, #22]
    break;
 800f2b8:	e0af      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 5: /* ifSpeed */
    *value_u32 = netif->link_speed;
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f2c2:	2304      	movs	r3, #4
 800f2c4:	82fb      	strh	r3, [r7, #22]
    break;
 800f2c6:	e0a8      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 6: /* ifPhysAddress */
    value_len = sizeof(netif->hwaddr);
 800f2c8:	2306      	movs	r3, #6
 800f2ca:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, &netif->hwaddr, value_len);
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	332d      	adds	r3, #45	@ 0x2d
 800f2d0:	8afa      	ldrh	r2, [r7, #22]
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	6838      	ldr	r0, [r7, #0]
 800f2d6:	f012 fcd0 	bl	8021c7a <memcpy>
    break;
 800f2da:	e09e      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 7: /* ifAdminStatus */
    if (netif_is_up(netif)) {
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d004      	beq.n	800f2f6 <interfaces_Table_get_value+0x10a>
      *value_s32 = iftable_ifOperStatus_up;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	e003      	b.n	800f2fe <interfaces_Table_get_value+0x112>
    } else {
      *value_s32 = iftable_ifOperStatus_down;
 800f2f6:	2302      	movs	r3, #2
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800f2fe:	2304      	movs	r3, #4
 800f300:	82fb      	strh	r3, [r7, #22]
    break;
 800f302:	e08a      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 8: /* ifOperStatus */
    if (netif_is_up(netif)) {
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800f30a:	f003 0301 	and.w	r3, r3, #1
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d012      	beq.n	800f33a <interfaces_Table_get_value+0x14e>
      if (netif_is_link_up(netif)) {
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800f31a:	089b      	lsrs	r3, r3, #2
 800f31c:	f003 0301 	and.w	r3, r3, #1
 800f320:	b2db      	uxtb	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <interfaces_Table_get_value+0x144>
        *value_s32 = iftable_ifAdminStatus_up;
 800f326:	2301      	movs	r3, #1
 800f328:	461a      	mov	r2, r3
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e008      	b.n	800f342 <interfaces_Table_get_value+0x156>
      } else {
        *value_s32 = iftable_ifAdminStatus_lowerLayerDown;
 800f330:	2307      	movs	r3, #7
 800f332:	461a      	mov	r2, r3
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	e003      	b.n	800f342 <interfaces_Table_get_value+0x156>
      }
    } else {
      *value_s32 = iftable_ifAdminStatus_down;
 800f33a:	2302      	movs	r3, #2
 800f33c:	461a      	mov	r2, r3
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800f342:	2304      	movs	r3, #4
 800f344:	82fb      	strh	r3, [r7, #22]
    break;
 800f346:	e068      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 9: /* ifLastChange */
    *value_u32 = netif->ts;
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f350:	2304      	movs	r3, #4
 800f352:	82fb      	strh	r3, [r7, #22]
    break;
 800f354:	e061      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 10: /* ifInOctets */
    *value_u32 = netif->mib2_counters.ifinoctets;
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f35e:	2304      	movs	r3, #4
 800f360:	82fb      	strh	r3, [r7, #22]
    break;
 800f362:	e05a      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 11: /* ifInUcastPkts */
    *value_u32 = netif->mib2_counters.ifinucastpkts;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f36c:	2304      	movs	r3, #4
 800f36e:	82fb      	strh	r3, [r7, #22]
    break;
 800f370:	e053      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 12: /* ifInNUcastPkts */
    *value_u32 = netif->mib2_counters.ifinnucastpkts;
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f37a:	2304      	movs	r3, #4
 800f37c:	82fb      	strh	r3, [r7, #22]
    break;
 800f37e:	e04c      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 13: /* ifInDiscards */
    *value_u32 = netif->mib2_counters.ifindiscards;
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f388:	2304      	movs	r3, #4
 800f38a:	82fb      	strh	r3, [r7, #22]
    break;
 800f38c:	e045      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 14: /* ifInErrors */
    *value_u32 = netif->mib2_counters.ifinerrors;
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f396:	2304      	movs	r3, #4
 800f398:	82fb      	strh	r3, [r7, #22]
    break;
 800f39a:	e03e      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 15: /* ifInUnkownProtos */
    *value_u32 = netif->mib2_counters.ifinunknownprotos;
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f3a4:	2304      	movs	r3, #4
 800f3a6:	82fb      	strh	r3, [r7, #22]
    break;
 800f3a8:	e037      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 16: /* ifOutOctets */
    *value_u32 = netif->mib2_counters.ifoutoctets;
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f3b2:	2304      	movs	r3, #4
 800f3b4:	82fb      	strh	r3, [r7, #22]
    break;
 800f3b6:	e030      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 17: /* ifOutUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutucastpkts;
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f3c0:	2304      	movs	r3, #4
 800f3c2:	82fb      	strh	r3, [r7, #22]
    break;
 800f3c4:	e029      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 18: /* ifOutNUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutnucastpkts;
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f3ce:	2304      	movs	r3, #4
 800f3d0:	82fb      	strh	r3, [r7, #22]
    break;
 800f3d2:	e022      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 19: /* ifOutDiscarts */
    *value_u32 = netif->mib2_counters.ifoutdiscards;
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f3dc:	2304      	movs	r3, #4
 800f3de:	82fb      	strh	r3, [r7, #22]
    break;
 800f3e0:	e01b      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 20: /* ifOutErrors */
    *value_u32 = netif->mib2_counters.ifouterrors;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f3ea:	2304      	movs	r3, #4
 800f3ec:	82fb      	strh	r3, [r7, #22]
    break;
 800f3ee:	e014      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  case 21: /* ifOutQLen */
    *value_u32 = iftable_ifOutQLen;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f3f8:	2304      	movs	r3, #4
 800f3fa:	82fb      	strh	r3, [r7, #22]
    break;
 800f3fc:	e00d      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  /** @note returning zeroDotZero (0.0) no media specific MIB support */
  case 22: /* ifSpecific */
    value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800f3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800f428 <interfaces_Table_get_value+0x23c>)
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, snmp_zero_dot_zero.id, value_len);
 800f406:	4b08      	ldr	r3, [pc, #32]	@ (800f428 <interfaces_Table_get_value+0x23c>)
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	8afa      	ldrh	r2, [r7, #22]
 800f40c:	4619      	mov	r1, r3
 800f40e:	6838      	ldr	r0, [r7, #0]
 800f410:	f012 fc33 	bl	8021c7a <memcpy>
    break;
 800f414:	e001      	b.n	800f41a <interfaces_Table_get_value+0x22e>
  default:
    return 0;
 800f416:	2300      	movs	r3, #0
 800f418:	e001      	b.n	800f41e <interfaces_Table_get_value+0x232>
  }

  return value_len;
 800f41a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3718      	adds	r7, #24
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	0802f714 	.word	0x0802f714

0800f42c <ip_get_value>:
#if LWIP_IPV4
/* --- ip .1.3.6.1.2.1.4 ----------------------------------------------------- */

static s16_t
ip_get_value(struct snmp_node_instance* instance, void* value)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b085      	sub	sp, #20
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  s32_t* sint_ptr = (s32_t*)value;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	60fb      	str	r3, [r7, #12]
  u32_t* uint_ptr = (u32_t*)value;
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	3b01      	subs	r3, #1
 800f446:	2b16      	cmp	r3, #22
 800f448:	f200 80b6 	bhi.w	800f5b8 <ip_get_value+0x18c>
 800f44c:	a201      	add	r2, pc, #4	@ (adr r2, 800f454 <ip_get_value+0x28>)
 800f44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f452:	bf00      	nop
 800f454:	0800f4b1 	.word	0x0800f4b1
 800f458:	0800f4bb 	.word	0x0800f4bb
 800f45c:	0800f4c5 	.word	0x0800f4c5
 800f460:	0800f4d3 	.word	0x0800f4d3
 800f464:	0800f4e1 	.word	0x0800f4e1
 800f468:	0800f4ef 	.word	0x0800f4ef
 800f46c:	0800f4fd 	.word	0x0800f4fd
 800f470:	0800f50b 	.word	0x0800f50b
 800f474:	0800f519 	.word	0x0800f519
 800f478:	0800f527 	.word	0x0800f527
 800f47c:	0800f535 	.word	0x0800f535
 800f480:	0800f543 	.word	0x0800f543
 800f484:	0800f551 	.word	0x0800f551
 800f488:	0800f55b 	.word	0x0800f55b
 800f48c:	0800f569 	.word	0x0800f569
 800f490:	0800f577 	.word	0x0800f577
 800f494:	0800f585 	.word	0x0800f585
 800f498:	0800f593 	.word	0x0800f593
 800f49c:	0800f5a1 	.word	0x0800f5a1
 800f4a0:	0800f5b9 	.word	0x0800f5b9
 800f4a4:	0800f5b9 	.word	0x0800f5b9
 800f4a8:	0800f5b9 	.word	0x0800f5b9
 800f4ac:	0800f5af 	.word	0x0800f5af
#if IP_FORWARD
    /* forwarding */
    *sint_ptr = 1;
#else
    /* not-forwarding */
    *sint_ptr = 2;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	601a      	str	r2, [r3, #0]
#endif
    return sizeof(*sint_ptr);
 800f4b6:	2304      	movs	r3, #4
 800f4b8:	e080      	b.n	800f5bc <ip_get_value+0x190>
  case 2: /* ipDefaultTTL */
    *sint_ptr = IP_DEFAULT_TTL;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	22ff      	movs	r2, #255	@ 0xff
 800f4be:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800f4c0:	2304      	movs	r3, #4
 800f4c2:	e07b      	b.n	800f5bc <ip_get_value+0x190>
  case 3: /* ipInReceives */
    *uint_ptr = STATS_GET(mib2.ipinreceives);
 800f4c4:	4b40      	ldr	r3, [pc, #256]	@ (800f5c8 <ip_get_value+0x19c>)
 800f4c6:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4ce:	2304      	movs	r3, #4
 800f4d0:	e074      	b.n	800f5bc <ip_get_value+0x190>
  case 4: /* ipInHdrErrors */
    *uint_ptr = STATS_GET(mib2.ipinhdrerrors);
 800f4d2:	4b3d      	ldr	r3, [pc, #244]	@ (800f5c8 <ip_get_value+0x19c>)
 800f4d4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4dc:	2304      	movs	r3, #4
 800f4de:	e06d      	b.n	800f5bc <ip_get_value+0x190>
  case 5: /* ipInAddrErrors */
    *uint_ptr = STATS_GET(mib2.ipinaddrerrors);
 800f4e0:	4b39      	ldr	r3, [pc, #228]	@ (800f5c8 <ip_get_value+0x19c>)
 800f4e2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4ea:	2304      	movs	r3, #4
 800f4ec:	e066      	b.n	800f5bc <ip_get_value+0x190>
  case 6: /* ipForwDatagrams */
    *uint_ptr = STATS_GET(mib2.ipforwdatagrams);
 800f4ee:	4b36      	ldr	r3, [pc, #216]	@ (800f5c8 <ip_get_value+0x19c>)
 800f4f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4f8:	2304      	movs	r3, #4
 800f4fa:	e05f      	b.n	800f5bc <ip_get_value+0x190>
  case 7: /* ipInUnknownProtos */
    *uint_ptr = STATS_GET(mib2.ipinunknownprotos);
 800f4fc:	4b32      	ldr	r3, [pc, #200]	@ (800f5c8 <ip_get_value+0x19c>)
 800f4fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f506:	2304      	movs	r3, #4
 800f508:	e058      	b.n	800f5bc <ip_get_value+0x190>
  case 8: /* ipInDiscards */
    *uint_ptr = STATS_GET(mib2.ipindiscards);
 800f50a:	4b2f      	ldr	r3, [pc, #188]	@ (800f5c8 <ip_get_value+0x19c>)
 800f50c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f514:	2304      	movs	r3, #4
 800f516:	e051      	b.n	800f5bc <ip_get_value+0x190>
  case 9: /* ipInDelivers */
    *uint_ptr = STATS_GET(mib2.ipindelivers);
 800f518:	4b2b      	ldr	r3, [pc, #172]	@ (800f5c8 <ip_get_value+0x19c>)
 800f51a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f522:	2304      	movs	r3, #4
 800f524:	e04a      	b.n	800f5bc <ip_get_value+0x190>
  case 10: /* ipOutRequests */
    *uint_ptr = STATS_GET(mib2.ipoutrequests);
 800f526:	4b28      	ldr	r3, [pc, #160]	@ (800f5c8 <ip_get_value+0x19c>)
 800f528:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f530:	2304      	movs	r3, #4
 800f532:	e043      	b.n	800f5bc <ip_get_value+0x190>
  case 11: /* ipOutDiscards */
    *uint_ptr = STATS_GET(mib2.ipoutdiscards);
 800f534:	4b24      	ldr	r3, [pc, #144]	@ (800f5c8 <ip_get_value+0x19c>)
 800f536:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f53e:	2304      	movs	r3, #4
 800f540:	e03c      	b.n	800f5bc <ip_get_value+0x190>
  case 12: /* ipOutNoRoutes */
    *uint_ptr = STATS_GET(mib2.ipoutnoroutes);
 800f542:	4b21      	ldr	r3, [pc, #132]	@ (800f5c8 <ip_get_value+0x19c>)
 800f544:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f54c:	2304      	movs	r3, #4
 800f54e:	e035      	b.n	800f5bc <ip_get_value+0x190>
  case 13: /* ipReasmTimeout */
#if IP_REASSEMBLY
    *sint_ptr = IP_REASS_MAXAGE;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2203      	movs	r2, #3
 800f554:	601a      	str	r2, [r3, #0]
#else
    *sint_ptr = 0;
#endif
    return sizeof(*sint_ptr);
 800f556:	2304      	movs	r3, #4
 800f558:	e030      	b.n	800f5bc <ip_get_value+0x190>
  case 14: /* ipReasmReqds */
    *uint_ptr = STATS_GET(mib2.ipreasmreqds);
 800f55a:	4b1b      	ldr	r3, [pc, #108]	@ (800f5c8 <ip_get_value+0x19c>)
 800f55c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f564:	2304      	movs	r3, #4
 800f566:	e029      	b.n	800f5bc <ip_get_value+0x190>
  case 15: /* ipReasmOKs */
    *uint_ptr = STATS_GET(mib2.ipreasmoks);
 800f568:	4b17      	ldr	r3, [pc, #92]	@ (800f5c8 <ip_get_value+0x19c>)
 800f56a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f572:	2304      	movs	r3, #4
 800f574:	e022      	b.n	800f5bc <ip_get_value+0x190>
  case 16: /* ipReasmFails */
    *uint_ptr = STATS_GET(mib2.ipreasmfails);
 800f576:	4b14      	ldr	r3, [pc, #80]	@ (800f5c8 <ip_get_value+0x19c>)
 800f578:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f580:	2304      	movs	r3, #4
 800f582:	e01b      	b.n	800f5bc <ip_get_value+0x190>
  case 17: /* ipFragOKs */
    *uint_ptr = STATS_GET(mib2.ipfragoks);
 800f584:	4b10      	ldr	r3, [pc, #64]	@ (800f5c8 <ip_get_value+0x19c>)
 800f586:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f58e:	2304      	movs	r3, #4
 800f590:	e014      	b.n	800f5bc <ip_get_value+0x190>
  case 18: /* ipFragFails */
    *uint_ptr = STATS_GET(mib2.ipfragfails);
 800f592:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c8 <ip_get_value+0x19c>)
 800f594:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f59c:	2304      	movs	r3, #4
 800f59e:	e00d      	b.n	800f5bc <ip_get_value+0x190>
  case 19: /* ipFragCreates */
    *uint_ptr = STATS_GET(mib2.ipfragcreates);
 800f5a0:	4b09      	ldr	r3, [pc, #36]	@ (800f5c8 <ip_get_value+0x19c>)
 800f5a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5aa:	2304      	movs	r3, #4
 800f5ac:	e006      	b.n	800f5bc <ip_get_value+0x190>
  case 23: /* ipRoutingDiscards: not supported -> always 0 */
    *uint_ptr = 0;
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5b4:	2304      	movs	r3, #4
 800f5b6:	e001      	b.n	800f5bc <ip_get_value+0x190>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800f5b8:	bf00      	nop
  }

  return 0;
 800f5ba:	2300      	movs	r3, #0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3714      	adds	r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bc80      	pop	{r7}
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	2000bc24 	.word	0x2000bc24

0800f5cc <ip_set_test>:
 * @note we allow set if the value matches the hardwired value,
 *   otherwise return badvalue.
 */
static snmp_err_t
ip_set_test(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b087      	sub	sp, #28
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 800f5da:	230a      	movs	r3, #10
 800f5dc:	75fb      	strb	r3, [r7, #23]
  s32_t *sint_ptr = (s32_t*)value;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	613b      	str	r3, [r7, #16]

  LWIP_UNUSED_ARG(len);
  switch (instance->node->oid) {
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d002      	beq.n	800f5f2 <ip_set_test+0x26>
 800f5ec:	2b02      	cmp	r3, #2
 800f5ee:	d007      	beq.n	800f600 <ip_set_test+0x34>
      ret = SNMP_ERR_NOERROR;
    }
    break;
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_set_test(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800f5f0:	e010      	b.n	800f614 <ip_set_test+0x48>
    if (*sint_ptr == 2)
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d109      	bne.n	800f60e <ip_set_test+0x42>
      ret = SNMP_ERR_NOERROR;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	75fb      	strb	r3, [r7, #23]
    break;
 800f5fe:	e006      	b.n	800f60e <ip_set_test+0x42>
    if (*sint_ptr == IP_DEFAULT_TTL) {
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2bff      	cmp	r3, #255	@ 0xff
 800f606:	d104      	bne.n	800f612 <ip_set_test+0x46>
      ret = SNMP_ERR_NOERROR;
 800f608:	2300      	movs	r3, #0
 800f60a:	75fb      	strb	r3, [r7, #23]
    break;
 800f60c:	e001      	b.n	800f612 <ip_set_test+0x46>
    break;
 800f60e:	bf00      	nop
 800f610:	e000      	b.n	800f614 <ip_set_test+0x48>
    break;
 800f612:	bf00      	nop
  }

  return ret;
 800f614:	7dfb      	ldrb	r3, [r7, #23]
}
 800f616:	4618      	mov	r0, r3
 800f618:	371c      	adds	r7, #28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bc80      	pop	{r7}
 800f61e:	4770      	bx	lr

0800f620 <ip_set_value>:

static snmp_err_t
ip_set_value(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800f620:	b480      	push	{r7}
 800f622:	b085      	sub	sp, #20
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	460b      	mov	r3, r1
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(instance);
  LWIP_UNUSED_ARG(len);
  LWIP_UNUSED_ARG(value);
  /* nothing to do here because in set_test we only accept values being the same as our own stored value -> no need to store anything */
  return SNMP_ERR_NOERROR;
 800f62e:	2300      	movs	r3, #0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	bc80      	pop	{r7}
 800f638:	4770      	bx	lr
	...

0800f63c <ip_AddrTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D */
};

static snmp_err_t
ip_AddrTable_get_cell_value_core(struct netif *netif, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
 800f648:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3b01      	subs	r3, #1
 800f650:	2b04      	cmp	r3, #4
 800f652:	d82a      	bhi.n	800f6aa <ip_AddrTable_get_cell_value_core+0x6e>
 800f654:	a201      	add	r2, pc, #4	@ (adr r2, 800f65c <ip_AddrTable_get_cell_value_core+0x20>)
 800f656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65a:	bf00      	nop
 800f65c:	0800f671 	.word	0x0800f671
 800f660:	0800f67d 	.word	0x0800f67d
 800f664:	0800f68d 	.word	0x0800f68d
 800f668:	0800f699 	.word	0x0800f699
 800f66c:	0800f6a1 	.word	0x0800f6a1
  case 1: /* ipAdEntAddr */
    value->u32 = netif_ip4_addr(netif)->addr;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	3304      	adds	r3, #4
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	601a      	str	r2, [r3, #0]
    break;
 800f67a:	e018      	b.n	800f6ae <ip_AddrTable_get_cell_value_core+0x72>
  case 2: /* ipAdEntIfIndex */
    value->u32 = netif_to_num(netif);
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f7fe febf 	bl	800e400 <netif_to_num>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	601a      	str	r2, [r3, #0]
    break;
 800f68a:	e010      	b.n	800f6ae <ip_AddrTable_get_cell_value_core+0x72>
  case 3: /* ipAdEntNetMask */
    value->u32 = netif_ip4_netmask(netif)->addr;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	3308      	adds	r3, #8
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	601a      	str	r2, [r3, #0]
    break;
 800f696:	e00a      	b.n	800f6ae <ip_AddrTable_get_cell_value_core+0x72>
  case 4: /* ipAdEntBcastAddr */
    /* lwIP oddity, there's no broadcast
       address in the netif we can rely on */
    value->u32 = IPADDR_BROADCAST & 1;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	601a      	str	r2, [r3, #0]
    break;
 800f69e:	e006      	b.n	800f6ae <ip_AddrTable_get_cell_value_core+0x72>
#if IP_REASSEMBLY
    /* @todo The theoretical maximum is IP_REASS_MAX_PBUFS * size of the pbufs,
     * but only if receiving one fragmented packet at a time.
     * The current solution is to calculate for 2 simultaneous packets...
     */
    value->u32 = (IP_HLEN + ((IP_REASS_MAX_PBUFS/2) *
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f640 22fa 	movw	r2, #2810	@ 0xafa
 800f6a6:	601a      	str	r2, [r3, #0]
#else
    /** @todo returning MTU would be a bad thing and
        returning a wild guess like '576' isn't good either */
    value->u32 = 0;
#endif
    break;
 800f6a8:	e001      	b.n	800f6ae <ip_AddrTable_get_cell_value_core+0x72>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800f6aa:	23f1      	movs	r3, #241	@ 0xf1
 800f6ac:	e000      	b.n	800f6b0 <ip_AddrTable_get_cell_value_core+0x74>
  }

  return SNMP_ERR_NOERROR;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3710      	adds	r7, #16
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <ip_AddrTable_get_cell_value>:

static snmp_err_t
ip_AddrTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b086      	sub	sp, #24
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	603b      	str	r3, [r7, #0]
 800f6c4:	4613      	mov	r3, r2
 800f6c6:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_AddrTable_oid_ranges, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges))) {
 800f6c8:	79f9      	ldrb	r1, [r7, #7]
 800f6ca:	2304      	movs	r3, #4
 800f6cc:	4a15      	ldr	r2, [pc, #84]	@ (800f724 <ip_AddrTable_get_cell_value+0x6c>)
 800f6ce:	68b8      	ldr	r0, [r7, #8]
 800f6d0:	f7ff fbba 	bl	800ee48 <snmp_oid_in_range>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <ip_AddrTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f6da:	23f1      	movs	r3, #241	@ 0xf1
 800f6dc:	e01e      	b.n	800f71c <ip_AddrTable_get_cell_value+0x64>
  }

  /* get IP from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 800f6de:	f107 0310 	add.w	r3, r7, #16
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	68b8      	ldr	r0, [r7, #8]
 800f6e6:	f7fe fc61 	bl	800dfac <snmp_oid_to_ip4>

  /* find netif with requested ip */
  netif = netif_list;
 800f6ea:	4b0f      	ldr	r3, [pc, #60]	@ (800f728 <ip_AddrTable_get_cell_value+0x70>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800f6f0:	e010      	b.n	800f714 <ip_AddrTable_get_cell_value+0x5c>
    if (ip4_addr_cmp(&ip, netif_ip4_addr(netif))) {
 800f6f2:	693a      	ldr	r2, [r7, #16]
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	3304      	adds	r3, #4
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d107      	bne.n	800f70e <ip_AddrTable_get_cell_value+0x56>
      /* fill in object properties */
      return ip_AddrTable_get_cell_value_core(netif, column, value, value_len);
 800f6fe:	6a3b      	ldr	r3, [r7, #32]
 800f700:	683a      	ldr	r2, [r7, #0]
 800f702:	68f9      	ldr	r1, [r7, #12]
 800f704:	6978      	ldr	r0, [r7, #20]
 800f706:	f7ff ff99 	bl	800f63c <ip_AddrTable_get_cell_value_core>
 800f70a:	4603      	mov	r3, r0
 800f70c:	e006      	b.n	800f71c <ip_AddrTable_get_cell_value+0x64>
    }

    netif = netif->next;
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1eb      	bne.n	800f6f2 <ip_AddrTable_get_cell_value+0x3a>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f71a:	23f1      	movs	r3, #241	@ 0xf1
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	0802f984 	.word	0x0802f984
 800f728:	2000bc18 	.word	0x2000bc18

0800f72c <ip_AddrTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_AddrTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800f72c:	b590      	push	{r4, r7, lr}
 800f72e:	b095      	sub	sp, #84	@ 0x54
 800f730:	af02      	add	r7, sp, #8
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	603b      	str	r3, [r7, #0]
  struct netif *netif;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges));
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	1d19      	adds	r1, r3, #4
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	781a      	ldrb	r2, [r3, #0]
 800f742:	f107 0320 	add.w	r3, r7, #32
 800f746:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800f74a:	2404      	movs	r4, #4
 800f74c:	9400      	str	r4, [sp, #0]
 800f74e:	f7ff fb16 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800f752:	4b19      	ldr	r3, [pc, #100]	@ (800f7b8 <ip_AddrTable_get_next_cell_instance_and_value+0x8c>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 800f758:	e012      	b.n	800f780 <ip_AddrTable_get_next_cell_instance_and_value+0x54>
    u32_t test_oid[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];
    snmp_ip4_to_oid(netif_ip4_addr(netif), &test_oid[0]);
 800f75a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f75c:	3304      	adds	r3, #4
 800f75e:	f107 0210 	add.w	r2, r7, #16
 800f762:	4611      	mov	r1, r2
 800f764:	4618      	mov	r0, r3
 800f766:	f7fe fca9 	bl	800e0bc <snmp_ip4_to_oid>

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges), netif);
 800f76a:	f107 0110 	add.w	r1, r7, #16
 800f76e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800f772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f774:	2204      	movs	r2, #4
 800f776:	f7ff fb21 	bl	800edbc <snmp_next_oid_check>

    netif = netif->next;
 800f77a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 800f780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1e9      	bne.n	800f75a <ip_AddrTable_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800f786:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10e      	bne.n	800f7ac <ip_AddrTable_get_next_cell_instance_and_value+0x80>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800f78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f790:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800f794:	4619      	mov	r1, r3
 800f796:	68b8      	ldr	r0, [r7, #8]
 800f798:	f7fe fd6e 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return ip_AddrTable_get_cell_value_core((struct netif*)state.reference, column, value, value_len);
 800f79c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	68f9      	ldr	r1, [r7, #12]
 800f7a4:	f7ff ff4a 	bl	800f63c <ip_AddrTable_get_cell_value_core>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	e000      	b.n	800f7ae <ip_AddrTable_get_next_cell_instance_and_value+0x82>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f7ac:	23f1      	movs	r3, #241	@ 0xf1
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	374c      	adds	r7, #76	@ 0x4c
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd90      	pop	{r4, r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	2000bc18 	.word	0x2000bc18

0800f7bc <ip_RouteTable_get_cell_value_core>:
  { 0, 0xff }, /* IP D */
};

static snmp_err_t
ip_RouteTable_get_cell_value_core(struct netif *netif, u8_t default_route, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b086      	sub	sp, #24
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	607a      	str	r2, [r7, #4]
 800f7c6:	603b      	str	r3, [r7, #0]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	72fb      	strb	r3, [r7, #11]
  switch (*column) {
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	2b0c      	cmp	r3, #12
 800f7d4:	f200 8089 	bhi.w	800f8ea <ip_RouteTable_get_cell_value_core+0x12e>
 800f7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f7e0 <ip_RouteTable_get_cell_value_core+0x24>)
 800f7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7de:	bf00      	nop
 800f7e0:	0800f815 	.word	0x0800f815
 800f7e4:	0800f83d 	.word	0x0800f83d
 800f7e8:	0800f84d 	.word	0x0800f84d
 800f7ec:	0800f863 	.word	0x0800f863
 800f7f0:	0800f863 	.word	0x0800f863
 800f7f4:	0800f863 	.word	0x0800f863
 800f7f8:	0800f86d 	.word	0x0800f86d
 800f7fc:	0800f88b 	.word	0x0800f88b
 800f800:	0800f8a1 	.word	0x0800f8a1
 800f804:	0800f8a9 	.word	0x0800f8a9
 800f808:	0800f8b1 	.word	0x0800f8b1
 800f80c:	0800f8cd 	.word	0x0800f8cd
 800f810:	0800f8d7 	.word	0x0800f8d7
  case 1: /* ipRouteDest */
    if (default_route) {
 800f814:	7afb      	ldrb	r3, [r7, #11]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d004      	beq.n	800f824 <ip_RouteTable_get_cell_value_core+0x68>
       /* default rte has 0.0.0.0 dest */
      value->u32 = IP4_ADDR_ANY4->addr;
 800f81a:	4b37      	ldr	r3, [pc, #220]	@ (800f8f8 <ip_RouteTable_get_cell_value_core+0x13c>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	601a      	str	r2, [r3, #0]
      /* netifs have netaddress dest */
      ip4_addr_t tmp;
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
      value->u32 = tmp.addr;
    }
    break;
 800f822:	e064      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3304      	adds	r3, #4
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	3308      	adds	r3, #8
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4013      	ands	r3, r2
 800f832:	617b      	str	r3, [r7, #20]
      value->u32 = tmp.addr;
 800f834:	697a      	ldr	r2, [r7, #20]
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	601a      	str	r2, [r3, #0]
    break;
 800f83a:	e058      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 2: /* ipRouteIfIndex */
    value->u32 = netif_to_num(netif);
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7fe fddf 	bl	800e400 <netif_to_num>
 800f842:	4603      	mov	r3, r0
 800f844:	461a      	mov	r2, r3
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	601a      	str	r2, [r3, #0]
    break;
 800f84a:	e050      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 3: /* ipRouteMetric1 */
    if (default_route) {
 800f84c:	7afb      	ldrb	r3, [r7, #11]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d003      	beq.n	800f85a <ip_RouteTable_get_cell_value_core+0x9e>
      value->s32 = 1; /* default */
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2201      	movs	r2, #1
 800f856:	601a      	str	r2, [r3, #0]
    } else {
      value->s32 = 0; /* normal */
    }
    break;
 800f858:	e049      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
      value->s32 = 0; /* normal */
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2200      	movs	r2, #0
 800f85e:	601a      	str	r2, [r3, #0]
    break;
 800f860:	e045      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 4: /* ipRouteMetric2 */
  case 5: /* ipRouteMetric3 */
  case 6: /* ipRouteMetric4 */
    value->s32 = -1; /* none */
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	f04f 32ff 	mov.w	r2, #4294967295
 800f868:	601a      	str	r2, [r3, #0]
    break;
 800f86a:	e040      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 7: /* ipRouteNextHop */
    if (default_route) {
 800f86c:	7afb      	ldrb	r3, [r7, #11]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d005      	beq.n	800f87e <ip_RouteTable_get_cell_value_core+0xc2>
      /* default rte: gateway */
      value->u32 = netif_ip4_gw(netif)->addr;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	330c      	adds	r3, #12
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes: netif ip_addr  */
      value->u32 = netif_ip4_addr(netif)->addr;
    }
    break;
 800f87c:	e037      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_addr(netif)->addr;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	3304      	adds	r3, #4
 800f882:	681a      	ldr	r2, [r3, #0]
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	601a      	str	r2, [r3, #0]
    break;
 800f888:	e031      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 8: /* ipRouteType */
    if (default_route) {
 800f88a:	7afb      	ldrb	r3, [r7, #11]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d003      	beq.n	800f898 <ip_RouteTable_get_cell_value_core+0xdc>
      /* default rte is indirect */
      value->u32 = 4; /* indirect */
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	2204      	movs	r2, #4
 800f894:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes are direct */
      value->u32 = 3; /* direct */
    }
    break;
 800f896:	e02a      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = 3; /* direct */
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	2203      	movs	r2, #3
 800f89c:	601a      	str	r2, [r3, #0]
    break;
 800f89e:	e026      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 9: /* ipRouteProto */
    /* locally defined routes */
    value->u32 = 2; /* local */
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	601a      	str	r2, [r3, #0]
    break;
 800f8a6:	e022      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 10: /* ipRouteAge */
    /* @todo (sysuptime - timestamp last change) / 100 */
    value->u32 = 0;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	601a      	str	r2, [r3, #0]
    break;
 800f8ae:	e01e      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 11: /* ipRouteMask */
    if (default_route) {
 800f8b0:	7afb      	ldrb	r3, [r7, #11]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d004      	beq.n	800f8c0 <ip_RouteTable_get_cell_value_core+0x104>
      /* default rte use 0.0.0.0 mask */
      value->u32 = IP4_ADDR_ANY4->addr;
 800f8b6:	4b10      	ldr	r3, [pc, #64]	@ (800f8f8 <ip_RouteTable_get_cell_value_core+0x13c>)
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes use netmask */
      value->u32 = netif_ip4_netmask(netif)->addr;
    }
    break;
 800f8be:	e016      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_netmask(netif)->addr;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3308      	adds	r3, #8
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	601a      	str	r2, [r3, #0]
    break;
 800f8ca:	e010      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 12: /* ipRouteMetric5 */
    value->s32 = -1; /* none */
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f8d2:	601a      	str	r2, [r3, #0]
    break;
 800f8d4:	e00b      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  case 13: /* ipRouteInfo */
    value->const_ptr = snmp_zero_dot_zero.id;
 800f8d6:	4b09      	ldr	r3, [pc, #36]	@ (800f8fc <ip_RouteTable_get_cell_value_core+0x140>)
 800f8d8:	685a      	ldr	r2, [r3, #4]
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	601a      	str	r2, [r3, #0]
    *value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800f8de:	4b07      	ldr	r3, [pc, #28]	@ (800f8fc <ip_RouteTable_get_cell_value_core+0x140>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	009a      	lsls	r2, r3, #2
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	601a      	str	r2, [r3, #0]
    break;
 800f8e8:	e001      	b.n	800f8ee <ip_RouteTable_get_cell_value_core+0x132>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800f8ea:	23f1      	movs	r3, #241	@ 0xf1
 800f8ec:	e000      	b.n	800f8f0 <ip_RouteTable_get_cell_value_core+0x134>
  }

  return SNMP_ERR_NOERROR;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3718      	adds	r7, #24
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	0803064c 	.word	0x0803064c
 800f8fc:	0802f714 	.word	0x0802f714

0800f900 <ip_RouteTable_get_cell_value>:

static snmp_err_t
ip_RouteTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b08a      	sub	sp, #40	@ 0x28
 800f904:	af02      	add	r7, sp, #8
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	603b      	str	r3, [r7, #0]
 800f90c:	4613      	mov	r3, r2
 800f90e:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t test_ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_RouteTable_oid_ranges, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges))) {
 800f910:	79f9      	ldrb	r1, [r7, #7]
 800f912:	2304      	movs	r3, #4
 800f914:	4a22      	ldr	r2, [pc, #136]	@ (800f9a0 <ip_RouteTable_get_cell_value+0xa0>)
 800f916:	68b8      	ldr	r0, [r7, #8]
 800f918:	f7ff fa96 	bl	800ee48 <snmp_oid_in_range>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d101      	bne.n	800f926 <ip_RouteTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f922:	23f1      	movs	r3, #241	@ 0xf1
 800f924:	e038      	b.n	800f998 <ip_RouteTable_get_cell_value+0x98>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &test_ip); /* we know it succeeds because of oid_in_range check above */
 800f926:	f107 0318 	add.w	r3, r7, #24
 800f92a:	4619      	mov	r1, r3
 800f92c:	68b8      	ldr	r0, [r7, #8]
 800f92e:	f7fe fb3d 	bl	800dfac <snmp_oid_to_ip4>

  /* default route is on default netif */
  if (ip4_addr_isany_val(test_ip) && (netif_default != NULL)) {
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d10e      	bne.n	800f956 <ip_RouteTable_get_cell_value+0x56>
 800f938:	4b1a      	ldr	r3, [pc, #104]	@ (800f9a4 <ip_RouteTable_get_cell_value+0xa4>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00a      	beq.n	800f956 <ip_RouteTable_get_cell_value+0x56>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core(netif_default, 1, column, value, value_len);
 800f940:	4b18      	ldr	r3, [pc, #96]	@ (800f9a4 <ip_RouteTable_get_cell_value+0xa4>)
 800f942:	6818      	ldr	r0, [r3, #0]
 800f944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	2101      	movs	r1, #1
 800f94e:	f7ff ff35 	bl	800f7bc <ip_RouteTable_get_cell_value_core>
 800f952:	4603      	mov	r3, r0
 800f954:	e020      	b.n	800f998 <ip_RouteTable_get_cell_value+0x98>
  }

  /* find netif with requested route */
  netif = netif_list;
 800f956:	4b14      	ldr	r3, [pc, #80]	@ (800f9a8 <ip_RouteTable_get_cell_value+0xa8>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 800f95c:	e018      	b.n	800f990 <ip_RouteTable_get_cell_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	3304      	adds	r3, #4
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	3308      	adds	r3, #8
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4013      	ands	r3, r2
 800f96c:	617b      	str	r3, [r7, #20]

    if (ip4_addr_cmp(&dst, &test_ip)) {
 800f96e:	697a      	ldr	r2, [r7, #20]
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	429a      	cmp	r2, r3
 800f974:	d109      	bne.n	800f98a <ip_RouteTable_get_cell_value+0x8a>
      /* fill in object properties */
      return ip_RouteTable_get_cell_value_core(netif, 0, column, value, value_len);
 800f976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	2100      	movs	r1, #0
 800f980:	69f8      	ldr	r0, [r7, #28]
 800f982:	f7ff ff1b 	bl	800f7bc <ip_RouteTable_get_cell_value_core>
 800f986:	4603      	mov	r3, r0
 800f988:	e006      	b.n	800f998 <ip_RouteTable_get_cell_value+0x98>
    }

    netif = netif->next;
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d1e3      	bne.n	800f95e <ip_RouteTable_get_cell_value+0x5e>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f996:	23f1      	movs	r3, #241	@ 0xf1
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3720      	adds	r7, #32
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	0802f9a4 	.word	0x0802f9a4
 800f9a4:	2000bc1c 	.word	0x2000bc1c
 800f9a8:	2000bc18 	.word	0x2000bc18

0800f9ac <ip_RouteTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_RouteTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800f9ac:	b590      	push	{r4, r7, lr}
 800f9ae:	b097      	sub	sp, #92	@ 0x5c
 800f9b0:	af02      	add	r7, sp, #8
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]
 800f9b8:	603b      	str	r3, [r7, #0]
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];
  u32_t test_oid[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges));
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	1d19      	adds	r1, r3, #4
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	781a      	ldrb	r2, [r3, #0]
 800f9c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f9c6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800f9ca:	2404      	movs	r4, #4
 800f9cc:	9400      	str	r4, [sp, #0]
 800f9ce:	f7ff f9d6 	bl	800ed7e <snmp_next_oid_init>

  /* check default route */
  if (netif_default != NULL) {
 800f9d2:	4b30      	ldr	r3, [pc, #192]	@ (800fa94 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00e      	beq.n	800f9f8 <ip_RouteTable_get_next_cell_instance_and_value+0x4c>
    snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[0]);
 800f9da:	f107 0318 	add.w	r3, r7, #24
 800f9de:	4619      	mov	r1, r3
 800f9e0:	482d      	ldr	r0, [pc, #180]	@ (800fa98 <ip_RouteTable_get_next_cell_instance_and_value+0xec>)
 800f9e2:	f7fe fb6b 	bl	800e0bc <snmp_ip4_to_oid>
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif_default);
 800f9e6:	4b2b      	ldr	r3, [pc, #172]	@ (800fa94 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f107 0118 	add.w	r1, r7, #24
 800f9ee:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800f9f2:	2204      	movs	r2, #4
 800f9f4:	f7ff f9e2 	bl	800edbc <snmp_next_oid_check>
  }

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800f9f8:	4b28      	ldr	r3, [pc, #160]	@ (800fa9c <ip_RouteTable_get_next_cell_instance_and_value+0xf0>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 800f9fe:	e01d      	b.n	800fa3c <ip_RouteTable_get_next_cell_instance_and_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800fa00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa02:	3304      	adds	r3, #4
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa08:	3308      	adds	r3, #8
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4013      	ands	r3, r2
 800fa0e:	617b      	str	r3, [r7, #20]

    /* check generated OID: is it a candidate for the next one? */
    if (!ip4_addr_isany_val(dst)) {
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00f      	beq.n	800fa36 <ip_RouteTable_get_next_cell_instance_and_value+0x8a>
      snmp_ip4_to_oid(&dst, &test_oid[0]);
 800fa16:	f107 0218 	add.w	r2, r7, #24
 800fa1a:	f107 0314 	add.w	r3, r7, #20
 800fa1e:	4611      	mov	r1, r2
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fe fb4b 	bl	800e0bc <snmp_ip4_to_oid>
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif);
 800fa26:	f107 0118 	add.w	r1, r7, #24
 800fa2a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800fa2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa30:	2204      	movs	r2, #4
 800fa32:	f7ff f9c3 	bl	800edbc <snmp_next_oid_check>
    }

    netif = netif->next;
 800fa36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 800fa3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d1de      	bne.n	800fa00 <ip_RouteTable_get_next_cell_instance_and_value+0x54>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800fa42:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d11e      	bne.n	800fa88 <ip_RouteTable_get_next_cell_instance_and_value+0xdc>
    ip4_addr_t dst;
    snmp_oid_to_ip4(&result_temp[0], &dst);
 800fa4a:	f107 0210 	add.w	r2, r7, #16
 800fa4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fa52:	4611      	mov	r1, r2
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fe faa9 	bl	800dfac <snmp_oid_to_ip4>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800fa5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa5c:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800fa60:	4619      	mov	r1, r3
 800fa62:	68b8      	ldr	r0, [r7, #8]
 800fa64:	f7fe fc08 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core((struct netif*)state.reference, ip4_addr_isany_val(dst), column, value, value_len);
 800fa68:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	bf0c      	ite	eq
 800fa70:	2301      	moveq	r3, #1
 800fa72:	2300      	movne	r3, #0
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	4619      	mov	r1, r3
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	f7ff fe9c 	bl	800f7bc <ip_RouteTable_get_cell_value_core>
 800fa84:	4603      	mov	r3, r0
 800fa86:	e000      	b.n	800fa8a <ip_RouteTable_get_next_cell_instance_and_value+0xde>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800fa88:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3754      	adds	r7, #84	@ 0x54
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd90      	pop	{r4, r7, pc}
 800fa92:	bf00      	nop
 800fa94:	2000bc1c 	.word	0x2000bc1c
 800fa98:	0803064c 	.word	0x0803064c
 800fa9c:	2000bc18 	.word	0x2000bc18

0800faa0 <ip_NetToMediaTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D    */
};

static snmp_err_t
ip_NetToMediaTable_get_cell_value_core(u8_t arp_table_index, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60b9      	str	r1, [r7, #8]
 800faa8:	607a      	str	r2, [r7, #4]
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	4603      	mov	r3, r0
 800faae:	73fb      	strb	r3, [r7, #15]
  ip4_addr_t *ip;
  struct netif *netif;
  struct eth_addr *ethaddr;

  etharp_get_entry(arp_table_index, &ip, &netif, &ethaddr);
 800fab0:	f107 0314 	add.w	r3, r7, #20
 800fab4:	f107 0218 	add.w	r2, r7, #24
 800fab8:	f107 011c 	add.w	r1, r7, #28
 800fabc:	7bf8      	ldrb	r0, [r7, #15]
 800fabe:	f00e fc2f 	bl	801e320 <etharp_get_entry>

  /* value */
  switch (*column) {
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3b01      	subs	r3, #1
 800fac8:	2b03      	cmp	r3, #3
 800faca:	d824      	bhi.n	800fb16 <ip_NetToMediaTable_get_cell_value_core+0x76>
 800facc:	a201      	add	r2, pc, #4	@ (adr r2, 800fad4 <ip_NetToMediaTable_get_cell_value_core+0x34>)
 800face:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad2:	bf00      	nop
 800fad4:	0800fae5 	.word	0x0800fae5
 800fad8:	0800faf7 	.word	0x0800faf7
 800fadc:	0800fb05 	.word	0x0800fb05
 800fae0:	0800fb0f 	.word	0x0800fb0f
  case 1: /* atIfIndex / ipNetToMediaIfIndex */
    value->u32 = netif_to_num(netif);
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fe fc8a 	bl	800e400 <netif_to_num>
 800faec:	4603      	mov	r3, r0
 800faee:	461a      	mov	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	601a      	str	r2, [r3, #0]
    break;
 800faf4:	e011      	b.n	800fb1a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 2: /* atPhysAddress / ipNetToMediaPhysAddress */
    value->ptr = ethaddr;
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	601a      	str	r2, [r3, #0]
    *value_len = sizeof(*ethaddr);
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	2206      	movs	r2, #6
 800fb00:	601a      	str	r2, [r3, #0]
    break;
 800fb02:	e00a      	b.n	800fb1a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 3: /* atNetAddress / ipNetToMediaNetAddress */
    value->u32 = ip->addr;
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	601a      	str	r2, [r3, #0]
    break;
 800fb0c:	e005      	b.n	800fb1a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 4: /* ipNetToMediaType */
    value->u32 = 3; /* dynamic*/
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2203      	movs	r2, #3
 800fb12:	601a      	str	r2, [r3, #0]
    break;
 800fb14:	e001      	b.n	800fb1a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800fb16:	23f1      	movs	r3, #241	@ 0xf1
 800fb18:	e000      	b.n	800fb1c <ip_NetToMediaTable_get_cell_value_core+0x7c>
  }

  return SNMP_ERR_NOERROR;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3720      	adds	r7, #32
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <ip_NetToMediaTable_get_cell_value>:

static snmp_err_t
ip_NetToMediaTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b08a      	sub	sp, #40	@ 0x28
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	603b      	str	r3, [r7, #0]
 800fb30:	4613      	mov	r3, r2
 800fb32:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip_in;
  u8_t netif_index;
  u8_t i;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_NetToMediaTable_oid_ranges, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges))) {
 800fb34:	79f9      	ldrb	r1, [r7, #7]
 800fb36:	2305      	movs	r3, #5
 800fb38:	4a25      	ldr	r2, [pc, #148]	@ (800fbd0 <ip_NetToMediaTable_get_cell_value+0xac>)
 800fb3a:	68b8      	ldr	r0, [r7, #8]
 800fb3c:	f7ff f984 	bl	800ee48 <snmp_oid_in_range>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d101      	bne.n	800fb4a <ip_NetToMediaTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800fb46:	23f1      	movs	r3, #241	@ 0xf1
 800fb48:	e03e      	b.n	800fbc8 <ip_NetToMediaTable_get_cell_value+0xa4>
  }

  /* get IP from incoming OID */
  netif_index = (u8_t)row_oid[0];
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  snmp_oid_to_ip4(&row_oid[1], &ip_in); /* we know it succeeds because of oid_in_range check above */
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	3304      	adds	r3, #4
 800fb56:	f107 0220 	add.w	r2, r7, #32
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fe fa25 	bl	800dfac <snmp_oid_to_ip4>

  /* find requested entry */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800fb62:	2300      	movs	r3, #0
 800fb64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fb68:	e029      	b.n	800fbbe <ip_NetToMediaTable_get_cell_value+0x9a>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 800fb6a:	f107 0314 	add.w	r3, r7, #20
 800fb6e:	f107 0218 	add.w	r2, r7, #24
 800fb72:	f107 011c 	add.w	r1, r7, #28
 800fb76:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800fb7a:	f00e fbd1 	bl	801e320 <etharp_get_entry>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d017      	beq.n	800fbb4 <ip_NetToMediaTable_get_cell_value+0x90>
      if ((netif_index == netif_to_num(netif)) && ip4_addr_cmp(&ip_in, ip)) {
 800fb84:	69bb      	ldr	r3, [r7, #24]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7fe fc3a 	bl	800e400 <netif_to_num>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	461a      	mov	r2, r3
 800fb90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d10d      	bne.n	800fbb4 <ip_NetToMediaTable_get_cell_value+0x90>
 800fb98:	6a3a      	ldr	r2, [r7, #32]
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d108      	bne.n	800fbb4 <ip_NetToMediaTable_get_cell_value+0x90>
        /* fill in object properties */
        return ip_NetToMediaTable_get_cell_value_core(i, column, value, value_len);
 800fba2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800fba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba8:	683a      	ldr	r2, [r7, #0]
 800fbaa:	68f9      	ldr	r1, [r7, #12]
 800fbac:	f7ff ff78 	bl	800faa0 <ip_NetToMediaTable_get_cell_value_core>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	e009      	b.n	800fbc8 <ip_NetToMediaTable_get_cell_value+0xa4>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800fbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbb8:	3301      	adds	r3, #1
 800fbba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fbbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbc2:	2b09      	cmp	r3, #9
 800fbc4:	d9d1      	bls.n	800fb6a <ip_NetToMediaTable_get_cell_value+0x46>
      }
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fbc6:	23f1      	movs	r3, #241	@ 0xf1
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3728      	adds	r7, #40	@ 0x28
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	0802f9c4 	.word	0x0802f9c4

0800fbd4 <ip_NetToMediaTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_NetToMediaTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800fbd4:	b590      	push	{r4, r7, lr}
 800fbd6:	b09b      	sub	sp, #108	@ 0x6c
 800fbd8:	af02      	add	r7, sp, #8
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
 800fbe0:	603b      	str	r3, [r7, #0]
  u8_t i;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges));
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	1d19      	adds	r1, r3, #4
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	781a      	ldrb	r2, [r3, #0]
 800fbea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800fbee:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800fbf2:	2405      	movs	r4, #5
 800fbf4:	9400      	str	r4, [sp, #0]
 800fbf6:	f7ff f8c2 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fc00:	e028      	b.n	800fc54 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x80>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 800fc02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc06:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fc0a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800fc0e:	f897 005f 	ldrb.w	r0, [r7, #95]	@ 0x5f
 800fc12:	f00e fb85 	bl	801e320 <etharp_get_entry>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d016      	beq.n	800fc4a <ip_NetToMediaTable_get_next_cell_instance_and_value+0x76>
      u32_t test_oid[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

      test_oid[0] = netif_to_num(netif);
 800fc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fe fbee 	bl	800e400 <netif_to_num>
 800fc24:	4603      	mov	r3, r0
 800fc26:	617b      	str	r3, [r7, #20]
      snmp_ip4_to_oid(ip, &test_oid[1]);
 800fc28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc2a:	f107 0314 	add.w	r3, r7, #20
 800fc2e:	3304      	adds	r3, #4
 800fc30:	4619      	mov	r1, r3
 800fc32:	4610      	mov	r0, r2
 800fc34:	f7fe fa42 	bl	800e0bc <snmp_ip4_to_oid>

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges), LWIP_PTR_NUMERIC_CAST(void*, i));
 800fc38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc3c:	f107 0114 	add.w	r1, r7, #20
 800fc40:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800fc44:	2205      	movs	r2, #5
 800fc46:	f7ff f8b9 	bl	800edbc <snmp_next_oid_check>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800fc4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc4e:	3301      	adds	r3, #1
 800fc50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fc54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc58:	2b09      	cmp	r3, #9
 800fc5a:	d9d2      	bls.n	800fc02 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800fc5c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10f      	bne.n	800fc84 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb0>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800fc64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc66:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	68b8      	ldr	r0, [r7, #8]
 800fc6e:	f7fe fb03 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return ip_NetToMediaTable_get_cell_value_core(LWIP_PTR_NUMERIC_CAST(u8_t, state.reference), column, value, value_len);
 800fc72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc74:	b2d8      	uxtb	r0, r3
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	68f9      	ldr	r1, [r7, #12]
 800fc7c:	f7ff ff10 	bl	800faa0 <ip_NetToMediaTable_get_cell_value_core>
 800fc80:	4603      	mov	r3, r0
 800fc82:	e000      	b.n	800fc86 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb2>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fc84:	23f1      	movs	r3, #241	@ 0xf1
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3764      	adds	r7, #100	@ 0x64
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd90      	pop	{r4, r7, pc}
	...

0800fc90 <snmp_get_value>:
#define MIB2_AUTH_TRAPS_DISABLED 2

/* --- snmp .1.3.6.1.2.1.11 ----------------------------------------------------- */
static s16_t
snmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	60fb      	str	r3, [r7, #12]
  switch (node->oid) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	3b01      	subs	r3, #1
 800fca4:	2b1f      	cmp	r3, #31
 800fca6:	f200 80df 	bhi.w	800fe68 <snmp_get_value+0x1d8>
 800fcaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fcb0 <snmp_get_value+0x20>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fd31 	.word	0x0800fd31
 800fcb4:	0800fd3b 	.word	0x0800fd3b
 800fcb8:	0800fd45 	.word	0x0800fd45
 800fcbc:	0800fd4f 	.word	0x0800fd4f
 800fcc0:	0800fd59 	.word	0x0800fd59
 800fcc4:	0800fd63 	.word	0x0800fd63
 800fcc8:	0800fe69 	.word	0x0800fe69
 800fccc:	0800fd6d 	.word	0x0800fd6d
 800fcd0:	0800fd77 	.word	0x0800fd77
 800fcd4:	0800fd81 	.word	0x0800fd81
 800fcd8:	0800fd8b 	.word	0x0800fd8b
 800fcdc:	0800fd95 	.word	0x0800fd95
 800fce0:	0800fd9f 	.word	0x0800fd9f
 800fce4:	0800fda9 	.word	0x0800fda9
 800fce8:	0800fdb3 	.word	0x0800fdb3
 800fcec:	0800fdbd 	.word	0x0800fdbd
 800fcf0:	0800fdc7 	.word	0x0800fdc7
 800fcf4:	0800fdd1 	.word	0x0800fdd1
 800fcf8:	0800fddb 	.word	0x0800fddb
 800fcfc:	0800fde5 	.word	0x0800fde5
 800fd00:	0800fdef 	.word	0x0800fdef
 800fd04:	0800fdf9 	.word	0x0800fdf9
 800fd08:	0800fe69 	.word	0x0800fe69
 800fd0c:	0800fe03 	.word	0x0800fe03
 800fd10:	0800fe0d 	.word	0x0800fe0d
 800fd14:	0800fe17 	.word	0x0800fe17
 800fd18:	0800fe21 	.word	0x0800fe21
 800fd1c:	0800fe2b 	.word	0x0800fe2b
 800fd20:	0800fe35 	.word	0x0800fe35
 800fd24:	0800fe3f 	.word	0x0800fe3f
 800fd28:	0800fe59 	.word	0x0800fe59
 800fd2c:	0800fe61 	.word	0x0800fe61
  case 1: /* snmpInPkts */
    *uint_ptr = snmp_stats.inpkts;
 800fd30:	4b51      	ldr	r3, [pc, #324]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	601a      	str	r2, [r3, #0]
    break;
 800fd38:	e098      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 2: /* snmpOutPkts */
    *uint_ptr = snmp_stats.outpkts;
 800fd3a:	4b4f      	ldr	r3, [pc, #316]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd3c:	685a      	ldr	r2, [r3, #4]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	601a      	str	r2, [r3, #0]
    break;
 800fd42:	e093      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 3: /* snmpInBadVersions */
    *uint_ptr = snmp_stats.inbadversions;
 800fd44:	4b4c      	ldr	r3, [pc, #304]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd46:	689a      	ldr	r2, [r3, #8]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	601a      	str	r2, [r3, #0]
    break;
 800fd4c:	e08e      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 4: /* snmpInBadCommunityNames */
    *uint_ptr = snmp_stats.inbadcommunitynames;
 800fd4e:	4b4a      	ldr	r3, [pc, #296]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd50:	68da      	ldr	r2, [r3, #12]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	601a      	str	r2, [r3, #0]
    break;
 800fd56:	e089      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 5: /* snmpInBadCommunityUses */
    *uint_ptr = snmp_stats.inbadcommunityuses;
 800fd58:	4b47      	ldr	r3, [pc, #284]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd5a:	691a      	ldr	r2, [r3, #16]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	601a      	str	r2, [r3, #0]
    break;
 800fd60:	e084      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 6: /* snmpInASNParseErrs */
    *uint_ptr = snmp_stats.inasnparseerrs;
 800fd62:	4b45      	ldr	r3, [pc, #276]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd64:	695a      	ldr	r2, [r3, #20]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	601a      	str	r2, [r3, #0]
    break;
 800fd6a:	e07f      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 8: /* snmpInTooBigs */
    *uint_ptr = snmp_stats.intoobigs;
 800fd6c:	4b42      	ldr	r3, [pc, #264]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd6e:	699a      	ldr	r2, [r3, #24]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	601a      	str	r2, [r3, #0]
    break;
 800fd74:	e07a      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 9: /* snmpInNoSuchNames */
    *uint_ptr = snmp_stats.innosuchnames;
 800fd76:	4b40      	ldr	r3, [pc, #256]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd78:	69da      	ldr	r2, [r3, #28]
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	601a      	str	r2, [r3, #0]
    break;
 800fd7e:	e075      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 10: /* snmpInBadValues */
    *uint_ptr = snmp_stats.inbadvalues;
 800fd80:	4b3d      	ldr	r3, [pc, #244]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd82:	6a1a      	ldr	r2, [r3, #32]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	601a      	str	r2, [r3, #0]
    break;
 800fd88:	e070      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 11: /* snmpInReadOnlys */
    *uint_ptr = snmp_stats.inreadonlys;
 800fd8a:	4b3b      	ldr	r3, [pc, #236]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	601a      	str	r2, [r3, #0]
    break;
 800fd92:	e06b      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 12: /* snmpInGenErrs */
    *uint_ptr = snmp_stats.ingenerrs;
 800fd94:	4b38      	ldr	r3, [pc, #224]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fd96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	601a      	str	r2, [r3, #0]
    break;
 800fd9c:	e066      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 13: /* snmpInTotalReqVars */
    *uint_ptr = snmp_stats.intotalreqvars;
 800fd9e:	4b36      	ldr	r3, [pc, #216]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fda0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	601a      	str	r2, [r3, #0]
    break;
 800fda6:	e061      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 14: /* snmpInTotalSetVars */
    *uint_ptr = snmp_stats.intotalsetvars;
 800fda8:	4b33      	ldr	r3, [pc, #204]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fdaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	601a      	str	r2, [r3, #0]
    break;
 800fdb0:	e05c      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 15: /* snmpInGetRequests */
    *uint_ptr = snmp_stats.ingetrequests;
 800fdb2:	4b31      	ldr	r3, [pc, #196]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fdb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	601a      	str	r2, [r3, #0]
    break;
 800fdba:	e057      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 16: /* snmpInGetNexts */
    *uint_ptr = snmp_stats.ingetnexts;
 800fdbc:	4b2e      	ldr	r3, [pc, #184]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fdbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	601a      	str	r2, [r3, #0]
    break;
 800fdc4:	e052      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 17: /* snmpInSetRequests */
    *uint_ptr = snmp_stats.insetrequests;
 800fdc6:	4b2c      	ldr	r3, [pc, #176]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fdc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	601a      	str	r2, [r3, #0]
    break;
 800fdce:	e04d      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 18: /* snmpInGetResponses */
    *uint_ptr = snmp_stats.ingetresponses;
 800fdd0:	4b29      	ldr	r3, [pc, #164]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fdd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	601a      	str	r2, [r3, #0]
    break;
 800fdd8:	e048      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 19: /* snmpInTraps */
    *uint_ptr = snmp_stats.intraps;
 800fdda:	4b27      	ldr	r3, [pc, #156]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	601a      	str	r2, [r3, #0]
    break;
 800fde2:	e043      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 20: /* snmpOutTooBigs */
    *uint_ptr = snmp_stats.outtoobigs;
 800fde4:	4b24      	ldr	r3, [pc, #144]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fde6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	601a      	str	r2, [r3, #0]
    break;
 800fdec:	e03e      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 21: /* snmpOutNoSuchNames */
    *uint_ptr = snmp_stats.outnosuchnames;
 800fdee:	4b22      	ldr	r3, [pc, #136]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fdf0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	601a      	str	r2, [r3, #0]
    break;
 800fdf6:	e039      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 22: /* snmpOutBadValues */
    *uint_ptr = snmp_stats.outbadvalues;
 800fdf8:	4b1f      	ldr	r3, [pc, #124]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fdfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	601a      	str	r2, [r3, #0]
    break;
 800fe00:	e034      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 24: /* snmpOutGenErrs */
    *uint_ptr = snmp_stats.outgenerrs;
 800fe02:	4b1d      	ldr	r3, [pc, #116]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fe04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	601a      	str	r2, [r3, #0]
    break;
 800fe0a:	e02f      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 25: /* snmpOutGetRequests */
    *uint_ptr = snmp_stats.outgetrequests;
 800fe0c:	4b1a      	ldr	r3, [pc, #104]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fe0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	601a      	str	r2, [r3, #0]
    break;
 800fe14:	e02a      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 26: /* snmpOutGetNexts */
    *uint_ptr = snmp_stats.outgetnexts;
 800fe16:	4b18      	ldr	r3, [pc, #96]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fe18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	601a      	str	r2, [r3, #0]
    break;
 800fe1e:	e025      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 27: /* snmpOutSetRequests */
    *uint_ptr = snmp_stats.outsetrequests;
 800fe20:	4b15      	ldr	r3, [pc, #84]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fe22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	601a      	str	r2, [r3, #0]
    break;
 800fe28:	e020      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 28: /* snmpOutGetResponses */
    *uint_ptr = snmp_stats.outgetresponses;
 800fe2a:	4b13      	ldr	r3, [pc, #76]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fe2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	601a      	str	r2, [r3, #0]
    break;
 800fe32:	e01b      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 29: /* snmpOutTraps */
    *uint_ptr = snmp_stats.outtraps;
 800fe34:	4b10      	ldr	r3, [pc, #64]	@ (800fe78 <snmp_get_value+0x1e8>)
 800fe36:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	601a      	str	r2, [r3, #0]
    break;
 800fe3c:	e016      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 30: /* snmpEnableAuthenTraps */
    if (snmp_get_auth_traps_enabled() == SNMP_AUTH_TRAPS_DISABLED) {
 800fe3e:	f003 ff05 	bl	8013c4c <snmp_get_auth_traps_enabled>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d103      	bne.n	800fe50 <snmp_get_value+0x1c0>
      *uint_ptr = MIB2_AUTH_TRAPS_DISABLED;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2202      	movs	r2, #2
 800fe4c:	601a      	str	r2, [r3, #0]
    } else {
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
    }
    break;
 800fe4e:	e00d      	b.n	800fe6c <snmp_get_value+0x1dc>
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2201      	movs	r2, #1
 800fe54:	601a      	str	r2, [r3, #0]
    break;
 800fe56:	e009      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 31: /* snmpSilentDrops */
    *uint_ptr = 0; /* not supported */
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	601a      	str	r2, [r3, #0]
    break;
 800fe5e:	e005      	b.n	800fe6c <snmp_get_value+0x1dc>
  case 32: /* snmpProxyDrops */
    *uint_ptr = 0; /* not supported */
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
    break;
 800fe66:	e001      	b.n	800fe6c <snmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("snmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e000      	b.n	800fe6e <snmp_get_value+0x1de>
  }

  return sizeof(*uint_ptr);
 800fe6c:	2304      	movs	r3, #4
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	20008584 	.word	0x20008584

0800fe7c <snmp_set_test>:

static snmp_err_t
snmp_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b087      	sub	sp, #28
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	460b      	mov	r3, r1
 800fe86:	607a      	str	r2, [r7, #4]
 800fe88:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 800fe8a:	230a      	movs	r3, #10
 800fe8c:	75fb      	strb	r3, [r7, #23]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b1e      	cmp	r3, #30
 800fe94:	d10b      	bne.n	800feae <snmp_set_test+0x32>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	613b      	str	r3, [r7, #16]

    /* we should have writable non-volatile mem here */
    if ((*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) || (*sint_ptr == MIB2_AUTH_TRAPS_ENABLED)) {
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d003      	beq.n	800feaa <snmp_set_test+0x2e>
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d101      	bne.n	800feae <snmp_set_test+0x32>
      ret = SNMP_ERR_NOERROR;
 800feaa:	2300      	movs	r3, #0
 800feac:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800feae:	7dfb      	ldrb	r3, [r7, #23]
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	371c      	adds	r7, #28
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bc80      	pop	{r7}
 800feb8:	4770      	bx	lr

0800feba <snmp_set_value>:

static snmp_err_t
snmp_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b086      	sub	sp, #24
 800febe:	af00      	add	r7, sp, #0
 800fec0:	60f8      	str	r0, [r7, #12]
 800fec2:	460b      	mov	r3, r1
 800fec4:	607a      	str	r2, [r7, #4]
 800fec6:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b1e      	cmp	r3, #30
 800fece:	d10c      	bne.n	800feea <snmp_set_value+0x30>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	617b      	str	r3, [r7, #20]
    if (*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) {
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b02      	cmp	r3, #2
 800feda:	d103      	bne.n	800fee4 <snmp_set_value+0x2a>
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_DISABLED);
 800fedc:	2000      	movs	r0, #0
 800fede:	f003 fea5 	bl	8013c2c <snmp_set_auth_traps_enabled>
 800fee2:	e002      	b.n	800feea <snmp_set_value+0x30>
    } else {
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_ENABLED);
 800fee4:	2001      	movs	r0, #1
 800fee6:	f003 fea1 	bl	8013c2c <snmp_set_auth_traps_enabled>
    }
  }

  return SNMP_ERR_NOERROR;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <system_get_value>:
}


static s16_t
system_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  const u8_t*  var = NULL;
 800fefe:	2300      	movs	r3, #0
 800ff00:	617b      	str	r3, [r7, #20]
  const s16_t* var_len;
  u16_t result;

  switch (node->oid) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3b01      	subs	r3, #1
 800ff08:	2b06      	cmp	r3, #6
 800ff0a:	d84f      	bhi.n	800ffac <system_get_value+0xb8>
 800ff0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ff14 <system_get_value+0x20>)
 800ff0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff12:	bf00      	nop
 800ff14:	0800ff31 	.word	0x0800ff31
 800ff18:	0800ff3f 	.word	0x0800ff3f
 800ff1c:	0800ff63 	.word	0x0800ff63
 800ff20:	0800ff79 	.word	0x0800ff79
 800ff24:	0800ff87 	.word	0x0800ff87
 800ff28:	0800ff95 	.word	0x0800ff95
 800ff2c:	0800ffa3 	.word	0x0800ffa3
  case 1: /* sysDescr */
    var     = sysdescr;
 800ff30:	4b31      	ldr	r3, [pc, #196]	@ (800fff8 <system_get_value+0x104>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysdescr_len;
 800ff36:	4b31      	ldr	r3, [pc, #196]	@ (800fffc <system_get_value+0x108>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	613b      	str	r3, [r7, #16]
    break;
 800ff3c:	e038      	b.n	800ffb0 <system_get_value+0xbc>
  case 2: /* sysObjectID */
    {
      const struct snmp_obj_id* dev_enterprise_oid = snmp_get_device_enterprise_oid();
 800ff3e:	f7fe f82b 	bl	800df98 <snmp_get_device_enterprise_oid>
 800ff42:	60b8      	str	r0, [r7, #8]
      MEMCPY(value, dev_enterprise_oid->id, dev_enterprise_oid->len * sizeof(u32_t));
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	1d19      	adds	r1, r3, #4
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	461a      	mov	r2, r3
 800ff50:	6838      	ldr	r0, [r7, #0]
 800ff52:	f011 fe92 	bl	8021c7a <memcpy>
      return dev_enterprise_oid->len * sizeof(u32_t);
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	b21b      	sxth	r3, r3
 800ff60:	e045      	b.n	800ffee <system_get_value+0xfa>
    }
  case 3: /* sysUpTime */
    MIB2_COPY_SYSUPTIME_TO((u32_t*)value);
 800ff62:	f7fb fb55 	bl	800b610 <sys_now>
 800ff66:	4603      	mov	r3, r0
 800ff68:	4a25      	ldr	r2, [pc, #148]	@ (8010000 <system_get_value+0x10c>)
 800ff6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff6e:	08da      	lsrs	r2, r3, #3
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	601a      	str	r2, [r3, #0]
    return sizeof(u32_t);
 800ff74:	2304      	movs	r3, #4
 800ff76:	e03a      	b.n	800ffee <system_get_value+0xfa>
  case 4: /* sysContact */
    var     = syscontact;
 800ff78:	4b22      	ldr	r3, [pc, #136]	@ (8010004 <system_get_value+0x110>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syscontact_len;
 800ff7e:	4b22      	ldr	r3, [pc, #136]	@ (8010008 <system_get_value+0x114>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	613b      	str	r3, [r7, #16]
    break;
 800ff84:	e014      	b.n	800ffb0 <system_get_value+0xbc>
  case 5: /* sysName */
    var     = sysname;
 800ff86:	4b21      	ldr	r3, [pc, #132]	@ (801000c <system_get_value+0x118>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysname_len;
 800ff8c:	4b20      	ldr	r3, [pc, #128]	@ (8010010 <system_get_value+0x11c>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	613b      	str	r3, [r7, #16]
    break;
 800ff92:	e00d      	b.n	800ffb0 <system_get_value+0xbc>
  case 6: /* sysLocation */
    var     = syslocation;
 800ff94:	4b1f      	ldr	r3, [pc, #124]	@ (8010014 <system_get_value+0x120>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syslocation_len;
 800ff9a:	4b1f      	ldr	r3, [pc, #124]	@ (8010018 <system_get_value+0x124>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	613b      	str	r3, [r7, #16]
    break;
 800ffa0:	e006      	b.n	800ffb0 <system_get_value+0xbc>
  case 7: /* sysServices */
    *(s32_t*)value = SNMP_SYSSERVICES;
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	2248      	movs	r2, #72	@ 0x48
 800ffa6:	601a      	str	r2, [r3, #0]
    return sizeof(s32_t);
 800ffa8:	2304      	movs	r3, #4
 800ffaa:	e020      	b.n	800ffee <system_get_value+0xfa>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	e01e      	b.n	800ffee <system_get_value+0xfa>
  }

  /* handle string values (OID 1,4,5 and 6) */
  LWIP_ASSERT("", (value != NULL));
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d106      	bne.n	800ffc4 <system_get_value+0xd0>
 800ffb6:	4b19      	ldr	r3, [pc, #100]	@ (801001c <system_get_value+0x128>)
 800ffb8:	f240 120f 	movw	r2, #271	@ 0x10f
 800ffbc:	4918      	ldr	r1, [pc, #96]	@ (8010020 <system_get_value+0x12c>)
 800ffbe:	4819      	ldr	r0, [pc, #100]	@ (8010024 <system_get_value+0x130>)
 800ffc0:	f011 fbb0 	bl	8021724 <iprintf>
  if (var_len == NULL) {
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d105      	bne.n	800ffd6 <system_get_value+0xe2>
    result = (s16_t)strlen((const char*)var);
 800ffca:	6978      	ldr	r0, [r7, #20]
 800ffcc:	f7f0 f906 	bl	80001dc <strlen>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	81fb      	strh	r3, [r7, #14]
 800ffd4:	e003      	b.n	800ffde <system_get_value+0xea>
  } else {
    result = *var_len;
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffdc:	81fb      	strh	r3, [r7, #14]
  }
  MEMCPY(value, var, result);
 800ffde:	89fb      	ldrh	r3, [r7, #14]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	6979      	ldr	r1, [r7, #20]
 800ffe4:	6838      	ldr	r0, [r7, #0]
 800ffe6:	f011 fe48 	bl	8021c7a <memcpy>
  return result;
 800ffea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3718      	adds	r7, #24
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	200000f4 	.word	0x200000f4
 800fffc:	200085f0 	.word	0x200085f0
 8010000:	cccccccd 	.word	0xcccccccd
 8010004:	200000f8 	.word	0x200000f8
 8010008:	200085f4 	.word	0x200085f4
 801000c:	200000fc 	.word	0x200000fc
 8010010:	20008604 	.word	0x20008604
 8010014:	20000100 	.word	0x20000100
 8010018:	20008614 	.word	0x20008614
 801001c:	08024ed8 	.word	0x08024ed8
 8010020:	08024f1c 	.word	0x08024f1c
 8010024:	08024f20 	.word	0x08024f20

08010028 <system_set_test>:

static snmp_err_t
system_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8010028:	b480      	push	{r7}
 801002a:	b089      	sub	sp, #36	@ 0x24
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	460b      	mov	r3, r1
 8010032:	607a      	str	r2, [r7, #4]
 8010034:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 8010036:	230a      	movs	r3, #10
 8010038:	77fb      	strb	r3, [r7, #31]
  const u16_t* var_bufsize  = NULL;
 801003a:	2300      	movs	r3, #0
 801003c:	61bb      	str	r3, [r7, #24]
  const u16_t* var_wr_len;

  LWIP_UNUSED_ARG(value);

  switch (node->oid) {
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2b06      	cmp	r3, #6
 8010044:	d012      	beq.n	801006c <system_set_test+0x44>
 8010046:	2b06      	cmp	r3, #6
 8010048:	d816      	bhi.n	8010078 <system_set_test+0x50>
 801004a:	2b04      	cmp	r3, #4
 801004c:	d002      	beq.n	8010054 <system_set_test+0x2c>
 801004e:	2b05      	cmp	r3, #5
 8010050:	d006      	beq.n	8010060 <system_set_test+0x38>
 8010052:	e011      	b.n	8010078 <system_set_test+0x50>
  case 4: /* sysContact */
    var_bufsize  = &syscontact_bufsize;
 8010054:	4b19      	ldr	r3, [pc, #100]	@ (80100bc <system_set_test+0x94>)
 8010056:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syscontact_wr_len;
 8010058:	4b19      	ldr	r3, [pc, #100]	@ (80100c0 <system_set_test+0x98>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	617b      	str	r3, [r7, #20]
    break;
 801005e:	e00d      	b.n	801007c <system_set_test+0x54>
  case 5: /* sysName */
    var_bufsize  = &sysname_bufsize;
 8010060:	4b18      	ldr	r3, [pc, #96]	@ (80100c4 <system_set_test+0x9c>)
 8010062:	61bb      	str	r3, [r7, #24]
    var_wr_len   = sysname_wr_len;
 8010064:	4b18      	ldr	r3, [pc, #96]	@ (80100c8 <system_set_test+0xa0>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	617b      	str	r3, [r7, #20]
    break;
 801006a:	e007      	b.n	801007c <system_set_test+0x54>
  case 6: /* sysLocation */
    var_bufsize  = &syslocation_bufsize;
 801006c:	4b17      	ldr	r3, [pc, #92]	@ (80100cc <system_set_test+0xa4>)
 801006e:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syslocation_wr_len;
 8010070:	4b17      	ldr	r3, [pc, #92]	@ (80100d0 <system_set_test+0xa8>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	617b      	str	r3, [r7, #20]
    break;
 8010076:	e001      	b.n	801007c <system_set_test+0x54>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_test(): unknown id: %"S32_F"\n", node->oid));
    return ret;
 8010078:	7ffb      	ldrb	r3, [r7, #31]
 801007a:	e019      	b.n	80100b0 <system_set_test+0x88>
  }

  /* check if value is writable at all */
  if (*var_bufsize > 0) {
 801007c:	69bb      	ldr	r3, [r7, #24]
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d012      	beq.n	80100aa <system_set_test+0x82>
    if (var_wr_len == NULL) {
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d107      	bne.n	801009a <system_set_test+0x72>
      /* we have to take the terminating 0 into account */
      if (len < *var_bufsize) {
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	897a      	ldrh	r2, [r7, #10]
 8010090:	429a      	cmp	r2, r3
 8010092:	d20c      	bcs.n	80100ae <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 8010094:	2300      	movs	r3, #0
 8010096:	77fb      	strb	r3, [r7, #31]
 8010098:	e009      	b.n	80100ae <system_set_test+0x86>
      }
    } else {
      if (len <= *var_bufsize) {
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	897a      	ldrh	r2, [r7, #10]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d804      	bhi.n	80100ae <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 80100a4:	2300      	movs	r3, #0
 80100a6:	77fb      	strb	r3, [r7, #31]
 80100a8:	e001      	b.n	80100ae <system_set_test+0x86>
      }
    }
  } else {
    ret = SNMP_ERR_NOTWRITABLE;
 80100aa:	2311      	movs	r3, #17
 80100ac:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80100ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3724      	adds	r7, #36	@ 0x24
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bc80      	pop	{r7}
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	20008600 	.word	0x20008600
 80100c0:	200085fc 	.word	0x200085fc
 80100c4:	20008610 	.word	0x20008610
 80100c8:	2000860c 	.word	0x2000860c
 80100cc:	20008620 	.word	0x20008620
 80100d0:	2000861c 	.word	0x2000861c

080100d4 <system_set_value>:

static snmp_err_t
system_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b086      	sub	sp, #24
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	460b      	mov	r3, r1
 80100de:	607a      	str	r2, [r7, #4]
 80100e0:	817b      	strh	r3, [r7, #10]
  u8_t*  var_wr = NULL;
 80100e2:	2300      	movs	r3, #0
 80100e4:	617b      	str	r3, [r7, #20]
  u16_t* var_wr_len;

  switch (node->oid) {
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	2b06      	cmp	r3, #6
 80100ec:	d014      	beq.n	8010118 <system_set_value+0x44>
 80100ee:	2b06      	cmp	r3, #6
 80100f0:	d819      	bhi.n	8010126 <system_set_value+0x52>
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d002      	beq.n	80100fc <system_set_value+0x28>
 80100f6:	2b05      	cmp	r3, #5
 80100f8:	d007      	beq.n	801010a <system_set_value+0x36>
 80100fa:	e014      	b.n	8010126 <system_set_value+0x52>
  case 4: /* sysContact */
    var_wr     = syscontact_wr;
 80100fc:	4b1b      	ldr	r3, [pc, #108]	@ (801016c <system_set_value+0x98>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	617b      	str	r3, [r7, #20]
    var_wr_len = syscontact_wr_len;
 8010102:	4b1b      	ldr	r3, [pc, #108]	@ (8010170 <system_set_value+0x9c>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	613b      	str	r3, [r7, #16]
    break;
 8010108:	e00f      	b.n	801012a <system_set_value+0x56>
  case 5: /* sysName */
    var_wr     = sysname_wr;
 801010a:	4b1a      	ldr	r3, [pc, #104]	@ (8010174 <system_set_value+0xa0>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	617b      	str	r3, [r7, #20]
    var_wr_len = sysname_wr_len;
 8010110:	4b19      	ldr	r3, [pc, #100]	@ (8010178 <system_set_value+0xa4>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	613b      	str	r3, [r7, #16]
    break;
 8010116:	e008      	b.n	801012a <system_set_value+0x56>
  case 6: /* sysLocation */
    var_wr     = syslocation_wr;
 8010118:	4b18      	ldr	r3, [pc, #96]	@ (801017c <system_set_value+0xa8>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	617b      	str	r3, [r7, #20]
    var_wr_len = syslocation_wr_len;
 801011e:	4b18      	ldr	r3, [pc, #96]	@ (8010180 <system_set_value+0xac>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	613b      	str	r3, [r7, #16]
    break;
 8010124:	e001      	b.n	801012a <system_set_value+0x56>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_value(): unknown id: %"S32_F"\n", node->oid));
    return SNMP_ERR_GENERROR;
 8010126:	2305      	movs	r3, #5
 8010128:	e01c      	b.n	8010164 <system_set_value+0x90>
  }

  /* no need to check size of target buffer, this was already done in set_test method */
  LWIP_ASSERT("", var_wr != NULL);
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d106      	bne.n	801013e <system_set_value+0x6a>
 8010130:	4b14      	ldr	r3, [pc, #80]	@ (8010184 <system_set_value+0xb0>)
 8010132:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8010136:	4914      	ldr	r1, [pc, #80]	@ (8010188 <system_set_value+0xb4>)
 8010138:	4814      	ldr	r0, [pc, #80]	@ (801018c <system_set_value+0xb8>)
 801013a:	f011 faf3 	bl	8021724 <iprintf>
  MEMCPY(var_wr, value, len);
 801013e:	897b      	ldrh	r3, [r7, #10]
 8010140:	461a      	mov	r2, r3
 8010142:	6879      	ldr	r1, [r7, #4]
 8010144:	6978      	ldr	r0, [r7, #20]
 8010146:	f011 fd98 	bl	8021c7a <memcpy>
  
  if (var_wr_len == NULL) {
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d105      	bne.n	801015c <system_set_value+0x88>
    /* add terminating 0 */
    var_wr[len] = 0;
 8010150:	897b      	ldrh	r3, [r7, #10]
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	4413      	add	r3, r2
 8010156:	2200      	movs	r2, #0
 8010158:	701a      	strb	r2, [r3, #0]
 801015a:	e002      	b.n	8010162 <system_set_value+0x8e>
  } else {
    *var_wr_len = len;
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	897a      	ldrh	r2, [r7, #10]
 8010160:	801a      	strh	r2, [r3, #0]
  }

  return SNMP_ERR_NOERROR;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3718      	adds	r7, #24
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	200085f8 	.word	0x200085f8
 8010170:	200085fc 	.word	0x200085fc
 8010174:	20008608 	.word	0x20008608
 8010178:	2000860c 	.word	0x2000860c
 801017c:	20008618 	.word	0x20008618
 8010180:	2000861c 	.word	0x2000861c
 8010184:	08024ed8 	.word	0x08024ed8
 8010188:	08024f1c 	.word	0x08024f1c
 801018c:	08024f20 	.word	0x08024f20

08010190 <tcp_get_value>:

/* --- tcp .1.3.6.1.2.1.6 ----------------------------------------------------- */

static s16_t
tcp_get_value(struct snmp_node_instance* instance, void* value)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	60fb      	str	r3, [r7, #12]
  s32_t *sint_ptr = (s32_t*)value;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	2b11      	cmp	r3, #17
 80101ac:	f200 80a7 	bhi.w	80102fe <tcp_get_value+0x16e>
 80101b0:	a201      	add	r2, pc, #4	@ (adr r2, 80101b8 <tcp_get_value+0x28>)
 80101b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b6:	bf00      	nop
 80101b8:	08010201 	.word	0x08010201
 80101bc:	0801020b 	.word	0x0801020b
 80101c0:	08010217 	.word	0x08010217
 80101c4:	08010223 	.word	0x08010223
 80101c8:	0801022d 	.word	0x0801022d
 80101cc:	0801023b 	.word	0x0801023b
 80101d0:	08010249 	.word	0x08010249
 80101d4:	08010257 	.word	0x08010257
 80101d8:	08010265 	.word	0x08010265
 80101dc:	0801029d 	.word	0x0801029d
 80101e0:	080102ab 	.word	0x080102ab
 80101e4:	080102b9 	.word	0x080102b9
 80101e8:	080102ff 	.word	0x080102ff
 80101ec:	080102c7 	.word	0x080102c7
 80101f0:	080102d5 	.word	0x080102d5
 80101f4:	080102ff 	.word	0x080102ff
 80101f8:	080102e3 	.word	0x080102e3
 80101fc:	080102f1 	.word	0x080102f1
  case 1: /* tcpRtoAlgorithm, vanj(4) */
    *sint_ptr = 4;
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	2204      	movs	r2, #4
 8010204:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010206:	2304      	movs	r3, #4
 8010208:	e07b      	b.n	8010302 <tcp_get_value+0x172>
  case 2: /* tcpRtoMin */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 1000;
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010210:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010212:	2304      	movs	r3, #4
 8010214:	e075      	b.n	8010302 <tcp_get_value+0x172>
  case 3: /* tcpRtoMax */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 60000;
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	f64e 2260 	movw	r2, #60000	@ 0xea60
 801021c:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 801021e:	2304      	movs	r3, #4
 8010220:	e06f      	b.n	8010302 <tcp_get_value+0x172>
  case 4: /* tcpMaxConn */
    *sint_ptr = MEMP_NUM_TCP_PCB;
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	2205      	movs	r2, #5
 8010226:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010228:	2304      	movs	r3, #4
 801022a:	e06a      	b.n	8010302 <tcp_get_value+0x172>
  case 5: /* tcpActiveOpens */
    *uint_ptr = STATS_GET(mib2.tcpactiveopens);
 801022c:	4b37      	ldr	r3, [pc, #220]	@ (801030c <tcp_get_value+0x17c>)
 801022e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010236:	2304      	movs	r3, #4
 8010238:	e063      	b.n	8010302 <tcp_get_value+0x172>
  case 6: /* tcpPassiveOpens */
    *uint_ptr = STATS_GET(mib2.tcppassiveopens);
 801023a:	4b34      	ldr	r3, [pc, #208]	@ (801030c <tcp_get_value+0x17c>)
 801023c:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010244:	2304      	movs	r3, #4
 8010246:	e05c      	b.n	8010302 <tcp_get_value+0x172>
  case 7: /* tcpAttemptFails */
    *uint_ptr = STATS_GET(mib2.tcpattemptfails);
 8010248:	4b30      	ldr	r3, [pc, #192]	@ (801030c <tcp_get_value+0x17c>)
 801024a:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010252:	2304      	movs	r3, #4
 8010254:	e055      	b.n	8010302 <tcp_get_value+0x172>
  case 8: /* tcpEstabResets */
    *uint_ptr = STATS_GET(mib2.tcpestabresets);
 8010256:	4b2d      	ldr	r3, [pc, #180]	@ (801030c <tcp_get_value+0x17c>)
 8010258:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010260:	2304      	movs	r3, #4
 8010262:	e04e      	b.n	8010302 <tcp_get_value+0x172>
  case 9: /* tcpCurrEstab */
    {
      u16_t tcpcurrestab = 0;
 8010264:	2300      	movs	r3, #0
 8010266:	82fb      	strh	r3, [r7, #22]
      struct tcp_pcb *pcb = tcp_active_pcbs;
 8010268:	4b29      	ldr	r3, [pc, #164]	@ (8010310 <tcp_get_value+0x180>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 801026e:	e00d      	b.n	801028c <tcp_get_value+0xfc>
        if ((pcb->state == ESTABLISHED) ||
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	7d1b      	ldrb	r3, [r3, #20]
 8010274:	2b04      	cmp	r3, #4
 8010276:	d003      	beq.n	8010280 <tcp_get_value+0xf0>
            (pcb->state == CLOSE_WAIT)) {
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	7d1b      	ldrb	r3, [r3, #20]
        if ((pcb->state == ESTABLISHED) ||
 801027c:	2b07      	cmp	r3, #7
 801027e:	d102      	bne.n	8010286 <tcp_get_value+0xf6>
          tcpcurrestab++;
 8010280:	8afb      	ldrh	r3, [r7, #22]
 8010282:	3301      	adds	r3, #1
 8010284:	82fb      	strh	r3, [r7, #22]
        }
        pcb = pcb->next;
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1ee      	bne.n	8010270 <tcp_get_value+0xe0>
      }
      *uint_ptr = tcpcurrestab;
 8010292:	8afa      	ldrh	r2, [r7, #22]
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	601a      	str	r2, [r3, #0]
    }
    return sizeof(*uint_ptr);
 8010298:	2304      	movs	r3, #4
 801029a:	e032      	b.n	8010302 <tcp_get_value+0x172>
  case 10: /* tcpInSegs */
    *uint_ptr = STATS_GET(mib2.tcpinsegs);
 801029c:	4b1b      	ldr	r3, [pc, #108]	@ (801030c <tcp_get_value+0x17c>)
 801029e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80102a6:	2304      	movs	r3, #4
 80102a8:	e02b      	b.n	8010302 <tcp_get_value+0x172>
  case 11: /* tcpOutSegs */
    *uint_ptr = STATS_GET(mib2.tcpoutsegs);
 80102aa:	4b18      	ldr	r3, [pc, #96]	@ (801030c <tcp_get_value+0x17c>)
 80102ac:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80102b4:	2304      	movs	r3, #4
 80102b6:	e024      	b.n	8010302 <tcp_get_value+0x172>
  case 12: /* tcpRetransSegs */
    *uint_ptr = STATS_GET(mib2.tcpretranssegs);
 80102b8:	4b14      	ldr	r3, [pc, #80]	@ (801030c <tcp_get_value+0x17c>)
 80102ba:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80102c2:	2304      	movs	r3, #4
 80102c4:	e01d      	b.n	8010302 <tcp_get_value+0x172>
  case 14: /* tcpInErrs */
    *uint_ptr = STATS_GET(mib2.tcpinerrs);
 80102c6:	4b11      	ldr	r3, [pc, #68]	@ (801030c <tcp_get_value+0x17c>)
 80102c8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80102d0:	2304      	movs	r3, #4
 80102d2:	e016      	b.n	8010302 <tcp_get_value+0x172>
  case 15: /* tcpOutRsts */
    *uint_ptr = STATS_GET(mib2.tcpoutrsts);
 80102d4:	4b0d      	ldr	r3, [pc, #52]	@ (801030c <tcp_get_value+0x17c>)
 80102d6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80102de:	2304      	movs	r3, #4
 80102e0:	e00f      	b.n	8010302 <tcp_get_value+0x172>
  case 17: /* tcpHCInSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 80102e2:	2208      	movs	r2, #8
 80102e4:	2100      	movs	r1, #0
 80102e6:	6838      	ldr	r0, [r7, #0]
 80102e8:	f011 fbf2 	bl	8021ad0 <memset>
    return 2*sizeof(u32_t);
 80102ec:	2308      	movs	r3, #8
 80102ee:	e008      	b.n	8010302 <tcp_get_value+0x172>
  case 18: /* tcpHCOutSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 80102f0:	2208      	movs	r2, #8
 80102f2:	2100      	movs	r1, #0
 80102f4:	6838      	ldr	r0, [r7, #0]
 80102f6:	f011 fbeb 	bl	8021ad0 <memset>
    return 2*sizeof(u32_t);
 80102fa:	2308      	movs	r3, #8
 80102fc:	e001      	b.n	8010302 <tcp_get_value+0x172>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("tcp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 80102fe:	bf00      	nop
  }

  return 0;
 8010300:	2300      	movs	r3, #0
}
 8010302:	4618      	mov	r0, r3
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	2000bc24 	.word	0x2000bc24
 8010310:	2000bdc8 	.word	0x2000bdc8

08010314 <tcp_ConnTable_get_cell_value_core>:
  { 0, 0xffff }  /* Port */
};

static snmp_err_t
tcp_ConnTable_get_cell_value_core(struct tcp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
 8010320:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  /* value */
  switch (*column) {
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3b01      	subs	r3, #1
 8010328:	2b04      	cmp	r3, #4
 801032a:	d83b      	bhi.n	80103a4 <tcp_ConnTable_get_cell_value_core+0x90>
 801032c:	a201      	add	r2, pc, #4	@ (adr r2, 8010334 <tcp_ConnTable_get_cell_value_core+0x20>)
 801032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010332:	bf00      	nop
 8010334:	08010349 	.word	0x08010349
 8010338:	08010357 	.word	0x08010357
 801033c:	08010361 	.word	0x08010361
 8010340:	0801036d 	.word	0x0801036d
 8010344:	08010389 	.word	0x08010389
  case 1: /* tcpConnState */
    value->u32 = pcb->state + 1;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	7d1b      	ldrb	r3, [r3, #20]
 801034c:	3301      	adds	r3, #1
 801034e:	461a      	mov	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	601a      	str	r2, [r3, #0]
    break;
 8010354:	e02e      	b.n	80103b4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 2: /* tcpConnLocalAddress */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	601a      	str	r2, [r3, #0]
    break;
 801035e:	e029      	b.n	80103b4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 3: /* tcpConnLocalPort */
    value->u32 = pcb->local_port;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	8adb      	ldrh	r3, [r3, #22]
 8010364:	461a      	mov	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	601a      	str	r2, [r3, #0]
    break;
 801036a:	e023      	b.n	80103b4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 4: /* tcpConnRemAddress */
    if (pcb->state == LISTEN) {
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	7d1b      	ldrb	r3, [r3, #20]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d104      	bne.n	801037e <tcp_ConnTable_get_cell_value_core+0x6a>
      value->u32 = IP4_ADDR_ANY4->addr;
 8010374:	4b12      	ldr	r3, [pc, #72]	@ (80103c0 <tcp_ConnTable_get_cell_value_core+0xac>)
 8010376:	681a      	ldr	r2, [r3, #0]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
    }
    break;
 801037c:	e01a      	b.n	80103b4 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	685a      	ldr	r2, [r3, #4]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	601a      	str	r2, [r3, #0]
    break;
 8010386:	e015      	b.n	80103b4 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 5: /* tcpConnRemPort */
    if (pcb->state == LISTEN) {
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	7d1b      	ldrb	r3, [r3, #20]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d103      	bne.n	8010398 <tcp_ConnTable_get_cell_value_core+0x84>
      value->u32 = 0;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = pcb->remote_port;
    }
    break;
 8010396:	e00d      	b.n	80103b4 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = pcb->remote_port;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	8b1b      	ldrh	r3, [r3, #24]
 801039c:	461a      	mov	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	601a      	str	r2, [r3, #0]
    break;
 80103a2:	e007      	b.n	80103b4 <tcp_ConnTable_get_cell_value_core+0xa0>
  default:
    LWIP_ASSERT("invalid id", 0);
 80103a4:	4b07      	ldr	r3, [pc, #28]	@ (80103c4 <tcp_ConnTable_get_cell_value_core+0xb0>)
 80103a6:	22bc      	movs	r2, #188	@ 0xbc
 80103a8:	4907      	ldr	r1, [pc, #28]	@ (80103c8 <tcp_ConnTable_get_cell_value_core+0xb4>)
 80103aa:	4808      	ldr	r0, [pc, #32]	@ (80103cc <tcp_ConnTable_get_cell_value_core+0xb8>)
 80103ac:	f011 f9ba 	bl	8021724 <iprintf>
    return SNMP_ERR_NOSUCHINSTANCE;
 80103b0:	23f1      	movs	r3, #241	@ 0xf1
 80103b2:	e000      	b.n	80103b6 <tcp_ConnTable_get_cell_value_core+0xa2>
  }

  return SNMP_ERR_NOERROR;
 80103b4:	2300      	movs	r3, #0
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	0803064c 	.word	0x0803064c
 80103c4:	08024f48 	.word	0x08024f48
 80103c8:	08024f88 	.word	0x08024f88
 80103cc:	08024f94 	.word	0x08024f94

080103d0 <tcp_ConnTable_get_cell_value>:

static snmp_err_t
tcp_ConnTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b08a      	sub	sp, #40	@ 0x28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	603b      	str	r3, [r7, #0]
 80103dc:	4613      	mov	r3, r2
 80103de:	71fb      	strb	r3, [r7, #7]
  u16_t local_port;
  u16_t remote_port;
  struct tcp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, tcp_ConnTable_oid_ranges, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges))) {
 80103e0:	79f9      	ldrb	r1, [r7, #7]
 80103e2:	230a      	movs	r3, #10
 80103e4:	4a37      	ldr	r2, [pc, #220]	@ (80104c4 <tcp_ConnTable_get_cell_value+0xf4>)
 80103e6:	68b8      	ldr	r0, [r7, #8]
 80103e8:	f7fe fd2e 	bl	800ee48 <snmp_oid_in_range>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d101      	bne.n	80103f6 <tcp_ConnTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 80103f2:	23f1      	movs	r3, #241	@ 0xf1
 80103f4:	e061      	b.n	80104ba <tcp_ConnTable_get_cell_value+0xea>
  }

  /* get IPs and ports from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &local_ip); /* we know it succeeds because of oid_in_range check above */
 80103f6:	f107 0318 	add.w	r3, r7, #24
 80103fa:	4619      	mov	r1, r3
 80103fc:	68b8      	ldr	r0, [r7, #8]
 80103fe:	f7fd fdd5 	bl	800dfac <snmp_oid_to_ip4>
  local_port = (u16_t)row_oid[4];
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	3310      	adds	r3, #16
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	83fb      	strh	r3, [r7, #30]
  snmp_oid_to_ip4(&row_oid[5], &remote_ip); /* we know it succeeds because of oid_in_range check above */
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	3314      	adds	r3, #20
 801040e:	f107 0214 	add.w	r2, r7, #20
 8010412:	4611      	mov	r1, r2
 8010414:	4618      	mov	r0, r3
 8010416:	f7fd fdc9 	bl	800dfac <snmp_oid_to_ip4>
  remote_port = (u16_t)row_oid[9];
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	3324      	adds	r3, #36	@ 0x24
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	83bb      	strh	r3, [r7, #28]

  /* find tcp_pcb with requested ips and ports */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010422:	2300      	movs	r3, #0
 8010424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010428:	e042      	b.n	80104b0 <tcp_ConnTable_get_cell_value+0xe0>
    pcb = *tcp_pcb_lists[i];
 801042a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801042e:	4a26      	ldr	r2, [pc, #152]	@ (80104c8 <tcp_ConnTable_get_cell_value+0xf8>)
 8010430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	623b      	str	r3, [r7, #32]

    while (pcb != NULL) {
 8010438:	e032      	b.n	80104a0 <tcp_ConnTable_get_cell_value+0xd0>
      /* do local IP and local port match? */
      if (IP_IS_V4_VAL(pcb->local_ip) &&
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 801043a:	69ba      	ldr	r2, [r7, #24]
 801043c:	6a3b      	ldr	r3, [r7, #32]
 801043e:	681b      	ldr	r3, [r3, #0]
      if (IP_IS_V4_VAL(pcb->local_ip) &&
 8010440:	429a      	cmp	r2, r3
 8010442:	d12a      	bne.n	801049a <tcp_ConnTable_get_cell_value+0xca>
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 8010444:	6a3b      	ldr	r3, [r7, #32]
 8010446:	8adb      	ldrh	r3, [r3, #22]
 8010448:	8bfa      	ldrh	r2, [r7, #30]
 801044a:	429a      	cmp	r2, r3
 801044c:	d125      	bne.n	801049a <tcp_ConnTable_get_cell_value+0xca>

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 801044e:	6a3b      	ldr	r3, [r7, #32]
 8010450:	7d1b      	ldrb	r3, [r3, #20]
 8010452:	2b01      	cmp	r3, #1
 8010454:	d10f      	bne.n	8010476 <tcp_ConnTable_get_cell_value+0xa6>
          if (ip4_addr_cmp(&remote_ip, IP4_ADDR_ANY4) && (remote_port == 0)) {
 8010456:	697a      	ldr	r2, [r7, #20]
 8010458:	4b1c      	ldr	r3, [pc, #112]	@ (80104cc <tcp_ConnTable_get_cell_value+0xfc>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	429a      	cmp	r2, r3
 801045e:	d11c      	bne.n	801049a <tcp_ConnTable_get_cell_value+0xca>
 8010460:	8bbb      	ldrh	r3, [r7, #28]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d119      	bne.n	801049a <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 8010466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010468:	683a      	ldr	r2, [r7, #0]
 801046a:	68f9      	ldr	r1, [r7, #12]
 801046c:	6a38      	ldr	r0, [r7, #32]
 801046e:	f7ff ff51 	bl	8010314 <tcp_ConnTable_get_cell_value_core>
 8010472:	4603      	mov	r3, r0
 8010474:	e021      	b.n	80104ba <tcp_ConnTable_get_cell_value+0xea>
          }
        } else {
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 8010476:	697a      	ldr	r2, [r7, #20]
 8010478:	6a3b      	ldr	r3, [r7, #32]
 801047a:	685b      	ldr	r3, [r3, #4]
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
 801047c:	429a      	cmp	r2, r3
 801047e:	d10c      	bne.n	801049a <tcp_ConnTable_get_cell_value+0xca>
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 8010480:	6a3b      	ldr	r3, [r7, #32]
 8010482:	8b1b      	ldrh	r3, [r3, #24]
 8010484:	8bba      	ldrh	r2, [r7, #28]
 8010486:	429a      	cmp	r2, r3
 8010488:	d107      	bne.n	801049a <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 801048a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	68f9      	ldr	r1, [r7, #12]
 8010490:	6a38      	ldr	r0, [r7, #32]
 8010492:	f7ff ff3f 	bl	8010314 <tcp_ConnTable_get_cell_value_core>
 8010496:	4603      	mov	r3, r0
 8010498:	e00f      	b.n	80104ba <tcp_ConnTable_get_cell_value+0xea>
          }
        }
      }

      pcb = pcb->next;
 801049a:	6a3b      	ldr	r3, [r7, #32]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	623b      	str	r3, [r7, #32]
    while (pcb != NULL) {
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1c9      	bne.n	801043a <tcp_ConnTable_get_cell_value+0x6a>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80104a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104aa:	3301      	adds	r3, #1
 80104ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80104b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104b4:	2b03      	cmp	r3, #3
 80104b6:	d9b8      	bls.n	801042a <tcp_ConnTable_get_cell_value+0x5a>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80104b8:	23f1      	movs	r3, #241	@ 0xf1
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3728      	adds	r7, #40	@ 0x28
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop
 80104c4:	0802ffc0 	.word	0x0802ffc0
 80104c8:	08030614 	.word	0x08030614
 80104cc:	0803064c 	.word	0x0803064c

080104d0 <tcp_ConnTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 80104d0:	b590      	push	{r4, r7, lr}
 80104d2:	b0a3      	sub	sp, #140	@ 0x8c
 80104d4:	af02      	add	r7, sp, #8
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	603b      	str	r3, [r7, #0]
  struct tcp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges));
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	1d19      	adds	r1, r3, #4
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	781a      	ldrb	r2, [r3, #0]
 80104e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80104ea:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80104ee:	240a      	movs	r4, #10
 80104f0:	9400      	str	r4, [sp, #0]
 80104f2:	f7fe fc44 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80104f6:	2300      	movs	r3, #0
 80104f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80104fc:	e03e      	b.n	801057c <tcp_ConnTable_get_next_cell_instance_and_value+0xac>
    pcb = *tcp_pcb_lists[i];
 80104fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010502:	4a2c      	ldr	r2, [pc, #176]	@ (80105b4 <tcp_ConnTable_get_next_cell_instance_and_value+0xe4>)
 8010504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 801050c:	e02e      	b.n	801056c <tcp_ConnTable_get_next_cell_instance_and_value+0x9c>
      u32_t test_oid[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

      if (IP_IS_V4_VAL(pcb->local_ip)) {
        snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 801050e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010510:	f107 0214 	add.w	r2, r7, #20
 8010514:	4611      	mov	r1, r2
 8010516:	4618      	mov	r0, r3
 8010518:	f7fd fdd0 	bl	800e0bc <snmp_ip4_to_oid>
        test_oid[4] = pcb->local_port;
 801051c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801051e:	8adb      	ldrh	r3, [r3, #22]
 8010520:	627b      	str	r3, [r7, #36]	@ 0x24

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 8010522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010524:	7d1b      	ldrb	r3, [r3, #20]
 8010526:	2b01      	cmp	r3, #1
 8010528:	d109      	bne.n	801053e <tcp_ConnTable_get_next_cell_instance_and_value+0x6e>
          snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[5]);
 801052a:	f107 0314 	add.w	r3, r7, #20
 801052e:	3314      	adds	r3, #20
 8010530:	4619      	mov	r1, r3
 8010532:	4821      	ldr	r0, [pc, #132]	@ (80105b8 <tcp_ConnTable_get_next_cell_instance_and_value+0xe8>)
 8010534:	f7fd fdc2 	bl	800e0bc <snmp_ip4_to_oid>
          test_oid[9] = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801053c:	e00b      	b.n	8010556 <tcp_ConnTable_get_next_cell_instance_and_value+0x86>
        } else {
          if (IP_IS_V6_VAL(pcb->remote_ip)) { /* should never happen */
            continue;
          }
          snmp_ip4_to_oid(ip_2_ip4(&pcb->remote_ip), &test_oid[5]);
 801053e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010540:	1d1a      	adds	r2, r3, #4
 8010542:	f107 0314 	add.w	r3, r7, #20
 8010546:	3314      	adds	r3, #20
 8010548:	4619      	mov	r1, r3
 801054a:	4610      	mov	r0, r2
 801054c:	f7fd fdb6 	bl	800e0bc <snmp_ip4_to_oid>
          test_oid[9] = pcb->remote_port;
 8010550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010552:	8b1b      	ldrh	r3, [r3, #24]
 8010554:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* check generated OID: is it a candidate for the next one? */
        snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges), pcb);
 8010556:	f107 0114 	add.w	r1, r7, #20
 801055a:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 801055e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010560:	220a      	movs	r2, #10
 8010562:	f7fe fc2b 	bl	800edbc <snmp_next_oid_check>
      }

      pcb = pcb->next;
 8010566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 801056c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1cd      	bne.n	801050e <tcp_ConnTable_get_next_cell_instance_and_value+0x3e>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010572:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010576:	3301      	adds	r3, #1
 8010578:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801057c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010580:	2b03      	cmp	r3, #3
 8010582:	d9bc      	bls.n	80104fe <tcp_ConnTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010584:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8010588:	2b00      	cmp	r3, #0
 801058a:	d10e      	bne.n	80105aa <tcp_ConnTable_get_next_cell_instance_and_value+0xda>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801058c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801058e:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8010592:	4619      	mov	r1, r3
 8010594:	68b8      	ldr	r0, [r7, #8]
 8010596:	f7fd fe6f 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnTable_get_cell_value_core((struct tcp_pcb*)state.reference, column, value, value_len);
 801059a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	68f9      	ldr	r1, [r7, #12]
 80105a2:	f7ff feb7 	bl	8010314 <tcp_ConnTable_get_cell_value_core>
 80105a6:	4603      	mov	r3, r0
 80105a8:	e000      	b.n	80105ac <tcp_ConnTable_get_next_cell_instance_and_value+0xdc>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80105aa:	23f1      	movs	r3, #241	@ 0xf1
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3784      	adds	r7, #132	@ 0x84
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd90      	pop	{r4, r7, pc}
 80105b4:	08030614 	.word	0x08030614
 80105b8:	0803064c 	.word	0x0803064c

080105bc <tcp_ConnectionTable_get_cell_value_core>:

/* --- tcpConnectionTable --- */

static snmp_err_t
tcp_ConnectionTable_get_cell_value_core(const u32_t* column, struct tcp_pcb *pcb, union snmp_variant_value* value)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
  /* all items except tcpConnectionState and tcpConnectionProcess are declared as not-accessible */
  switch (*column) {
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b07      	cmp	r3, #7
 80105ce:	d002      	beq.n	80105d6 <tcp_ConnectionTable_get_cell_value_core+0x1a>
 80105d0:	2b08      	cmp	r3, #8
 80105d2:	d007      	beq.n	80105e4 <tcp_ConnectionTable_get_cell_value_core+0x28>
 80105d4:	e00a      	b.n	80105ec <tcp_ConnectionTable_get_cell_value_core+0x30>
  case 7: /* tcpConnectionState */
    value->u32 = pcb->state + 1;
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	7d1b      	ldrb	r3, [r3, #20]
 80105da:	3301      	adds	r3, #1
 80105dc:	461a      	mov	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	601a      	str	r2, [r3, #0]
    break;
 80105e2:	e005      	b.n	80105f0 <tcp_ConnectionTable_get_cell_value_core+0x34>
  case 8: /* tcpConnectionProcess */
    value->u32 = 0; /* not supported */
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	601a      	str	r2, [r3, #0]
    break;
 80105ea:	e001      	b.n	80105f0 <tcp_ConnectionTable_get_cell_value_core+0x34>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 80105ec:	23f1      	movs	r3, #241	@ 0xf1
 80105ee:	e000      	b.n	80105f2 <tcp_ConnectionTable_get_cell_value_core+0x36>
  }

  return SNMP_ERR_NOERROR;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3714      	adds	r7, #20
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bc80      	pop	{r7}
 80105fa:	4770      	bx	lr

080105fc <tcp_ConnectionTable_get_cell_value>:

static snmp_err_t
tcp_ConnectionTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b08c      	sub	sp, #48	@ 0x30
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	4613      	mov	r3, r2
 801060a:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct tcp_pcb *pcb;
  u8_t idx = 0;
 801060c:	2300      	movs	r3, #0
 801060e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 8010612:	4a3e      	ldr	r2, [pc, #248]	@ (801070c <tcp_ConnectionTable_get_cell_value+0x110>)
 8010614:	f107 0310 	add.w	r3, r7, #16
 8010618:	ca07      	ldmia	r2, {r0, r1, r2}
 801061a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 801061e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	18d0      	adds	r0, r2, r3
 8010628:	79fa      	ldrb	r2, [r7, #7]
 801062a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801062e:	1ad3      	subs	r3, r2, r3
 8010630:	b2d9      	uxtb	r1, r3
 8010632:	f107 031e 	add.w	r3, r7, #30
 8010636:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801063a:	f7fd fddd 	bl	800e1f8 <snmp_oid_to_ip_port>
 801063e:	4603      	mov	r3, r0
 8010640:	461a      	mov	r2, r3
 8010642:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010646:	4413      	add	r3, r2
 8010648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 801064c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010650:	2b00      	cmp	r3, #0
 8010652:	d101      	bne.n	8010658 <tcp_ConnectionTable_get_cell_value+0x5c>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010654:	23f1      	movs	r3, #241	@ 0xf1
 8010656:	e055      	b.n	8010704 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 8010658:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	18d0      	adds	r0, r2, r3
 8010662:	79fa      	ldrb	r2, [r7, #7]
 8010664:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010668:	1ad3      	subs	r3, r2, r3
 801066a:	b2d9      	uxtb	r1, r3
 801066c:	f107 031c 	add.w	r3, r7, #28
 8010670:	f107 0220 	add.w	r2, r7, #32
 8010674:	f7fd fdc0 	bl	800e1f8 <snmp_oid_to_ip_port>
 8010678:	4603      	mov	r3, r0
 801067a:	461a      	mov	r2, r3
 801067c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010680:	4413      	add	r3, r2
 8010682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 8010686:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801068a:	2b00      	cmp	r3, #0
 801068c:	d101      	bne.n	8010692 <tcp_ConnectionTable_get_cell_value+0x96>
    return SNMP_ERR_NOSUCHINSTANCE;
 801068e:	23f1      	movs	r3, #241	@ 0xf1
 8010690:	e038      	b.n	8010704 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* find tcp_pcb with requested ip and port*/
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8010692:	2300      	movs	r3, #0
 8010694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010698:	e02f      	b.n	80106fa <tcp_ConnectionTable_get_cell_value+0xfe>
    pcb = *tcp_pcb_nonlisten_lists[i];
 801069a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	3330      	adds	r3, #48	@ 0x30
 80106a2:	443b      	add	r3, r7
 80106a4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (pcb != NULL) {
 80106ac:	e01d      	b.n	80106ea <tcp_ConnectionTable_get_cell_value+0xee>
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80106ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d115      	bne.n	80106e4 <tcp_ConnectionTable_get_cell_value+0xe8>
         (local_port == pcb->local_port) &&
 80106b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ba:	8ada      	ldrh	r2, [r3, #22]
 80106bc:	8bfb      	ldrh	r3, [r7, #30]
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80106be:	429a      	cmp	r2, r3
 80106c0:	d110      	bne.n	80106e4 <tcp_ConnectionTable_get_cell_value+0xe8>
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80106c2:	6a3a      	ldr	r2, [r7, #32]
 80106c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106c6:	685b      	ldr	r3, [r3, #4]
         (local_port == pcb->local_port) &&
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d10b      	bne.n	80106e4 <tcp_ConnectionTable_get_cell_value+0xe8>
         (remote_port == pcb->remote_port)) {
 80106cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ce:	8b1a      	ldrh	r2, [r3, #24]
 80106d0:	8bbb      	ldrh	r3, [r7, #28]
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d106      	bne.n	80106e4 <tcp_ConnectionTable_get_cell_value+0xe8>
        /* fill in object properties */
        return tcp_ConnectionTable_get_cell_value_core(column, pcb, value);
 80106d6:	683a      	ldr	r2, [r7, #0]
 80106d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f7ff ff6e 	bl	80105bc <tcp_ConnectionTable_get_cell_value_core>
 80106e0:	4603      	mov	r3, r0
 80106e2:	e00f      	b.n	8010704 <tcp_ConnectionTable_get_cell_value+0x108>
      }
      pcb = pcb->next;
 80106e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (pcb != NULL) {
 80106ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1de      	bne.n	80106ae <tcp_ConnectionTable_get_cell_value+0xb2>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 80106f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80106f4:	3301      	adds	r3, #1
 80106f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80106fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80106fe:	2b02      	cmp	r3, #2
 8010700:	d9cb      	bls.n	801069a <tcp_ConnectionTable_get_cell_value+0x9e>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010702:	23f1      	movs	r3, #241	@ 0xf1
}
 8010704:	4618      	mov	r0, r3
 8010706:	3730      	adds	r7, #48	@ 0x30
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	08024fbc 	.word	0x08024fbc

08010710 <tcp_ConnectionTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnectionTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010710:	b590      	push	{r4, r7, lr}
 8010712:	b0dd      	sub	sp, #372	@ 0x174
 8010714:	af02      	add	r7, sp, #8
 8010716:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 801071a:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 801071e:	6020      	str	r0, [r4, #0]
 8010720:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8010724:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 8010728:	6001      	str	r1, [r0, #0]
 801072a:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 801072e:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 8010732:	600a      	str	r2, [r1, #0]
 8010734:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8010738:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 801073c:	6013      	str	r3, [r2, #0]
  struct snmp_next_oid_state state;
  /* 1x tcpConnectionLocalAddressType + 1x OID len + 16x tcpConnectionLocalAddress  + 1x tcpConnectionLocalPort
   * 1x tcpConnectionRemAddressType   + 1x OID len + 16x tcpConnectionRemAddress    + 1x tcpConnectionRemPort */
  u32_t  result_temp[38];
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 801073e:	4a4c      	ldr	r2, [pc, #304]	@ (8010870 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x160>)
 8010740:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8010744:	ca07      	ldmia	r2, {r0, r1, r2}
 8010746:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 801074a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801074e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	1d19      	adds	r1, r3, #4
 8010756:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801075a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	781a      	ldrb	r2, [r3, #0]
 8010762:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8010766:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 801076a:	2426      	movs	r4, #38	@ 0x26
 801076c:	9400      	str	r4, [sp, #0]
 801076e:	f7fe fb06 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8010772:	2300      	movs	r3, #0
 8010774:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 8010778:	e051      	b.n	801081e <tcp_ConnectionTable_get_next_cell_instance_and_value+0x10e>
    pcb = *tcp_pcb_nonlisten_lists[i];
 801077a:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010784:	443b      	add	r3, r7
 8010786:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    while (pcb != NULL) {
 8010790:	e03c      	b.n	801080c <tcp_ConnectionTable_get_next_cell_instance_and_value+0xfc>
      u8_t idx = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162
      u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

      /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
      idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 8010798:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 801079c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80107a0:	8ad9      	ldrh	r1, [r3, #22]
 80107a2:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80107a6:	f107 0210 	add.w	r2, r7, #16
 80107aa:	009b      	lsls	r3, r3, #2
 80107ac:	4413      	add	r3, r2
 80107ae:	461a      	mov	r2, r3
 80107b0:	f7fd fca5 	bl	800e0fe <snmp_ip_port_to_oid>
 80107b4:	4603      	mov	r3, r0
 80107b6:	461a      	mov	r2, r3
 80107b8:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80107bc:	4413      	add	r3, r2
 80107be:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
      idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 80107c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80107c6:	1d18      	adds	r0, r3, #4
 80107c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80107cc:	8b19      	ldrh	r1, [r3, #24]
 80107ce:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80107d2:	f107 0210 	add.w	r2, r7, #16
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	4413      	add	r3, r2
 80107da:	461a      	mov	r2, r3
 80107dc:	f7fd fc8f 	bl	800e0fe <snmp_ip_port_to_oid>
 80107e0:	4603      	mov	r3, r0
 80107e2:	461a      	mov	r2, r3
 80107e4:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 80107e8:	4413      	add	r3, r2
 80107ea:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, idx, pcb);
 80107ee:	f897 2162 	ldrb.w	r2, [r7, #354]	@ 0x162
 80107f2:	f107 0110 	add.w	r1, r7, #16
 80107f6:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80107fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80107fe:	f7fe fadd 	bl	800edbc <snmp_next_oid_check>

      pcb = pcb->next;
 8010802:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    while (pcb != NULL) {
 801080c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1be      	bne.n	8010792 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x82>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8010814:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010818:	3301      	adds	r3, #1
 801081a:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 801081e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010822:	2b02      	cmp	r3, #2
 8010824:	d9a9      	bls.n	801077a <tcp_ConnectionTable_get_next_cell_instance_and_value+0x6a>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010826:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 801082a:	2b00      	cmp	r3, #0
 801082c:	d11a      	bne.n	8010864 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x154>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801082e:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8010832:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8010836:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801083a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801083e:	6818      	ldr	r0, [r3, #0]
 8010840:	f7fd fd1a 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnectionTable_get_cell_value_core(column, (struct tcp_pcb*)state.reference, value);
 8010844:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 8010848:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801084c:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8010850:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010854:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8010858:	6812      	ldr	r2, [r2, #0]
 801085a:	6818      	ldr	r0, [r3, #0]
 801085c:	f7ff feae 	bl	80105bc <tcp_ConnectionTable_get_cell_value_core>
 8010860:	4603      	mov	r3, r0
 8010862:	e000      	b.n	8010866 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x156>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8010864:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8010866:	4618      	mov	r0, r3
 8010868:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 801086c:	46bd      	mov	sp, r7
 801086e:	bd90      	pop	{r4, r7, pc}
 8010870:	08024fbc 	.word	0x08024fbc

08010874 <tcp_ListenerTable_get_cell_value_core>:

/* --- tcpListenerTable --- */

static snmp_err_t
tcp_ListenerTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  /* all items except tcpListenerProcess are declared as not-accessible */
  switch (*column) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	2b04      	cmp	r3, #4
 8010884:	d105      	bne.n	8010892 <tcp_ListenerTable_get_cell_value_core+0x1e>
  case 4: /* tcpListenerProcess */
    value->u32 = 0; /* not supported */
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2200      	movs	r2, #0
 801088a:	601a      	str	r2, [r3, #0]
    break;
 801088c:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 801088e:	2300      	movs	r3, #0
 8010890:	e000      	b.n	8010894 <tcp_ListenerTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010892:	23f1      	movs	r3, #241	@ 0xf1
}
 8010894:	4618      	mov	r0, r3
 8010896:	370c      	adds	r7, #12
 8010898:	46bd      	mov	sp, r7
 801089a:	bc80      	pop	{r7}
 801089c:	4770      	bx	lr
	...

080108a0 <tcp_ListenerTable_get_cell_value>:

static snmp_err_t
tcp_ListenerTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b088      	sub	sp, #32
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	603b      	str	r3, [r7, #0]
 80108ac:	4613      	mov	r3, r2
 80108ae:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip;
  u16_t local_port;
  struct tcp_pcb_listen *pcb;
  u8_t idx = 0;
 80108b0:	2300      	movs	r3, #0
 80108b2:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(value_len);

  /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 80108b4:	7efb      	ldrb	r3, [r7, #27]
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	68ba      	ldr	r2, [r7, #8]
 80108ba:	18d0      	adds	r0, r2, r3
 80108bc:	79fa      	ldrb	r2, [r7, #7]
 80108be:	7efb      	ldrb	r3, [r7, #27]
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	b2d9      	uxtb	r1, r3
 80108c4:	f107 0312 	add.w	r3, r7, #18
 80108c8:	f107 0214 	add.w	r2, r7, #20
 80108cc:	f7fd fc94 	bl	800e1f8 <snmp_oid_to_ip_port>
 80108d0:	4603      	mov	r3, r0
 80108d2:	461a      	mov	r2, r3
 80108d4:	7efb      	ldrb	r3, [r7, #27]
 80108d6:	4413      	add	r3, r2
 80108d8:	76fb      	strb	r3, [r7, #27]
  if (idx == 0) {
 80108da:	7efb      	ldrb	r3, [r7, #27]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d101      	bne.n	80108e4 <tcp_ListenerTable_get_cell_value+0x44>
    return SNMP_ERR_NOSUCHINSTANCE;
 80108e0:	23f1      	movs	r3, #241	@ 0xf1
 80108e2:	e01a      	b.n	801091a <tcp_ListenerTable_get_cell_value+0x7a>
  }

  /* find tcp_pcb with requested ip and port*/
  pcb = tcp_listen_pcbs.listen_pcbs;
 80108e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010924 <tcp_ListenerTable_get_cell_value+0x84>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80108ea:	e012      	b.n	8010912 <tcp_ListenerTable_get_cell_value+0x72>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80108ec:	697a      	ldr	r2, [r7, #20]
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d10a      	bne.n	801090c <tcp_ListenerTable_get_cell_value+0x6c>
       (local_port == pcb->local_port)) {
 80108f6:	69fb      	ldr	r3, [r7, #28]
 80108f8:	8ada      	ldrh	r2, [r3, #22]
 80108fa:	8a7b      	ldrh	r3, [r7, #18]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d105      	bne.n	801090c <tcp_ListenerTable_get_cell_value+0x6c>
      /* fill in object properties */
      return tcp_ListenerTable_get_cell_value_core(column, value);
 8010900:	6839      	ldr	r1, [r7, #0]
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f7ff ffb6 	bl	8010874 <tcp_ListenerTable_get_cell_value_core>
 8010908:	4603      	mov	r3, r0
 801090a:	e006      	b.n	801091a <tcp_ListenerTable_get_cell_value+0x7a>
    }
    pcb = pcb->next;
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1e9      	bne.n	80108ec <tcp_ListenerTable_get_cell_value+0x4c>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010918:	23f1      	movs	r3, #241	@ 0xf1
}
 801091a:	4618      	mov	r0, r3
 801091c:	3720      	adds	r7, #32
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	2000bdc4 	.word	0x2000bdc4

08010928 <tcp_ListenerTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ListenerTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010928:	b590      	push	{r4, r7, lr}
 801092a:	b0b5      	sub	sp, #212	@ 0xd4
 801092c:	af02      	add	r7, sp, #8
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
 8010934:	603b      	str	r3, [r7, #0]
  u32_t  result_temp[19];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	1d19      	adds	r1, r3, #4
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	781a      	ldrb	r2, [r3, #0]
 801093e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8010942:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8010946:	2413      	movs	r4, #19
 8010948:	9400      	str	r4, [sp, #0]
 801094a:	f7fe fa18 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = tcp_listen_pcbs.listen_pcbs;
 801094e:	4b23      	ldr	r3, [pc, #140]	@ (80109dc <tcp_ListenerTable_get_next_cell_instance_and_value+0xb4>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 8010956:	e025      	b.n	80109a4 <tcp_ListenerTable_get_next_cell_instance_and_value+0x7c>
    u8_t idx = 0;
 8010958:	2300      	movs	r3, #0
 801095a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

    /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 801095e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8010962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010966:	8ad9      	ldrh	r1, [r3, #22]
 8010968:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 801096c:	f107 0214 	add.w	r2, r7, #20
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	4413      	add	r3, r2
 8010974:	461a      	mov	r2, r3
 8010976:	f7fd fbc2 	bl	800e0fe <snmp_ip_port_to_oid>
 801097a:	4603      	mov	r3, r0
 801097c:	461a      	mov	r2, r3
 801097e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010982:	4413      	add	r3, r2
 8010984:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 8010988:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 801098c:	f107 0114 	add.w	r1, r7, #20
 8010990:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8010994:	2300      	movs	r3, #0
 8010996:	f7fe fa11 	bl	800edbc <snmp_next_oid_check>

    pcb = pcb->next;
 801099a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 80109a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1d5      	bne.n	8010958 <tcp_ListenerTable_get_next_cell_instance_and_value+0x30>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80109ac:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d10d      	bne.n	80109d0 <tcp_ListenerTable_get_next_cell_instance_and_value+0xa8>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80109b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80109b8:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 80109bc:	4619      	mov	r1, r3
 80109be:	68b8      	ldr	r0, [r7, #8]
 80109c0:	f7fd fc5a 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ListenerTable_get_cell_value_core(column, value);
 80109c4:	6879      	ldr	r1, [r7, #4]
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7ff ff54 	bl	8010874 <tcp_ListenerTable_get_cell_value_core>
 80109cc:	4603      	mov	r3, r0
 80109ce:	e000      	b.n	80109d2 <tcp_ListenerTable_get_next_cell_instance_and_value+0xaa>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 80109d0:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	37cc      	adds	r7, #204	@ 0xcc
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd90      	pop	{r4, r7, pc}
 80109da:	bf00      	nop
 80109dc:	2000bdc4 	.word	0x2000bdc4

080109e0 <udp_get_value>:

/* --- udp .1.3.6.1.2.1.7 ----------------------------------------------------- */

static s16_t
udp_get_value(struct snmp_node_instance* instance, void* value)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	60fb      	str	r3, [r7, #12]

  switch (instance->node->oid) {
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	2b08      	cmp	r3, #8
 80109f8:	d83e      	bhi.n	8010a78 <udp_get_value+0x98>
 80109fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010a00 <udp_get_value+0x20>)
 80109fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a00:	08010a25 	.word	0x08010a25
 8010a04:	08010a33 	.word	0x08010a33
 8010a08:	08010a41 	.word	0x08010a41
 8010a0c:	08010a4f 	.word	0x08010a4f
 8010a10:	08010a79 	.word	0x08010a79
 8010a14:	08010a79 	.word	0x08010a79
 8010a18:	08010a79 	.word	0x08010a79
 8010a1c:	08010a5d 	.word	0x08010a5d
 8010a20:	08010a6b 	.word	0x08010a6b
  case 1: /* udpInDatagrams */
    *uint_ptr = STATS_GET(mib2.udpindatagrams);
 8010a24:	4b17      	ldr	r3, [pc, #92]	@ (8010a84 <udp_get_value+0xa4>)
 8010a26:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010a2e:	2304      	movs	r3, #4
 8010a30:	e024      	b.n	8010a7c <udp_get_value+0x9c>
  case 2: /* udpNoPorts */
    *uint_ptr = STATS_GET(mib2.udpnoports);
 8010a32:	4b14      	ldr	r3, [pc, #80]	@ (8010a84 <udp_get_value+0xa4>)
 8010a34:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010a3c:	2304      	movs	r3, #4
 8010a3e:	e01d      	b.n	8010a7c <udp_get_value+0x9c>
  case 3: /* udpInErrors */
    *uint_ptr = STATS_GET(mib2.udpinerrors);
 8010a40:	4b10      	ldr	r3, [pc, #64]	@ (8010a84 <udp_get_value+0xa4>)
 8010a42:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010a4a:	2304      	movs	r3, #4
 8010a4c:	e016      	b.n	8010a7c <udp_get_value+0x9c>
  case 4: /* udpOutDatagrams */
    *uint_ptr = STATS_GET(mib2.udpoutdatagrams);
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a84 <udp_get_value+0xa4>)
 8010a50:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010a58:	2304      	movs	r3, #4
 8010a5a:	e00f      	b.n	8010a7c <udp_get_value+0x9c>
  case 8: /* udpHCInDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010a5c:	2208      	movs	r2, #8
 8010a5e:	2100      	movs	r1, #0
 8010a60:	6838      	ldr	r0, [r7, #0]
 8010a62:	f011 f835 	bl	8021ad0 <memset>
    return 2*sizeof(u32_t);
 8010a66:	2308      	movs	r3, #8
 8010a68:	e008      	b.n	8010a7c <udp_get_value+0x9c>
  case 9: /* udpHCOutDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010a6a:	2208      	movs	r2, #8
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	6838      	ldr	r0, [r7, #0]
 8010a70:	f011 f82e 	bl	8021ad0 <memset>
    return 2*sizeof(u32_t);
 8010a74:	2308      	movs	r3, #8
 8010a76:	e001      	b.n	8010a7c <udp_get_value+0x9c>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("udp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 8010a78:	bf00      	nop
  }

  return 0;
 8010a7a:	2300      	movs	r3, #0
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	2000bc24 	.word	0x2000bc24

08010a88 <udp_endpointTable_get_cell_value_core>:

/* --- udpEndpointTable --- */

static snmp_err_t
udp_endpointTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  /* all items except udpEndpointProcess are declared as not-accessible */
  switch (*column) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b08      	cmp	r3, #8
 8010a98:	d105      	bne.n	8010aa6 <udp_endpointTable_get_cell_value_core+0x1e>
  case 8: /* udpEndpointProcess */
    value->u32 = 0; /* not supported */
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	601a      	str	r2, [r3, #0]
    break;
 8010aa0:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	e000      	b.n	8010aa8 <udp_endpointTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010aa6:	23f1      	movs	r3, #241	@ 0xf1
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bc80      	pop	{r7}
 8010ab0:	4770      	bx	lr
	...

08010ab4 <udp_endpointTable_get_cell_value>:

static snmp_err_t
udp_endpointTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08a      	sub	sp, #40	@ 0x28
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	603b      	str	r3, [r7, #0]
 8010ac0:	4613      	mov	r3, r2
 8010ac2:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct udp_pcb *pcb;
  u8_t idx = 0;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  LWIP_UNUSED_ARG(value_len);

  /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 8010aca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010ace:	009b      	lsls	r3, r3, #2
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	18d0      	adds	r0, r2, r3
 8010ad4:	79fa      	ldrb	r2, [r7, #7]
 8010ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010ada:	1ad3      	subs	r3, r2, r3
 8010adc:	b2d9      	uxtb	r1, r3
 8010ade:	f107 0316 	add.w	r3, r7, #22
 8010ae2:	f107 021c 	add.w	r2, r7, #28
 8010ae6:	f7fd fb87 	bl	800e1f8 <snmp_oid_to_ip_port>
 8010aea:	4603      	mov	r3, r0
 8010aec:	461a      	mov	r2, r3
 8010aee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010af2:	4413      	add	r3, r2
 8010af4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 8010af8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d101      	bne.n	8010b04 <udp_endpointTable_get_cell_value+0x50>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010b00:	23f1      	movs	r3, #241	@ 0xf1
 8010b02:	e052      	b.n	8010baa <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 8010b04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	68ba      	ldr	r2, [r7, #8]
 8010b0c:	18d0      	adds	r0, r2, r3
 8010b0e:	79fa      	ldrb	r2, [r7, #7]
 8010b10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b14:	1ad3      	subs	r3, r2, r3
 8010b16:	b2d9      	uxtb	r1, r3
 8010b18:	f107 0314 	add.w	r3, r7, #20
 8010b1c:	f107 0218 	add.w	r2, r7, #24
 8010b20:	f7fd fb6a 	bl	800e1f8 <snmp_oid_to_ip_port>
 8010b24:	4603      	mov	r3, r0
 8010b26:	461a      	mov	r2, r3
 8010b28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b2c:	4413      	add	r3, r2
 8010b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 8010b32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d101      	bne.n	8010b3e <udp_endpointTable_get_cell_value+0x8a>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010b3a:	23f1      	movs	r3, #241	@ 0xf1
 8010b3c:	e035      	b.n	8010baa <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointInstance */
  if (row_oid_len < (idx+1)) {
 8010b3e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8010b42:	79fb      	ldrb	r3, [r7, #7]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d301      	bcc.n	8010b4c <udp_endpointTable_get_cell_value+0x98>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010b48:	23f1      	movs	r3, #241	@ 0xf1
 8010b4a:	e02e      	b.n	8010baa <udp_endpointTable_get_cell_value+0xf6>
  }
  if (row_oid[idx] != 0) {
 8010b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b50:	009b      	lsls	r3, r3, #2
 8010b52:	68ba      	ldr	r2, [r7, #8]
 8010b54:	4413      	add	r3, r2
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d001      	beq.n	8010b60 <udp_endpointTable_get_cell_value+0xac>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010b5c:	23f1      	movs	r3, #241	@ 0xf1
 8010b5e:	e024      	b.n	8010baa <udp_endpointTable_get_cell_value+0xf6>
  }
  
  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 8010b60:	4b14      	ldr	r3, [pc, #80]	@ (8010bb4 <udp_endpointTable_get_cell_value+0x100>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8010b66:	e01c      	b.n	8010ba2 <udp_endpointTable_get_cell_value+0xee>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8010b68:	69fa      	ldr	r2, [r7, #28]
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d114      	bne.n	8010b9c <udp_endpointTable_get_cell_value+0xe8>
       (local_port == pcb->local_port) &&
 8010b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b74:	8a5a      	ldrh	r2, [r3, #18]
 8010b76:	8afb      	ldrh	r3, [r7, #22]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d10f      	bne.n	8010b9c <udp_endpointTable_get_cell_value+0xe8>
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 8010b7c:	69ba      	ldr	r2, [r7, #24]
 8010b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b80:	685b      	ldr	r3, [r3, #4]
       (local_port == pcb->local_port) &&
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d10a      	bne.n	8010b9c <udp_endpointTable_get_cell_value+0xe8>
       (remote_port == pcb->remote_port)) {
 8010b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b88:	8a9a      	ldrh	r2, [r3, #20]
 8010b8a:	8abb      	ldrh	r3, [r7, #20]
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d105      	bne.n	8010b9c <udp_endpointTable_get_cell_value+0xe8>
      /* fill in object properties */
      return udp_endpointTable_get_cell_value_core(column, value);
 8010b90:	6839      	ldr	r1, [r7, #0]
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f7ff ff78 	bl	8010a88 <udp_endpointTable_get_cell_value_core>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	e006      	b.n	8010baa <udp_endpointTable_get_cell_value+0xf6>
    }
    pcb = pcb->next;
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8010ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1df      	bne.n	8010b68 <udp_endpointTable_get_cell_value+0xb4>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010ba8:	23f1      	movs	r3, #241	@ 0xf1
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3728      	adds	r7, #40	@ 0x28
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	2000be18 	.word	0x2000be18

08010bb8 <udp_endpointTable_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_endpointTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010bb8:	b590      	push	{r4, r7, lr}
 8010bba:	b0dd      	sub	sp, #372	@ 0x174
 8010bbc:	af02      	add	r7, sp, #8
 8010bbe:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 8010bc2:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 8010bc6:	6020      	str	r0, [r4, #0]
 8010bc8:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8010bcc:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 8010bd0:	6001      	str	r1, [r0, #0]
 8010bd2:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8010bd6:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 8010bda:	600a      	str	r2, [r1, #0]
 8010bdc:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8010be0:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8010be4:	6013      	str	r3, [r2, #0]
  u32_t  result_temp[39];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 8010be6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010bea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	1d19      	adds	r1, r3, #4
 8010bf2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010bf6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	781a      	ldrb	r2, [r3, #0]
 8010bfe:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010c02:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8010c06:	2427      	movs	r4, #39	@ 0x27
 8010c08:	9400      	str	r4, [sp, #0]
 8010c0a:	f7fe f8b8 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 8010c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8010cfc <udp_endpointTable_get_next_cell_instance_and_value+0x144>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 8010c16:	e049      	b.n	8010cac <udp_endpointTable_get_next_cell_instance_and_value+0xf4>
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];
    u8_t idx = 0;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 8010c1e:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8010c22:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010c26:	8a59      	ldrh	r1, [r3, #18]
 8010c28:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010c2c:	f107 0214 	add.w	r2, r7, #20
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	4413      	add	r3, r2
 8010c34:	461a      	mov	r2, r3
 8010c36:	f7fd fa62 	bl	800e0fe <snmp_ip_port_to_oid>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010c42:	4413      	add	r3, r2
 8010c44:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
    idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 8010c48:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010c4c:	1d18      	adds	r0, r3, #4
 8010c4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010c52:	8a99      	ldrh	r1, [r3, #20]
 8010c54:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010c58:	f107 0214 	add.w	r2, r7, #20
 8010c5c:	009b      	lsls	r3, r3, #2
 8010c5e:	4413      	add	r3, r2
 8010c60:	461a      	mov	r2, r3
 8010c62:	f7fd fa4c 	bl	800e0fe <snmp_ip_port_to_oid>
 8010c66:	4603      	mov	r3, r0
 8010c68:	461a      	mov	r2, r3
 8010c6a:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010c6e:	4413      	add	r3, r2
 8010c70:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    test_oid[idx] = 0; /* udpEndpointInstance */    
 8010c74:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 8010c78:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010c7c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8010c80:	2100      	movs	r1, #0
 8010c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    idx++;
 8010c86:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
    
    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 8010c90:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 8010c94:	f107 0114 	add.w	r1, r7, #20
 8010c98:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	f7fe f88d 	bl	800edbc <snmp_next_oid_check>
    
    pcb = pcb->next;
 8010ca2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 8010cac:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1b1      	bne.n	8010c18 <udp_endpointTable_get_next_cell_instance_and_value+0x60>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010cb4:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d118      	bne.n	8010cee <udp_endpointTable_get_next_cell_instance_and_value+0x136>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010cbc:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8010cc0:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8010cc4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010cc8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010ccc:	6818      	ldr	r0, [r3, #0]
 8010cce:	f7fd fad3 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return udp_endpointTable_get_cell_value_core(column, value);
 8010cd2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010cd6:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8010cda:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010cde:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8010ce2:	6811      	ldr	r1, [r2, #0]
 8010ce4:	6818      	ldr	r0, [r3, #0]
 8010ce6:	f7ff fecf 	bl	8010a88 <udp_endpointTable_get_cell_value_core>
 8010cea:	4603      	mov	r3, r0
 8010cec:	e000      	b.n	8010cf0 <udp_endpointTable_get_next_cell_instance_and_value+0x138>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8010cee:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd90      	pop	{r4, r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	2000be18 	.word	0x2000be18

08010d00 <udp_Table_get_cell_value_core>:
  { 1, 0xffff }  /* Port        */
};

static snmp_err_t 
udp_Table_get_cell_value_core(struct udp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
 8010d0c:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	d002      	beq.n	8010d1c <udp_Table_get_cell_value_core+0x1c>
 8010d16:	2b02      	cmp	r3, #2
 8010d18:	d005      	beq.n	8010d26 <udp_Table_get_cell_value_core+0x26>
 8010d1a:	e00a      	b.n	8010d32 <udp_Table_get_cell_value_core+0x32>
  case 1: /* udpLocalAddress */
    /* set reference to PCB local IP and return a generic node that copies IP4 addresses */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	601a      	str	r2, [r3, #0]
    break;
 8010d24:	e007      	b.n	8010d36 <udp_Table_get_cell_value_core+0x36>
  case 2: /* udpLocalPort */
    /* set reference to PCB local port and return a generic node that copies u16_t values */
    value->u32 = pcb->local_port;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	8a5b      	ldrh	r3, [r3, #18]
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	601a      	str	r2, [r3, #0]
    break;
 8010d30:	e001      	b.n	8010d36 <udp_Table_get_cell_value_core+0x36>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8010d32:	23f1      	movs	r3, #241	@ 0xf1
 8010d34:	e000      	b.n	8010d38 <udp_Table_get_cell_value_core+0x38>
  }

  return SNMP_ERR_NOERROR;
 8010d36:	2300      	movs	r3, #0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3714      	adds	r7, #20
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bc80      	pop	{r7}
 8010d40:	4770      	bx	lr
	...

08010d44 <udp_Table_get_cell_value>:

static snmp_err_t 
udp_Table_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b088      	sub	sp, #32
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	603b      	str	r3, [r7, #0]
 8010d50:	4613      	mov	r3, r2
 8010d52:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  u16_t port;
  struct udp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, udp_Table_oid_ranges, LWIP_ARRAYSIZE(udp_Table_oid_ranges))) {
 8010d54:	79f9      	ldrb	r1, [r7, #7]
 8010d56:	2305      	movs	r3, #5
 8010d58:	4a19      	ldr	r2, [pc, #100]	@ (8010dc0 <udp_Table_get_cell_value+0x7c>)
 8010d5a:	68b8      	ldr	r0, [r7, #8]
 8010d5c:	f7fe f874 	bl	800ee48 <snmp_oid_in_range>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d101      	bne.n	8010d6a <udp_Table_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010d66:	23f1      	movs	r3, #241	@ 0xf1
 8010d68:	e026      	b.n	8010db8 <udp_Table_get_cell_value+0x74>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 8010d6a:	f107 0314 	add.w	r3, r7, #20
 8010d6e:	4619      	mov	r1, r3
 8010d70:	68b8      	ldr	r0, [r7, #8]
 8010d72:	f7fd f91b 	bl	800dfac <snmp_oid_to_ip4>
  port = (u16_t)row_oid[4];
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	3310      	adds	r3, #16
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	837b      	strh	r3, [r7, #26]

  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 8010d7e:	4b11      	ldr	r3, [pc, #68]	@ (8010dc4 <udp_Table_get_cell_value+0x80>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8010d84:	e014      	b.n	8010db0 <udp_Table_get_cell_value+0x6c>
    if (IP_IS_V4_VAL(pcb->local_ip)) {
      if (ip4_addr_cmp(&ip, ip_2_ip4(&pcb->local_ip)) && (port == pcb->local_port)) {
 8010d86:	697a      	ldr	r2, [r7, #20]
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d10c      	bne.n	8010daa <udp_Table_get_cell_value+0x66>
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	8a5b      	ldrh	r3, [r3, #18]
 8010d94:	8b7a      	ldrh	r2, [r7, #26]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d107      	bne.n	8010daa <udp_Table_get_cell_value+0x66>
        /* fill in object properties */
        return udp_Table_get_cell_value_core(pcb, column, value, value_len);
 8010d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d9c:	683a      	ldr	r2, [r7, #0]
 8010d9e:	68f9      	ldr	r1, [r7, #12]
 8010da0:	69f8      	ldr	r0, [r7, #28]
 8010da2:	f7ff ffad 	bl	8010d00 <udp_Table_get_cell_value_core>
 8010da6:	4603      	mov	r3, r0
 8010da8:	e006      	b.n	8010db8 <udp_Table_get_cell_value+0x74>
      }
    }
    pcb = pcb->next;
 8010daa:	69fb      	ldr	r3, [r7, #28]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1e7      	bne.n	8010d86 <udp_Table_get_cell_value+0x42>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010db6:	23f1      	movs	r3, #241	@ 0xf1
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3720      	adds	r7, #32
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	0803030c 	.word	0x0803030c
 8010dc4:	2000be18 	.word	0x2000be18

08010dc8 <udp_Table_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_Table_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010dc8:	b590      	push	{r4, r7, lr}
 8010dca:	b097      	sub	sp, #92	@ 0x5c
 8010dcc:	af02      	add	r7, sp, #8
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
 8010dd4:	603b      	str	r3, [r7, #0]
  struct udp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t  result_temp[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(udp_Table_oid_ranges));
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	1d19      	adds	r1, r3, #4
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	781a      	ldrb	r2, [r3, #0]
 8010dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010de2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8010de6:	2405      	movs	r4, #5
 8010de8:	9400      	str	r4, [sp, #0]
 8010dea:	f7fd ffc8 	bl	800ed7e <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 8010dee:	4b1a      	ldr	r3, [pc, #104]	@ (8010e58 <udp_Table_get_next_cell_instance_and_value+0x90>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8010df4:	e014      	b.n	8010e20 <udp_Table_get_next_cell_instance_and_value+0x58>
    u32_t test_oid[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

    if (IP_IS_V4_VAL(pcb->local_ip)) {
      snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 8010df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010df8:	f107 0210 	add.w	r2, r7, #16
 8010dfc:	4611      	mov	r1, r2
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fd f95c 	bl	800e0bc <snmp_ip4_to_oid>
      test_oid[4] = pcb->local_port;
 8010e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e06:	8a5b      	ldrh	r3, [r3, #18]
 8010e08:	623b      	str	r3, [r7, #32]

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(udp_Table_oid_ranges), pcb);
 8010e0a:	f107 0110 	add.w	r1, r7, #16
 8010e0e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8010e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e14:	2205      	movs	r2, #5
 8010e16:	f7fd ffd1 	bl	800edbc <snmp_next_oid_check>
    }
    
    pcb = pcb->next;
 8010e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e1c:	68db      	ldr	r3, [r3, #12]
 8010e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8010e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1e7      	bne.n	8010df6 <udp_Table_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010e26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d10e      	bne.n	8010e4c <udp_Table_get_next_cell_instance_and_value+0x84>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e30:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8010e34:	4619      	mov	r1, r3
 8010e36:	68b8      	ldr	r0, [r7, #8]
 8010e38:	f7fd fa1e 	bl	800e278 <snmp_oid_assign>
    /* fill in object properties */
    return udp_Table_get_cell_value_core((struct udp_pcb*)state.reference, column, value, value_len);
 8010e3c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	68f9      	ldr	r1, [r7, #12]
 8010e44:	f7ff ff5c 	bl	8010d00 <udp_Table_get_cell_value_core>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	e000      	b.n	8010e4e <udp_Table_get_next_cell_instance_and_value+0x86>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8010e4c:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3754      	adds	r7, #84	@ 0x54
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd90      	pop	{r4, r7, pc}
 8010e56:	bf00      	nop
 8010e58:	2000be18 	.word	0x2000be18

08010e5c <snmp_set_community_trap>:
 *
 * @param community is a pointer to new trap community string
 */
void
snmp_set_community_trap(const char * const community)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("community string is too long!", strlen(community) <= SNMP_MAX_COMMUNITY_STR_LEN);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7ef f9b9 	bl	80001dc <strlen>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b08      	cmp	r3, #8
 8010e6e:	d905      	bls.n	8010e7c <snmp_set_community_trap+0x20>
 8010e70:	4b06      	ldr	r3, [pc, #24]	@ (8010e8c <snmp_set_community_trap+0x30>)
 8010e72:	2290      	movs	r2, #144	@ 0x90
 8010e74:	4906      	ldr	r1, [pc, #24]	@ (8010e90 <snmp_set_community_trap+0x34>)
 8010e76:	4807      	ldr	r0, [pc, #28]	@ (8010e94 <snmp_set_community_trap+0x38>)
 8010e78:	f010 fc54 	bl	8021724 <iprintf>
  snmp_community_trap = community;
 8010e7c:	4a06      	ldr	r2, [pc, #24]	@ (8010e98 <snmp_set_community_trap+0x3c>)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6013      	str	r3, [r2, #0]
}
 8010e82:	bf00      	nop
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	08024fd8 	.word	0x08024fd8
 8010e90:	08025014 	.word	0x08025014
 8010e94:	08025034 	.word	0x08025034
 8010e98:	2000010c 	.word	0x2000010c

08010e9c <snmp_receive>:
/* implementation */
/* ----------------------------------------------------------------------- */

void
snmp_receive(void *handle, struct pbuf *p, const ip_addr_t *source_ip, u16_t port)
{
 8010e9c:	b590      	push	{r4, r7, lr}
 8010e9e:	b0cf      	sub	sp, #316	@ 0x13c
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8010ea6:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8010eaa:	6020      	str	r0, [r4, #0]
 8010eac:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010eb0:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8010eb4:	6001      	str	r1, [r0, #0]
 8010eb6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8010eba:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8010ebe:	600a      	str	r2, [r1, #0]
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ec6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8010eca:	801a      	strh	r2, [r3, #0]
  err_t err;
  struct snmp_request request;
   
  memset(&request, 0, sizeof(request));
 8010ecc:	f107 0314 	add.w	r3, r7, #20
 8010ed0:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f010 fdfa 	bl	8021ad0 <memset>
  request.handle       = handle;
 8010edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ee0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010ee4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010ee8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010eec:	6812      	ldr	r2, [r2, #0]
 8010eee:	601a      	str	r2, [r3, #0]
  request.source_ip    = source_ip;
 8010ef0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ef4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010ef8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010efc:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8010f00:	6812      	ldr	r2, [r2, #0]
 8010f02:	605a      	str	r2, [r3, #4]
  request.source_port  = port;
 8010f04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010f0c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010f10:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8010f14:	8812      	ldrh	r2, [r2, #0]
 8010f16:	811a      	strh	r2, [r3, #8]
  request.inbound_pbuf = p;
 8010f18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010f20:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010f24:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8010f28:	6812      	ldr	r2, [r2, #0]
 8010f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  snmp_stats.inpkts++;
 8010f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80110a0 <snmp_receive+0x204>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	3301      	adds	r3, #1
 8010f32:	4a5b      	ldr	r2, [pc, #364]	@ (80110a0 <snmp_receive+0x204>)
 8010f34:	6013      	str	r3, [r2, #0]

  err = snmp_parse_inbound_frame(&request);
 8010f36:	f107 0314 	add.w	r3, r7, #20
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f000 fd62 	bl	8011a04 <snmp_parse_inbound_frame>
 8010f40:	4603      	mov	r3, r0
 8010f42:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if (err == ERR_OK) {
 8010f46:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	f040 80a2 	bne.w	8011094 <snmp_receive+0x1f8>
    err = snmp_prepare_outbound_frame(&request);
 8010f50:	f107 0314 	add.w	r3, r7, #20
 8010f54:	4618      	mov	r0, r3
 8010f56:	f001 f863 	bl	8012020 <snmp_prepare_outbound_frame>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    if (err == ERR_OK) {
 8010f60:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f040 8086 	bne.w	8011076 <snmp_receive+0x1da>

      if (request.error_status == SNMP_ERR_NOERROR) {
 8010f6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f6e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010f72:	69db      	ldr	r3, [r3, #28]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d13e      	bne.n	8010ff6 <snmp_receive+0x15a>
        /* only process frame if we do not already have an error to return (e.g. all readonly) */
        if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_REQ) {
 8010f78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010f80:	7d9b      	ldrb	r3, [r3, #22]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d108      	bne.n	8010f98 <snmp_receive+0xfc>
          err = snmp_process_get_request(&request);
 8010f86:	f107 0314 	add.w	r3, r7, #20
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f000 fa4e 	bl	801142c <snmp_process_get_request>
 8010f90:	4603      	mov	r3, r0
 8010f92:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010f96:	e02e      	b.n	8010ff6 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ) {
 8010f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f9c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010fa0:	7d9b      	ldrb	r3, [r3, #22]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d108      	bne.n	8010fb8 <snmp_receive+0x11c>
          err = snmp_process_getnext_request(&request);
 8010fa6:	f107 0314 	add.w	r3, r7, #20
 8010faa:	4618      	mov	r0, r3
 8010fac:	f000 fa83 	bl	80114b6 <snmp_process_getnext_request>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010fb6:	e01e      	b.n	8010ff6 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8010fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010fbc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010fc0:	7d9b      	ldrb	r3, [r3, #22]
 8010fc2:	2b05      	cmp	r3, #5
 8010fc4:	d108      	bne.n	8010fd8 <snmp_receive+0x13c>
          err = snmp_process_getbulk_request(&request);
 8010fc6:	f107 0314 	add.w	r3, r7, #20
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f000 fab8 	bl	8011540 <snmp_process_getbulk_request>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010fd6:	e00e      	b.n	8010ff6 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8010fd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010fdc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010fe0:	7d9b      	ldrb	r3, [r3, #22]
 8010fe2:	2b03      	cmp	r3, #3
 8010fe4:	d107      	bne.n	8010ff6 <snmp_receive+0x15a>
          err = snmp_process_set_request(&request);
 8010fe6:	f107 0314 	add.w	r3, r7, #20
 8010fea:	4618      	mov	r0, r3
 8010fec:	f000 fb91 	bl	8011712 <snmp_process_set_request>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        }
      }

      if (err == ERR_OK) {
 8010ff6:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d13b      	bne.n	8011076 <snmp_receive+0x1da>
        err = snmp_complete_outbound_frame(&request);
 8010ffe:	f107 0314 	add.w	r3, r7, #20
 8011002:	4618      	mov	r0, r3
 8011004:	f001 fb9c 	bl	8012740 <snmp_complete_outbound_frame>
 8011008:	4603      	mov	r3, r0
 801100a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
      
        if (err == ERR_OK) {
 801100e:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011012:	2b00      	cmp	r3, #0
 8011014:	d12f      	bne.n	8011076 <snmp_receive+0x1da>
          err = snmp_sendto(request.handle, request.outbound_pbuf, request.source_ip, request.source_port);
 8011016:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801101a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801101e:	6818      	ldr	r0, [r3, #0]
 8011020:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011024:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011028:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801102a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801102e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011032:	685a      	ldr	r2, [r3, #4]
 8011034:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011038:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801103c:	891b      	ldrh	r3, [r3, #8]
 801103e:	f002 f8fe 	bl	801323e <snmp_sendto>
 8011042:	4603      	mov	r3, r0
 8011044:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

          if ((request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) 
 8011048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801104c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011050:	7d9b      	ldrb	r3, [r3, #22]
 8011052:	2b03      	cmp	r3, #3
 8011054:	d10f      	bne.n	8011076 <snmp_receive+0x1da>
            && (request.error_status == SNMP_ERR_NOERROR) 
 8011056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801105a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801105e:	69db      	ldr	r3, [r3, #28]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d108      	bne.n	8011076 <snmp_receive+0x1da>
            && (snmp_write_callback != NULL)) {
 8011064:	4b0f      	ldr	r3, [pc, #60]	@ (80110a4 <snmp_receive+0x208>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d004      	beq.n	8011076 <snmp_receive+0x1da>
            /* raise write notification for all written objects */
            snmp_execute_write_callbacks(&request);
 801106c:	f107 0314 	add.w	r3, r7, #20
 8011070:	4618      	mov	r0, r3
 8011072:	f001 fd47 	bl	8012b04 <snmp_execute_write_callbacks>
          }
        }
      }
    }
  
    if (request.outbound_pbuf != NULL) {
 8011076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801107a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011080:	2b00      	cmp	r3, #0
 8011082:	d007      	beq.n	8011094 <snmp_receive+0x1f8>
      pbuf_free(request.outbound_pbuf);
 8011084:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011088:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801108e:	4618      	mov	r0, r3
 8011090:	f004 fb58 	bl	8015744 <pbuf_free>
    }
  }
}
 8011094:	bf00      	nop
 8011096:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801109a:	46bd      	mov	sp, r7
 801109c:	bd90      	pop	{r4, r7, pc}
 801109e:	bf00      	nop
 80110a0:	20008584 	.word	0x20008584
 80110a4:	20008624 	.word	0x20008624

080110a8 <snmp_msg_getnext_validate_node_inst>:

static u8_t
snmp_msg_getnext_validate_node_inst(struct snmp_node_instance* node_instance, void* validate_arg)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6039      	str	r1, [r7, #0]
  if (((node_instance->access & SNMP_NODE_INSTANCE_ACCESS_READ) != SNMP_NODE_INSTANCE_ACCESS_READ) || (node_instance->get_value == NULL)) {
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80110b8:	f003 0301 	and.w	r3, r3, #1
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d004      	beq.n	80110ca <snmp_msg_getnext_validate_node_inst+0x22>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d101      	bne.n	80110ce <snmp_msg_getnext_validate_node_inst+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 80110ca:	23f1      	movs	r3, #241	@ 0xf1
 80110cc:	e00b      	b.n	80110e6 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  if ((node_instance->asn1_type == SNMP_ASN1_TYPE_COUNTER64) && (((struct snmp_request*)validate_arg)->version == SNMP_VERSION_1)) {
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80110d4:	2b46      	cmp	r3, #70	@ 0x46
 80110d6:	d105      	bne.n	80110e4 <snmp_msg_getnext_validate_node_inst+0x3c>
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	7a9b      	ldrb	r3, [r3, #10]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d101      	bne.n	80110e4 <snmp_msg_getnext_validate_node_inst+0x3c>
    /* according to RFC 2089 skip Counter64 objects in GetNext requests from v1 clients */
    return SNMP_ERR_NOSUCHINSTANCE;
 80110e0:	23f1      	movs	r3, #241	@ 0xf1
 80110e2:	e000      	b.n	80110e6 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  return SNMP_ERR_NOERROR;
 80110e4:	2300      	movs	r3, #0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	370c      	adds	r7, #12
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bc80      	pop	{r7}
 80110ee:	4770      	bx	lr

080110f0 <snmp_process_varbind>:

static void 
snmp_process_varbind(struct snmp_request *request, struct snmp_varbind *vb, u8_t get_next)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b0f6      	sub	sp, #472	@ 0x1d8
 80110f4:	af02      	add	r7, sp, #8
 80110f6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80110fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80110fe:	6018      	str	r0, [r3, #0]
 8011100:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011104:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011108:	6019      	str	r1, [r3, #0]
 801110a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801110e:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 8011112:	701a      	strb	r2, [r3, #0]
  err_t err;
  struct snmp_node_instance node_instance;
  memset(&node_instance, 0, sizeof(node_instance));
 8011114:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8011118:	22ec      	movs	r2, #236	@ 0xec
 801111a:	2100      	movs	r1, #0
 801111c:	4618      	mov	r0, r3
 801111e:	f010 fcd7 	bl	8021ad0 <memset>

  if (get_next) {
 8011122:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011126:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d03d      	beq.n	80111ac <snmp_process_varbind+0xbc>
    struct snmp_obj_id result_oid;
    request->error_status = snmp_get_next_node_instance_from_oid(vb->oid.id, vb->oid.len, snmp_msg_getnext_validate_node_inst, request,  &result_oid, &node_instance);
 8011130:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011134:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f103 000c 	add.w	r0, r3, #12
 801113e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011142:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	7a19      	ldrb	r1, [r3, #8]
 801114a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801114e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011152:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011156:	9201      	str	r2, [sp, #4]
 8011158:	f107 0214 	add.w	r2, r7, #20
 801115c:	9200      	str	r2, [sp, #0]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4aae      	ldr	r2, [pc, #696]	@ (801141c <snmp_process_varbind+0x32c>)
 8011162:	f7fd fb18 	bl	800e796 <snmp_get_next_node_instance_from_oid>
 8011166:	4603      	mov	r3, r0
 8011168:	461a      	mov	r2, r3
 801116a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801116e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 8011176:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801117a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	69db      	ldr	r3, [r3, #28]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d158      	bne.n	8011238 <snmp_process_varbind+0x148>
      snmp_oid_assign(&vb->oid, result_oid.id, result_oid.len);
 8011186:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801118a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f103 0008 	add.w	r0, r3, #8
 8011194:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011198:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801119c:	781a      	ldrb	r2, [r3, #0]
 801119e:	f107 0314 	add.w	r3, r7, #20
 80111a2:	3304      	adds	r3, #4
 80111a4:	4619      	mov	r1, r3
 80111a6:	f7fd f867 	bl	800e278 <snmp_oid_assign>
 80111aa:	e045      	b.n	8011238 <snmp_process_varbind+0x148>
    }
  } else {
    request->error_status = snmp_get_node_instance_from_oid(vb->oid.id, vb->oid.len, &node_instance);
 80111ac:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80111b0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f103 000c 	add.w	r0, r3, #12
 80111ba:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80111be:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	7a1b      	ldrb	r3, [r3, #8]
 80111c6:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80111ca:	4619      	mov	r1, r3
 80111cc:	f7fd fa9c 	bl	800e708 <snmp_get_node_instance_from_oid>
 80111d0:	4603      	mov	r3, r0
 80111d2:	461a      	mov	r2, r3
 80111d4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80111d8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 80111e0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80111e4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	69db      	ldr	r3, [r3, #28]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d123      	bne.n	8011238 <snmp_process_varbind+0x148>
      /* use 'getnext_validate' method for validation to avoid code duplication (some checks have to be executed here) */
      request->error_status = snmp_msg_getnext_validate_node_inst(&node_instance, request);
 80111f0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80111f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80111f8:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80111fc:	6819      	ldr	r1, [r3, #0]
 80111fe:	4610      	mov	r0, r2
 8011200:	f7ff ff52 	bl	80110a8 <snmp_msg_getnext_validate_node_inst>
 8011204:	4603      	mov	r3, r0
 8011206:	461a      	mov	r2, r3
 8011208:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801120c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	61da      	str	r2, [r3, #28]

      if (request->error_status != SNMP_ERR_NOERROR) {
 8011214:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011218:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	69db      	ldr	r3, [r3, #28]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d009      	beq.n	8011238 <snmp_process_varbind+0x148>
        if (node_instance.release_instance != NULL) {
 8011224:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d005      	beq.n	8011238 <snmp_process_varbind+0x148>
          node_instance.release_instance(&node_instance);
 801122c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011230:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011234:	4610      	mov	r0, r2
 8011236:	4798      	blx	r3
        }
      }
    }
  }

  if (request->error_status != SNMP_ERR_NOERROR)  {
 8011238:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801123c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	69db      	ldr	r3, [r3, #28]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d070      	beq.n	801132a <snmp_process_varbind+0x23a>
    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 8011248:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801124c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	69db      	ldr	r3, [r3, #28]
 8011254:	2bef      	cmp	r3, #239	@ 0xef
 8011256:	dd60      	ble.n	801131a <snmp_process_varbind+0x22a>
      if ((request->version == SNMP_VERSION_2c) || request->version == SNMP_VERSION_3) {
 8011258:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801125c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	7a9b      	ldrb	r3, [r3, #10]
 8011264:	2b01      	cmp	r3, #1
 8011266:	d008      	beq.n	801127a <snmp_process_varbind+0x18a>
 8011268:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801126c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	7a9b      	ldrb	r3, [r3, #10]
 8011274:	2b03      	cmp	r3, #3
 8011276:	f040 80cc 	bne.w	8011412 <snmp_process_varbind+0x322>
        /* in SNMP v2c a varbind related exception is stored in varbind and not in frame header */
        vb->type = (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | (request->error_status & SNMP_VARBIND_EXCEPTION_MASK));
 801127a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801127e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	69db      	ldr	r3, [r3, #28]
 8011286:	b25b      	sxtb	r3, r3
 8011288:	f003 030f 	and.w	r3, r3, #15
 801128c:	b25b      	sxtb	r3, r3
 801128e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011292:	b25b      	sxtb	r3, r3
 8011294:	b2da      	uxtb	r2, r3
 8011296:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801129a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
        vb->value_len = 0;
 80112a4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80112a8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	2200      	movs	r2, #0
 80112b0:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

        err = snmp_append_outbound_varbind(&(request->outbound_pbuf_stream), vb);
 80112b4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80112b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80112c2:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80112c6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80112ca:	6819      	ldr	r1, [r3, #0]
 80112cc:	4610      	mov	r0, r2
 80112ce:	f001 f921 	bl	8012514 <snmp_append_outbound_varbind>
 80112d2:	4603      	mov	r3, r0
 80112d4:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
        if (err == ERR_OK) {
 80112d8:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d107      	bne.n	80112f0 <snmp_process_varbind+0x200>
          /* we stored the exception in varbind -> go on */
          request->error_status = SNMP_ERR_NOERROR;
 80112e0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80112e4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2200      	movs	r2, #0
 80112ec:	61da      	str	r2, [r3, #28]

    if (node_instance.release_instance != NULL) {
      node_instance.release_instance(&node_instance);
    }
  }
}
 80112ee:	e090      	b.n	8011412 <snmp_process_varbind+0x322>
        } else if (err == ERR_BUF) {
 80112f0:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 80112f4:	f113 0f02 	cmn.w	r3, #2
 80112f8:	d107      	bne.n	801130a <snmp_process_varbind+0x21a>
          request->error_status = SNMP_ERR_TOOBIG;
 80112fa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80112fe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2201      	movs	r2, #1
 8011306:	61da      	str	r2, [r3, #28]
}
 8011308:	e083      	b.n	8011412 <snmp_process_varbind+0x322>
          request->error_status = SNMP_ERR_GENERROR;
 801130a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801130e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2205      	movs	r2, #5
 8011316:	61da      	str	r2, [r3, #28]
}
 8011318:	e07b      	b.n	8011412 <snmp_process_varbind+0x322>
      request->error_status = SNMP_ERR_GENERROR;
 801131a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801131e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2205      	movs	r2, #5
 8011326:	61da      	str	r2, [r3, #28]
}
 8011328:	e073      	b.n	8011412 <snmp_process_varbind+0x322>
    s16_t len = node_instance.get_value(&node_instance, vb->value);
 801132a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801132e:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 8011332:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8011336:	6812      	ldr	r2, [r2, #0]
 8011338:	f8d2 10d8 	ldr.w	r1, [r2, #216]	@ 0xd8
 801133c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011340:	4610      	mov	r0, r2
 8011342:	4798      	blx	r3
 8011344:	4603      	mov	r3, r0
 8011346:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
    vb->type = node_instance.asn1_type;
 801134a:	f897 21b0 	ldrb.w	r2, [r7, #432]	@ 0x1b0
 801134e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011352:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    if(len >= 0) {
 801135c:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	@ 0x1ce
 8011360:	2b00      	cmp	r3, #0
 8011362:	db45      	blt.n	80113f0 <snmp_process_varbind+0x300>
      vb->value_len = (u16_t)len; /* cast is OK because we checked >= 0 above */
 8011364:	f8b7 21ce 	ldrh.w	r2, [r7, #462]	@ 0x1ce
 8011368:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801136c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
      LWIP_ASSERT("SNMP_MAX_VALUE_SIZE is configured too low", (vb->value_len & ~SNMP_GET_VALUE_RAW_DATA) <= SNMP_MAX_VALUE_SIZE);
 8011376:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801137a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011384:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011388:	2bc8      	cmp	r3, #200	@ 0xc8
 801138a:	d906      	bls.n	801139a <snmp_process_varbind+0x2aa>
 801138c:	4b24      	ldr	r3, [pc, #144]	@ (8011420 <snmp_process_varbind+0x330>)
 801138e:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8011392:	4924      	ldr	r1, [pc, #144]	@ (8011424 <snmp_process_varbind+0x334>)
 8011394:	4824      	ldr	r0, [pc, #144]	@ (8011428 <snmp_process_varbind+0x338>)
 8011396:	f010 f9c5 	bl	8021724 <iprintf>
      err = snmp_append_outbound_varbind(&request->outbound_pbuf_stream, vb);
 801139a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801139e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80113a8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80113ac:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80113b0:	6819      	ldr	r1, [r3, #0]
 80113b2:	4610      	mov	r0, r2
 80113b4:	f001 f8ae 	bl	8012514 <snmp_append_outbound_varbind>
 80113b8:	4603      	mov	r3, r0
 80113ba:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
      if (err == ERR_BUF) {
 80113be:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 80113c2:	f113 0f02 	cmn.w	r3, #2
 80113c6:	d107      	bne.n	80113d8 <snmp_process_varbind+0x2e8>
        request->error_status = SNMP_ERR_TOOBIG;
 80113c8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80113cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2201      	movs	r2, #1
 80113d4:	61da      	str	r2, [r3, #28]
 80113d6:	e012      	b.n	80113fe <snmp_process_varbind+0x30e>
      } else if (err != ERR_OK) {
 80113d8:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00e      	beq.n	80113fe <snmp_process_varbind+0x30e>
        request->error_status = SNMP_ERR_GENERROR;
 80113e0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80113e4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2205      	movs	r2, #5
 80113ec:	61da      	str	r2, [r3, #28]
 80113ee:	e006      	b.n	80113fe <snmp_process_varbind+0x30e>
      request->error_status = SNMP_ERR_GENERROR;
 80113f0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80113f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2205      	movs	r2, #5
 80113fc:	61da      	str	r2, [r3, #28]
    if (node_instance.release_instance != NULL) {
 80113fe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d005      	beq.n	8011412 <snmp_process_varbind+0x322>
      node_instance.release_instance(&node_instance);
 8011406:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801140a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801140e:	4610      	mov	r0, r2
 8011410:	4798      	blx	r3
}
 8011412:	bf00      	nop
 8011414:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	080110a9 	.word	0x080110a9
 8011420:	08024fd8 	.word	0x08024fd8
 8011424:	08025080 	.word	0x08025080
 8011428:	08025034 	.word	0x08025034

0801142c <snmp_process_get_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_get_request(struct snmp_request *request)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b0ba      	sub	sp, #232	@ 0xe8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	3358      	adds	r3, #88	@ 0x58
 8011438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 801143c:	e030      	b.n	80114a0 <snmp_process_get_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	3330      	adds	r3, #48	@ 0x30
 8011442:	f107 0208 	add.w	r2, r7, #8
 8011446:	4611      	mov	r1, r2
 8011448:	4618      	mov	r0, r3
 801144a:	f001 fba5 	bl	8012b98 <snmp_vb_enumerator_get_next>
 801144e:	4603      	mov	r3, r0
 8011450:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011454:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011458:	2b00      	cmp	r3, #0
 801145a:	d113      	bne.n	8011484 <snmp_process_get_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 801145c:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8011460:	2b05      	cmp	r3, #5
 8011462:	d10b      	bne.n	801147c <snmp_process_get_request+0x50>
 8011464:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8011468:	2b00      	cmp	r3, #0
 801146a:	d107      	bne.n	801147c <snmp_process_get_request+0x50>
        snmp_process_varbind(request, &vb, 0);
 801146c:	f107 0308 	add.w	r3, r7, #8
 8011470:	2200      	movs	r2, #0
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff fe3b 	bl	80110f0 <snmp_process_varbind>
 801147a:	e011      	b.n	80114a0 <snmp_process_get_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2205      	movs	r2, #5
 8011480:	61da      	str	r2, [r3, #28]
 8011482:	e00d      	b.n	80114a0 <snmp_process_get_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011484:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011488:	2b01      	cmp	r3, #1
 801148a:	d00e      	beq.n	80114aa <snmp_process_get_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 801148c:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011490:	2b02      	cmp	r3, #2
 8011492:	d102      	bne.n	801149a <snmp_process_get_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011494:	f06f 030f 	mvn.w	r3, #15
 8011498:	e009      	b.n	80114ae <snmp_process_get_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2205      	movs	r2, #5
 801149e:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	69db      	ldr	r3, [r3, #28]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d0ca      	beq.n	801143e <snmp_process_get_request+0x12>
 80114a8:	e000      	b.n	80114ac <snmp_process_get_request+0x80>
      break;
 80114aa:	bf00      	nop
    }
  }

  return ERR_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	37e8      	adds	r7, #232	@ 0xe8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <snmp_process_getnext_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getnext_request(struct snmp_request *request)
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b0ba      	sub	sp, #232	@ 0xe8
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	3358      	adds	r3, #88	@ 0x58
 80114c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-next request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 80114c6:	e030      	b.n	801152a <snmp_process_getnext_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3330      	adds	r3, #48	@ 0x30
 80114cc:	f107 0208 	add.w	r2, r7, #8
 80114d0:	4611      	mov	r1, r2
 80114d2:	4618      	mov	r0, r3
 80114d4:	f001 fb60 	bl	8012b98 <snmp_vb_enumerator_get_next>
 80114d8:	4603      	mov	r3, r0
 80114da:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 80114de:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d113      	bne.n	801150e <snmp_process_getnext_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 80114e6:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 80114ea:	2b05      	cmp	r3, #5
 80114ec:	d10b      	bne.n	8011506 <snmp_process_getnext_request+0x50>
 80114ee:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d107      	bne.n	8011506 <snmp_process_getnext_request+0x50>
        snmp_process_varbind(request, &vb, 1);
 80114f6:	f107 0308 	add.w	r3, r7, #8
 80114fa:	2201      	movs	r2, #1
 80114fc:	4619      	mov	r1, r3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f7ff fdf6 	bl	80110f0 <snmp_process_varbind>
 8011504:	e011      	b.n	801152a <snmp_process_getnext_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2205      	movs	r2, #5
 801150a:	61da      	str	r2, [r3, #28]
 801150c:	e00d      	b.n	801152a <snmp_process_getnext_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 801150e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011512:	2b01      	cmp	r3, #1
 8011514:	d00e      	beq.n	8011534 <snmp_process_getnext_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011516:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 801151a:	2b02      	cmp	r3, #2
 801151c:	d102      	bne.n	8011524 <snmp_process_getnext_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 801151e:	f06f 030f 	mvn.w	r3, #15
 8011522:	e009      	b.n	8011538 <snmp_process_getnext_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2205      	movs	r2, #5
 8011528:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	69db      	ldr	r3, [r3, #28]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d0ca      	beq.n	80114c8 <snmp_process_getnext_request+0x12>
 8011532:	e000      	b.n	8011536 <snmp_process_getnext_request+0x80>
      break;
 8011534:	bf00      	nop
    }
  }
  
  return ERR_OK;
 8011536:	2300      	movs	r3, #0
}
 8011538:	4618      	mov	r0, r3
 801153a:	37e8      	adds	r7, #232	@ 0xe8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <snmp_process_getbulk_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getbulk_request(struct snmp_request *request)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b0c0      	sub	sp, #256	@ 0x100
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  s32_t non_repeaters     = request->non_repeaters;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801154c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  s32_t repetitions;
  u16_t repetition_offset = 0;
 8011550:	2300      	movs	r3, #0
 8011552:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
  struct snmp_varbind_enumerator repetition_varbind_enumerator;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	3358      	adds	r3, #88	@ 0x58
 801155a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  if (SNMP_LWIP_GETBULK_MAX_REPETITIONS > 0) {
    repetitions = LWIP_MIN(request->max_repetitions, SNMP_LWIP_GETBULK_MAX_REPETITIONS);
  } else {
    repetitions = request->max_repetitions;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011562:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  }

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-bulk request\n"));

  /* process non repeaters and first repetition */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011566:	e043      	b.n	80115f0 <snmp_process_getbulk_request+0xb0>
    if (non_repeaters == 0) {
 8011568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801156c:	2b00      	cmp	r3, #0
 801156e:	d10d      	bne.n	801158c <snmp_process_getbulk_request+0x4c>
      repetition_offset = request->outbound_pbuf_stream.offset;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8011576:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

      if (repetitions == 0) {
 801157a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801157e:	2b00      	cmp	r3, #0
 8011580:	d03b      	beq.n	80115fa <snmp_process_getbulk_request+0xba>
        /* do not resolve repeaters when repetitions is set to 0 */
        break;
      }
      repetitions--;
 8011582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011586:	3b01      	subs	r3, #1
 8011588:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    }

    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	3330      	adds	r3, #48	@ 0x30
 8011590:	f107 020c 	add.w	r2, r7, #12
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f001 fafe 	bl	8012b98 <snmp_vb_enumerator_get_next>
 801159c:	4603      	mov	r3, r0
 801159e:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
    if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80115a2:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	d029      	beq.n	80115fe <snmp_process_getbulk_request+0xbe>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 80115aa:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80115ae:	2b02      	cmp	r3, #2
 80115b0:	d102      	bne.n	80115b8 <snmp_process_getbulk_request+0x78>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 80115b2:	f06f 030f 	mvn.w	r3, #15
 80115b6:	e0a7      	b.n	8011708 <snmp_process_getbulk_request+0x1c8>
    } else if ((err != SNMP_VB_ENUMERATOR_ERR_OK) || (vb.type != SNMP_ASN1_TYPE_NULL) || (vb.value_len != 0)) {
 80115b8:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d107      	bne.n	80115d0 <snmp_process_getbulk_request+0x90>
 80115c0:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 80115c4:	2b05      	cmp	r3, #5
 80115c6:	d103      	bne.n	80115d0 <snmp_process_getbulk_request+0x90>
 80115c8:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d003      	beq.n	80115d8 <snmp_process_getbulk_request+0x98>
      request->error_status = SNMP_ERR_GENERROR;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2205      	movs	r2, #5
 80115d4:	61da      	str	r2, [r3, #28]
 80115d6:	e00b      	b.n	80115f0 <snmp_process_getbulk_request+0xb0>
    } else {
      snmp_process_varbind(request, &vb, 1);
 80115d8:	f107 030c 	add.w	r3, r7, #12
 80115dc:	2201      	movs	r2, #1
 80115de:	4619      	mov	r1, r3
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f7ff fd85 	bl	80110f0 <snmp_process_varbind>
      non_repeaters--;
 80115e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80115ea:	3b01      	subs	r3, #1
 80115ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  while (request->error_status == SNMP_ERR_NOERROR) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	69db      	ldr	r3, [r3, #28]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d0b7      	beq.n	8011568 <snmp_process_getbulk_request+0x28>
 80115f8:	e06d      	b.n	80116d6 <snmp_process_getbulk_request+0x196>
        break;
 80115fa:	bf00      	nop
 80115fc:	e06b      	b.n	80116d6 <snmp_process_getbulk_request+0x196>
      break;
 80115fe:	bf00      	nop
    }
  }

  /* process repetitions > 1 */
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 8011600:	e069      	b.n	80116d6 <snmp_process_getbulk_request+0x196>

    u8_t all_endofmibview = 1;
 8011602:	2301      	movs	r3, #1
 8011604:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
    
    snmp_vb_enumerator_init(&repetition_varbind_enumerator, request->outbound_pbuf, repetition_offset, request->outbound_pbuf_stream.offset - repetition_offset);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8011612:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	b29b      	uxth	r3, r3
 801161a:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 801161e:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8011622:	f001 faa1 	bl	8012b68 <snmp_vb_enumerator_init>
    repetition_offset = request->outbound_pbuf_stream.offset; /* for next loop */
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 801162c:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

    while (request->error_status == SNMP_ERR_NOERROR) {
 8011630:	e03e      	b.n	80116b0 <snmp_process_getbulk_request+0x170>
      vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned) */
 8011632:	2300      	movs	r3, #0
 8011634:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      err = snmp_vb_enumerator_get_next(&repetition_varbind_enumerator, &vb);
 8011638:	f107 020c 	add.w	r2, r7, #12
 801163c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8011640:	4611      	mov	r1, r2
 8011642:	4618      	mov	r0, r3
 8011644:	f001 faa8 	bl	8012b98 <snmp_vb_enumerator_get_next>
 8011648:	4603      	mov	r3, r0
 801164a:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 801164e:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011652:	2b00      	cmp	r3, #0
 8011654:	d11e      	bne.n	8011694 <snmp_process_getbulk_request+0x154>
        vb.value = request->value_buffer;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	3358      	adds	r3, #88	@ 0x58
 801165a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        snmp_process_varbind(request, &vb, 1);
 801165e:	f107 030c 	add.w	r3, r7, #12
 8011662:	2201      	movs	r2, #1
 8011664:	4619      	mov	r1, r3
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff fd42 	bl	80110f0 <snmp_process_varbind>

        if (request->error_status != SNMP_ERR_NOERROR) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	69db      	ldr	r3, [r3, #28]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d007      	beq.n	8011684 <snmp_process_getbulk_request+0x144>
          /* already set correct error-index (here it cannot be taken from inbound varbind enumerator) */
          request->error_index = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011678:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 801167c:	441a      	add	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	621a      	str	r2, [r3, #32]
 8011682:	e015      	b.n	80116b0 <snmp_process_getbulk_request+0x170>
        } else if (vb.type != (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTEXT_VARBIND_END_OF_MIB_VIEW)) {
 8011684:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8011688:	2b82      	cmp	r3, #130	@ 0x82
 801168a:	d011      	beq.n	80116b0 <snmp_process_getbulk_request+0x170>
          all_endofmibview = 0;
 801168c:	2300      	movs	r3, #0
 801168e:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 8011692:	e00d      	b.n	80116b0 <snmp_process_getbulk_request+0x170>
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011694:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011698:	2b01      	cmp	r3, #1
 801169a:	d00e      	beq.n	80116ba <snmp_process_getbulk_request+0x17a>
        /* no more varbinds in request */
        break;
      } else {
        LWIP_DEBUGF(SNMP_DEBUG, ("Very strange, we cannot parse the varbind output that we created just before!"));
        request->error_status = SNMP_ERR_GENERROR;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2205      	movs	r2, #5
 80116a0:	61da      	str	r2, [r3, #28]
        request->error_index  = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116a6:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 80116aa:	441a      	add	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	621a      	str	r2, [r3, #32]
    while (request->error_status == SNMP_ERR_NOERROR) {
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	69db      	ldr	r3, [r3, #28]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0bc      	beq.n	8011632 <snmp_process_getbulk_request+0xf2>
 80116b8:	e000      	b.n	80116bc <snmp_process_getbulk_request+0x17c>
        break;
 80116ba:	bf00      	nop
      }
    }

    if ((request->error_status == SNMP_ERR_NOERROR) && all_endofmibview) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	69db      	ldr	r3, [r3, #28]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d103      	bne.n	80116cc <snmp_process_getbulk_request+0x18c>
 80116c4:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d114      	bne.n	80116f6 <snmp_process_getbulk_request+0x1b6>
      /* stop when all varbinds in a loop return EndOfMibView */
      break;
    }
    
    repetitions--;
 80116cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80116d0:	3b01      	subs	r3, #1
 80116d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	69db      	ldr	r3, [r3, #28]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d10c      	bne.n	80116f8 <snmp_process_getbulk_request+0x1b8>
 80116de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	dd08      	ble.n	80116f8 <snmp_process_getbulk_request+0x1b8>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80116ec:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d186      	bne.n	8011602 <snmp_process_getbulk_request+0xc2>
 80116f4:	e000      	b.n	80116f8 <snmp_process_getbulk_request+0x1b8>
      break;
 80116f6:	bf00      	nop
  }

  if (request->error_status == SNMP_ERR_TOOBIG) {
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	69db      	ldr	r3, [r3, #28]
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d102      	bne.n	8011706 <snmp_process_getbulk_request+0x1c6>
    /* for GetBulk it is ok, if not all requested variables fit into the response -> just return the varbinds added so far */
    request->error_status = SNMP_ERR_NOERROR;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	61da      	str	r2, [r3, #28]
  }

  return ERR_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}

08011712 <snmp_process_set_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_set_request(struct snmp_request *request)
{
 8011712:	b580      	push	{r7, lr}
 8011714:	b0f6      	sub	sp, #472	@ 0x1d8
 8011716:	af00      	add	r7, sp, #0
 8011718:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801171c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011720:	6018      	str	r0, [r3, #0]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011722:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011726:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	3358      	adds	r3, #88	@ 0x58
 801172e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP set request\n"));

  /* perform set test on all objects */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011732:	e0ad      	b.n	8011890 <snmp_process_set_request+0x17e>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011734:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011738:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	3330      	adds	r3, #48	@ 0x30
 8011740:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8011744:	4611      	mov	r1, r2
 8011746:	4618      	mov	r0, r3
 8011748:	f001 fa26 	bl	8012b98 <snmp_vb_enumerator_get_next>
 801174c:	4603      	mov	r3, r0
 801174e:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011752:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011756:	2b00      	cmp	r3, #0
 8011758:	d17c      	bne.n	8011854 <snmp_process_set_request+0x142>
      struct snmp_node_instance node_instance;
      memset(&node_instance, 0, sizeof(node_instance));
 801175a:	f107 030c 	add.w	r3, r7, #12
 801175e:	22ec      	movs	r2, #236	@ 0xec
 8011760:	2100      	movs	r1, #0
 8011762:	4618      	mov	r0, r3
 8011764:	f010 f9b4 	bl	8021ad0 <memset>
      
      request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 8011768:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 801176c:	f107 020c 	add.w	r2, r7, #12
 8011770:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8011774:	330c      	adds	r3, #12
 8011776:	4618      	mov	r0, r3
 8011778:	f7fc ffc6 	bl	800e708 <snmp_get_node_instance_from_oid>
 801177c:	4603      	mov	r3, r0
 801177e:	461a      	mov	r2, r3
 8011780:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011784:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	61da      	str	r2, [r3, #28]
      if (request->error_status == SNMP_ERR_NOERROR) {
 801178c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011790:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	69db      	ldr	r3, [r3, #28]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d179      	bne.n	8011890 <snmp_process_set_request+0x17e>
        if (node_instance.asn1_type != vb.type) {
 801179c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80117a0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80117a4:	f893 20d0 	ldrb.w	r2, [r3, #208]	@ 0xd0
 80117a8:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d007      	beq.n	80117c0 <snmp_process_set_request+0xae>
          request->error_status = SNMP_ERR_WRONGTYPE;
 80117b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80117b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2207      	movs	r2, #7
 80117bc:	61da      	str	r2, [r3, #28]
 80117be:	e036      	b.n	801182e <snmp_process_set_request+0x11c>
        } else if (((node_instance.access & SNMP_NODE_INSTANCE_ACCESS_WRITE) != SNMP_NODE_INSTANCE_ACCESS_WRITE) || (node_instance.set_value == NULL)) {
 80117c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80117c4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80117c8:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80117cc:	f003 0302 	and.w	r3, r3, #2
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d007      	beq.n	80117e4 <snmp_process_set_request+0xd2>
 80117d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80117d8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80117dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d107      	bne.n	80117f4 <snmp_process_set_request+0xe2>
          request->error_status = SNMP_ERR_NOTWRITABLE;
 80117e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80117e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2211      	movs	r2, #17
 80117f0:	61da      	str	r2, [r3, #28]
 80117f2:	e01c      	b.n	801182e <snmp_process_set_request+0x11c>
        } else {
          if (node_instance.set_test != NULL) {
 80117f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80117f8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80117fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011800:	2b00      	cmp	r3, #0
 8011802:	d014      	beq.n	801182e <snmp_process_set_request+0x11c>
            request->error_status = node_instance.set_test(&node_instance, vb.value_len, vb.value);
 8011804:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011808:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801180c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011810:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 8011814:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8011818:	f107 000c 	add.w	r0, r7, #12
 801181c:	4798      	blx	r3
 801181e:	4603      	mov	r3, r0
 8011820:	461a      	mov	r2, r3
 8011822:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011826:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	61da      	str	r2, [r3, #28]
          }
        }

        if (node_instance.release_instance != NULL) {
 801182e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011832:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d028      	beq.n	8011890 <snmp_process_set_request+0x17e>
          node_instance.release_instance(&node_instance);
 801183e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011842:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801184a:	f107 020c 	add.w	r2, r7, #12
 801184e:	4610      	mov	r0, r2
 8011850:	4798      	blx	r3
 8011852:	e01d      	b.n	8011890 <snmp_process_set_request+0x17e>
        }
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011854:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011858:	2b01      	cmp	r3, #1
 801185a:	d023      	beq.n	80118a4 <snmp_process_set_request+0x192>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH) {
 801185c:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011860:	2b03      	cmp	r3, #3
 8011862:	d107      	bne.n	8011874 <snmp_process_set_request+0x162>
      request->error_status = SNMP_ERR_WRONGLENGTH;
 8011864:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011868:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2208      	movs	r2, #8
 8011870:	61da      	str	r2, [r3, #28]
 8011872:	e00d      	b.n	8011890 <snmp_process_set_request+0x17e>
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011874:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011878:	2b02      	cmp	r3, #2
 801187a:	d102      	bne.n	8011882 <snmp_process_set_request+0x170>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 801187c:	f06f 030f 	mvn.w	r3, #15
 8011880:	e0bb      	b.n	80119fa <snmp_process_set_request+0x2e8>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011882:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011886:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2205      	movs	r2, #5
 801188e:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011890:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011894:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	69db      	ldr	r3, [r3, #28]
 801189c:	2b00      	cmp	r3, #0
 801189e:	f43f af49 	beq.w	8011734 <snmp_process_set_request+0x22>
 80118a2:	e000      	b.n	80118a6 <snmp_process_set_request+0x194>
      break;
 80118a4:	bf00      	nop
    }
  }

  /* perform real set operation on all objects */
  if (request->error_status == SNMP_ERR_NOERROR) {
 80118a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80118aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	69db      	ldr	r3, [r3, #28]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	f040 80a0 	bne.w	80119f8 <snmp_process_set_request+0x2e6>
    snmp_vb_enumerator_init(&request->inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 80118b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80118bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80118c6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80118ca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80118d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80118d6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80118de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80118e2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80118ea:	f001 f93d 	bl	8012b68 <snmp_vb_enumerator_init>
    while (request->error_status == SNMP_ERR_NOERROR) {
 80118ee:	e078      	b.n	80119e2 <snmp_process_set_request+0x2d0>
      err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 80118f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80118f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	3330      	adds	r3, #48	@ 0x30
 80118fc:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8011900:	4611      	mov	r1, r2
 8011902:	4618      	mov	r0, r3
 8011904:	f001 f948 	bl	8012b98 <snmp_vb_enumerator_get_next>
 8011908:	4603      	mov	r3, r0
 801190a:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 801190e:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011912:	2b00      	cmp	r3, #0
 8011914:	d15a      	bne.n	80119cc <snmp_process_set_request+0x2ba>
        struct snmp_node_instance node_instance;
        memset(&node_instance, 0, sizeof(node_instance));
 8011916:	f107 030c 	add.w	r3, r7, #12
 801191a:	22ec      	movs	r2, #236	@ 0xec
 801191c:	2100      	movs	r1, #0
 801191e:	4618      	mov	r0, r3
 8011920:	f010 f8d6 	bl	8021ad0 <memset>
        request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 8011924:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 8011928:	f107 020c 	add.w	r2, r7, #12
 801192c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8011930:	330c      	adds	r3, #12
 8011932:	4618      	mov	r0, r3
 8011934:	f7fc fee8 	bl	800e708 <snmp_get_node_instance_from_oid>
 8011938:	4603      	mov	r3, r0
 801193a:	461a      	mov	r2, r3
 801193c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011940:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	61da      	str	r2, [r3, #28]
        if (request->error_status == SNMP_ERR_NOERROR) {
 8011948:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801194c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	69db      	ldr	r3, [r3, #28]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d144      	bne.n	80119e2 <snmp_process_set_request+0x2d0>
          if (node_instance.set_value(&node_instance, vb.value_len, vb.value) != SNMP_ERR_NOERROR) {
 8011958:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801195c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011960:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8011964:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 8011968:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801196c:	f107 000c 	add.w	r0, r7, #12
 8011970:	4798      	blx	r3
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d016      	beq.n	80119a6 <snmp_process_set_request+0x294>
            if (request->inbound_varbind_enumerator.varbind_count == 1) {
 8011978:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801197c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011984:	2b01      	cmp	r3, #1
 8011986:	d107      	bne.n	8011998 <snmp_process_set_request+0x286>
              request->error_status = SNMP_ERR_COMMITFAILED;
 8011988:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801198c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	220e      	movs	r2, #14
 8011994:	61da      	str	r2, [r3, #28]
 8011996:	e006      	b.n	80119a6 <snmp_process_set_request+0x294>
            } else {
              /* we cannot undo the set operations done so far */
              request->error_status = SNMP_ERR_UNDOFAILED;
 8011998:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801199c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	220f      	movs	r2, #15
 80119a4:	61da      	str	r2, [r3, #28]
            }
          }

          if (node_instance.release_instance != NULL) {
 80119a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80119aa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80119ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d015      	beq.n	80119e2 <snmp_process_set_request+0x2d0>
            node_instance.release_instance(&node_instance);
 80119b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80119ba:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80119be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80119c2:	f107 020c 	add.w	r2, r7, #12
 80119c6:	4610      	mov	r0, r2
 80119c8:	4798      	blx	r3
 80119ca:	e00a      	b.n	80119e2 <snmp_process_set_request+0x2d0>
          }
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80119cc:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d010      	beq.n	80119f6 <snmp_process_set_request+0x2e4>
        /* no more varbinds in request */
        break;
      } else {
        /* first time enumerating varbinds work but second time not, although nothing should have changed in between ??? */
        request->error_status = SNMP_ERR_GENERROR;
 80119d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80119d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2205      	movs	r2, #5
 80119e0:	61da      	str	r2, [r3, #28]
    while (request->error_status == SNMP_ERR_NOERROR) {
 80119e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80119e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	69db      	ldr	r3, [r3, #28]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f43f af7e 	beq.w	80118f0 <snmp_process_set_request+0x1de>
 80119f4:	e000      	b.n	80119f8 <snmp_process_set_request+0x2e6>
        break;
 80119f6:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 80119f8:	2300      	movs	r3, #0
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <snmp_parse_inbound_frame>:
 * - ERR_OK SNMP header is sane and accepted
 * - ERR_VAL SNMP header is either malformed or rejected
 */
static err_t
snmp_parse_inbound_frame(struct snmp_request *request)
{
 8011a04:	b590      	push	{r4, r7, lr}
 8011a06:	b08d      	sub	sp, #52	@ 0x34
 8011a08:	af02      	add	r7, sp, #8
 8011a0a:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  s32_t parent_tlv_value_len;
  s32_t s32_value;
  err_t err;

  IF_PARSE_EXEC(snmp_pbuf_stream_init(&pbuf_stream, request->inbound_pbuf, 0, request->inbound_pbuf->tot_len));
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a14:	891b      	ldrh	r3, [r3, #8]
 8011a16:	f107 0018 	add.w	r0, r7, #24
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f001 faca 	bl	8012fb4 <snmp_pbuf_stream_init>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d007      	beq.n	8011a36 <snmp_parse_inbound_frame+0x32>
 8011a26:	4b9f      	ldr	r3, [pc, #636]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a28:	695b      	ldr	r3, [r3, #20]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	4a9d      	ldr	r2, [pc, #628]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a2e:	6153      	str	r3, [r2, #20]
 8011a30:	f06f 030f 	mvn.w	r3, #15
 8011a34:	e2ee      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  
  /* decode main container consisting of version, community and PDU */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011a36:	f107 0210 	add.w	r2, r7, #16
 8011a3a:	f107 0318 	add.w	r3, r7, #24
 8011a3e:	4611      	mov	r1, r2
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fb ffd9 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d007      	beq.n	8011a5c <snmp_parse_inbound_frame+0x58>
 8011a4c:	4b95      	ldr	r3, [pc, #596]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a4e:	695b      	ldr	r3, [r3, #20]
 8011a50:	3301      	adds	r3, #1
 8011a52:	4a94      	ldr	r2, [pc, #592]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a54:	6153      	str	r3, [r2, #20]
 8011a56:	f06f 030f 	mvn.w	r3, #15
 8011a5a:	e2db      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len == pbuf_stream.length));
 8011a5c:	7c3b      	ldrb	r3, [r7, #16]
 8011a5e:	2b30      	cmp	r3, #48	@ 0x30
 8011a60:	d103      	bne.n	8011a6a <snmp_parse_inbound_frame+0x66>
 8011a62:	8aba      	ldrh	r2, [r7, #20]
 8011a64:	8bfb      	ldrh	r3, [r7, #30]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d007      	beq.n	8011a7a <snmp_parse_inbound_frame+0x76>
 8011a6a:	4b8e      	ldr	r3, [pc, #568]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a6c:	695b      	ldr	r3, [r3, #20]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	4a8c      	ldr	r2, [pc, #560]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a72:	6153      	str	r3, [r2, #20]
 8011a74:	f06f 030f 	mvn.w	r3, #15
 8011a78:	e2cc      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len = tlv.value_len;
 8011a7a:	8abb      	ldrh	r3, [r7, #20]
 8011a7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* decode version */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011a7e:	f107 0210 	add.w	r2, r7, #16
 8011a82:	f107 0318 	add.w	r3, r7, #24
 8011a86:	4611      	mov	r1, r2
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7fb ffb5 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d007      	beq.n	8011aa4 <snmp_parse_inbound_frame+0xa0>
 8011a94:	4b83      	ldr	r3, [pc, #524]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a96:	695b      	ldr	r3, [r3, #20]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	4a82      	ldr	r2, [pc, #520]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011a9c:	6153      	str	r3, [r2, #20]
 8011a9e:	f06f 030f 	mvn.w	r3, #15
 8011aa2:	e2b7      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8011aa4:	7c3b      	ldrb	r3, [r7, #16]
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	d007      	beq.n	8011aba <snmp_parse_inbound_frame+0xb6>
 8011aaa:	4b7e      	ldr	r3, [pc, #504]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011aac:	695b      	ldr	r3, [r3, #20]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	4a7c      	ldr	r2, [pc, #496]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011ab2:	6153      	str	r3, [r2, #20]
 8011ab4:	f06f 030f 	mvn.w	r3, #15
 8011ab8:	e2ac      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8011aba:	7c7b      	ldrb	r3, [r7, #17]
 8011abc:	461a      	mov	r2, r3
 8011abe:	7cbb      	ldrb	r3, [r7, #18]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	8aba      	ldrh	r2, [r7, #20]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ac8:	1ad3      	subs	r3, r2, r3
 8011aca:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8011acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	dc07      	bgt.n	8011ae2 <snmp_parse_inbound_frame+0xde>
 8011ad2:	4b74      	ldr	r3, [pc, #464]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011ad4:	695b      	ldr	r3, [r3, #20]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	4a72      	ldr	r2, [pc, #456]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011ada:	6153      	str	r3, [r2, #20]
 8011adc:	f06f 030f 	mvn.w	r3, #15
 8011ae0:	e298      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 8011ae2:	8ab9      	ldrh	r1, [r7, #20]
 8011ae4:	f107 020c 	add.w	r2, r7, #12
 8011ae8:	f107 0318 	add.w	r3, r7, #24
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fc f8bb 	bl	800dc68 <snmp_asn1_dec_s32t>
 8011af2:	4603      	mov	r3, r0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d007      	beq.n	8011b08 <snmp_parse_inbound_frame+0x104>
 8011af8:	4b6a      	ldr	r3, [pc, #424]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011afa:	695b      	ldr	r3, [r3, #20]
 8011afc:	3301      	adds	r3, #1
 8011afe:	4a69      	ldr	r2, [pc, #420]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b00:	6153      	str	r3, [r2, #20]
 8011b02:	f06f 030f 	mvn.w	r3, #15
 8011b06:	e285      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  if ((s32_value != SNMP_VERSION_1) &&
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d00a      	beq.n	8011b24 <snmp_parse_inbound_frame+0x120>
      (s32_value != SNMP_VERSION_2c)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
  if ((s32_value != SNMP_VERSION_1) &&
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d007      	beq.n	8011b24 <snmp_parse_inbound_frame+0x120>
      && (s32_value != SNMP_VERSION_3)
#endif
     )
  {
    /* unsupported SNMP version */
    snmp_stats.inbadversions++;
 8011b14:	4b63      	ldr	r3, [pc, #396]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	4a62      	ldr	r2, [pc, #392]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b1c:	6093      	str	r3, [r2, #8]
    return ERR_ARG;
 8011b1e:	f06f 030f 	mvn.w	r3, #15
 8011b22:	e277      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  }
  request->version = (u8_t)s32_value;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	b2da      	uxtb	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	729a      	strb	r2, [r3, #10]
    request->context_name_len = (u8_t)u16_value;
  } else
#endif
  {
  /* decode community */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011b2c:	f107 0210 	add.w	r2, r7, #16
 8011b30:	f107 0318 	add.w	r3, r7, #24
 8011b34:	4611      	mov	r1, r2
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fb ff5e 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d007      	beq.n	8011b52 <snmp_parse_inbound_frame+0x14e>
 8011b42:	4b58      	ldr	r3, [pc, #352]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b44:	695b      	ldr	r3, [r3, #20]
 8011b46:	3301      	adds	r3, #1
 8011b48:	4a56      	ldr	r2, [pc, #344]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b4a:	6153      	str	r3, [r2, #20]
 8011b4c:	f06f 030f 	mvn.w	r3, #15
 8011b50:	e260      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_OCTET_STRING);
 8011b52:	7c3b      	ldrb	r3, [r7, #16]
 8011b54:	2b04      	cmp	r3, #4
 8011b56:	d007      	beq.n	8011b68 <snmp_parse_inbound_frame+0x164>
 8011b58:	4b52      	ldr	r3, [pc, #328]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b5a:	695b      	ldr	r3, [r3, #20]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	4a51      	ldr	r2, [pc, #324]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b60:	6153      	str	r3, [r2, #20]
 8011b62:	f06f 030f 	mvn.w	r3, #15
 8011b66:	e255      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8011b68:	7c7b      	ldrb	r3, [r7, #17]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	7cbb      	ldrb	r3, [r7, #18]
 8011b6e:	4413      	add	r3, r2
 8011b70:	8aba      	ldrh	r2, [r7, #20]
 8011b72:	4413      	add	r3, r2
 8011b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	dc07      	bgt.n	8011b90 <snmp_parse_inbound_frame+0x18c>
 8011b80:	4b48      	ldr	r3, [pc, #288]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b82:	695b      	ldr	r3, [r3, #20]
 8011b84:	3301      	adds	r3, #1
 8011b86:	4a47      	ldr	r2, [pc, #284]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011b88:	6153      	str	r3, [r2, #20]
 8011b8a:	f06f 030f 	mvn.w	r3, #15
 8011b8e:	e241      	b.n	8012014 <snmp_parse_inbound_frame+0x610>

  err = snmp_asn1_dec_raw(&pbuf_stream, tlv.value_len, request->community, &request->community_strlen, SNMP_MAX_COMMUNITY_STR_LEN);
 8011b90:	8ab9      	ldrh	r1, [r7, #20]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f103 020b 	add.w	r2, r3, #11
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	3314      	adds	r3, #20
 8011b9c:	f107 0018 	add.w	r0, r7, #24
 8011ba0:	2408      	movs	r4, #8
 8011ba2:	9400      	str	r4, [sp, #0]
 8011ba4:	f7fc f99f 	bl	800dee6 <snmp_asn1_dec_raw>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err == ERR_MEM) {
 8011bae:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb6:	d10b      	bne.n	8011bd0 <snmp_parse_inbound_frame+0x1cc>
    /* community string does not fit in our buffer -> its too long -> its invalid */
    request->community_strlen = 0;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	829a      	strh	r2, [r3, #20]
    snmp_pbuf_stream_seek(&pbuf_stream, tlv.value_len);
 8011bbe:	8abb      	ldrh	r3, [r7, #20]
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	f107 0318 	add.w	r3, r7, #24
 8011bc6:	4611      	mov	r1, r2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f001 fae9 	bl	80131a0 <snmp_pbuf_stream_seek>
 8011bce:	e00b      	b.n	8011be8 <snmp_parse_inbound_frame+0x1e4>
  } else {
    IF_PARSE_ASSERT(err == ERR_OK);
 8011bd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d007      	beq.n	8011be8 <snmp_parse_inbound_frame+0x1e4>
 8011bd8:	4b32      	ldr	r3, [pc, #200]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011bda:	695b      	ldr	r3, [r3, #20]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	4a31      	ldr	r2, [pc, #196]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011be0:	6153      	str	r3, [r2, #20]
 8011be2:	f06f 030f 	mvn.w	r3, #15
 8011be6:	e215      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  }
  /* add zero terminator */
  request->community[request->community_strlen] = 0;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	8a9b      	ldrh	r3, [r3, #20]
 8011bec:	461a      	mov	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	72da      	strb	r2, [r3, #11]
  }

  /* decode PDU type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011bf6:	f107 0210 	add.w	r2, r7, #16
 8011bfa:	f107 0318 	add.w	r3, r7, #24
 8011bfe:	4611      	mov	r1, r2
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fb fef9 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d007      	beq.n	8011c1c <snmp_parse_inbound_frame+0x218>
 8011c0c:	4b25      	ldr	r3, [pc, #148]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c0e:	695b      	ldr	r3, [r3, #20]
 8011c10:	3301      	adds	r3, #1
 8011c12:	4a24      	ldr	r2, [pc, #144]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c14:	6153      	str	r3, [r2, #20]
 8011c16:	f06f 030f 	mvn.w	r3, #15
 8011c1a:	e1fb      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.value_len <= pbuf_stream.length);
 8011c1c:	8aba      	ldrh	r2, [r7, #20]
 8011c1e:	8bfb      	ldrh	r3, [r7, #30]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d907      	bls.n	8011c34 <snmp_parse_inbound_frame+0x230>
 8011c24:	4b1f      	ldr	r3, [pc, #124]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	3301      	adds	r3, #1
 8011c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c2c:	6153      	str	r3, [r2, #20]
 8011c2e:	f06f 030f 	mvn.w	r3, #15
 8011c32:	e1ef      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  request->inbound_padding_len = pbuf_stream.length - tlv.value_len;
 8011c34:	8bfa      	ldrh	r2, [r7, #30]
 8011c36:	8abb      	ldrh	r3, [r7, #20]
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	b29a      	uxth	r2, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  parent_tlv_value_len = tlv.value_len;
 8011c42:	8abb      	ldrh	r3, [r7, #20]
 8011c44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* validate PDU type */
  switch(tlv.type) {
 8011c46:	7c3b      	ldrb	r3, [r7, #16]
 8011c48:	3ba0      	subs	r3, #160	@ 0xa0
 8011c4a:	2b05      	cmp	r3, #5
 8011c4c:	d827      	bhi.n	8011c9e <snmp_parse_inbound_frame+0x29a>
 8011c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c54 <snmp_parse_inbound_frame+0x250>)
 8011c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c54:	08011c6d 	.word	0x08011c6d
 8011c58:	08011c79 	.word	0x08011c79
 8011c5c:	08011c9f 	.word	0x08011c9f
 8011c60:	08011c93 	.word	0x08011c93
 8011c64:	08011c9f 	.word	0x08011c9f
 8011c68:	08011c85 	.word	0x08011c85
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_REQ):
      /* GetRequest PDU */
      snmp_stats.ingetrequests++;
 8011c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c70:	3301      	adds	r3, #1
 8011c72:	4a0c      	ldr	r2, [pc, #48]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c74:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
 8011c76:	e018      	b.n	8011caa <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ):
      /* GetNextRequest PDU */
      snmp_stats.ingetnexts++;
 8011c78:	4b0a      	ldr	r3, [pc, #40]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	4a09      	ldr	r2, [pc, #36]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c80:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8011c82:	e012      	b.n	8011caa <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ):
      /* GetBulkRequest PDU */
      if (request->version < SNMP_VERSION_2c) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	7a9b      	ldrb	r3, [r3, #10]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d10d      	bne.n	8011ca8 <snmp_parse_inbound_frame+0x2a4>
        /* RFC2089: invalid, drop packet */
        return ERR_ARG;
 8011c8c:	f06f 030f 	mvn.w	r3, #15
 8011c90:	e1c0      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
      }
      break;
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_SET_REQ):
      /* SetRequest PDU */
      snmp_stats.insetrequests++;
 8011c92:	4b04      	ldr	r3, [pc, #16]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c96:	3301      	adds	r3, #1
 8011c98:	4a02      	ldr	r2, [pc, #8]	@ (8011ca4 <snmp_parse_inbound_frame+0x2a0>)
 8011c9a:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8011c9c:	e005      	b.n	8011caa <snmp_parse_inbound_frame+0x2a6>
    default:
      /* unsupported input PDU for this agent (no parse error) */
      LWIP_DEBUGF(SNMP_DEBUG, ("Unknown/Invalid SNMP PDU type received: %d", tlv.type)); \
      return ERR_ARG;
 8011c9e:	f06f 030f 	mvn.w	r3, #15
 8011ca2:	e1b7      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
 8011ca4:	20008584 	.word	0x20008584
      break;
 8011ca8:	bf00      	nop
      break;
  }
  request->request_type = tlv.type & SNMP_ASN1_DATATYPE_MASK;
 8011caa:	7c3b      	ldrb	r3, [r7, #16]
 8011cac:	f003 031f 	and.w	r3, r3, #31
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	759a      	strb	r2, [r3, #22]

  /* validate community (do this after decoding PDU type because we don't want to increase 'inbadcommunitynames' for wrong frame types */
  if (request->community_strlen == 0) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	8a9b      	ldrh	r3, [r3, #20]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d109      	bne.n	8011cd2 <snmp_parse_inbound_frame+0x2ce>
    /* community string was too long or really empty*/
    snmp_stats.inbadcommunitynames++;
 8011cbe:	4ba2      	ldr	r3, [pc, #648]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	4aa0      	ldr	r2, [pc, #640]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011cc6:	60d3      	str	r3, [r2, #12]
    snmp_authfail_trap();
 8011cc8:	f002 f88a 	bl	8013de0 <snmp_authfail_trap>
    return ERR_ARG;
 8011ccc:	f06f 030f 	mvn.w	r3, #15
 8011cd0:	e1a0      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  } else if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	7d9b      	ldrb	r3, [r3, #22]
 8011cd6:	2b03      	cmp	r3, #3
 8011cd8:	d120      	bne.n	8011d1c <snmp_parse_inbound_frame+0x318>
    if (snmp_community_write[0] == 0) {
 8011cda:	4b9c      	ldr	r3, [pc, #624]	@ (8011f4c <snmp_parse_inbound_frame+0x548>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d106      	bne.n	8011cf2 <snmp_parse_inbound_frame+0x2ee>
      /* our write community is empty, that means all our objects are readonly */
      request->error_status = SNMP_ERR_NOTWRITABLE;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2211      	movs	r2, #17
 8011ce8:	61da      	str	r2, [r3, #28]
      request->error_index  = 1;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2201      	movs	r2, #1
 8011cee:	621a      	str	r2, [r3, #32]
 8011cf0:	e029      	b.n	8011d46 <snmp_parse_inbound_frame+0x342>
    } else if (strncmp(snmp_community_write, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8011cf2:	4b96      	ldr	r3, [pc, #600]	@ (8011f4c <snmp_parse_inbound_frame+0x548>)
 8011cf4:	6818      	ldr	r0, [r3, #0]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	330b      	adds	r3, #11
 8011cfa:	2208      	movs	r2, #8
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	f00f fefc 	bl	8021afa <strncmp>
 8011d02:	4603      	mov	r3, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d01e      	beq.n	8011d46 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8011d08:	4b8f      	ldr	r3, [pc, #572]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	4a8e      	ldr	r2, [pc, #568]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d10:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8011d12:	f002 f865 	bl	8013de0 <snmp_authfail_trap>
      return ERR_ARG;
 8011d16:	f06f 030f 	mvn.w	r3, #15
 8011d1a:	e17b      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
    }
  } else { 
    if (strncmp(snmp_community, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8011d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8011f50 <snmp_parse_inbound_frame+0x54c>)
 8011d1e:	6818      	ldr	r0, [r3, #0]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	330b      	adds	r3, #11
 8011d24:	2208      	movs	r2, #8
 8011d26:	4619      	mov	r1, r3
 8011d28:	f00f fee7 	bl	8021afa <strncmp>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d009      	beq.n	8011d46 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8011d32:	4b85      	ldr	r3, [pc, #532]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	3301      	adds	r3, #1
 8011d38:	4a83      	ldr	r2, [pc, #524]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d3a:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8011d3c:	f002 f850 	bl	8013de0 <snmp_authfail_trap>
      return ERR_ARG;
 8011d40:	f06f 030f 	mvn.w	r3, #15
 8011d44:	e166      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
    }
  }
  
  /* decode request ID */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011d46:	f107 0210 	add.w	r2, r7, #16
 8011d4a:	f107 0318 	add.w	r3, r7, #24
 8011d4e:	4611      	mov	r1, r2
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7fb fe51 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d007      	beq.n	8011d6c <snmp_parse_inbound_frame+0x368>
 8011d5c:	4b7a      	ldr	r3, [pc, #488]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d5e:	695b      	ldr	r3, [r3, #20]
 8011d60:	3301      	adds	r3, #1
 8011d62:	4a79      	ldr	r2, [pc, #484]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d64:	6153      	str	r3, [r2, #20]
 8011d66:	f06f 030f 	mvn.w	r3, #15
 8011d6a:	e153      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8011d6c:	7c3b      	ldrb	r3, [r7, #16]
 8011d6e:	2b02      	cmp	r3, #2
 8011d70:	d007      	beq.n	8011d82 <snmp_parse_inbound_frame+0x37e>
 8011d72:	4b75      	ldr	r3, [pc, #468]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d74:	695b      	ldr	r3, [r3, #20]
 8011d76:	3301      	adds	r3, #1
 8011d78:	4a73      	ldr	r2, [pc, #460]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d7a:	6153      	str	r3, [r2, #20]
 8011d7c:	f06f 030f 	mvn.w	r3, #15
 8011d80:	e148      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8011d82:	7c7b      	ldrb	r3, [r7, #17]
 8011d84:	461a      	mov	r2, r3
 8011d86:	7cbb      	ldrb	r3, [r7, #18]
 8011d88:	4413      	add	r3, r2
 8011d8a:	8aba      	ldrh	r2, [r7, #20]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8011d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	dc07      	bgt.n	8011daa <snmp_parse_inbound_frame+0x3a6>
 8011d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011d9c:	695b      	ldr	r3, [r3, #20]
 8011d9e:	3301      	adds	r3, #1
 8011da0:	4a69      	ldr	r2, [pc, #420]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011da2:	6153      	str	r3, [r2, #20]
 8011da4:	f06f 030f 	mvn.w	r3, #15
 8011da8:	e134      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->request_id));
 8011daa:	8ab9      	ldrh	r1, [r7, #20]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f103 0218 	add.w	r2, r3, #24
 8011db2:	f107 0318 	add.w	r3, r7, #24
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fb ff56 	bl	800dc68 <snmp_asn1_dec_s32t>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d007      	beq.n	8011dd2 <snmp_parse_inbound_frame+0x3ce>
 8011dc2:	4b61      	ldr	r3, [pc, #388]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011dc4:	695b      	ldr	r3, [r3, #20]
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011dca:	6153      	str	r3, [r2, #20]
 8011dcc:	f06f 030f 	mvn.w	r3, #15
 8011dd0:	e120      	b.n	8012014 <snmp_parse_inbound_frame+0x610>

  /* decode error status / non-repeaters */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011dd2:	f107 0210 	add.w	r2, r7, #16
 8011dd6:	f107 0318 	add.w	r3, r7, #24
 8011dda:	4611      	mov	r1, r2
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7fb fe0b 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d007      	beq.n	8011df8 <snmp_parse_inbound_frame+0x3f4>
 8011de8:	4b57      	ldr	r3, [pc, #348]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011dea:	695b      	ldr	r3, [r3, #20]
 8011dec:	3301      	adds	r3, #1
 8011dee:	4a56      	ldr	r2, [pc, #344]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011df0:	6153      	str	r3, [r2, #20]
 8011df2:	f06f 030f 	mvn.w	r3, #15
 8011df6:	e10d      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8011df8:	7c3b      	ldrb	r3, [r7, #16]
 8011dfa:	2b02      	cmp	r3, #2
 8011dfc:	d007      	beq.n	8011e0e <snmp_parse_inbound_frame+0x40a>
 8011dfe:	4b52      	ldr	r3, [pc, #328]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e00:	695b      	ldr	r3, [r3, #20]
 8011e02:	3301      	adds	r3, #1
 8011e04:	4a50      	ldr	r2, [pc, #320]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e06:	6153      	str	r3, [r2, #20]
 8011e08:	f06f 030f 	mvn.w	r3, #15
 8011e0c:	e102      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8011e0e:	7c7b      	ldrb	r3, [r7, #17]
 8011e10:	461a      	mov	r2, r3
 8011e12:	7cbb      	ldrb	r3, [r7, #18]
 8011e14:	4413      	add	r3, r2
 8011e16:	8aba      	ldrh	r2, [r7, #20]
 8011e18:	4413      	add	r3, r2
 8011e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8011e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	dc07      	bgt.n	8011e36 <snmp_parse_inbound_frame+0x432>
 8011e26:	4b48      	ldr	r3, [pc, #288]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e28:	695b      	ldr	r3, [r3, #20]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	4a46      	ldr	r2, [pc, #280]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e2e:	6153      	str	r3, [r2, #20]
 8011e30:	f06f 030f 	mvn.w	r3, #15
 8011e34:	e0ee      	b.n	8012014 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	7d9b      	ldrb	r3, [r3, #22]
 8011e3a:	2b05      	cmp	r3, #5
 8011e3c:	d11b      	bne.n	8011e76 <snmp_parse_inbound_frame+0x472>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->non_repeaters));
 8011e3e:	8ab9      	ldrh	r1, [r7, #20]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8011e46:	f107 0318 	add.w	r3, r7, #24
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fb ff0c 	bl	800dc68 <snmp_asn1_dec_s32t>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d007      	beq.n	8011e66 <snmp_parse_inbound_frame+0x462>
 8011e56:	4b3c      	ldr	r3, [pc, #240]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e58:	695b      	ldr	r3, [r3, #20]
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e5e:	6153      	str	r3, [r2, #20]
 8011e60:	f06f 030f 	mvn.w	r3, #15
 8011e64:	e0d6      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
    if (request->non_repeaters < 0) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	da21      	bge.n	8011eb2 <snmp_parse_inbound_frame+0x4ae>
      /* RFC 1905, 4.2.3 */
      request->non_repeaters = 0;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2200      	movs	r2, #0
 8011e72:	625a      	str	r2, [r3, #36]	@ 0x24
 8011e74:	e01d      	b.n	8011eb2 <snmp_parse_inbound_frame+0x4ae>
    }
  } else {
    /* only check valid value, don't touch 'request->error_status', maybe a response error status was already set to above; */
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 8011e76:	8ab9      	ldrh	r1, [r7, #20]
 8011e78:	f107 020c 	add.w	r2, r7, #12
 8011e7c:	f107 0318 	add.w	r3, r7, #24
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fb fef1 	bl	800dc68 <snmp_asn1_dec_s32t>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d007      	beq.n	8011e9c <snmp_parse_inbound_frame+0x498>
 8011e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e8e:	695b      	ldr	r3, [r3, #20]
 8011e90:	3301      	adds	r3, #1
 8011e92:	4a2d      	ldr	r2, [pc, #180]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011e94:	6153      	str	r3, [r2, #20]
 8011e96:	f06f 030f 	mvn.w	r3, #15
 8011e9a:	e0bb      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == SNMP_ERR_NOERROR);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d007      	beq.n	8011eb2 <snmp_parse_inbound_frame+0x4ae>
 8011ea2:	4b29      	ldr	r3, [pc, #164]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011ea4:	695b      	ldr	r3, [r3, #20]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	4a27      	ldr	r2, [pc, #156]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011eaa:	6153      	str	r3, [r2, #20]
 8011eac:	f06f 030f 	mvn.w	r3, #15
 8011eb0:	e0b0      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  }

  /* decode error index / max-repetitions */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011eb2:	f107 0210 	add.w	r2, r7, #16
 8011eb6:	f107 0318 	add.w	r3, r7, #24
 8011eba:	4611      	mov	r1, r2
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fb fd9b 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d007      	beq.n	8011ed8 <snmp_parse_inbound_frame+0x4d4>
 8011ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011eca:	695b      	ldr	r3, [r3, #20]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	4a1e      	ldr	r2, [pc, #120]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011ed0:	6153      	str	r3, [r2, #20]
 8011ed2:	f06f 030f 	mvn.w	r3, #15
 8011ed6:	e09d      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8011ed8:	7c3b      	ldrb	r3, [r7, #16]
 8011eda:	2b02      	cmp	r3, #2
 8011edc:	d007      	beq.n	8011eee <snmp_parse_inbound_frame+0x4ea>
 8011ede:	4b1a      	ldr	r3, [pc, #104]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011ee0:	695b      	ldr	r3, [r3, #20]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	4a18      	ldr	r2, [pc, #96]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011ee6:	6153      	str	r3, [r2, #20]
 8011ee8:	f06f 030f 	mvn.w	r3, #15
 8011eec:	e092      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8011eee:	7c7b      	ldrb	r3, [r7, #17]
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	7cbb      	ldrb	r3, [r7, #18]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	8aba      	ldrh	r2, [r7, #20]
 8011ef8:	4413      	add	r3, r2
 8011efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8011f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	dc07      	bgt.n	8011f16 <snmp_parse_inbound_frame+0x512>
 8011f06:	4b10      	ldr	r3, [pc, #64]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011f08:	695b      	ldr	r3, [r3, #20]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011f0e:	6153      	str	r3, [r2, #20]
 8011f10:	f06f 030f 	mvn.w	r3, #15
 8011f14:	e07e      	b.n	8012014 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	7d9b      	ldrb	r3, [r3, #22]
 8011f1a:	2b05      	cmp	r3, #5
 8011f1c:	d122      	bne.n	8011f64 <snmp_parse_inbound_frame+0x560>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->max_repetitions));
 8011f1e:	8ab9      	ldrh	r1, [r7, #20]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011f26:	f107 0318 	add.w	r3, r7, #24
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fb fe9c 	bl	800dc68 <snmp_asn1_dec_s32t>
 8011f30:	4603      	mov	r3, r0
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00e      	beq.n	8011f54 <snmp_parse_inbound_frame+0x550>
 8011f36:	4b04      	ldr	r3, [pc, #16]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011f38:	695b      	ldr	r3, [r3, #20]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	4a02      	ldr	r2, [pc, #8]	@ (8011f48 <snmp_parse_inbound_frame+0x544>)
 8011f3e:	6153      	str	r3, [r2, #20]
 8011f40:	f06f 030f 	mvn.w	r3, #15
 8011f44:	e066      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
 8011f46:	bf00      	nop
 8011f48:	20008584 	.word	0x20008584
 8011f4c:	20000108 	.word	0x20000108
 8011f50:	20000104 	.word	0x20000104
    if (request->max_repetitions < 0) {
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	da22      	bge.n	8011fa2 <snmp_parse_inbound_frame+0x59e>
      /* RFC 1905, 4.2.3 */
      request->max_repetitions = 0;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	629a      	str	r2, [r3, #40]	@ 0x28
 8011f62:	e01e      	b.n	8011fa2 <snmp_parse_inbound_frame+0x59e>
    }
  } else {
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->error_index));
 8011f64:	8ab9      	ldrh	r1, [r7, #20]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f103 0220 	add.w	r2, r3, #32
 8011f6c:	f107 0318 	add.w	r3, r7, #24
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7fb fe79 	bl	800dc68 <snmp_asn1_dec_s32t>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d007      	beq.n	8011f8c <snmp_parse_inbound_frame+0x588>
 8011f7c:	4b27      	ldr	r3, [pc, #156]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011f7e:	695b      	ldr	r3, [r3, #20]
 8011f80:	3301      	adds	r3, #1
 8011f82:	4a26      	ldr	r2, [pc, #152]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011f84:	6153      	str	r3, [r2, #20]
 8011f86:	f06f 030f 	mvn.w	r3, #15
 8011f8a:	e043      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == 0);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d007      	beq.n	8011fa2 <snmp_parse_inbound_frame+0x59e>
 8011f92:	4b22      	ldr	r3, [pc, #136]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011f94:	695b      	ldr	r3, [r3, #20]
 8011f96:	3301      	adds	r3, #1
 8011f98:	4a20      	ldr	r2, [pc, #128]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011f9a:	6153      	str	r3, [r2, #20]
 8011f9c:	f06f 030f 	mvn.w	r3, #15
 8011fa0:	e038      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  }

  /* decode varbind-list type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011fa2:	f107 0210 	add.w	r2, r7, #16
 8011fa6:	f107 0318 	add.w	r3, r7, #24
 8011faa:	4611      	mov	r1, r2
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7fb fd23 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d007      	beq.n	8011fc8 <snmp_parse_inbound_frame+0x5c4>
 8011fb8:	4b18      	ldr	r3, [pc, #96]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011fba:	695b      	ldr	r3, [r3, #20]
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	4a17      	ldr	r2, [pc, #92]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011fc0:	6153      	str	r3, [r2, #20]
 8011fc2:	f06f 030f 	mvn.w	r3, #15
 8011fc6:	e025      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= pbuf_stream.length));
 8011fc8:	7c3b      	ldrb	r3, [r7, #16]
 8011fca:	2b30      	cmp	r3, #48	@ 0x30
 8011fcc:	d103      	bne.n	8011fd6 <snmp_parse_inbound_frame+0x5d2>
 8011fce:	8aba      	ldrh	r2, [r7, #20]
 8011fd0:	8bfb      	ldrh	r3, [r7, #30]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d907      	bls.n	8011fe6 <snmp_parse_inbound_frame+0x5e2>
 8011fd6:	4b11      	ldr	r3, [pc, #68]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011fd8:	695b      	ldr	r3, [r3, #20]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	4a0f      	ldr	r2, [pc, #60]	@ (801201c <snmp_parse_inbound_frame+0x618>)
 8011fde:	6153      	str	r3, [r2, #20]
 8011fe0:	f06f 030f 	mvn.w	r3, #15
 8011fe4:	e016      	b.n	8012014 <snmp_parse_inbound_frame+0x610>
  
  request->inbound_varbind_offset = pbuf_stream.offset;
 8011fe6:	8bba      	ldrh	r2, [r7, #28]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  request->inbound_varbind_len    = pbuf_stream.length - request->inbound_padding_len;
 8011fec:	8bfa      	ldrh	r2, [r7, #30]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8011ff4:	1ad3      	subs	r3, r2, r3
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  snmp_vb_enumerator_init(&(request->inbound_varbind_enumerator), request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801200e:	f000 fdab 	bl	8012b68 <snmp_vb_enumerator_init>

  return ERR_OK;
 8012012:	2300      	movs	r3, #0
}
 8012014:	4618      	mov	r0, r3
 8012016:	372c      	adds	r7, #44	@ 0x2c
 8012018:	46bd      	mov	sp, r7
 801201a:	bd90      	pop	{r4, r7, pc}
 801201c:	20008584 	.word	0x20008584

08012020 <snmp_prepare_outbound_frame>:

#define OF_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

static err_t
snmp_prepare_outbound_frame(struct snmp_request *request)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_pbuf_stream* pbuf_stream = &(request->outbound_pbuf_stream);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	3348      	adds	r3, #72	@ 0x48
 801202c:	617b      	str	r3, [r7, #20]

  /* try allocating pbuf(s) for maximum response size */
  request->outbound_pbuf = pbuf_alloc(PBUF_TRANSPORT, 1472, PBUF_RAM);
 801202e:	2200      	movs	r2, #0
 8012030:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 8012034:	2000      	movs	r0, #0
 8012036:	f003 f80d 	bl	8015054 <pbuf_alloc>
 801203a:	4602      	mov	r2, r0
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (request->outbound_pbuf == NULL) {
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012044:	2b00      	cmp	r3, #0
 8012046:	d102      	bne.n	801204e <snmp_prepare_outbound_frame+0x2e>
    return ERR_MEM;
 8012048:	f04f 33ff 	mov.w	r3, #4294967295
 801204c:	e10e      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>
  }

  snmp_pbuf_stream_init(pbuf_stream, request->outbound_pbuf, 0, request->outbound_pbuf->tot_len);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012056:	891b      	ldrh	r3, [r3, #8]
 8012058:	2200      	movs	r2, #0
 801205a:	6978      	ldr	r0, [r7, #20]
 801205c:	f000 ffaa 	bl	8012fb4 <snmp_pbuf_stream_init>

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8012060:	2330      	movs	r3, #48	@ 0x30
 8012062:	733b      	strb	r3, [r7, #12]
 8012064:	2300      	movs	r3, #0
 8012066:	737b      	strb	r3, [r7, #13]
 8012068:	2303      	movs	r3, #3
 801206a:	73bb      	strb	r3, [r7, #14]
 801206c:	2300      	movs	r3, #0
 801206e:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012070:	f107 030c 	add.w	r3, r7, #12
 8012074:	4619      	mov	r1, r3
 8012076:	6978      	ldr	r0, [r7, #20]
 8012078:	f7fb f9fc 	bl	800d474 <snmp_ans1_enc_tlv>
 801207c:	4603      	mov	r3, r0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d002      	beq.n	8012088 <snmp_prepare_outbound_frame+0x68>
 8012082:	f06f 030f 	mvn.w	r3, #15
 8012086:	e0f1      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012088:	2302      	movs	r3, #2
 801208a:	733b      	strb	r3, [r7, #12]
 801208c:	2300      	movs	r3, #0
 801208e:	737b      	strb	r3, [r7, #13]
 8012090:	2300      	movs	r3, #0
 8012092:	73bb      	strb	r3, [r7, #14]
 8012094:	2300      	movs	r3, #0
 8012096:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->version, &tlv.value_len);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	7a9b      	ldrb	r3, [r3, #10]
 801209c:	461a      	mov	r2, r3
 801209e:	f107 030c 	add.w	r3, r7, #12
 80120a2:	3304      	adds	r3, #4
 80120a4:	4619      	mov	r1, r3
 80120a6:	4610      	mov	r0, r2
 80120a8:	f7fb fc3a 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 80120ac:	f107 030c 	add.w	r3, r7, #12
 80120b0:	4619      	mov	r1, r3
 80120b2:	6978      	ldr	r0, [r7, #20]
 80120b4:	f7fb f9de 	bl	800d474 <snmp_ans1_enc_tlv>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d002      	beq.n	80120c4 <snmp_prepare_outbound_frame+0xa4>
 80120be:	f06f 030f 	mvn.w	r3, #15
 80120c2:	e0d3      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->version) );
 80120c4:	8a39      	ldrh	r1, [r7, #16]
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	7a9b      	ldrb	r3, [r3, #10]
 80120ca:	461a      	mov	r2, r3
 80120cc:	6978      	ldr	r0, [r7, #20]
 80120ce:	f7fb fb1c 	bl	800d70a <snmp_asn1_enc_s32t>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d002      	beq.n	80120de <snmp_prepare_outbound_frame+0xbe>
 80120d8:	f06f 030f 	mvn.w	r3, #15
 80120dc:	e0c6      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>

#if LWIP_SNMP_V3
  if (request->version < SNMP_VERSION_3) {
#endif
  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, request->community_strlen);
 80120de:	2304      	movs	r3, #4
 80120e0:	733b      	strb	r3, [r7, #12]
 80120e2:	2300      	movs	r3, #0
 80120e4:	737b      	strb	r3, [r7, #13]
 80120e6:	2300      	movs	r3, #0
 80120e8:	73bb      	strb	r3, [r7, #14]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	8a9b      	ldrh	r3, [r3, #20]
 80120ee:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 80120f0:	f107 030c 	add.w	r3, r7, #12
 80120f4:	4619      	mov	r1, r3
 80120f6:	6978      	ldr	r0, [r7, #20]
 80120f8:	f7fb f9bc 	bl	800d474 <snmp_ans1_enc_tlv>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d002      	beq.n	8012108 <snmp_prepare_outbound_frame+0xe8>
 8012102:	f06f 030f 	mvn.w	r3, #15
 8012106:	e0b1      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, request->community, request->community_strlen) );
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f103 010b 	add.w	r1, r3, #11
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	8a9b      	ldrh	r3, [r3, #20]
 8012112:	461a      	mov	r2, r3
 8012114:	6978      	ldr	r0, [r7, #20]
 8012116:	f7fb fa38 	bl	800d58a <snmp_asn1_enc_raw>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d002      	beq.n	8012126 <snmp_prepare_outbound_frame+0x106>
 8012120:	f06f 030f 	mvn.w	r3, #15
 8012124:	e0a2      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, request->context_name, request->context_name_len));
  }
#endif

  /* 'PDU' sequence */
  request->outbound_pdu_offset = pbuf_stream->offset;
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	889a      	ldrh	r2, [r3, #4]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3, 0);
 8012130:	23a2      	movs	r3, #162	@ 0xa2
 8012132:	733b      	strb	r3, [r7, #12]
 8012134:	2300      	movs	r3, #0
 8012136:	737b      	strb	r3, [r7, #13]
 8012138:	2303      	movs	r3, #3
 801213a:	73bb      	strb	r3, [r7, #14]
 801213c:	2300      	movs	r3, #0
 801213e:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012140:	f107 030c 	add.w	r3, r7, #12
 8012144:	4619      	mov	r1, r3
 8012146:	6978      	ldr	r0, [r7, #20]
 8012148:	f7fb f994 	bl	800d474 <snmp_ans1_enc_tlv>
 801214c:	4603      	mov	r3, r0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d002      	beq.n	8012158 <snmp_prepare_outbound_frame+0x138>
 8012152:	f06f 030f 	mvn.w	r3, #15
 8012156:	e089      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>

  /* request ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012158:	2302      	movs	r3, #2
 801215a:	733b      	strb	r3, [r7, #12]
 801215c:	2300      	movs	r3, #0
 801215e:	737b      	strb	r3, [r7, #13]
 8012160:	2300      	movs	r3, #0
 8012162:	73bb      	strb	r3, [r7, #14]
 8012164:	2300      	movs	r3, #0
 8012166:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->request_id, &tlv.value_len);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	699a      	ldr	r2, [r3, #24]
 801216c:	f107 030c 	add.w	r3, r7, #12
 8012170:	3304      	adds	r3, #4
 8012172:	4619      	mov	r1, r3
 8012174:	4610      	mov	r0, r2
 8012176:	f7fb fbd3 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 801217a:	f107 030c 	add.w	r3, r7, #12
 801217e:	4619      	mov	r1, r3
 8012180:	6978      	ldr	r0, [r7, #20]
 8012182:	f7fb f977 	bl	800d474 <snmp_ans1_enc_tlv>
 8012186:	4603      	mov	r3, r0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d002      	beq.n	8012192 <snmp_prepare_outbound_frame+0x172>
 801218c:	f06f 030f 	mvn.w	r3, #15
 8012190:	e06c      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->request_id) );
 8012192:	8a39      	ldrh	r1, [r7, #16]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	699b      	ldr	r3, [r3, #24]
 8012198:	461a      	mov	r2, r3
 801219a:	6978      	ldr	r0, [r7, #20]
 801219c:	f7fb fab5 	bl	800d70a <snmp_asn1_enc_s32t>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d002      	beq.n	80121ac <snmp_prepare_outbound_frame+0x18c>
 80121a6:	f06f 030f 	mvn.w	r3, #15
 80121aa:	e05f      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>

  /* error status */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 80121ac:	2302      	movs	r3, #2
 80121ae:	733b      	strb	r3, [r7, #12]
 80121b0:	2300      	movs	r3, #0
 80121b2:	737b      	strb	r3, [r7, #13]
 80121b4:	2300      	movs	r3, #0
 80121b6:	73bb      	strb	r3, [r7, #14]
 80121b8:	2301      	movs	r3, #1
 80121ba:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 80121bc:	f107 030c 	add.w	r3, r7, #12
 80121c0:	4619      	mov	r1, r3
 80121c2:	6978      	ldr	r0, [r7, #20]
 80121c4:	f7fb f956 	bl	800d474 <snmp_ans1_enc_tlv>
 80121c8:	4603      	mov	r3, r0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d002      	beq.n	80121d4 <snmp_prepare_outbound_frame+0x1b4>
 80121ce:	f06f 030f 	mvn.w	r3, #15
 80121d2:	e04b      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_status_offset = pbuf_stream->offset;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	889a      	ldrh	r2, [r3, #4]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 80121de:	2100      	movs	r1, #0
 80121e0:	6978      	ldr	r0, [r7, #20]
 80121e2:	f000 ff2c 	bl	801303e <snmp_pbuf_stream_write>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d002      	beq.n	80121f2 <snmp_prepare_outbound_frame+0x1d2>
 80121ec:	f06f 030f 	mvn.w	r3, #15
 80121f0:	e03c      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>

  /* error index */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 80121f2:	2302      	movs	r3, #2
 80121f4:	733b      	strb	r3, [r7, #12]
 80121f6:	2300      	movs	r3, #0
 80121f8:	737b      	strb	r3, [r7, #13]
 80121fa:	2300      	movs	r3, #0
 80121fc:	73bb      	strb	r3, [r7, #14]
 80121fe:	2301      	movs	r3, #1
 8012200:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012202:	f107 030c 	add.w	r3, r7, #12
 8012206:	4619      	mov	r1, r3
 8012208:	6978      	ldr	r0, [r7, #20]
 801220a:	f7fb f933 	bl	800d474 <snmp_ans1_enc_tlv>
 801220e:	4603      	mov	r3, r0
 8012210:	2b00      	cmp	r3, #0
 8012212:	d002      	beq.n	801221a <snmp_prepare_outbound_frame+0x1fa>
 8012214:	f06f 030f 	mvn.w	r3, #15
 8012218:	e028      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_index_offset = pbuf_stream->offset;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	889a      	ldrh	r2, [r3, #4]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8012224:	2100      	movs	r1, #0
 8012226:	6978      	ldr	r0, [r7, #20]
 8012228:	f000 ff09 	bl	801303e <snmp_pbuf_stream_write>
 801222c:	4603      	mov	r3, r0
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <snmp_prepare_outbound_frame+0x218>
 8012232:	f06f 030f 	mvn.w	r3, #15
 8012236:	e019      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>

  /* 'VarBindList' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8012238:	2330      	movs	r3, #48	@ 0x30
 801223a:	733b      	strb	r3, [r7, #12]
 801223c:	2300      	movs	r3, #0
 801223e:	737b      	strb	r3, [r7, #13]
 8012240:	2303      	movs	r3, #3
 8012242:	73bb      	strb	r3, [r7, #14]
 8012244:	2300      	movs	r3, #0
 8012246:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012248:	f107 030c 	add.w	r3, r7, #12
 801224c:	4619      	mov	r1, r3
 801224e:	6978      	ldr	r0, [r7, #20]
 8012250:	f7fb f910 	bl	800d474 <snmp_ans1_enc_tlv>
 8012254:	4603      	mov	r3, r0
 8012256:	2b00      	cmp	r3, #0
 8012258:	d002      	beq.n	8012260 <snmp_prepare_outbound_frame+0x240>
 801225a:	f06f 030f 	mvn.w	r3, #15
 801225e:	e005      	b.n	801226c <snmp_prepare_outbound_frame+0x24c>

  request->outbound_varbind_offset = pbuf_stream->offset;
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	889a      	ldrh	r2, [r3, #4]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

  return ERR_OK;
 801226a:	2300      	movs	r3, #0
}
 801226c:	4618      	mov	r0, r3
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <snmp_varbind_length>:

/** Calculate the length of a varbind list */
err_t
snmp_varbind_length(struct snmp_varbind *varbind, struct snmp_varbind_len *len)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  /* calculate required lengths */
  snmp_asn1_enc_oid_cnt(varbind->oid.id, varbind->oid.len, &len->oid_value_len);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f103 000c 	add.w	r0, r3, #12
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	7a1b      	ldrb	r3, [r3, #8]
 8012288:	4619      	mov	r1, r3
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	3306      	adds	r3, #6
 801228e:	461a      	mov	r2, r3
 8012290:	f7fb fb70 	bl	800d974 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len->oid_value_len, &len->oid_len_len);
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	88da      	ldrh	r2, [r3, #6]
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	3304      	adds	r3, #4
 801229c:	4619      	mov	r1, r3
 801229e:	4610      	mov	r0, r2
 80122a0:	f7fb fad4 	bl	800d84c <snmp_asn1_enc_length_cnt>

  if (varbind->value_len == 0) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d103      	bne.n	80122b6 <snmp_varbind_length+0x42>
    len->value_value_len = 0;
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	2200      	movs	r2, #0
 80122b2:	815a      	strh	r2, [r3, #10]
 80122b4:	e107      	b.n	80124c6 <snmp_varbind_length+0x252>
  } else if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80122bc:	b21b      	sxth	r3, r3
 80122be:	2b00      	cmp	r3, #0
 80122c0:	da08      	bge.n	80122d4 <snmp_varbind_length+0x60>
    len->value_value_len = varbind->value_len & (~SNMP_GET_VALUE_RAW_DATA);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80122c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	815a      	strh	r2, [r3, #10]
 80122d2:	e0f8      	b.n	80124c6 <snmp_varbind_length+0x252>
  } else {
    switch (varbind->type) {
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80122da:	3b02      	subs	r3, #2
 80122dc:	2b44      	cmp	r3, #68	@ 0x44
 80122de:	f200 80ef 	bhi.w	80124c0 <snmp_varbind_length+0x24c>
 80122e2:	a201      	add	r2, pc, #4	@ (adr r2, 80122e8 <snmp_varbind_length+0x74>)
 80122e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122e8:	080123fd 	.word	0x080123fd
 80122ec:	080124c1 	.word	0x080124c1
 80122f0:	08012449 	.word	0x08012449
 80122f4:	08012455 	.word	0x08012455
 80122f8:	0801246d 	.word	0x0801246d
 80122fc:	080124c1 	.word	0x080124c1
 8012300:	080124c1 	.word	0x080124c1
 8012304:	080124c1 	.word	0x080124c1
 8012308:	080124c1 	.word	0x080124c1
 801230c:	080124c1 	.word	0x080124c1
 8012310:	080124c1 	.word	0x080124c1
 8012314:	080124c1 	.word	0x080124c1
 8012318:	080124c1 	.word	0x080124c1
 801231c:	080124c1 	.word	0x080124c1
 8012320:	080124c1 	.word	0x080124c1
 8012324:	080124c1 	.word	0x080124c1
 8012328:	080124c1 	.word	0x080124c1
 801232c:	080124c1 	.word	0x080124c1
 8012330:	080124c1 	.word	0x080124c1
 8012334:	080124c1 	.word	0x080124c1
 8012338:	080124c1 	.word	0x080124c1
 801233c:	080124c1 	.word	0x080124c1
 8012340:	080124c1 	.word	0x080124c1
 8012344:	080124c1 	.word	0x080124c1
 8012348:	080124c1 	.word	0x080124c1
 801234c:	080124c1 	.word	0x080124c1
 8012350:	080124c1 	.word	0x080124c1
 8012354:	080124c1 	.word	0x080124c1
 8012358:	080124c1 	.word	0x080124c1
 801235c:	080124c1 	.word	0x080124c1
 8012360:	080124c1 	.word	0x080124c1
 8012364:	080124c1 	.word	0x080124c1
 8012368:	080124c1 	.word	0x080124c1
 801236c:	080124c1 	.word	0x080124c1
 8012370:	080124c1 	.word	0x080124c1
 8012374:	080124c1 	.word	0x080124c1
 8012378:	080124c1 	.word	0x080124c1
 801237c:	080124c1 	.word	0x080124c1
 8012380:	080124c1 	.word	0x080124c1
 8012384:	080124c1 	.word	0x080124c1
 8012388:	080124c1 	.word	0x080124c1
 801238c:	080124c1 	.word	0x080124c1
 8012390:	080124c1 	.word	0x080124c1
 8012394:	080124c1 	.word	0x080124c1
 8012398:	080124c1 	.word	0x080124c1
 801239c:	080124c1 	.word	0x080124c1
 80123a0:	080124c1 	.word	0x080124c1
 80123a4:	080124c1 	.word	0x080124c1
 80123a8:	080124c1 	.word	0x080124c1
 80123ac:	080124c1 	.word	0x080124c1
 80123b0:	080124c1 	.word	0x080124c1
 80123b4:	080124c1 	.word	0x080124c1
 80123b8:	080124c1 	.word	0x080124c1
 80123bc:	080124c1 	.word	0x080124c1
 80123c0:	080124c1 	.word	0x080124c1
 80123c4:	080124c1 	.word	0x080124c1
 80123c8:	080124c1 	.word	0x080124c1
 80123cc:	080124c1 	.word	0x080124c1
 80123d0:	080124c1 	.word	0x080124c1
 80123d4:	080124c1 	.word	0x080124c1
 80123d8:	080124c1 	.word	0x080124c1
 80123dc:	080124c1 	.word	0x080124c1
 80123e0:	08012449 	.word	0x08012449
 80123e4:	08012423 	.word	0x08012423
 80123e8:	08012423 	.word	0x08012423
 80123ec:	08012423 	.word	0x08012423
 80123f0:	08012449 	.word	0x08012449
 80123f4:	080124c1 	.word	0x080124c1
 80123f8:	0801249d 	.word	0x0801249d
      case SNMP_ASN1_TYPE_INTEGER:
        if (varbind->value_len != sizeof (s32_t)) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012402:	2b04      	cmp	r3, #4
 8012404:	d002      	beq.n	801240c <snmp_varbind_length+0x198>
          return ERR_VAL;
 8012406:	f06f 0305 	mvn.w	r3, #5
 801240a:	e07f      	b.n	801250c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_s32t_cnt(*((s32_t*) varbind->value), &len->value_value_len);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	330a      	adds	r3, #10
 8012418:	4619      	mov	r1, r3
 801241a:	4610      	mov	r0, r2
 801241c:	f7fb fa80 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
        break;
 8012420:	e051      	b.n	80124c6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        if (varbind->value_len != sizeof (u32_t)) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012428:	2b04      	cmp	r3, #4
 801242a:	d002      	beq.n	8012432 <snmp_varbind_length+0x1be>
          return ERR_VAL;
 801242c:	f06f 0305 	mvn.w	r3, #5
 8012430:	e06c      	b.n	801250c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u32t_cnt(*((u32_t*) varbind->value), &len->value_value_len);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	330a      	adds	r3, #10
 801243e:	4619      	mov	r1, r3
 8012440:	4610      	mov	r0, r2
 8012442:	f7fb fa1f 	bl	800d884 <snmp_asn1_enc_u32t_cnt>
        break;
 8012446:	e03e      	b.n	80124c6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_IPADDR:
      case SNMP_ASN1_TYPE_OPAQUE:
        len->value_value_len = varbind->value_len;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	815a      	strh	r2, [r3, #10]
        break;
 8012452:	e038      	b.n	80124c6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_NULL:
        if (varbind->value_len != 0) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801245a:	2b00      	cmp	r3, #0
 801245c:	d002      	beq.n	8012464 <snmp_varbind_length+0x1f0>
          return ERR_VAL;
 801245e:	f06f 0305 	mvn.w	r3, #5
 8012462:	e053      	b.n	801250c <snmp_varbind_length+0x298>
        }
        len->value_value_len = 0;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	2200      	movs	r2, #0
 8012468:	815a      	strh	r2, [r3, #10]
        break;
 801246a:	e02c      	b.n	80124c6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        if ((varbind->value_len & 0x03) != 0) {
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012472:	f003 0303 	and.w	r3, r3, #3
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <snmp_varbind_length+0x20c>
          return ERR_VAL;
 801247a:	f06f 0305 	mvn.w	r3, #5
 801247e:	e045      	b.n	801250c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_oid_cnt((u32_t*) varbind->value, varbind->value_len >> 2, &len->value_value_len);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801248c:	089b      	lsrs	r3, r3, #2
 801248e:	b299      	uxth	r1, r3
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	330a      	adds	r3, #10
 8012494:	461a      	mov	r2, r3
 8012496:	f7fb fa6d 	bl	800d974 <snmp_asn1_enc_oid_cnt>
        break;
 801249a:	e014      	b.n	80124c6 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER64:
        if (varbind->value_len != (2 * sizeof (u32_t))) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80124a2:	2b08      	cmp	r3, #8
 80124a4:	d002      	beq.n	80124ac <snmp_varbind_length+0x238>
          return ERR_VAL;
 80124a6:	f06f 0305 	mvn.w	r3, #5
 80124aa:	e02f      	b.n	801250c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u64t_cnt((u32_t*) varbind->value, &len->value_value_len);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	330a      	adds	r3, #10
 80124b6:	4619      	mov	r1, r3
 80124b8:	4610      	mov	r0, r2
 80124ba:	f7fb fa0e 	bl	800d8da <snmp_asn1_enc_u64t_cnt>
        break;
 80124be:	e002      	b.n	80124c6 <snmp_varbind_length+0x252>
      default:
        /* unsupported type */
        return ERR_VAL;
 80124c0:	f06f 0305 	mvn.w	r3, #5
 80124c4:	e022      	b.n	801250c <snmp_varbind_length+0x298>
    }
  }
  snmp_asn1_enc_length_cnt(len->value_value_len, &len->value_len_len);
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	895a      	ldrh	r2, [r3, #10]
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	3308      	adds	r3, #8
 80124ce:	4619      	mov	r1, r3
 80124d0:	4610      	mov	r0, r2
 80124d2:	f7fb f9bb 	bl	800d84c <snmp_asn1_enc_length_cnt>

  len->vb_value_len = 1 + len->oid_len_len + len->oid_value_len + 1 + len->value_len_len + len->value_value_len;
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	791b      	ldrb	r3, [r3, #4]
 80124da:	461a      	mov	r2, r3
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	88db      	ldrh	r3, [r3, #6]
 80124e0:	4413      	add	r3, r2
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	683a      	ldr	r2, [r7, #0]
 80124e6:	7a12      	ldrb	r2, [r2, #8]
 80124e8:	4413      	add	r3, r2
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	895b      	ldrh	r3, [r3, #10]
 80124f0:	4413      	add	r3, r2
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	3302      	adds	r3, #2
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	805a      	strh	r2, [r3, #2]
  snmp_asn1_enc_length_cnt(len->vb_value_len, &len->vb_len_len);
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	885b      	ldrh	r3, [r3, #2]
 8012500:	683a      	ldr	r2, [r7, #0]
 8012502:	4611      	mov	r1, r2
 8012504:	4618      	mov	r0, r3
 8012506:	f7fb f9a1 	bl	800d84c <snmp_asn1_enc_length_cnt>

  return ERR_OK;
 801250a:	2300      	movs	r3, #0
}
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <snmp_append_outbound_varbind>:

#define OVB_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

err_t
snmp_append_outbound_varbind(struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind* varbind)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b088      	sub	sp, #32
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind_len len;
  err_t err;

  err = snmp_varbind_length(varbind, &len);
 801251e:	f107 030c 	add.w	r3, r7, #12
 8012522:	4619      	mov	r1, r3
 8012524:	6838      	ldr	r0, [r7, #0]
 8012526:	f7ff fea5 	bl	8012274 <snmp_varbind_length>
 801252a:	4603      	mov	r3, r0
 801252c:	77fb      	strb	r3, [r7, #31]

  if (err != ERR_OK) {
 801252e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d002      	beq.n	801253c <snmp_append_outbound_varbind+0x28>
    return err;
 8012536:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801253a:	e0f6      	b.n	801272a <snmp_append_outbound_varbind+0x216>
  }

  /* check length already before adding first data because in case of GetBulk,
   *  data added so far is returned and therefore no partial data shall be added
   */
  if ((1 + len.vb_len_len + len.vb_value_len) > pbuf_stream->length) {
 801253c:	7b3b      	ldrb	r3, [r7, #12]
 801253e:	3301      	adds	r3, #1
 8012540:	89fa      	ldrh	r2, [r7, #14]
 8012542:	4413      	add	r3, r2
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	88d2      	ldrh	r2, [r2, #6]
 8012548:	4293      	cmp	r3, r2
 801254a:	dd02      	ble.n	8012552 <snmp_append_outbound_varbind+0x3e>
    return ERR_BUF;
 801254c:	f06f 0301 	mvn.w	r3, #1
 8012550:	e0eb      	b.n	801272a <snmp_append_outbound_varbind+0x216>
  }

  /* 'VarBind' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, len.vb_len_len, len.vb_value_len);
 8012552:	2330      	movs	r3, #48	@ 0x30
 8012554:	763b      	strb	r3, [r7, #24]
 8012556:	2300      	movs	r3, #0
 8012558:	767b      	strb	r3, [r7, #25]
 801255a:	7b3b      	ldrb	r3, [r7, #12]
 801255c:	76bb      	strb	r3, [r7, #26]
 801255e:	89fb      	ldrh	r3, [r7, #14]
 8012560:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012562:	f107 0318 	add.w	r3, r7, #24
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7fa ff83 	bl	800d474 <snmp_ans1_enc_tlv>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d002      	beq.n	801257a <snmp_append_outbound_varbind+0x66>
 8012574:	f06f 030f 	mvn.w	r3, #15
 8012578:	e0d7      	b.n	801272a <snmp_append_outbound_varbind+0x216>

  /* VarBind OID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, len.oid_len_len, len.oid_value_len);
 801257a:	2306      	movs	r3, #6
 801257c:	763b      	strb	r3, [r7, #24]
 801257e:	2300      	movs	r3, #0
 8012580:	767b      	strb	r3, [r7, #25]
 8012582:	7c3b      	ldrb	r3, [r7, #16]
 8012584:	76bb      	strb	r3, [r7, #26]
 8012586:	8a7b      	ldrh	r3, [r7, #18]
 8012588:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 801258a:	f107 0318 	add.w	r3, r7, #24
 801258e:	4619      	mov	r1, r3
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7fa ff6f 	bl	800d474 <snmp_ans1_enc_tlv>
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d002      	beq.n	80125a2 <snmp_append_outbound_varbind+0x8e>
 801259c:	f06f 030f 	mvn.w	r3, #15
 80125a0:	e0c3      	b.n	801272a <snmp_append_outbound_varbind+0x216>
  OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, varbind->oid.id, varbind->oid.len));
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	f103 010c 	add.w	r1, r3, #12
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	7a1b      	ldrb	r3, [r3, #8]
 80125ac:	461a      	mov	r2, r3
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7fb f8da 	bl	800d768 <snmp_asn1_enc_oid>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d002      	beq.n	80125c0 <snmp_append_outbound_varbind+0xac>
 80125ba:	f06f 030f 	mvn.w	r3, #15
 80125be:	e0b4      	b.n	801272a <snmp_append_outbound_varbind+0x216>

  /* VarBind value */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, varbind->type, len.value_len_len, len.value_value_len);
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80125c6:	763b      	strb	r3, [r7, #24]
 80125c8:	2300      	movs	r3, #0
 80125ca:	767b      	strb	r3, [r7, #25]
 80125cc:	7d3b      	ldrb	r3, [r7, #20]
 80125ce:	76bb      	strb	r3, [r7, #26]
 80125d0:	8afb      	ldrh	r3, [r7, #22]
 80125d2:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 80125d4:	f107 0318 	add.w	r3, r7, #24
 80125d8:	4619      	mov	r1, r3
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7fa ff4a 	bl	800d474 <snmp_ans1_enc_tlv>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d002      	beq.n	80125ec <snmp_append_outbound_varbind+0xd8>
 80125e6:	f06f 030f 	mvn.w	r3, #15
 80125ea:	e09e      	b.n	801272a <snmp_append_outbound_varbind+0x216>

  if (len.value_value_len > 0) {
 80125ec:	8afb      	ldrh	r3, [r7, #22]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f000 809a 	beq.w	8012728 <snmp_append_outbound_varbind+0x214>
    if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80125fa:	b21b      	sxth	r3, r3
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	da0e      	bge.n	801261e <snmp_append_outbound_varbind+0x10a>
      OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012606:	8afa      	ldrh	r2, [r7, #22]
 8012608:	4619      	mov	r1, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7fa ffbd 	bl	800d58a <snmp_asn1_enc_raw>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	f000 8088 	beq.w	8012728 <snmp_append_outbound_varbind+0x214>
 8012618:	f06f 030f 	mvn.w	r3, #15
 801261c:	e085      	b.n	801272a <snmp_append_outbound_varbind+0x216>
    } else {
      switch (varbind->type) {
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012624:	2b46      	cmp	r3, #70	@ 0x46
 8012626:	dc70      	bgt.n	801270a <snmp_append_outbound_varbind+0x1f6>
 8012628:	2b40      	cmp	r3, #64	@ 0x40
 801262a:	da08      	bge.n	801263e <snmp_append_outbound_varbind+0x12a>
 801262c:	2b06      	cmp	r3, #6
 801262e:	d04c      	beq.n	80126ca <snmp_append_outbound_varbind+0x1b6>
 8012630:	2b06      	cmp	r3, #6
 8012632:	dc6a      	bgt.n	801270a <snmp_append_outbound_varbind+0x1f6>
 8012634:	2b02      	cmp	r3, #2
 8012636:	d017      	beq.n	8012668 <snmp_append_outbound_varbind+0x154>
 8012638:	2b04      	cmp	r3, #4
 801263a:	d033      	beq.n	80126a4 <snmp_append_outbound_varbind+0x190>
 801263c:	e065      	b.n	801270a <snmp_append_outbound_varbind+0x1f6>
 801263e:	3b40      	subs	r3, #64	@ 0x40
 8012640:	2b06      	cmp	r3, #6
 8012642:	d862      	bhi.n	801270a <snmp_append_outbound_varbind+0x1f6>
 8012644:	a201      	add	r2, pc, #4	@ (adr r2, 801264c <snmp_append_outbound_varbind+0x138>)
 8012646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801264a:	bf00      	nop
 801264c:	080126a5 	.word	0x080126a5
 8012650:	08012687 	.word	0x08012687
 8012654:	08012687 	.word	0x08012687
 8012658:	08012687 	.word	0x08012687
 801265c:	080126a5 	.word	0x080126a5
 8012660:	0801270b 	.word	0x0801270b
 8012664:	080126ef 	.word	0x080126ef
        case SNMP_ASN1_TYPE_INTEGER:
          OVB_BUILD_EXEC(snmp_asn1_enc_s32t(pbuf_stream, len.value_value_len, *((s32_t*) varbind->value)));
 8012668:	8af9      	ldrh	r1, [r7, #22]
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	461a      	mov	r2, r3
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f7fb f848 	bl	800d70a <snmp_asn1_enc_s32t>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d04c      	beq.n	801271a <snmp_append_outbound_varbind+0x206>
 8012680:	f06f 030f 	mvn.w	r3, #15
 8012684:	e051      	b.n	801272a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER:
        case SNMP_ASN1_TYPE_GAUGE:
        case SNMP_ASN1_TYPE_TIMETICKS:
          OVB_BUILD_EXEC(snmp_asn1_enc_u32t(pbuf_stream, len.value_value_len, *((u32_t*) varbind->value)));
 8012686:	8af9      	ldrh	r1, [r7, #22]
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	461a      	mov	r2, r3
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f7fa ff91 	bl	800d5ba <snmp_asn1_enc_u32t>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d03f      	beq.n	801271e <snmp_append_outbound_varbind+0x20a>
 801269e:	f06f 030f 	mvn.w	r3, #15
 80126a2:	e042      	b.n	801272a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_OCTET_STRING:
        case SNMP_ASN1_TYPE_IPADDR:
        case SNMP_ASN1_TYPE_OPAQUE:
          OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80126aa:	8afa      	ldrh	r2, [r7, #22]
 80126ac:	4619      	mov	r1, r3
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7fa ff6b 	bl	800d58a <snmp_asn1_enc_raw>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d002      	beq.n	80126c0 <snmp_append_outbound_varbind+0x1ac>
 80126ba:	f06f 030f 	mvn.w	r3, #15
 80126be:	e034      	b.n	801272a <snmp_append_outbound_varbind+0x216>
          len.value_value_len = varbind->value_len;
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80126c6:	82fb      	strh	r3, [r7, #22]
          break;
 80126c8:	e02e      	b.n	8012728 <snmp_append_outbound_varbind+0x214>
        case SNMP_ASN1_TYPE_OBJECT_ID:
          OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, (u32_t*) varbind->value, varbind->value_len / sizeof (u32_t)));
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80126d6:	089b      	lsrs	r3, r3, #2
 80126d8:	b29b      	uxth	r3, r3
 80126da:	461a      	mov	r2, r3
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f7fb f843 	bl	800d768 <snmp_asn1_enc_oid>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d01c      	beq.n	8012722 <snmp_append_outbound_varbind+0x20e>
 80126e8:	f06f 030f 	mvn.w	r3, #15
 80126ec:	e01d      	b.n	801272a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER64:
          OVB_BUILD_EXEC(snmp_asn1_enc_u64t(pbuf_stream, len.value_value_len, (u32_t*) varbind->value));
 80126ee:	8af9      	ldrh	r1, [r7, #22]
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80126f6:	461a      	mov	r2, r3
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f7fa ffa3 	bl	800d644 <snmp_asn1_enc_u64t>
 80126fe:	4603      	mov	r3, r0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d010      	beq.n	8012726 <snmp_append_outbound_varbind+0x212>
 8012704:	f06f 030f 	mvn.w	r3, #15
 8012708:	e00f      	b.n	801272a <snmp_append_outbound_varbind+0x216>
          break;
        default:
          LWIP_ASSERT("Unknown variable type", 0);
 801270a:	4b0a      	ldr	r3, [pc, #40]	@ (8012734 <snmp_append_outbound_varbind+0x220>)
 801270c:	f240 521e 	movw	r2, #1310	@ 0x51e
 8012710:	4909      	ldr	r1, [pc, #36]	@ (8012738 <snmp_append_outbound_varbind+0x224>)
 8012712:	480a      	ldr	r0, [pc, #40]	@ (801273c <snmp_append_outbound_varbind+0x228>)
 8012714:	f00f f806 	bl	8021724 <iprintf>
          break;
 8012718:	e006      	b.n	8012728 <snmp_append_outbound_varbind+0x214>
          break;
 801271a:	bf00      	nop
 801271c:	e004      	b.n	8012728 <snmp_append_outbound_varbind+0x214>
          break;
 801271e:	bf00      	nop
 8012720:	e002      	b.n	8012728 <snmp_append_outbound_varbind+0x214>
          break;
 8012722:	bf00      	nop
 8012724:	e000      	b.n	8012728 <snmp_append_outbound_varbind+0x214>
          break;
 8012726:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 8012728:	2300      	movs	r3, #0
}
 801272a:	4618      	mov	r0, r3
 801272c:	3720      	adds	r7, #32
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	08024fd8 	.word	0x08024fd8
 8012738:	080250ac 	.word	0x080250ac
 801273c:	08025034 	.word	0x08025034

08012740 <snmp_complete_outbound_frame>:

static err_t
snmp_complete_outbound_frame(struct snmp_request *request)
{
 8012740:	b590      	push	{r4, r7, lr}
 8012742:	b089      	sub	sp, #36	@ 0x24
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  u16_t frame_size;
  u8_t outbound_padding = 0;
 8012748:	2300      	movs	r3, #0
 801274a:	77fb      	strb	r3, [r7, #31]

  if (request->version == SNMP_VERSION_1) {
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	7a9b      	ldrb	r3, [r3, #10]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d133      	bne.n	80127bc <snmp_complete_outbound_frame+0x7c>
    if (request->error_status != SNMP_ERR_NOERROR) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	69db      	ldr	r3, [r3, #28]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d044      	beq.n	80127e6 <snmp_complete_outbound_frame+0xa6>
      /* map v2c error codes to v1 compliant error code (according to RFC 2089) */
      switch (request->error_status) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	69db      	ldr	r3, [r3, #28]
 8012760:	2b12      	cmp	r3, #18
 8012762:	dc18      	bgt.n	8012796 <snmp_complete_outbound_frame+0x56>
 8012764:	2b06      	cmp	r3, #6
 8012766:	db25      	blt.n	80127b4 <snmp_complete_outbound_frame+0x74>
 8012768:	461a      	mov	r2, r3
 801276a:	2301      	movs	r3, #1
 801276c:	fa03 f202 	lsl.w	r2, r3, r2
 8012770:	4b9c      	ldr	r3, [pc, #624]	@ (80129e4 <snmp_complete_outbound_frame+0x2a4>)
 8012772:	4013      	ands	r3, r2
 8012774:	2b00      	cmp	r3, #0
 8012776:	bf14      	ite	ne
 8012778:	2301      	movne	r3, #1
 801277a:	2300      	moveq	r3, #0
 801277c:	b2db      	uxtb	r3, r3
 801277e:	2b00      	cmp	r3, #0
 8012780:	d114      	bne.n	80127ac <snmp_complete_outbound_frame+0x6c>
 8012782:	f402 53bc 	and.w	r3, r2, #6016	@ 0x1780
 8012786:	2b00      	cmp	r3, #0
 8012788:	bf14      	ite	ne
 801278a:	2301      	movne	r3, #1
 801278c:	2300      	moveq	r3, #0
 801278e:	b2db      	uxtb	r3, r3
 8012790:	2b00      	cmp	r3, #0
 8012792:	d107      	bne.n	80127a4 <snmp_complete_outbound_frame+0x64>
 8012794:	e00e      	b.n	80127b4 <snmp_complete_outbound_frame+0x74>
 8012796:	3bf0      	subs	r3, #240	@ 0xf0
 8012798:	2b02      	cmp	r3, #2
 801279a:	d80b      	bhi.n	80127b4 <snmp_complete_outbound_frame+0x74>
         * (during processing of frame we already stored them in error_status field, 
         * so no need to check all varbinds here for those exceptions as suggested by RFC) */
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2202      	movs	r2, #2
 80127a0:	61da      	str	r2, [r3, #28]
          break;
 80127a2:	e020      	b.n	80127e6 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_WRONGVALUE:
        case SNMP_ERR_WRONGENCODING:
        case SNMP_ERR_WRONGTYPE:
        case SNMP_ERR_WRONGLENGTH:
        case SNMP_ERR_INCONSISTENTVALUE:
          request->error_status = SNMP_ERR_BADVALUE;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2203      	movs	r2, #3
 80127a8:	61da      	str	r2, [r3, #28]
          break;
 80127aa:	e01c      	b.n	80127e6 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_NOACCESS:
        case SNMP_ERR_NOTWRITABLE:
        case SNMP_ERR_NOCREATION:
        case SNMP_ERR_INCONSISTENTNAME:
        case SNMP_ERR_AUTHORIZATIONERROR:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2202      	movs	r2, #2
 80127b0:	61da      	str	r2, [r3, #28]
          break;
 80127b2:	e018      	b.n	80127e6 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_RESOURCEUNAVAILABLE:
        case SNMP_ERR_COMMITFAILED:
        case SNMP_ERR_UNDOFAILED:
        default:
          request->error_status = SNMP_ERR_GENERROR;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2205      	movs	r2, #5
 80127b8:	61da      	str	r2, [r3, #28]
          break;
 80127ba:	e014      	b.n	80127e6 <snmp_complete_outbound_frame+0xa6>
       }
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	7d9b      	ldrb	r3, [r3, #22]
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d109      	bne.n	80127d8 <snmp_complete_outbound_frame+0x98>
      /* map error codes to according to RFC 1905 (4.2.5.  The SetRequest-PDU) return 'NotWritable' for unknown OIDs) */
      switch (request->error_status) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	69db      	ldr	r3, [r3, #28]
 80127c8:	3bf0      	subs	r3, #240	@ 0xf0
 80127ca:	2b02      	cmp	r3, #2
 80127cc:	d803      	bhi.n	80127d6 <snmp_complete_outbound_frame+0x96>
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOTWRITABLE;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2211      	movs	r2, #17
 80127d2:	61da      	str	r2, [r3, #28]
          break;
 80127d4:	e000      	b.n	80127d8 <snmp_complete_outbound_frame+0x98>
        default:
          break;
 80127d6:	bf00      	nop
      }
    }

    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	69db      	ldr	r3, [r3, #28]
 80127dc:	2bef      	cmp	r3, #239	@ 0xef
 80127de:	dd02      	ble.n	80127e6 <snmp_complete_outbound_frame+0xa6>
      /* should never occur because v2 frames store exceptions directly inside varbinds and not as frame error_status */
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_complete_outbound_frame() > Found v2 request with varbind exception code stored as error status!\n"));
      return ERR_ARG;
 80127e0:	f06f 030f 	mvn.w	r3, #15
 80127e4:	e187      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    }
  }

  if ((request->error_status != SNMP_ERR_NOERROR) || (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ)) {
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	69db      	ldr	r3, [r3, #28]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d103      	bne.n	80127f6 <snmp_complete_outbound_frame+0xb6>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	7d9b      	ldrb	r3, [r3, #22]
 80127f2:	2b03      	cmp	r3, #3
 80127f4:	d131      	bne.n	801285a <snmp_complete_outbound_frame+0x11a>
    /* all inbound vars are returned in response without any modification for error responses and successful set requests*/
    struct snmp_pbuf_stream inbound_stream;
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&inbound_stream, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len) );
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012802:	f107 000c 	add.w	r0, r7, #12
 8012806:	f000 fbd5 	bl	8012fb4 <snmp_pbuf_stream_init>
 801280a:	4603      	mov	r3, r0
 801280c:	2b00      	cmp	r3, #0
 801280e:	d002      	beq.n	8012816 <snmp_complete_outbound_frame+0xd6>
 8012810:	f06f 030f 	mvn.w	r3, #15
 8012814:	e16f      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, request->outbound_varbind_offset, request->outbound_pbuf->tot_len - request->outbound_varbind_offset) );
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8b3 4056 	ldrh.w	r4, [r3, #86]	@ 0x56
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801282a:	891a      	ldrh	r2, [r3, #8]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	b29b      	uxth	r3, r3
 8012836:	4622      	mov	r2, r4
 8012838:	f000 fbbc 	bl	8012fb4 <snmp_pbuf_stream_init>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d002      	beq.n	8012848 <snmp_complete_outbound_frame+0x108>
 8012842:	f06f 030f 	mvn.w	r3, #15
 8012846:	e156      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    snmp_pbuf_stream_writeto(&inbound_stream, &(request->outbound_pbuf_stream), 0);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801284e:	f107 030c 	add.w	r3, r7, #12
 8012852:	2200      	movs	r2, #0
 8012854:	4618      	mov	r0, r3
 8012856:	f000 fc33 	bl	80130c0 <snmp_pbuf_stream_writeto>
  }

  frame_size = request->outbound_pbuf_stream.offset;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8012860:	83bb      	strh	r3, [r7, #28]
    }
  }
#endif

  /* complete missing length in 'Message' sequence ; 'Message' tlv is located at the beginning (offset 0) */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size + outbound_padding - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 8012862:	2330      	movs	r3, #48	@ 0x30
 8012864:	753b      	strb	r3, [r7, #20]
 8012866:	2300      	movs	r3, #0
 8012868:	757b      	strb	r3, [r7, #21]
 801286a:	2303      	movs	r3, #3
 801286c:	75bb      	strb	r3, [r7, #22]
 801286e:	7ffb      	ldrb	r3, [r7, #31]
 8012870:	b29a      	uxth	r2, r3
 8012872:	8bbb      	ldrh	r3, [r7, #28]
 8012874:	4413      	add	r3, r2
 8012876:	b29b      	uxth	r3, r3
 8012878:	3b04      	subs	r3, #4
 801287a:	b29b      	uxth	r3, r3
 801287c:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, 0, request->outbound_pbuf->tot_len) );
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801288c:	891b      	ldrh	r3, [r3, #8]
 801288e:	2200      	movs	r2, #0
 8012890:	f000 fb90 	bl	8012fb4 <snmp_pbuf_stream_init>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d002      	beq.n	80128a0 <snmp_complete_outbound_frame+0x160>
 801289a:	f06f 030f 	mvn.w	r3, #15
 801289e:	e12a      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	3348      	adds	r3, #72	@ 0x48
 80128a4:	f107 0214 	add.w	r2, r7, #20
 80128a8:	4611      	mov	r1, r2
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7fa fde2 	bl	800d474 <snmp_ans1_enc_tlv>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d002      	beq.n	80128bc <snmp_complete_outbound_frame+0x17c>
 80128b6:	f06f 030f 	mvn.w	r3, #15
 80128ba:	e11c      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv));
  }
#endif

  /* complete missing length in 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3,
 80128bc:	23a2      	movs	r3, #162	@ 0xa2
 80128be:	753b      	strb	r3, [r7, #20]
 80128c0:	2300      	movs	r3, #0
 80128c2:	757b      	strb	r3, [r7, #21]
 80128c4:	2303      	movs	r3, #3
 80128c6:	75bb      	strb	r3, [r7, #22]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80128ce:	8bba      	ldrh	r2, [r7, #28]
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	3b04      	subs	r3, #4
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	833b      	strh	r3, [r7, #24]
      frame_size - request->outbound_pdu_offset - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_pdu_offset) );
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80128e6:	4619      	mov	r1, r3
 80128e8:	4610      	mov	r0, r2
 80128ea:	f000 fc80 	bl	80131ee <snmp_pbuf_stream_seek_abs>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d002      	beq.n	80128fa <snmp_complete_outbound_frame+0x1ba>
 80128f4:	f06f 030f 	mvn.w	r3, #15
 80128f8:	e0fd      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	3348      	adds	r3, #72	@ 0x48
 80128fe:	f107 0214 	add.w	r2, r7, #20
 8012902:	4611      	mov	r1, r2
 8012904:	4618      	mov	r0, r3
 8012906:	f7fa fdb5 	bl	800d474 <snmp_ans1_enc_tlv>
 801290a:	4603      	mov	r3, r0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d002      	beq.n	8012916 <snmp_complete_outbound_frame+0x1d6>
 8012910:	f06f 030f 	mvn.w	r3, #15
 8012914:	e0ef      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>

  /* process and encode final error status */
  if (request->error_status != 0) {
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	69db      	ldr	r3, [r3, #28]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d066      	beq.n	80129ec <snmp_complete_outbound_frame+0x2ac>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_status, &len);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	69db      	ldr	r3, [r3, #28]
 8012922:	f107 020a 	add.w	r2, r7, #10
 8012926:	4611      	mov	r1, r2
 8012928:	4618      	mov	r0, r3
 801292a:	f7fa fff9 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 801292e:	897b      	ldrh	r3, [r7, #10]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d002      	beq.n	801293a <snmp_complete_outbound_frame+0x1fa>
      /* error, we only reserved one byte for it */
      return ERR_ARG;
 8012934:	f06f 030f 	mvn.w	r3, #15
 8012938:	e0dd      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_status_offset) );
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8012946:	4619      	mov	r1, r3
 8012948:	4610      	mov	r0, r2
 801294a:	f000 fc50 	bl	80131ee <snmp_pbuf_stream_seek_abs>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <snmp_complete_outbound_frame+0x21a>
 8012954:	f06f 030f 	mvn.w	r3, #15
 8012958:	e0cd      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_status) );
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012960:	8979      	ldrh	r1, [r7, #10]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	69db      	ldr	r3, [r3, #28]
 8012966:	461a      	mov	r2, r3
 8012968:	f7fa fecf 	bl	800d70a <snmp_asn1_enc_s32t>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d002      	beq.n	8012978 <snmp_complete_outbound_frame+0x238>
 8012972:	f06f 030f 	mvn.w	r3, #15
 8012976:	e0be      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>

    /* for compatibility to v1, log statistics; in v2 (RFC 1907) these statistics are obsoleted */
    switch (request->error_status) {
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	69db      	ldr	r3, [r3, #28]
 801297c:	2b03      	cmp	r3, #3
 801297e:	d012      	beq.n	80129a6 <snmp_complete_outbound_frame+0x266>
 8012980:	2b03      	cmp	r3, #3
 8012982:	dc16      	bgt.n	80129b2 <snmp_complete_outbound_frame+0x272>
 8012984:	2b01      	cmp	r3, #1
 8012986:	d002      	beq.n	801298e <snmp_complete_outbound_frame+0x24e>
 8012988:	2b02      	cmp	r3, #2
 801298a:	d006      	beq.n	801299a <snmp_complete_outbound_frame+0x25a>
 801298c:	e011      	b.n	80129b2 <snmp_complete_outbound_frame+0x272>
      case SNMP_ERR_TOOBIG:
        snmp_stats.outtoobigs++;
 801298e:	4b16      	ldr	r3, [pc, #88]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 8012990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012992:	3301      	adds	r3, #1
 8012994:	4a14      	ldr	r2, [pc, #80]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 8012996:	6493      	str	r3, [r2, #72]	@ 0x48
        break;
 8012998:	e011      	b.n	80129be <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_NOSUCHNAME:
        snmp_stats.outnosuchnames++;
 801299a:	4b13      	ldr	r3, [pc, #76]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 801299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801299e:	3301      	adds	r3, #1
 80129a0:	4a11      	ldr	r2, [pc, #68]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 80129a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
 80129a4:	e00b      	b.n	80129be <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_BADVALUE:
        snmp_stats.outbadvalues++;
 80129a6:	4b10      	ldr	r3, [pc, #64]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 80129a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129aa:	3301      	adds	r3, #1
 80129ac:	4a0e      	ldr	r2, [pc, #56]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 80129ae:	6513      	str	r3, [r2, #80]	@ 0x50
        break;
 80129b0:	e005      	b.n	80129be <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_GENERROR:
      default:
        snmp_stats.outgenerrs++;
 80129b2:	4b0d      	ldr	r3, [pc, #52]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 80129b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129b6:	3301      	adds	r3, #1
 80129b8:	4a0b      	ldr	r2, [pc, #44]	@ (80129e8 <snmp_complete_outbound_frame+0x2a8>)
 80129ba:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80129bc:	bf00      	nop
    }

    if (request->error_status == SNMP_ERR_TOOBIG) {
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	69db      	ldr	r3, [r3, #28]
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d103      	bne.n	80129ce <snmp_complete_outbound_frame+0x28e>
      request->error_index = 0; /* defined by RFC 1157 */
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2200      	movs	r2, #0
 80129ca:	621a      	str	r2, [r3, #32]
 80129cc:	e021      	b.n	8012a12 <snmp_complete_outbound_frame+0x2d2>
    } else if (request->error_index == 0) {
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6a1b      	ldr	r3, [r3, #32]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d11d      	bne.n	8012a12 <snmp_complete_outbound_frame+0x2d2>
      /* set index to varbind where error occured (if not already set before, e.g. during GetBulk processing) */
      request->error_index = request->inbound_varbind_enumerator.varbind_count;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80129da:	461a      	mov	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	621a      	str	r2, [r3, #32]
 80129e0:	e017      	b.n	8012a12 <snmp_complete_outbound_frame+0x2d2>
 80129e2:	bf00      	nop
 80129e4:	00070840 	.word	0x00070840
 80129e8:	20008584 	.word	0x20008584
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	7d9b      	ldrb	r3, [r3, #22]
 80129f0:	2b03      	cmp	r3, #3
 80129f2:	d107      	bne.n	8012a04 <snmp_complete_outbound_frame+0x2c4>
      snmp_stats.intotalsetvars += request->inbound_varbind_enumerator.varbind_count;
 80129f4:	4b42      	ldr	r3, [pc, #264]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 80129f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129f8:	687a      	ldr	r2, [r7, #4]
 80129fa:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 80129fc:	4413      	add	r3, r2
 80129fe:	4a40      	ldr	r2, [pc, #256]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 8012a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8012a02:	e006      	b.n	8012a12 <snmp_complete_outbound_frame+0x2d2>
    } else {
      snmp_stats.intotalreqvars += request->inbound_varbind_enumerator.varbind_count;
 8012a04:	4b3e      	ldr	r3, [pc, #248]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 8012a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a08:	687a      	ldr	r2, [r7, #4]
 8012a0a:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8012a0c:	4413      	add	r3, r2
 8012a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 8012a10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }
  }

  /* encode final error index*/
  if (request->error_index != 0) {
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a1b      	ldr	r3, [r3, #32]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d02c      	beq.n	8012a74 <snmp_complete_outbound_frame+0x334>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_index, &len);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6a1b      	ldr	r3, [r3, #32]
 8012a1e:	f107 0208 	add.w	r2, r7, #8
 8012a22:	4611      	mov	r1, r2
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fa ff7b 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 8012a2a:	893b      	ldrh	r3, [r7, #8]
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	d002      	beq.n	8012a36 <snmp_complete_outbound_frame+0x2f6>
      /* error, we only reserved one byte for it */
      return ERR_VAL;
 8012a30:	f06f 0305 	mvn.w	r3, #5
 8012a34:	e05f      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_index_offset) );
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8012a42:	4619      	mov	r1, r3
 8012a44:	4610      	mov	r0, r2
 8012a46:	f000 fbd2 	bl	80131ee <snmp_pbuf_stream_seek_abs>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d002      	beq.n	8012a56 <snmp_complete_outbound_frame+0x316>
 8012a50:	f06f 030f 	mvn.w	r3, #15
 8012a54:	e04f      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_index) );
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012a5c:	8939      	ldrh	r1, [r7, #8]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6a1b      	ldr	r3, [r3, #32]
 8012a62:	461a      	mov	r2, r3
 8012a64:	f7fa fe51 	bl	800d70a <snmp_asn1_enc_s32t>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <snmp_complete_outbound_frame+0x334>
 8012a6e:	f06f 030f 	mvn.w	r3, #15
 8012a72:	e040      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
  }

  /* complete missing length in 'VarBindList' sequence ; 'VarBindList' tlv is located directly before varbind offset */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size - request->outbound_varbind_offset);
 8012a74:	2330      	movs	r3, #48	@ 0x30
 8012a76:	753b      	strb	r3, [r7, #20]
 8012a78:	2300      	movs	r3, #0
 8012a7a:	757b      	strb	r3, [r7, #21]
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	75bb      	strb	r3, [r7, #22]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012a86:	8bba      	ldrh	r2, [r7, #28]
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_varbind_offset - 1 - 3) ); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012a9a:	3b04      	subs	r3, #4
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	4610      	mov	r0, r2
 8012aa0:	f000 fba5 	bl	80131ee <snmp_pbuf_stream_seek_abs>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d002      	beq.n	8012ab0 <snmp_complete_outbound_frame+0x370>
 8012aaa:	f06f 030f 	mvn.w	r3, #15
 8012aae:	e022      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	3348      	adds	r3, #72	@ 0x48
 8012ab4:	f107 0214 	add.w	r2, r7, #20
 8012ab8:	4611      	mov	r1, r2
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fa fcda 	bl	800d474 <snmp_ans1_enc_tlv>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d002      	beq.n	8012acc <snmp_complete_outbound_frame+0x38c>
 8012ac6:	f06f 030f 	mvn.w	r3, #15
 8012aca:	e014      	b.n	8012af6 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(&request->outbound_pbuf_stream,
                  request->msg_authentication_parameters, SNMP_V3_MAX_AUTH_PARAM_LENGTH));
  }
#endif

  pbuf_realloc(request->outbound_pbuf, frame_size + outbound_padding);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8012ad0:	7ffb      	ldrb	r3, [r7, #31]
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	8bbb      	ldrh	r3, [r7, #28]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	4619      	mov	r1, r3
 8012adc:	f002 fcbe 	bl	801545c <pbuf_realloc>

  snmp_stats.outgetresponses++;
 8012ae0:	4b07      	ldr	r3, [pc, #28]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 8012ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	4a06      	ldr	r2, [pc, #24]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 8012ae8:	6653      	str	r3, [r2, #100]	@ 0x64
  snmp_stats.outpkts++;
 8012aea:	4b05      	ldr	r3, [pc, #20]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	3301      	adds	r3, #1
 8012af0:	4a03      	ldr	r2, [pc, #12]	@ (8012b00 <snmp_complete_outbound_frame+0x3c0>)
 8012af2:	6053      	str	r3, [r2, #4]

  return ERR_OK;
 8012af4:	2300      	movs	r3, #0
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3724      	adds	r7, #36	@ 0x24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd90      	pop	{r4, r7, pc}
 8012afe:	bf00      	nop
 8012b00:	20008584 	.word	0x20008584

08012b04 <snmp_execute_write_callbacks>:

static void 
snmp_execute_write_callbacks(struct snmp_request *request)
{
 8012b04:	b590      	push	{r4, r7, lr}
 8012b06:	b0bd      	sub	sp, #244	@ 0xf4
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  struct snmp_varbind_enumerator inbound_varbind_enumerator;
  struct snmp_varbind vb;

  snmp_vb_enumerator_init(&inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012b18:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8012b1c:	f000 f824 	bl	8012b68 <snmp_vb_enumerator_init>
  vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned, which we don't need here) */
 8012b20:	2300      	movs	r3, #0
 8012b22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 8012b26:	e00a      	b.n	8012b3e <snmp_execute_write_callbacks+0x3a>
    snmp_write_callback(vb.oid.id, vb.oid.len, snmp_write_callback_arg);
 8012b28:	4b0d      	ldr	r3, [pc, #52]	@ (8012b60 <snmp_execute_write_callbacks+0x5c>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	7c39      	ldrb	r1, [r7, #16]
 8012b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8012b64 <snmp_execute_write_callbacks+0x60>)
 8012b30:	6814      	ldr	r4, [r2, #0]
 8012b32:	f107 0208 	add.w	r2, r7, #8
 8012b36:	f102 000c 	add.w	r0, r2, #12
 8012b3a:	4622      	mov	r2, r4
 8012b3c:	4798      	blx	r3
  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 8012b3e:	f107 0208 	add.w	r2, r7, #8
 8012b42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8012b46:	4611      	mov	r1, r2
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f000 f825 	bl	8012b98 <snmp_vb_enumerator_get_next>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d0e9      	beq.n	8012b28 <snmp_execute_write_callbacks+0x24>
  }
}
 8012b54:	bf00      	nop
 8012b56:	bf00      	nop
 8012b58:	37f4      	adds	r7, #244	@ 0xf4
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd90      	pop	{r4, r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	20008624 	.word	0x20008624
 8012b64:	20008628 	.word	0x20008628

08012b68 <snmp_vb_enumerator_init>:
/* VarBind enumerator methods */
/* ----------------------------------------------------------------------- */

void
snmp_vb_enumerator_init(struct snmp_varbind_enumerator* enumerator, struct pbuf* p, u16_t offset, u16_t length)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	4611      	mov	r1, r2
 8012b74:	461a      	mov	r2, r3
 8012b76:	460b      	mov	r3, r1
 8012b78:	80fb      	strh	r3, [r7, #6]
 8012b7a:	4613      	mov	r3, r2
 8012b7c:	80bb      	strh	r3, [r7, #4]
  snmp_pbuf_stream_init(&(enumerator->pbuf_stream), p, offset, length);
 8012b7e:	68f8      	ldr	r0, [r7, #12]
 8012b80:	88bb      	ldrh	r3, [r7, #4]
 8012b82:	88fa      	ldrh	r2, [r7, #6]
 8012b84:	68b9      	ldr	r1, [r7, #8]
 8012b86:	f000 fa15 	bl	8012fb4 <snmp_pbuf_stream_init>
  enumerator->varbind_count = 0;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	811a      	strh	r2, [r3, #8]
}
 8012b90:	bf00      	nop
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <snmp_vb_enumerator_get_next>:
#define VB_PARSE_EXEC(code)   PARSE_EXEC(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)
#define VB_PARSE_ASSERT(code) PARSE_ASSERT(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)

snmp_vb_enumerator_err_t
snmp_vb_enumerator_get_next(struct snmp_varbind_enumerator* enumerator, struct snmp_varbind* varbind)
{
 8012b98:	b590      	push	{r4, r7, lr}
 8012b9a:	b089      	sub	sp, #36	@ 0x24
 8012b9c:	af02      	add	r7, sp, #8
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  u16_t  varbind_len;
  err_t  err;
  
  if (enumerator->pbuf_stream.length == 0)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	88db      	ldrh	r3, [r3, #6]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d101      	bne.n	8012bae <snmp_vb_enumerator_get_next+0x16>
  {
    return SNMP_VB_ENUMERATOR_ERR_EOVB;
 8012baa:	2301      	movs	r3, #1
 8012bac:	e1fc      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
  }
  enumerator->varbind_count++;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	891b      	ldrh	r3, [r3, #8]
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	811a      	strh	r2, [r3, #8]

  /* decode varbind itself (parent container of a varbind) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f107 020c 	add.w	r2, r7, #12
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fa ff18 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d006      	beq.n	8012bdc <snmp_vb_enumerator_get_next+0x44>
 8012bce:	4bb9      	ldr	r3, [pc, #740]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012bd0:	695b      	ldr	r3, [r3, #20]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	4ab7      	ldr	r2, [pc, #732]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012bd6:	6153      	str	r3, [r2, #20]
 8012bd8:	2302      	movs	r3, #2
 8012bda:	e1e5      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= enumerator->pbuf_stream.length));
 8012bdc:	7b3b      	ldrb	r3, [r7, #12]
 8012bde:	2b30      	cmp	r3, #48	@ 0x30
 8012be0:	d104      	bne.n	8012bec <snmp_vb_enumerator_get_next+0x54>
 8012be2:	8a3a      	ldrh	r2, [r7, #16]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	88db      	ldrh	r3, [r3, #6]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d906      	bls.n	8012bfa <snmp_vb_enumerator_get_next+0x62>
 8012bec:	4bb1      	ldr	r3, [pc, #708]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012bee:	695b      	ldr	r3, [r3, #20]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	4ab0      	ldr	r2, [pc, #704]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012bf4:	6153      	str	r3, [r2, #20]
 8012bf6:	2302      	movs	r3, #2
 8012bf8:	e1d6      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
  varbind_len = tlv.value_len;
 8012bfa:	8a3b      	ldrh	r3, [r7, #16]
 8012bfc:	82fb      	strh	r3, [r7, #22]

  /* decode varbind name (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f107 020c 	add.w	r2, r7, #12
 8012c04:	4611      	mov	r1, r2
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7fa fef6 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d006      	beq.n	8012c20 <snmp_vb_enumerator_get_next+0x88>
 8012c12:	4ba8      	ldr	r3, [pc, #672]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012c14:	695b      	ldr	r3, [r3, #20]
 8012c16:	3301      	adds	r3, #1
 8012c18:	4aa6      	ldr	r2, [pc, #664]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012c1a:	6153      	str	r3, [r2, #20]
 8012c1c:	2302      	movs	r3, #2
 8012c1e:	e1c3      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_OBJECT_ID) && (SNMP_ASN1_TLV_LENGTH(tlv) < varbind_len) && (tlv.value_len < enumerator->pbuf_stream.length));
 8012c20:	7b3b      	ldrb	r3, [r7, #12]
 8012c22:	2b06      	cmp	r3, #6
 8012c24:	d10d      	bne.n	8012c42 <snmp_vb_enumerator_get_next+0xaa>
 8012c26:	7b7b      	ldrb	r3, [r7, #13]
 8012c28:	461a      	mov	r2, r3
 8012c2a:	7bbb      	ldrb	r3, [r7, #14]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	8a3a      	ldrh	r2, [r7, #16]
 8012c30:	441a      	add	r2, r3
 8012c32:	8afb      	ldrh	r3, [r7, #22]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	da04      	bge.n	8012c42 <snmp_vb_enumerator_get_next+0xaa>
 8012c38:	8a3a      	ldrh	r2, [r7, #16]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	88db      	ldrh	r3, [r3, #6]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d306      	bcc.n	8012c50 <snmp_vb_enumerator_get_next+0xb8>
 8012c42:	4b9c      	ldr	r3, [pc, #624]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012c44:	695b      	ldr	r3, [r3, #20]
 8012c46:	3301      	adds	r3, #1
 8012c48:	4a9a      	ldr	r2, [pc, #616]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012c4a:	6153      	str	r3, [r2, #20]
 8012c4c:	2302      	movs	r3, #2
 8012c4e:	e1ab      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
   
  VB_PARSE_EXEC(snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, varbind->oid.id, &(varbind->oid.len), SNMP_MAX_OBJ_ID_LEN));
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	8a39      	ldrh	r1, [r7, #16]
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	f103 020c 	add.w	r2, r3, #12
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	3308      	adds	r3, #8
 8012c5e:	2432      	movs	r4, #50	@ 0x32
 8012c60:	9400      	str	r4, [sp, #0]
 8012c62:	f7fb f872 	bl	800dd4a <snmp_asn1_dec_oid>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d006      	beq.n	8012c7a <snmp_vb_enumerator_get_next+0xe2>
 8012c6c:	4b91      	ldr	r3, [pc, #580]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012c6e:	695b      	ldr	r3, [r3, #20]
 8012c70:	3301      	adds	r3, #1
 8012c72:	4a90      	ldr	r2, [pc, #576]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012c74:	6153      	str	r3, [r2, #20]
 8012c76:	2302      	movs	r3, #2
 8012c78:	e196      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
  varbind_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8012c7a:	7b7b      	ldrb	r3, [r7, #13]
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	7bbb      	ldrb	r3, [r7, #14]
 8012c80:	4413      	add	r3, r2
 8012c82:	b29a      	uxth	r2, r3
 8012c84:	8a3b      	ldrh	r3, [r7, #16]
 8012c86:	4413      	add	r3, r2
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	8afa      	ldrh	r2, [r7, #22]
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	82fb      	strh	r3, [r7, #22]

  /* decode varbind value (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f107 020c 	add.w	r2, r7, #12
 8012c96:	4611      	mov	r1, r2
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7fa fead 	bl	800d9f8 <snmp_asn1_dec_tlv>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d006      	beq.n	8012cb2 <snmp_vb_enumerator_get_next+0x11a>
 8012ca4:	4b83      	ldr	r3, [pc, #524]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012ca6:	695b      	ldr	r3, [r3, #20]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	4a82      	ldr	r2, [pc, #520]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012cac:	6153      	str	r3, [r2, #20]
 8012cae:	2302      	movs	r3, #2
 8012cb0:	e17a      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((SNMP_ASN1_TLV_LENGTH(tlv) == varbind_len) && (tlv.value_len <= enumerator->pbuf_stream.length));
 8012cb2:	7b7b      	ldrb	r3, [r7, #13]
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	7bbb      	ldrb	r3, [r7, #14]
 8012cb8:	4413      	add	r3, r2
 8012cba:	8a3a      	ldrh	r2, [r7, #16]
 8012cbc:	441a      	add	r2, r3
 8012cbe:	8afb      	ldrh	r3, [r7, #22]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d104      	bne.n	8012cce <snmp_vb_enumerator_get_next+0x136>
 8012cc4:	8a3a      	ldrh	r2, [r7, #16]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	88db      	ldrh	r3, [r3, #6]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d906      	bls.n	8012cdc <snmp_vb_enumerator_get_next+0x144>
 8012cce:	4b79      	ldr	r3, [pc, #484]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012cd0:	695b      	ldr	r3, [r3, #20]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	4a77      	ldr	r2, [pc, #476]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012cd6:	6153      	str	r3, [r2, #20]
 8012cd8:	2302      	movs	r3, #2
 8012cda:	e165      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
  varbind->type = tlv.type;
 8012cdc:	7b3a      	ldrb	r2, [r7, #12]
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

  /* shall the value be decoded ? */
  if (varbind->value != NULL) {
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	f000 814d 	beq.w	8012f8a <snmp_vb_enumerator_get_next+0x3f2>
    switch (varbind->type) {
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012cf6:	3b02      	subs	r3, #2
 8012cf8:	2b44      	cmp	r3, #68	@ 0x44
 8012cfa:	f200 813f 	bhi.w	8012f7c <snmp_vb_enumerator_get_next+0x3e4>
 8012cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8012d04 <snmp_vb_enumerator_get_next+0x16c>)
 8012d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d04:	08012e19 	.word	0x08012e19
 8012d08:	08012f7d 	.word	0x08012f7d
 8012d0c:	08012e75 	.word	0x08012e75
 8012d10:	08012eb9 	.word	0x08012eb9
 8012d14:	08012ec3 	.word	0x08012ec3
 8012d18:	08012f7d 	.word	0x08012f7d
 8012d1c:	08012f7d 	.word	0x08012f7d
 8012d20:	08012f7d 	.word	0x08012f7d
 8012d24:	08012f7d 	.word	0x08012f7d
 8012d28:	08012f7d 	.word	0x08012f7d
 8012d2c:	08012f7d 	.word	0x08012f7d
 8012d30:	08012f7d 	.word	0x08012f7d
 8012d34:	08012f7d 	.word	0x08012f7d
 8012d38:	08012f7d 	.word	0x08012f7d
 8012d3c:	08012f7d 	.word	0x08012f7d
 8012d40:	08012f7d 	.word	0x08012f7d
 8012d44:	08012f7d 	.word	0x08012f7d
 8012d48:	08012f7d 	.word	0x08012f7d
 8012d4c:	08012f7d 	.word	0x08012f7d
 8012d50:	08012f7d 	.word	0x08012f7d
 8012d54:	08012f7d 	.word	0x08012f7d
 8012d58:	08012f7d 	.word	0x08012f7d
 8012d5c:	08012f7d 	.word	0x08012f7d
 8012d60:	08012f7d 	.word	0x08012f7d
 8012d64:	08012f7d 	.word	0x08012f7d
 8012d68:	08012f7d 	.word	0x08012f7d
 8012d6c:	08012f7d 	.word	0x08012f7d
 8012d70:	08012f7d 	.word	0x08012f7d
 8012d74:	08012f7d 	.word	0x08012f7d
 8012d78:	08012f7d 	.word	0x08012f7d
 8012d7c:	08012f7d 	.word	0x08012f7d
 8012d80:	08012f7d 	.word	0x08012f7d
 8012d84:	08012f7d 	.word	0x08012f7d
 8012d88:	08012f7d 	.word	0x08012f7d
 8012d8c:	08012f7d 	.word	0x08012f7d
 8012d90:	08012f7d 	.word	0x08012f7d
 8012d94:	08012f7d 	.word	0x08012f7d
 8012d98:	08012f7d 	.word	0x08012f7d
 8012d9c:	08012f7d 	.word	0x08012f7d
 8012da0:	08012f7d 	.word	0x08012f7d
 8012da4:	08012f7d 	.word	0x08012f7d
 8012da8:	08012f7d 	.word	0x08012f7d
 8012dac:	08012f7d 	.word	0x08012f7d
 8012db0:	08012f7d 	.word	0x08012f7d
 8012db4:	08012f7d 	.word	0x08012f7d
 8012db8:	08012f7d 	.word	0x08012f7d
 8012dbc:	08012f7d 	.word	0x08012f7d
 8012dc0:	08012f7d 	.word	0x08012f7d
 8012dc4:	08012f7d 	.word	0x08012f7d
 8012dc8:	08012f7d 	.word	0x08012f7d
 8012dcc:	08012f7d 	.word	0x08012f7d
 8012dd0:	08012f7d 	.word	0x08012f7d
 8012dd4:	08012f7d 	.word	0x08012f7d
 8012dd8:	08012f7d 	.word	0x08012f7d
 8012ddc:	08012f7d 	.word	0x08012f7d
 8012de0:	08012f7d 	.word	0x08012f7d
 8012de4:	08012f7d 	.word	0x08012f7d
 8012de8:	08012f7d 	.word	0x08012f7d
 8012dec:	08012f7d 	.word	0x08012f7d
 8012df0:	08012f7d 	.word	0x08012f7d
 8012df4:	08012f7d 	.word	0x08012f7d
 8012df8:	08012f7d 	.word	0x08012f7d
 8012dfc:	08012f11 	.word	0x08012f11
 8012e00:	08012e47 	.word	0x08012e47
 8012e04:	08012e47 	.word	0x08012e47
 8012e08:	08012e47 	.word	0x08012e47
 8012e0c:	08012e75 	.word	0x08012e75
 8012e10:	08012f7d 	.word	0x08012f7d
 8012e14:	08012f4f 	.word	0x08012f4f
      case SNMP_ASN1_TYPE_INTEGER:
        VB_PARSE_EXEC(snmp_asn1_dec_s32t(&(enumerator->pbuf_stream), tlv.value_len, (s32_t*)varbind->value));
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	8a39      	ldrh	r1, [r7, #16]
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012e22:	461a      	mov	r2, r3
 8012e24:	f7fa ff20 	bl	800dc68 <snmp_asn1_dec_s32t>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d006      	beq.n	8012e3c <snmp_vb_enumerator_get_next+0x2a4>
 8012e2e:	4b21      	ldr	r3, [pc, #132]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012e30:	695b      	ldr	r3, [r3, #20]
 8012e32:	3301      	adds	r3, #1
 8012e34:	4a1f      	ldr	r2, [pc, #124]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012e36:	6153      	str	r3, [r2, #20]
 8012e38:	2302      	movs	r3, #2
 8012e3a:	e0b5      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(s32_t*);
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	2204      	movs	r2, #4
 8012e40:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8012e44:	e0af      	b.n	8012fa6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        VB_PARSE_EXEC(snmp_asn1_dec_u32t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	8a39      	ldrh	r1, [r7, #16]
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012e50:	461a      	mov	r2, r3
 8012e52:	f7fa fe50 	bl	800daf6 <snmp_asn1_dec_u32t>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d006      	beq.n	8012e6a <snmp_vb_enumerator_get_next+0x2d2>
 8012e5c:	4b15      	ldr	r3, [pc, #84]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012e5e:	695b      	ldr	r3, [r3, #20]
 8012e60:	3301      	adds	r3, #1
 8012e62:	4a14      	ldr	r2, [pc, #80]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012e64:	6153      	str	r3, [r2, #20]
 8012e66:	2302      	movs	r3, #2
 8012e68:	e09e      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(u32_t*);
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	2204      	movs	r2, #4
 8012e6e:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8012e72:	e098      	b.n	8012fa6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_OPAQUE:
        err = snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	8a39      	ldrh	r1, [r7, #16]
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	33d6      	adds	r3, #214	@ 0xd6
 8012e82:	24c8      	movs	r4, #200	@ 0xc8
 8012e84:	9400      	str	r4, [sp, #0]
 8012e86:	f7fb f82e 	bl	800dee6 <snmp_asn1_dec_raw>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 8012e8e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e96:	d101      	bne.n	8012e9c <snmp_vb_enumerator_get_next+0x304>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 8012e98:	2303      	movs	r3, #3
 8012e9a:	e085      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 8012e9c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d07d      	beq.n	8012fa0 <snmp_vb_enumerator_get_next+0x408>
 8012ea4:	4b03      	ldr	r3, [pc, #12]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012ea6:	695b      	ldr	r3, [r3, #20]
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	4a02      	ldr	r2, [pc, #8]	@ (8012eb4 <snmp_vb_enumerator_get_next+0x31c>)
 8012eac:	6153      	str	r3, [r2, #20]
 8012eae:	2302      	movs	r3, #2
 8012eb0:	e07a      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
 8012eb2:	bf00      	nop
 8012eb4:	20008584 	.word	0x20008584
        break;
      case SNMP_ASN1_TYPE_NULL:
        varbind->value_len = 0;
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8012ec0:	e071      	b.n	8012fa6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        /* misuse tlv.length_len as OID_length transporter */
        err = snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value, &tlv.length_len, SNMP_MAX_OBJ_ID_LEN);
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	8a39      	ldrh	r1, [r7, #16]
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012ecc:	f107 030c 	add.w	r3, r7, #12
 8012ed0:	3302      	adds	r3, #2
 8012ed2:	2432      	movs	r4, #50	@ 0x32
 8012ed4:	9400      	str	r4, [sp, #0]
 8012ed6:	f7fa ff38 	bl	800dd4a <snmp_asn1_dec_oid>
 8012eda:	4603      	mov	r3, r0
 8012edc:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 8012ede:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee6:	d101      	bne.n	8012eec <snmp_vb_enumerator_get_next+0x354>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 8012ee8:	2303      	movs	r3, #3
 8012eea:	e05d      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 8012eec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d006      	beq.n	8012f02 <snmp_vb_enumerator_get_next+0x36a>
 8012ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012ef6:	695b      	ldr	r3, [r3, #20]
 8012ef8:	3301      	adds	r3, #1
 8012efa:	4a2d      	ldr	r2, [pc, #180]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012efc:	6153      	str	r3, [r2, #20]
 8012efe:	2302      	movs	r3, #2
 8012f00:	e052      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = tlv.length_len * sizeof(u32_t);
 8012f02:	7bbb      	ldrb	r3, [r7, #14]
 8012f04:	009b      	lsls	r3, r3, #2
 8012f06:	b29a      	uxth	r2, r3
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8012f0e:	e04a      	b.n	8012fa6 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_IPADDR:
        if (tlv.value_len == 4) {
 8012f10:	8a3b      	ldrh	r3, [r7, #16]
 8012f12:	2b04      	cmp	r3, #4
 8012f14:	d114      	bne.n	8012f40 <snmp_vb_enumerator_get_next+0x3a8>
          /* must be exactly 4 octets! */
          VB_PARSE_EXEC(snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE));
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	8a39      	ldrh	r1, [r7, #16]
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	33d6      	adds	r3, #214	@ 0xd6
 8012f24:	24c8      	movs	r4, #200	@ 0xc8
 8012f26:	9400      	str	r4, [sp, #0]
 8012f28:	f7fa ffdd 	bl	800dee6 <snmp_asn1_dec_raw>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d038      	beq.n	8012fa4 <snmp_vb_enumerator_get_next+0x40c>
 8012f32:	4b1f      	ldr	r3, [pc, #124]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f34:	695b      	ldr	r3, [r3, #20]
 8012f36:	3301      	adds	r3, #1
 8012f38:	4a1d      	ldr	r2, [pc, #116]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f3a:	6153      	str	r3, [r2, #20]
 8012f3c:	2302      	movs	r3, #2
 8012f3e:	e033      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        } else {
          VB_PARSE_ASSERT(0);
 8012f40:	4b1b      	ldr	r3, [pc, #108]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f42:	695b      	ldr	r3, [r3, #20]
 8012f44:	3301      	adds	r3, #1
 8012f46:	4a1a      	ldr	r2, [pc, #104]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f48:	6153      	str	r3, [r2, #20]
 8012f4a:	2302      	movs	r3, #2
 8012f4c:	e02c      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        }
        break;
      case SNMP_ASN1_TYPE_COUNTER64:
        VB_PARSE_EXEC(snmp_asn1_dec_u64t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	8a39      	ldrh	r1, [r7, #16]
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012f58:	461a      	mov	r2, r3
 8012f5a:	f7fa fe1f 	bl	800db9c <snmp_asn1_dec_u64t>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d006      	beq.n	8012f72 <snmp_vb_enumerator_get_next+0x3da>
 8012f64:	4b12      	ldr	r3, [pc, #72]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f66:	695b      	ldr	r3, [r3, #20]
 8012f68:	3301      	adds	r3, #1
 8012f6a:	4a11      	ldr	r2, [pc, #68]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f6c:	6153      	str	r3, [r2, #20]
 8012f6e:	2302      	movs	r3, #2
 8012f70:	e01a      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = 2 * sizeof(u32_t*);
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	2208      	movs	r2, #8
 8012f76:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8012f7a:	e014      	b.n	8012fa6 <snmp_vb_enumerator_get_next+0x40e>
      default:
        VB_PARSE_ASSERT(0);
 8012f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f7e:	695b      	ldr	r3, [r3, #20]
 8012f80:	3301      	adds	r3, #1
 8012f82:	4a0b      	ldr	r2, [pc, #44]	@ (8012fb0 <snmp_vb_enumerator_get_next+0x418>)
 8012f84:	6153      	str	r3, [r2, #20]
 8012f86:	2302      	movs	r3, #2
 8012f88:	e00e      	b.n	8012fa8 <snmp_vb_enumerator_get_next+0x410>
        break;
    }
  } else {
    snmp_pbuf_stream_seek(&(enumerator->pbuf_stream), tlv.value_len);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	8a3a      	ldrh	r2, [r7, #16]
 8012f8e:	4611      	mov	r1, r2
 8012f90:	4618      	mov	r0, r3
 8012f92:	f000 f905 	bl	80131a0 <snmp_pbuf_stream_seek>
    varbind->value_len = tlv.value_len;
 8012f96:	8a3a      	ldrh	r2, [r7, #16]
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
 8012f9e:	e002      	b.n	8012fa6 <snmp_vb_enumerator_get_next+0x40e>
        break;
 8012fa0:	bf00      	nop
 8012fa2:	e000      	b.n	8012fa6 <snmp_vb_enumerator_get_next+0x40e>
        break;
 8012fa4:	bf00      	nop
  }

  return SNMP_VB_ENUMERATOR_ERR_OK;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	371c      	adds	r7, #28
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd90      	pop	{r4, r7, pc}
 8012fb0:	20008584 	.word	0x20008584

08012fb4 <snmp_pbuf_stream_init>:
#include "lwip/def.h"
#include <string.h>

err_t
snmp_pbuf_stream_init(struct snmp_pbuf_stream* pbuf_stream, struct pbuf* p, u16_t offset, u16_t length)
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b085      	sub	sp, #20
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	4611      	mov	r1, r2
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	80fb      	strh	r3, [r7, #6]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	80bb      	strh	r3, [r7, #4]
  pbuf_stream->offset = offset;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	88fa      	ldrh	r2, [r7, #6]
 8012fce:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length = length;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	88ba      	ldrh	r2, [r7, #4]
 8012fd4:	80da      	strh	r2, [r3, #6]
  pbuf_stream->pbuf   = p;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	68ba      	ldr	r2, [r7, #8]
 8012fda:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 8012fdc:	2300      	movs	r3, #0
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3714      	adds	r7, #20
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bc80      	pop	{r7}
 8012fe6:	4770      	bx	lr

08012fe8 <snmp_pbuf_stream_read>:

err_t
snmp_pbuf_stream_read(struct snmp_pbuf_stream* pbuf_stream, u8_t* data)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
  if (pbuf_stream->length == 0) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	88db      	ldrh	r3, [r3, #6]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d102      	bne.n	8013000 <snmp_pbuf_stream_read+0x18>
    return ERR_BUF;
 8012ffa:	f06f 0301 	mvn.w	r3, #1
 8012ffe:	e01a      	b.n	8013036 <snmp_pbuf_stream_read+0x4e>
  }

  if (pbuf_copy_partial(pbuf_stream->pbuf, data, 1, pbuf_stream->offset) == 0) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	6818      	ldr	r0, [r3, #0]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	889b      	ldrh	r3, [r3, #4]
 8013008:	2201      	movs	r2, #1
 801300a:	6839      	ldr	r1, [r7, #0]
 801300c:	f002 fd98 	bl	8015b40 <pbuf_copy_partial>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d102      	bne.n	801301c <snmp_pbuf_stream_read+0x34>
    return ERR_BUF;
 8013016:	f06f 0301 	mvn.w	r3, #1
 801301a:	e00c      	b.n	8013036 <snmp_pbuf_stream_read+0x4e>
  }

  pbuf_stream->offset++;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	889b      	ldrh	r3, [r3, #4]
 8013020:	3301      	adds	r3, #1
 8013022:	b29a      	uxth	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length--;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	88db      	ldrh	r3, [r3, #6]
 801302c:	3b01      	subs	r3, #1
 801302e:	b29a      	uxth	r2, r3
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013034:	2300      	movs	r3, #0
}
 8013036:	4618      	mov	r0, r3
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <snmp_pbuf_stream_write>:

err_t
snmp_pbuf_stream_write(struct snmp_pbuf_stream* pbuf_stream, u8_t data)
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b082      	sub	sp, #8
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	460b      	mov	r3, r1
 8013048:	70fb      	strb	r3, [r7, #3]
  return snmp_pbuf_stream_writebuf(pbuf_stream, &data, 1);
 801304a:	1cfb      	adds	r3, r7, #3
 801304c:	2201      	movs	r2, #1
 801304e:	4619      	mov	r1, r3
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f000 f805 	bl	8013060 <snmp_pbuf_stream_writebuf>
 8013056:	4603      	mov	r3, r0
}
 8013058:	4618      	mov	r0, r3
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}

08013060 <snmp_pbuf_stream_writebuf>:

err_t
snmp_pbuf_stream_writebuf(struct snmp_pbuf_stream* pbuf_stream, const void* buf, u16_t buf_len)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	4613      	mov	r3, r2
 801306c:	80fb      	strh	r3, [r7, #6]
  if (pbuf_stream->length < buf_len) {
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	88db      	ldrh	r3, [r3, #6]
 8013072:	88fa      	ldrh	r2, [r7, #6]
 8013074:	429a      	cmp	r2, r3
 8013076:	d902      	bls.n	801307e <snmp_pbuf_stream_writebuf+0x1e>
    return ERR_BUF;
 8013078:	f06f 0301 	mvn.w	r3, #1
 801307c:	e01c      	b.n	80130b8 <snmp_pbuf_stream_writebuf+0x58>
  }

  if (pbuf_take_at(pbuf_stream->pbuf, buf, buf_len, pbuf_stream->offset) != ERR_OK) {
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6818      	ldr	r0, [r3, #0]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	889b      	ldrh	r3, [r3, #4]
 8013086:	88fa      	ldrh	r2, [r7, #6]
 8013088:	68b9      	ldr	r1, [r7, #8]
 801308a:	f002 fea1 	bl	8015dd0 <pbuf_take_at>
 801308e:	4603      	mov	r3, r0
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <snmp_pbuf_stream_writebuf+0x3a>
    return ERR_BUF;
 8013094:	f06f 0301 	mvn.w	r3, #1
 8013098:	e00e      	b.n	80130b8 <snmp_pbuf_stream_writebuf+0x58>
  }

  pbuf_stream->offset += buf_len;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	889a      	ldrh	r2, [r3, #4]
 801309e:	88fb      	ldrh	r3, [r7, #6]
 80130a0:	4413      	add	r3, r2
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= buf_len;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	88da      	ldrh	r2, [r3, #6]
 80130ac:	88fb      	ldrh	r3, [r7, #6]
 80130ae:	1ad3      	subs	r3, r2, r3
 80130b0:	b29a      	uxth	r2, r3
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 80130b6:	2300      	movs	r3, #0
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3710      	adds	r7, #16
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <snmp_pbuf_stream_writeto>:

err_t
snmp_pbuf_stream_writeto(struct snmp_pbuf_stream* pbuf_stream, struct snmp_pbuf_stream* target_pbuf_stream, u16_t len)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b088      	sub	sp, #32
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	4613      	mov	r3, r2
 80130cc:	80fb      	strh	r3, [r7, #6]

  if ((pbuf_stream == NULL) || (target_pbuf_stream == NULL)) {
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <snmp_pbuf_stream_writeto+0x1a>
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d102      	bne.n	80130e0 <snmp_pbuf_stream_writeto+0x20>
    return ERR_ARG;
 80130da:	f06f 030f 	mvn.w	r3, #15
 80130de:	e05b      	b.n	8013198 <snmp_pbuf_stream_writeto+0xd8>
  }
  if ((len > pbuf_stream->length) || (len > target_pbuf_stream->length)) {
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	88db      	ldrh	r3, [r3, #6]
 80130e4:	88fa      	ldrh	r2, [r7, #6]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d804      	bhi.n	80130f4 <snmp_pbuf_stream_writeto+0x34>
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	88db      	ldrh	r3, [r3, #6]
 80130ee:	88fa      	ldrh	r2, [r7, #6]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d902      	bls.n	80130fa <snmp_pbuf_stream_writeto+0x3a>
    return ERR_ARG;
 80130f4:	f06f 030f 	mvn.w	r3, #15
 80130f8:	e04e      	b.n	8013198 <snmp_pbuf_stream_writeto+0xd8>
  }

  if (len == 0) {
 80130fa:	88fb      	ldrh	r3, [r7, #6]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d147      	bne.n	8013190 <snmp_pbuf_stream_writeto+0xd0>
    len = LWIP_MIN(pbuf_stream->length, target_pbuf_stream->length);
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	88da      	ldrh	r2, [r3, #6]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	88db      	ldrh	r3, [r3, #6]
 8013108:	4293      	cmp	r3, r2
 801310a:	bf28      	it	cs
 801310c:	4613      	movcs	r3, r2
 801310e:	80fb      	strh	r3, [r7, #6]
  }

  while (len > 0) {
 8013110:	e03e      	b.n	8013190 <snmp_pbuf_stream_writeto+0xd0>
    u16_t chunk_len;
    err_t err;
    u16_t target_offset;
    struct pbuf* pbuf = pbuf_skip(pbuf_stream->pbuf, pbuf_stream->offset, &target_offset);
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	6818      	ldr	r0, [r3, #0]
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	889b      	ldrh	r3, [r3, #4]
 801311a:	f107 0216 	add.w	r2, r7, #22
 801311e:	4619      	mov	r1, r3
 8013120:	f002 fdb0 	bl	8015c84 <pbuf_skip>
 8013124:	61f8      	str	r0, [r7, #28]

    if ((pbuf == NULL) || (pbuf->len == 0)) {
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d003      	beq.n	8013134 <snmp_pbuf_stream_writeto+0x74>
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	895b      	ldrh	r3, [r3, #10]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d102      	bne.n	801313a <snmp_pbuf_stream_writeto+0x7a>
      return ERR_BUF;
 8013134:	f06f 0301 	mvn.w	r3, #1
 8013138:	e02e      	b.n	8013198 <snmp_pbuf_stream_writeto+0xd8>
    }

    chunk_len = LWIP_MIN(len, pbuf->len);
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	895b      	ldrh	r3, [r3, #10]
 801313e:	88fa      	ldrh	r2, [r7, #6]
 8013140:	4293      	cmp	r3, r2
 8013142:	bf28      	it	cs
 8013144:	4613      	movcs	r3, r2
 8013146:	837b      	strh	r3, [r7, #26]
    err = snmp_pbuf_stream_writebuf(target_pbuf_stream, &((u8_t*)pbuf->payload)[target_offset], chunk_len);
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	8afa      	ldrh	r2, [r7, #22]
 801314e:	4413      	add	r3, r2
 8013150:	8b7a      	ldrh	r2, [r7, #26]
 8013152:	4619      	mov	r1, r3
 8013154:	68b8      	ldr	r0, [r7, #8]
 8013156:	f7ff ff83 	bl	8013060 <snmp_pbuf_stream_writebuf>
 801315a:	4603      	mov	r3, r0
 801315c:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 801315e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <snmp_pbuf_stream_writeto+0xac>
      return err;
 8013166:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801316a:	e015      	b.n	8013198 <snmp_pbuf_stream_writeto+0xd8>
    }

    pbuf_stream->offset   += chunk_len;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	889a      	ldrh	r2, [r3, #4]
 8013170:	8b7b      	ldrh	r3, [r7, #26]
 8013172:	4413      	add	r3, r2
 8013174:	b29a      	uxth	r2, r3
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	809a      	strh	r2, [r3, #4]
    pbuf_stream->length   -= chunk_len;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	88da      	ldrh	r2, [r3, #6]
 801317e:	8b7b      	ldrh	r3, [r7, #26]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	b29a      	uxth	r2, r3
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	80da      	strh	r2, [r3, #6]
    len -= chunk_len;
 8013188:	88fa      	ldrh	r2, [r7, #6]
 801318a:	8b7b      	ldrh	r3, [r7, #26]
 801318c:	1ad3      	subs	r3, r2, r3
 801318e:	80fb      	strh	r3, [r7, #6]
  while (len > 0) {
 8013190:	88fb      	ldrh	r3, [r7, #6]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d1bd      	bne.n	8013112 <snmp_pbuf_stream_writeto+0x52>
  }

  return ERR_OK;
 8013196:	2300      	movs	r3, #0
}
 8013198:	4618      	mov	r0, r3
 801319a:	3720      	adds	r7, #32
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}

080131a0 <snmp_pbuf_stream_seek>:

err_t
snmp_pbuf_stream_seek(struct snmp_pbuf_stream* pbuf_stream, s32_t offset)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	6039      	str	r1, [r7, #0]
  if ((offset < 0) || (offset > pbuf_stream->length)) {
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	db05      	blt.n	80131bc <snmp_pbuf_stream_seek+0x1c>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	88db      	ldrh	r3, [r3, #6]
 80131b4:	461a      	mov	r2, r3
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	4293      	cmp	r3, r2
 80131ba:	dd02      	ble.n	80131c2 <snmp_pbuf_stream_seek+0x22>
    /* we cannot seek backwards or forward behind stream end */
    return ERR_ARG;
 80131bc:	f06f 030f 	mvn.w	r3, #15
 80131c0:	e010      	b.n	80131e4 <snmp_pbuf_stream_seek+0x44>
  }

  pbuf_stream->offset += (u16_t)offset;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	889a      	ldrh	r2, [r3, #4]
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	4413      	add	r3, r2
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= (u16_t)offset;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	88da      	ldrh	r2, [r3, #6]
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	b29b      	uxth	r3, r3
 80131da:	1ad3      	subs	r3, r2, r3
 80131dc:	b29a      	uxth	r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 80131e2:	2300      	movs	r3, #0
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	370c      	adds	r7, #12
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bc80      	pop	{r7}
 80131ec:	4770      	bx	lr

080131ee <snmp_pbuf_stream_seek_abs>:

err_t
snmp_pbuf_stream_seek_abs(struct snmp_pbuf_stream* pbuf_stream, u32_t offset)
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b084      	sub	sp, #16
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	6039      	str	r1, [r7, #0]
  s32_t rel_offset = offset - pbuf_stream->offset;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	889b      	ldrh	r3, [r3, #4]
 80131fc:	461a      	mov	r2, r3
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	1a9b      	subs	r3, r3, r2
 8013202:	60fb      	str	r3, [r7, #12]
  return snmp_pbuf_stream_seek(pbuf_stream, rel_offset);
 8013204:	68f9      	ldr	r1, [r7, #12]
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7ff ffca 	bl	80131a0 <snmp_pbuf_stream_seek>
 801320c:	4603      	mov	r3, r0
}
 801320e:	4618      	mov	r0, r3
 8013210:	3710      	adds	r7, #16
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <snmp_recv>:
#include "snmp_msg.h"

/* lwIP UDP receive callback function */
static void
snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013216:	b580      	push	{r7, lr}
 8013218:	b084      	sub	sp, #16
 801321a:	af00      	add	r7, sp, #0
 801321c:	60f8      	str	r0, [r7, #12]
 801321e:	60b9      	str	r1, [r7, #8]
 8013220:	607a      	str	r2, [r7, #4]
 8013222:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);

  snmp_receive(pcb, p, addr, port);
 8013224:	8b3b      	ldrh	r3, [r7, #24]
 8013226:	683a      	ldr	r2, [r7, #0]
 8013228:	6879      	ldr	r1, [r7, #4]
 801322a:	68b8      	ldr	r0, [r7, #8]
 801322c:	f7fd fe36 	bl	8010e9c <snmp_receive>

  pbuf_free(p);
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f002 fa87 	bl	8015744 <pbuf_free>
}
 8013236:	bf00      	nop
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}

0801323e <snmp_sendto>:

err_t 
snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)
{
 801323e:	b580      	push	{r7, lr}
 8013240:	b084      	sub	sp, #16
 8013242:	af00      	add	r7, sp, #0
 8013244:	60f8      	str	r0, [r7, #12]
 8013246:	60b9      	str	r1, [r7, #8]
 8013248:	607a      	str	r2, [r7, #4]
 801324a:	807b      	strh	r3, [r7, #2]
  return udp_sendto((struct udp_pcb*)handle, p, dst, port);
 801324c:	887b      	ldrh	r3, [r7, #2]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	68b9      	ldr	r1, [r7, #8]
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f008 fc38 	bl	801bac8 <udp_sendto>
 8013258:	4603      	mov	r3, r0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}

08013262 <snmp_get_local_ip_for_dst>:

u8_t
snmp_get_local_ip_for_dst(void* handle, const ip_addr_t *dst, ip_addr_t *result)
{
 8013262:	b580      	push	{r7, lr}
 8013264:	b088      	sub	sp, #32
 8013266:	af00      	add	r7, sp, #0
 8013268:	60f8      	str	r0, [r7, #12]
 801326a:	60b9      	str	r1, [r7, #8]
 801326c:	607a      	str	r2, [r7, #4]
  struct udp_pcb* udp_pcb = (struct udp_pcb*)handle;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	61fb      	str	r3, [r7, #28]
  struct netif *dst_if;
  const ip_addr_t* dst_ip;

  LWIP_UNUSED_ARG(udp_pcb); /* unused in case of IPV4 only configuration */

  ip_route_get_local_ip(&udp_pcb->local_ip, dst, dst_if, dst_ip);
 8013272:	68b8      	ldr	r0, [r7, #8]
 8013274:	f00b ffa8 	bl	801f1c8 <ip4_route>
 8013278:	61b8      	str	r0, [r7, #24]
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d002      	beq.n	8013286 <snmp_get_local_ip_for_dst+0x24>
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	3304      	adds	r3, #4
 8013284:	e000      	b.n	8013288 <snmp_get_local_ip_for_dst+0x26>
 8013286:	2300      	movs	r3, #0
 8013288:	617b      	str	r3, [r7, #20]

  if ((dst_if != NULL) && (dst_ip != NULL)) {
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d008      	beq.n	80132a2 <snmp_get_local_ip_for_dst+0x40>
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d005      	beq.n	80132a2 <snmp_get_local_ip_for_dst+0x40>
    ip_addr_copy(*result, *dst_ip);
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	601a      	str	r2, [r3, #0]
    return 1;
 801329e:	2301      	movs	r3, #1
 80132a0:	e000      	b.n	80132a4 <snmp_get_local_ip_for_dst+0x42>
  } else {
    return 0;
 80132a2:	2300      	movs	r3, #0
  }
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3720      	adds	r7, #32
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <snmp_init>:
 * Starts SNMP Agent.
 * Allocates UDP pcb and binds it to IP_ANY_TYPE port 161.
 */
void
snmp_init(void)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
  err_t err;
  
  struct udp_pcb *snmp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80132b2:	202e      	movs	r0, #46	@ 0x2e
 80132b4:	f008 fe45 	bl	801bf42 <udp_new_ip_type>
 80132b8:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("snmp_raw: no PCB", (snmp_pcb != NULL), return;);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d106      	bne.n	80132ce <snmp_init+0x22>
 80132c0:	4b11      	ldr	r3, [pc, #68]	@ (8013308 <snmp_init+0x5c>)
 80132c2:	225b      	movs	r2, #91	@ 0x5b
 80132c4:	4911      	ldr	r1, [pc, #68]	@ (801330c <snmp_init+0x60>)
 80132c6:	4812      	ldr	r0, [pc, #72]	@ (8013310 <snmp_init+0x64>)
 80132c8:	f00e fa2c 	bl	8021724 <iprintf>
 80132cc:	e018      	b.n	8013300 <snmp_init+0x54>

  snmp_traps_handle = snmp_pcb;
 80132ce:	4a11      	ldr	r2, [pc, #68]	@ (8013314 <snmp_init+0x68>)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6013      	str	r3, [r2, #0]

  udp_recv(snmp_pcb, snmp_recv, (void *)SNMP_IN_PORT);
 80132d4:	22a1      	movs	r2, #161	@ 0xa1
 80132d6:	4910      	ldr	r1, [pc, #64]	@ (8013318 <snmp_init+0x6c>)
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f008 fdd7 	bl	801be8c <udp_recv>
  err = udp_bind(snmp_pcb, IP_ANY_TYPE, SNMP_IN_PORT);
 80132de:	22a1      	movs	r2, #161	@ 0xa1
 80132e0:	490e      	ldr	r1, [pc, #56]	@ (801331c <snmp_init+0x70>)
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f008 fd0c 	bl	801bd00 <udp_bind>
 80132e8:	4603      	mov	r3, r0
 80132ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ERROR("snmp_raw: Unable to bind PCB", (err == ERR_OK), return;);
 80132ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d005      	beq.n	8013300 <snmp_init+0x54>
 80132f4:	4b04      	ldr	r3, [pc, #16]	@ (8013308 <snmp_init+0x5c>)
 80132f6:	2261      	movs	r2, #97	@ 0x61
 80132f8:	4909      	ldr	r1, [pc, #36]	@ (8013320 <snmp_init+0x74>)
 80132fa:	4805      	ldr	r0, [pc, #20]	@ (8013310 <snmp_init+0x64>)
 80132fc:	f00e fa12 	bl	8021724 <iprintf>
}
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	080250c4 	.word	0x080250c4
 801330c:	08025100 	.word	0x08025100
 8013310:	08025114 	.word	0x08025114
 8013314:	2000862c 	.word	0x2000862c
 8013318:	08013217 	.word	0x08013217
 801331c:	0803064c 	.word	0x0803064c
 8013320:	0802513c 	.word	0x0802513c

08013324 <snmp_scalar_get_instance>:
static snmp_err_t  snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value);
static snmp_err_t  snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value);

snmp_err_t 
snmp_scalar_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013324:	b480      	push	{r7}
 8013326:	b087      	sub	sp, #28
 8013328:	af00      	add	r7, sp, #0
 801332a:	60f8      	str	r0, [r7, #12]
 801332c:	460b      	mov	r3, r1
 801332e:	607a      	str	r2, [r7, #4]
 8013330:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_node* scalar_node = (const struct snmp_scalar_node*)(const void*)instance->node;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* scalar only has one dedicated instance: .0 */
  if ((instance->instance_oid.len != 1) || (instance->instance_oid.id[0] != 0)) {
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	791b      	ldrb	r3, [r3, #4]
 801333c:	2b01      	cmp	r3, #1
 801333e:	d103      	bne.n	8013348 <snmp_scalar_get_instance+0x24>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	689b      	ldr	r3, [r3, #8]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <snmp_scalar_get_instance+0x28>
    return SNMP_ERR_NOSUCHINSTANCE;
 8013348:	23f1      	movs	r3, #241	@ 0xf1
 801334a:	e019      	b.n	8013380 <snmp_scalar_get_instance+0x5c>
  }

  instance->access    = scalar_node->access;
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	7c5a      	ldrb	r2, [r3, #17]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type = scalar_node->asn1_type;
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	7c1a      	ldrb	r2, [r3, #16]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value = scalar_node->get_value;
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	695a      	ldr	r2, [r3, #20]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test  = scalar_node->set_test;
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	699a      	ldr	r2, [r3, #24]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = scalar_node->set_value;
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	69da      	ldr	r2, [r3, #28]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  return SNMP_ERR_NOERROR;
 801337e:	2300      	movs	r3, #0
}
 8013380:	4618      	mov	r0, r3
 8013382:	371c      	adds	r7, #28
 8013384:	46bd      	mov	sp, r7
 8013386:	bc80      	pop	{r7}
 8013388:	4770      	bx	lr

0801338a <snmp_scalar_get_next_instance>:

snmp_err_t 
snmp_scalar_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 801338a:	b580      	push	{r7, lr}
 801338c:	b084      	sub	sp, #16
 801338e:	af00      	add	r7, sp, #0
 8013390:	60f8      	str	r0, [r7, #12]
 8013392:	460b      	mov	r3, r1
 8013394:	607a      	str	r2, [r7, #4]
 8013396:	72fb      	strb	r3, [r7, #11]
  /* because our only instance is .0 we can only return a next instance if no instance oid is passed */
  if (instance->instance_oid.len == 0) {
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	791b      	ldrb	r3, [r3, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10d      	bne.n	80133bc <snmp_scalar_get_next_instance+0x32>
    instance->instance_oid.len   = 1;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2201      	movs	r2, #1
 80133a4:	711a      	strb	r2, [r3, #4]
    instance->instance_oid.id[0] = 0;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2200      	movs	r2, #0
 80133aa:	609a      	str	r2, [r3, #8]

    return snmp_scalar_get_instance(root_oid, root_oid_len, instance);
 80133ac:	7afb      	ldrb	r3, [r7, #11]
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	4619      	mov	r1, r3
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	f7ff ffb6 	bl	8013324 <snmp_scalar_get_instance>
 80133b8:	4603      	mov	r3, r0
 80133ba:	e000      	b.n	80133be <snmp_scalar_get_next_instance+0x34>
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 80133bc:	23f1      	movs	r3, #241	@ 0xf1
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3710      	adds	r7, #16
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
	...

080133c8 <snmp_scalar_array_get_instance>:


snmp_err_t
snmp_scalar_array_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b089      	sub	sp, #36	@ 0x24
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	460b      	mov	r3, r1
 80133d2:	607a      	str	r2, [r7, #4]
 80133d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 2) && (instance->instance_oid.id[1] == 0)) {
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	791b      	ldrb	r3, [r3, #4]
 80133da:	2b02      	cmp	r3, #2
 80133dc:	d142      	bne.n	8013464 <snmp_scalar_array_get_instance+0x9c>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	68db      	ldr	r3, [r3, #12]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d13e      	bne.n	8013464 <snmp_scalar_array_get_instance+0x9c>
    const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	617b      	str	r3, [r7, #20]
    const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	695b      	ldr	r3, [r3, #20]
 80133f0:	61fb      	str	r3, [r7, #28]
    u32_t i = 0;
 80133f2:	2300      	movs	r3, #0
 80133f4:	61bb      	str	r3, [r7, #24]

    while (i < array_node->array_node_count) {
 80133f6:	e00b      	b.n	8013410 <snmp_scalar_array_get_instance+0x48>
      if (array_node_def->oid == instance->instance_oid.id[0]) {
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	429a      	cmp	r2, r3
 8013402:	d00c      	beq.n	801341e <snmp_scalar_array_get_instance+0x56>
        break;
      }

      array_node_def++;
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	3308      	adds	r3, #8
 8013408:	61fb      	str	r3, [r7, #28]
      i++;
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	3301      	adds	r3, #1
 801340e:	61bb      	str	r3, [r7, #24]
    while (i < array_node->array_node_count) {
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	8a1b      	ldrh	r3, [r3, #16]
 8013414:	461a      	mov	r2, r3
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	4293      	cmp	r3, r2
 801341a:	d3ed      	bcc.n	80133f8 <snmp_scalar_array_get_instance+0x30>
 801341c:	e000      	b.n	8013420 <snmp_scalar_array_get_instance+0x58>
        break;
 801341e:	bf00      	nop
    }

    if (i < array_node->array_node_count) {
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	8a1b      	ldrh	r3, [r3, #16]
 8013424:	461a      	mov	r2, r3
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	4293      	cmp	r3, r2
 801342a:	d21b      	bcs.n	8013464 <snmp_scalar_array_get_instance+0x9c>
      instance->access              = array_node_def->access;
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	795a      	ldrb	r2, [r3, #5]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->asn1_type           = array_node_def->asn1_type;
 8013436:	69fb      	ldr	r3, [r7, #28]
 8013438:	791a      	ldrb	r2, [r3, #4]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->get_value           = snmp_scalar_array_get_value;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	4a0b      	ldr	r2, [pc, #44]	@ (8013470 <snmp_scalar_array_get_instance+0xa8>)
 8013444:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test            = snmp_scalar_array_set_test;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	4a0a      	ldr	r2, [pc, #40]	@ (8013474 <snmp_scalar_array_get_instance+0xac>)
 801344c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value           = snmp_scalar_array_set_value;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	4a09      	ldr	r2, [pc, #36]	@ (8013478 <snmp_scalar_array_get_instance+0xb0>)
 8013454:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      instance->reference.const_ptr = array_node_def;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	69fa      	ldr	r2, [r7, #28]
 801345c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

      return SNMP_ERR_NOERROR;
 8013460:	2300      	movs	r3, #0
 8013462:	e000      	b.n	8013466 <snmp_scalar_array_get_instance+0x9e>
    }
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 8013464:	23f1      	movs	r3, #241	@ 0xf1
}
 8013466:	4618      	mov	r0, r3
 8013468:	3724      	adds	r7, #36	@ 0x24
 801346a:	46bd      	mov	sp, r7
 801346c:	bc80      	pop	{r7}
 801346e:	4770      	bx	lr
 8013470:	080135e9 	.word	0x080135e9
 8013474:	08013615 	.word	0x08013615
 8013478:	08013647 	.word	0x08013647

0801347c <snmp_scalar_array_get_next_instance>:

snmp_err_t
snmp_scalar_array_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 801347c:	b480      	push	{r7}
 801347e:	b08b      	sub	sp, #44	@ 0x2c
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	460b      	mov	r3, r1
 8013486:	607a      	str	r2, [r7, #4]
 8013488:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	613b      	str	r3, [r7, #16]
  const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	695b      	ldr	r3, [r3, #20]
 8013494:	627b      	str	r3, [r7, #36]	@ 0x24
  const struct snmp_scalar_array_node_def* result = NULL;
 8013496:	2300      	movs	r3, #0
 8013498:	623b      	str	r3, [r7, #32]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	791b      	ldrb	r3, [r3, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d121      	bne.n	80134e6 <snmp_scalar_array_get_next_instance+0x6a>
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	8a1b      	ldrh	r3, [r3, #16]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d01d      	beq.n	80134e6 <snmp_scalar_array_get_next_instance+0x6a>
    /* return node with lowest OID */
    u16_t i = 0;
 80134aa:	2300      	movs	r3, #0
 80134ac:	83fb      	strh	r3, [r7, #30]
    
    result = array_node_def;
 80134ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b0:	623b      	str	r3, [r7, #32]
    array_node_def++;
 80134b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b4:	3308      	adds	r3, #8
 80134b6:	627b      	str	r3, [r7, #36]	@ 0x24

    for (i = 1; i < array_node->array_node_count; i++) {
 80134b8:	2301      	movs	r3, #1
 80134ba:	83fb      	strh	r3, [r7, #30]
 80134bc:	e00d      	b.n	80134da <snmp_scalar_array_get_next_instance+0x5e>
      if (array_node_def->oid < result->oid) {
 80134be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c0:	681a      	ldr	r2, [r3, #0]
 80134c2:	6a3b      	ldr	r3, [r7, #32]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d201      	bcs.n	80134ce <snmp_scalar_array_get_next_instance+0x52>
        result = array_node_def;
 80134ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134cc:	623b      	str	r3, [r7, #32]
      }
      array_node_def++;
 80134ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134d0:	3308      	adds	r3, #8
 80134d2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 1; i < array_node->array_node_count; i++) {
 80134d4:	8bfb      	ldrh	r3, [r7, #30]
 80134d6:	3301      	adds	r3, #1
 80134d8:	83fb      	strh	r3, [r7, #30]
 80134da:	693b      	ldr	r3, [r7, #16]
 80134dc:	8a1b      	ldrh	r3, [r3, #16]
 80134de:	8bfa      	ldrh	r2, [r7, #30]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d3ec      	bcc.n	80134be <snmp_scalar_array_get_next_instance+0x42>
  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 80134e4:	e04b      	b.n	801357e <snmp_scalar_array_get_next_instance+0x102>
    }
  } else if (instance->instance_oid.len >= 1) {
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	791b      	ldrb	r3, [r3, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d047      	beq.n	801357e <snmp_scalar_array_get_next_instance+0x102>
    if (instance->instance_oid.len == 1) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	791b      	ldrb	r3, [r3, #4]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d116      	bne.n	8013524 <snmp_scalar_array_get_next_instance+0xa8>
      /* if we have the requested OID we return its instance, otherwise we search for the next available */    
      u16_t i = 0;
 80134f6:	2300      	movs	r3, #0
 80134f8:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 80134fa:	e00e      	b.n	801351a <snmp_scalar_array_get_next_instance+0x9e>
        if (array_node_def->oid == instance->instance_oid.id[0]) {
 80134fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	429a      	cmp	r2, r3
 8013506:	d102      	bne.n	801350e <snmp_scalar_array_get_next_instance+0x92>
          result = array_node_def;
 8013508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801350a:	623b      	str	r3, [r7, #32]
          break;
 801350c:	e00a      	b.n	8013524 <snmp_scalar_array_get_next_instance+0xa8>
        }

        array_node_def++;
 801350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013510:	3308      	adds	r3, #8
 8013512:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 8013514:	8bbb      	ldrh	r3, [r7, #28]
 8013516:	3301      	adds	r3, #1
 8013518:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	8a1b      	ldrh	r3, [r3, #16]
 801351e:	8bba      	ldrh	r2, [r7, #28]
 8013520:	429a      	cmp	r2, r3
 8013522:	d3eb      	bcc.n	80134fc <snmp_scalar_array_get_next_instance+0x80>
      }
    }
    if (result == NULL) {
 8013524:	6a3b      	ldr	r3, [r7, #32]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d129      	bne.n	801357e <snmp_scalar_array_get_next_instance+0x102>
      u32_t oid_dist = 0xFFFFFFFFUL;
 801352a:	f04f 33ff 	mov.w	r3, #4294967295
 801352e:	61bb      	str	r3, [r7, #24]
      u16_t i        = 0;
 8013530:	2300      	movs	r3, #0
 8013532:	82fb      	strh	r3, [r7, #22]
      array_node_def = array_node->array_nodes; /* may be already at the end when if case before was executed without result -> reinitialize to start */
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	695b      	ldr	r3, [r3, #20]
 8013538:	627b      	str	r3, [r7, #36]	@ 0x24
      while (i < array_node->array_node_count) {
 801353a:	e01b      	b.n	8013574 <snmp_scalar_array_get_next_instance+0xf8>
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 801353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	429a      	cmp	r2, r3
 8013546:	d90f      	bls.n	8013568 <snmp_scalar_array_get_next_instance+0xec>
            ((u32_t)(array_node_def->oid - instance->instance_oid.id[0]) < oid_dist)) {
 8013548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801354a:	681a      	ldr	r2, [r3, #0]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	1ad3      	subs	r3, r2, r3
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 8013552:	69ba      	ldr	r2, [r7, #24]
 8013554:	429a      	cmp	r2, r3
 8013556:	d907      	bls.n	8013568 <snmp_scalar_array_get_next_instance+0xec>
          result   = array_node_def;
 8013558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801355a:	623b      	str	r3, [r7, #32]
          oid_dist = array_node_def->oid - instance->instance_oid.id[0];
 801355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	689b      	ldr	r3, [r3, #8]
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	61bb      	str	r3, [r7, #24]
        }

        array_node_def++;
 8013568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801356a:	3308      	adds	r3, #8
 801356c:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 801356e:	8afb      	ldrh	r3, [r7, #22]
 8013570:	3301      	adds	r3, #1
 8013572:	82fb      	strh	r3, [r7, #22]
      while (i < array_node->array_node_count) {
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	8a1b      	ldrh	r3, [r3, #16]
 8013578:	8afa      	ldrh	r2, [r7, #22]
 801357a:	429a      	cmp	r2, r3
 801357c:	d3de      	bcc.n	801353c <snmp_scalar_array_get_next_instance+0xc0>
      }
    }
  }

  if (result == NULL) {
 801357e:	6a3b      	ldr	r3, [r7, #32]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d101      	bne.n	8013588 <snmp_scalar_array_get_next_instance+0x10c>
    /* nothing to return */
    return SNMP_ERR_NOSUCHINSTANCE;
 8013584:	23f1      	movs	r3, #241	@ 0xf1
 8013586:	e024      	b.n	80135d2 <snmp_scalar_array_get_next_instance+0x156>
  }

  instance->instance_oid.len   = 2;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2202      	movs	r2, #2
 801358c:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = result->oid;
 801358e:	6a3b      	ldr	r3, [r7, #32]
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = 0;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	60da      	str	r2, [r3, #12]
  
  instance->access              = result->access;
 801359c:	6a3b      	ldr	r3, [r7, #32]
 801359e:	795a      	ldrb	r2, [r3, #5]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type           = result->asn1_type;
 80135a6:	6a3b      	ldr	r3, [r7, #32]
 80135a8:	791a      	ldrb	r2, [r3, #4]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value           = snmp_scalar_array_get_value;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	4a0a      	ldr	r2, [pc, #40]	@ (80135dc <snmp_scalar_array_get_next_instance+0x160>)
 80135b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test            = snmp_scalar_array_set_test;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	4a09      	ldr	r2, [pc, #36]	@ (80135e0 <snmp_scalar_array_get_next_instance+0x164>)
 80135bc:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value           = snmp_scalar_array_set_value;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	4a08      	ldr	r2, [pc, #32]	@ (80135e4 <snmp_scalar_array_get_next_instance+0x168>)
 80135c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  instance->reference.const_ptr = result;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6a3a      	ldr	r2, [r7, #32]
 80135cc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

  return SNMP_ERR_NOERROR;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	372c      	adds	r7, #44	@ 0x2c
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bc80      	pop	{r7}
 80135da:	4770      	bx	lr
 80135dc:	080135e9 	.word	0x080135e9
 80135e0:	08013615 	.word	0x08013615
 80135e4:	08013647 	.word	0x08013647

080135e8 <snmp_scalar_array_get_value>:

static s16_t
snmp_scalar_array_get_value(struct snmp_node_instance* instance, void* value)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	60fb      	str	r3, [r7, #12]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80135fe:	60bb      	str	r3, [r7, #8]

  return array_node->get_value(array_node_def, value);
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	699b      	ldr	r3, [r3, #24]
 8013604:	6839      	ldr	r1, [r7, #0]
 8013606:	68b8      	ldr	r0, [r7, #8]
 8013608:	4798      	blx	r3
 801360a:	4603      	mov	r3, r0
}
 801360c:	4618      	mov	r0, r3
 801360e:	3710      	adds	r7, #16
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <snmp_scalar_array_set_test>:

static snmp_err_t
snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b086      	sub	sp, #24
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	460b      	mov	r3, r1
 801361e:	607a      	str	r2, [r7, #4]
 8013620:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801362e:	613b      	str	r3, [r7, #16]

  return array_node->set_test(array_node_def, value_len, value);
 8013630:	697b      	ldr	r3, [r7, #20]
 8013632:	69db      	ldr	r3, [r3, #28]
 8013634:	8979      	ldrh	r1, [r7, #10]
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	6938      	ldr	r0, [r7, #16]
 801363a:	4798      	blx	r3
 801363c:	4603      	mov	r3, r0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3718      	adds	r7, #24
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <snmp_scalar_array_set_value>:

static snmp_err_t
snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b086      	sub	sp, #24
 801364a:	af00      	add	r7, sp, #0
 801364c:	60f8      	str	r0, [r7, #12]
 801364e:	460b      	mov	r3, r1
 8013650:	607a      	str	r2, [r7, #4]
 8013652:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013660:	613b      	str	r3, [r7, #16]

  return array_node->set_value(array_node_def, value_len, value);
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	6a1b      	ldr	r3, [r3, #32]
 8013666:	8979      	ldrh	r1, [r7, #10]
 8013668:	687a      	ldr	r2, [r7, #4]
 801366a:	6938      	ldr	r0, [r7, #16]
 801366c:	4798      	blx	r3
 801366e:	4603      	mov	r3, r0
}
 8013670:	4618      	mov	r0, r3
 8013672:	3718      	adds	r7, #24
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <snmp_table_get_instance>:
#include "lwip/apps/snmp_core.h"
#include "lwip/apps/snmp_table.h"
#include <string.h>

snmp_err_t snmp_table_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013678:	b590      	push	{r4, r7, lr}
 801367a:	b089      	sub	sp, #36	@ 0x24
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	460b      	mov	r3, r1
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 8013686:	23f1      	movs	r3, #241	@ 0xf1
 8013688:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	791b      	ldrb	r3, [r3, #4]
 8013694:	2b02      	cmp	r3, #2
 8013696:	d947      	bls.n	8013728 <snmp_table_get_instance+0xb0>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d143      	bne.n	8013728 <snmp_table_get_instance+0xb0>
    /* search column */
    const struct snmp_table_col_def* col_def = table_node->columns;
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	695b      	ldr	r3, [r3, #20]
 80136a4:	61bb      	str	r3, [r7, #24]
    u16_t i = table_node->column_count;
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	8a1b      	ldrh	r3, [r3, #16]
 80136aa:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 80136ac:	e00b      	b.n	80136c6 <snmp_table_get_instance+0x4e>
      if (col_def->index == instance->instance_oid.id[1]) {
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	68db      	ldr	r3, [r3, #12]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d009      	beq.n	80136ce <snmp_table_get_instance+0x56>
        break;
      }
      
      col_def++;
 80136ba:	69bb      	ldr	r3, [r7, #24]
 80136bc:	3308      	adds	r3, #8
 80136be:	61bb      	str	r3, [r7, #24]
      i--;
 80136c0:	8afb      	ldrh	r3, [r7, #22]
 80136c2:	3b01      	subs	r3, #1
 80136c4:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 80136c6:	8afb      	ldrh	r3, [r7, #22]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d1f0      	bne.n	80136ae <snmp_table_get_instance+0x36>
 80136cc:	e000      	b.n	80136d0 <snmp_table_get_instance+0x58>
        break;
 80136ce:	bf00      	nop
    }

    if (i > 0) {
 80136d0:	8afb      	ldrh	r3, [r7, #22]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d028      	beq.n	8013728 <snmp_table_get_instance+0xb0>
      /* everything may be overwritten by get_cell_instance_method() in order to implement special handling for single columns/cells */
      instance->asn1_type = col_def->asn1_type;
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	791a      	ldrb	r2, [r3, #4]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->access    = col_def->access;
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	795a      	ldrb	r2, [r3, #5]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->get_value = table_node->get_value;
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	6a1a      	ldr	r2, [r3, #32]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test  = table_node->set_test;
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value = table_node->set_value;
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

      ret = table_node->get_cell_instance(
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	699c      	ldr	r4, [r3, #24]
        &(instance->instance_oid.id[1]),
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f103 000c 	add.w	r0, r3, #12
        &(instance->instance_oid.id[2]),
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f103 0110 	add.w	r1, r3, #16
        instance->instance_oid.len-2,
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	791b      	ldrb	r3, [r3, #4]
      ret = table_node->get_cell_instance(
 801371c:	3b02      	subs	r3, #2
 801371e:	b2da      	uxtb	r2, r3
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	47a0      	blx	r4
 8013724:	4603      	mov	r3, r0
 8013726:	77fb      	strb	r3, [r7, #31]
        instance);
    }
  }

  return ret;
 8013728:	7ffb      	ldrb	r3, [r7, #31]
}
 801372a:	4618      	mov	r0, r3
 801372c:	3724      	adds	r7, #36	@ 0x24
 801372e:	46bd      	mov	sp, r7
 8013730:	bd90      	pop	{r4, r7, pc}

08013732 <snmp_table_get_next_instance>:

snmp_err_t snmp_table_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013732:	b580      	push	{r7, lr}
 8013734:	b0be      	sub	sp, #248	@ 0xf8
 8013736:	af00      	add	r7, sp, #0
 8013738:	60f8      	str	r0, [r7, #12]
 801373a:	460b      	mov	r3, r1
 801373c:	607a      	str	r2, [r7, #4]
 801373e:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 8013748:	2300      	movs	r3, #0
 801374a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	791b      	ldrb	r3, [r3, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d005      	beq.n	8013762 <snmp_table_get_next_instance+0x30>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	689b      	ldr	r3, [r3, #8]
 801375a:	2b01      	cmp	r3, #1
 801375c:	d901      	bls.n	8013762 <snmp_table_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 801375e:	23f1      	movs	r3, #241	@ 0xf1
 8013760:	e0b2      	b.n	80138c8 <snmp_table_get_next_instance+0x196>
  }
  if (instance->instance_oid.len > 1) {
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	791b      	ldrb	r3, [r3, #4]
 8013766:	2b01      	cmp	r3, #1
 8013768:	d903      	bls.n	8013772 <snmp_table_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	68db      	ldr	r3, [r3, #12]
 801376e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	791b      	ldrb	r3, [r3, #4]
 8013776:	2b02      	cmp	r3, #2
 8013778:	d90c      	bls.n	8013794 <snmp_table_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f103 0110 	add.w	r1, r3, #16
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	791b      	ldrb	r3, [r3, #4]
 8013784:	3b02      	subs	r3, #2
 8013786:	b2da      	uxtb	r2, r3
 8013788:	f107 0314 	add.w	r3, r7, #20
 801378c:	4618      	mov	r0, r3
 801378e:	f7fa fd73 	bl	800e278 <snmp_oid_assign>
 8013792:	e001      	b.n	8013798 <snmp_table_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 8013794:	2300      	movs	r3, #0
 8013796:	753b      	strb	r3, [r7, #20]
  }

  instance->get_value    = table_node->get_value;
 8013798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801379c:	6a1a      	ldr	r2, [r3, #32]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test     = table_node->set_test;
 80137a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80137a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value    = table_node->set_value;
 80137b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80137b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /* resolve column and value */
  do {
    u16_t i;
    const struct snmp_table_col_def* next_col_def = NULL;
 80137bc:	2300      	movs	r3, #0
 80137be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 80137c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80137c6:	695b      	ldr	r3, [r3, #20]
 80137c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 80137cc:	2300      	movs	r3, #0
 80137ce:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 80137d2:	e02c      	b.n	801382e <snmp_table_get_next_instance+0xfc>
      if (col_def->index == column) {
 80137d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80137de:	429a      	cmp	r2, r3
 80137e0:	d104      	bne.n	80137ec <snmp_table_get_next_instance+0xba>
        next_col_def = col_def;
 80137e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80137e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 80137ea:	e027      	b.n	801383c <snmp_table_get_next_instance+0x10a>
      } else if ((col_def->index > column) && ((next_col_def == NULL) || (col_def->index < next_col_def->index))) {
 80137ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d20f      	bcs.n	801381a <snmp_table_get_next_instance+0xe8>
 80137fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d007      	beq.n	8013812 <snmp_table_get_next_instance+0xe0>
 8013802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	429a      	cmp	r2, r3
 8013810:	d203      	bcs.n	801381a <snmp_table_get_next_instance+0xe8>
        next_col_def = col_def;
 8013812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013816:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 801381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801381e:	3308      	adds	r3, #8
 8013820:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 8013824:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8013828:	3301      	adds	r3, #1
 801382a:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 801382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013832:	8a1b      	ldrh	r3, [r3, #16]
 8013834:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 8013838:	429a      	cmp	r2, r3
 801383a:	d3cb      	bcc.n	80137d4 <snmp_table_get_next_instance+0xa2>
    }

    if (next_col_def == NULL) {
 801383c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013840:	2b00      	cmp	r3, #0
 8013842:	d101      	bne.n	8013848 <snmp_table_get_next_instance+0x116>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 8013844:	23f1      	movs	r3, #241	@ 0xf1
 8013846:	e03f      	b.n	80138c8 <snmp_table_get_next_instance+0x196>
    }

    instance->asn1_type          = next_col_def->asn1_type;
 8013848:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801384c:	791a      	ldrb	r2, [r3, #4]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    instance->access             = next_col_def->access;
 8013854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013858:	795a      	ldrb	r2, [r3, #5]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1

    result = table_node->get_next_cell_instance(
 8013860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013864:	69db      	ldr	r3, [r3, #28]
 8013866:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 801386a:	f107 0114 	add.w	r1, r7, #20
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	4798      	blx	r3
 8013872:	4603      	mov	r3, r0
 8013874:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      instance);

    if (result == SNMP_ERR_NOERROR) {
 8013878:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 801387c:	2b00      	cmp	r3, #0
 801387e:	d11a      	bne.n	80138b6 <snmp_table_get_next_instance+0x184>
      col_def = next_col_def;
 8013880:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013884:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 8013888:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  } while (1);

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2202      	movs	r2, #2
 801388e:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2201      	movs	r2, #1
 8013894:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 8013896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	1d18      	adds	r0, r3, #4
 80138a4:	7d3a      	ldrb	r2, [r7, #20]
 80138a6:	f107 0314 	add.w	r3, r7, #20
 80138aa:	3304      	adds	r3, #4
 80138ac:	4619      	mov	r1, r3
 80138ae:	f7fa fd0d 	bl	800e2cc <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 80138b2:	2300      	movs	r3, #0
 80138b4:	e008      	b.n	80138c8 <snmp_table_get_next_instance+0x196>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 80138b6:	2300      	movs	r3, #0
 80138b8:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 80138ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	3301      	adds	r3, #1
 80138c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 80138c6:	e779      	b.n	80137bc <snmp_table_get_next_instance+0x8a>
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	37f8      	adds	r7, #248	@ 0xf8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}

080138d0 <snmp_table_simple_get_instance>:


snmp_err_t snmp_table_simple_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80138d0:	b5b0      	push	{r4, r5, r7, lr}
 80138d2:	b08a      	sub	sp, #40	@ 0x28
 80138d4:	af02      	add	r7, sp, #8
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	460b      	mov	r3, r1
 80138da:	607a      	str	r2, [r7, #4]
 80138dc:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 80138de:	23f1      	movs	r3, #241	@ 0xf1
 80138e0:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	791b      	ldrb	r3, [r3, #4]
 80138ec:	2b02      	cmp	r3, #2
 80138ee:	d969      	bls.n	80139c4 <snmp_table_simple_get_instance+0xf4>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	689b      	ldr	r3, [r3, #8]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d165      	bne.n	80139c4 <snmp_table_simple_get_instance+0xf4>
    ret = table_node->get_cell_value(
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	699c      	ldr	r4, [r3, #24]
      &(instance->instance_oid.id[1]),
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f103 000c 	add.w	r0, r3, #12
      &(instance->instance_oid.id[2]),
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f103 0110 	add.w	r1, r3, #16
      instance->instance_oid.len-2,
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	791b      	ldrb	r3, [r3, #4]
    ret = table_node->get_cell_value(
 801390c:	3b02      	subs	r3, #2
 801390e:	b2da      	uxtb	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f103 05e4 	add.w	r5, r3, #228	@ 0xe4
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	33e8      	adds	r3, #232	@ 0xe8
 801391a:	9300      	str	r3, [sp, #0]
 801391c:	462b      	mov	r3, r5
 801391e:	47a0      	blx	r4
 8013920:	4603      	mov	r3, r0
 8013922:	77fb      	strb	r3, [r7, #31]
      &instance->reference,
      &instance->reference_len);

    if (ret == SNMP_ERR_NOERROR) {
 8013924:	7ffb      	ldrb	r3, [r7, #31]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d14c      	bne.n	80139c4 <snmp_table_simple_get_instance+0xf4>
      /* search column */
      const struct snmp_table_simple_col_def* col_def = table_node->columns;
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	695b      	ldr	r3, [r3, #20]
 801392e:	61bb      	str	r3, [r7, #24]
      u32_t i = table_node->column_count;
 8013930:	693b      	ldr	r3, [r7, #16]
 8013932:	8a1b      	ldrh	r3, [r3, #16]
 8013934:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 8013936:	e00b      	b.n	8013950 <snmp_table_simple_get_instance+0x80>
        if (col_def->index == instance->instance_oid.id[1]) {
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	681a      	ldr	r2, [r3, #0]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	429a      	cmp	r2, r3
 8013942:	d009      	beq.n	8013958 <snmp_table_simple_get_instance+0x88>
          break;
        }

        col_def++;
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	3308      	adds	r3, #8
 8013948:	61bb      	str	r3, [r7, #24]
        i--;
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	3b01      	subs	r3, #1
 801394e:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d1f0      	bne.n	8013938 <snmp_table_simple_get_instance+0x68>
 8013956:	e000      	b.n	801395a <snmp_table_simple_get_instance+0x8a>
          break;
 8013958:	bf00      	nop
      }

      if (i > 0) {
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d02f      	beq.n	80139c0 <snmp_table_simple_get_instance+0xf0>
        instance->asn1_type = col_def->asn1_type;
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	791a      	ldrb	r2, [r3, #4]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2201      	movs	r2, #1
 801396e:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
        instance->set_test  = NULL;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2200      	movs	r2, #0
 8013976:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->set_value = NULL;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2200      	movs	r2, #0
 801397e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

        switch (col_def->data_type) {
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	795b      	ldrb	r3, [r3, #5]
 8013986:	2b03      	cmp	r3, #3
 8013988:	dc15      	bgt.n	80139b6 <snmp_table_simple_get_instance+0xe6>
 801398a:	2b02      	cmp	r3, #2
 801398c:	da0e      	bge.n	80139ac <snmp_table_simple_get_instance+0xdc>
 801398e:	2b00      	cmp	r3, #0
 8013990:	d002      	beq.n	8013998 <snmp_table_simple_get_instance+0xc8>
 8013992:	2b01      	cmp	r3, #1
 8013994:	d005      	beq.n	80139a2 <snmp_table_simple_get_instance+0xd2>
 8013996:	e00e      	b.n	80139b6 <snmp_table_simple_get_instance+0xe6>
          case SNMP_VARIANT_VALUE_TYPE_U32:
            instance->get_value = snmp_table_extract_value_from_u32ref;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4a0d      	ldr	r2, [pc, #52]	@ (80139d0 <snmp_table_simple_get_instance+0x100>)
 801399c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80139a0:	e00b      	b.n	80139ba <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_S32:
            instance->get_value = snmp_table_extract_value_from_s32ref;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	4a0b      	ldr	r2, [pc, #44]	@ (80139d4 <snmp_table_simple_get_instance+0x104>)
 80139a6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80139aa:	e006      	b.n	80139ba <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
          case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
            instance->get_value = snmp_table_extract_value_from_refconstptr;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4a0a      	ldr	r2, [pc, #40]	@ (80139d8 <snmp_table_simple_get_instance+0x108>)
 80139b0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 80139b4:	e001      	b.n	80139ba <snmp_table_simple_get_instance+0xea>
          default:
            LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
            return SNMP_ERR_GENERROR;
 80139b6:	2305      	movs	r3, #5
 80139b8:	e005      	b.n	80139c6 <snmp_table_simple_get_instance+0xf6>
        }        

        ret = SNMP_ERR_NOERROR;
 80139ba:	2300      	movs	r3, #0
 80139bc:	77fb      	strb	r3, [r7, #31]
 80139be:	e001      	b.n	80139c4 <snmp_table_simple_get_instance+0xf4>
      } else {
        ret = SNMP_ERR_NOSUCHINSTANCE;
 80139c0:	23f1      	movs	r3, #241	@ 0xf1
 80139c2:	77fb      	strb	r3, [r7, #31]
      }
    } 
  }

  return ret;
 80139c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3720      	adds	r7, #32
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bdb0      	pop	{r4, r5, r7, pc}
 80139ce:	bf00      	nop
 80139d0:	08013bd9 	.word	0x08013bd9
 80139d4:	08013bb5 	.word	0x08013bb5
 80139d8:	08013bfd 	.word	0x08013bfd

080139dc <snmp_table_simple_get_next_instance>:

snmp_err_t snmp_table_simple_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80139dc:	b590      	push	{r4, r7, lr}
 80139de:	b0bf      	sub	sp, #252	@ 0xfc
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	460b      	mov	r3, r1
 80139e6:	607a      	str	r2, [r7, #4]
 80139e8:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_simple_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 80139f2:	2300      	movs	r3, #0
 80139f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	791b      	ldrb	r3, [r3, #4]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d005      	beq.n	8013a0c <snmp_table_simple_get_next_instance+0x30>
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	689b      	ldr	r3, [r3, #8]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d901      	bls.n	8013a0c <snmp_table_simple_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 8013a08:	23f1      	movs	r3, #241	@ 0xf1
 8013a0a:	e0c8      	b.n	8013b9e <snmp_table_simple_get_next_instance+0x1c2>
  }
  if (instance->instance_oid.len > 1) {
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	791b      	ldrb	r3, [r3, #4]
 8013a10:	2b01      	cmp	r3, #1
 8013a12:	d903      	bls.n	8013a1c <snmp_table_simple_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	791b      	ldrb	r3, [r3, #4]
 8013a20:	2b02      	cmp	r3, #2
 8013a22:	d90c      	bls.n	8013a3e <snmp_table_simple_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f103 0110 	add.w	r1, r3, #16
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	791b      	ldrb	r3, [r3, #4]
 8013a2e:	3b02      	subs	r3, #2
 8013a30:	b2da      	uxtb	r2, r3
 8013a32:	f107 0314 	add.w	r3, r7, #20
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fa fc1e 	bl	800e278 <snmp_oid_assign>
 8013a3c:	e001      	b.n	8013a42 <snmp_table_simple_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	753b      	strb	r3, [r7, #20]
  }

  /* resolve column and value */
  do {
    u32_t i;
    const struct snmp_table_simple_col_def* next_col_def = NULL;
 8013a42:	2300      	movs	r3, #0
 8013a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 8013a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013a4c:	695b      	ldr	r3, [r3, #20]
 8013a4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 8013a52:	2300      	movs	r3, #0
 8013a54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8013a58:	e02c      	b.n	8013ab4 <snmp_table_simple_get_next_instance+0xd8>
      if (col_def->index == column) {
 8013a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d104      	bne.n	8013a72 <snmp_table_simple_get_next_instance+0x96>
        next_col_def = col_def;
 8013a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 8013a70:	e028      	b.n	8013ac4 <snmp_table_simple_get_next_instance+0xe8>
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 8013a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d20f      	bcs.n	8013aa0 <snmp_table_simple_get_next_instance+0xc4>
 8013a80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d007      	beq.n	8013a98 <snmp_table_simple_get_next_instance+0xbc>
                 (col_def->index < next_col_def->index))) {
 8013a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013a92:	681b      	ldr	r3, [r3, #0]
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d203      	bcs.n	8013aa0 <snmp_table_simple_get_next_instance+0xc4>
        next_col_def = col_def;
 8013a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013a9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 8013aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013aa4:	3308      	adds	r3, #8
 8013aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 8013aaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013aae:	3301      	adds	r3, #1
 8013ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8013ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013ab8:	8a1b      	ldrh	r3, [r3, #16]
 8013aba:	461a      	mov	r2, r3
 8013abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d3ca      	bcc.n	8013a5a <snmp_table_simple_get_next_instance+0x7e>
    }

    if (next_col_def == NULL) {
 8013ac4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <snmp_table_simple_get_next_instance+0xf4>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 8013acc:	23f1      	movs	r3, #241	@ 0xf1
 8013ace:	e066      	b.n	8013b9e <snmp_table_simple_get_next_instance+0x1c2>
    }

    result = table_node->get_next_cell_instance_and_value(
 8013ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013ad4:	69dc      	ldr	r4, [r3, #28]
 8013ad6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	33e8      	adds	r3, #232	@ 0xe8
 8013ae4:	f107 0114 	add.w	r1, r7, #20
 8013ae8:	47a0      	blx	r4
 8013aea:	4603      	mov	r3, r0
 8013aec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      &instance->reference,
      &instance->reference_len);

    if (result == SNMP_ERR_NOERROR) {
 8013af0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d11c      	bne.n	8013b32 <snmp_table_simple_get_next_instance+0x156>
      col_def = next_col_def;
 8013af8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013afc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 8013b00:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  }
  while (1);

  instance->asn1_type = col_def->asn1_type;
 8013b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013b06:	791a      	ldrb	r2, [r3, #4]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2201      	movs	r2, #1
 8013b12:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->set_test  = NULL;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = NULL;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2200      	movs	r2, #0
 8013b22:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  switch (col_def->data_type) {
 8013b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013b2a:	795b      	ldrb	r3, [r3, #5]
 8013b2c:	2b03      	cmp	r3, #3
 8013b2e:	dc1f      	bgt.n	8013b70 <snmp_table_simple_get_next_instance+0x194>
 8013b30:	e008      	b.n	8013b44 <snmp_table_simple_get_next_instance+0x168>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 8013b32:	2300      	movs	r3, #0
 8013b34:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 8013b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 8013b42:	e77e      	b.n	8013a42 <snmp_table_simple_get_next_instance+0x66>
  switch (col_def->data_type) {
 8013b44:	2b02      	cmp	r3, #2
 8013b46:	da0e      	bge.n	8013b66 <snmp_table_simple_get_next_instance+0x18a>
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <snmp_table_simple_get_next_instance+0x176>
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d005      	beq.n	8013b5c <snmp_table_simple_get_next_instance+0x180>
 8013b50:	e00e      	b.n	8013b70 <snmp_table_simple_get_next_instance+0x194>
    case SNMP_VARIANT_VALUE_TYPE_U32:
      instance->get_value = snmp_table_extract_value_from_u32ref;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4a14      	ldr	r2, [pc, #80]	@ (8013ba8 <snmp_table_simple_get_next_instance+0x1cc>)
 8013b56:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 8013b5a:	e00b      	b.n	8013b74 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_S32:
      instance->get_value = snmp_table_extract_value_from_s32ref;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	4a13      	ldr	r2, [pc, #76]	@ (8013bac <snmp_table_simple_get_next_instance+0x1d0>)
 8013b60:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 8013b64:	e006      	b.n	8013b74 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
    case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
      instance->get_value = snmp_table_extract_value_from_refconstptr;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	4a11      	ldr	r2, [pc, #68]	@ (8013bb0 <snmp_table_simple_get_next_instance+0x1d4>)
 8013b6a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 8013b6e:	e001      	b.n	8013b74 <snmp_table_simple_get_next_instance+0x198>
    default:
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
      return SNMP_ERR_GENERROR;
 8013b70:	2305      	movs	r3, #5
 8013b72:	e014      	b.n	8013b9e <snmp_table_simple_get_next_instance+0x1c2>
  }

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2202      	movs	r2, #2
 8013b78:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 8013b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	1d18      	adds	r0, r3, #4
 8013b8e:	7d3a      	ldrb	r2, [r7, #20]
 8013b90:	f107 0314 	add.w	r3, r7, #20
 8013b94:	3304      	adds	r3, #4
 8013b96:	4619      	mov	r1, r3
 8013b98:	f7fa fb98 	bl	800e2cc <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 8013b9c:	2300      	movs	r3, #0
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	37fc      	adds	r7, #252	@ 0xfc
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd90      	pop	{r4, r7, pc}
 8013ba6:	bf00      	nop
 8013ba8:	08013bd9 	.word	0x08013bd9
 8013bac:	08013bb5 	.word	0x08013bb5
 8013bb0:	08013bfd 	.word	0x08013bfd

08013bb4 <snmp_table_extract_value_from_s32ref>:


s16_t
snmp_table_extract_value_from_s32ref(struct snmp_node_instance* instance, void* value)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b085      	sub	sp, #20
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	6039      	str	r1, [r7, #0]
  s32_t *dst = (s32_t*)value;
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.s32;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 8013bcc:	2304      	movs	r3, #4
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3714      	adds	r7, #20
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bc80      	pop	{r7}
 8013bd6:	4770      	bx	lr

08013bd8 <snmp_table_extract_value_from_u32ref>:

s16_t
snmp_table_extract_value_from_u32ref(struct snmp_node_instance* instance, void* value)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b085      	sub	sp, #20
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
  u32_t *dst = (u32_t*)value;
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.u32;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 8013bf0:	2304      	movs	r3, #4
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3714      	adds	r7, #20
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bc80      	pop	{r7}
 8013bfa:	4770      	bx	lr

08013bfc <snmp_table_extract_value_from_refconstptr>:

s16_t
snmp_table_extract_value_from_refconstptr(struct snmp_node_instance* instance, void* value)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
  MEMCPY(value, instance->reference.const_ptr, instance->reference_len);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013c12:	461a      	mov	r2, r3
 8013c14:	6838      	ldr	r0, [r7, #0]
 8013c16:	f00e f830 	bl	8021c7a <memcpy>
  return (u16_t)instance->reference_len;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013c20:	b21b      	sxth	r3, r3
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
	...

08013c2c <snmp_set_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Enable/disable authentication traps
 */
void
snmp_set_auth_traps_enabled(u8_t enable)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	4603      	mov	r3, r0
 8013c34:	71fb      	strb	r3, [r7, #7]
  snmp_auth_traps_enabled = enable;
 8013c36:	4a04      	ldr	r2, [pc, #16]	@ (8013c48 <snmp_set_auth_traps_enabled+0x1c>)
 8013c38:	79fb      	ldrb	r3, [r7, #7]
 8013c3a:	7013      	strb	r3, [r2, #0]
}
 8013c3c:	bf00      	nop
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bc80      	pop	{r7}
 8013c44:	4770      	bx	lr
 8013c46:	bf00      	nop
 8013c48:	20008638 	.word	0x20008638

08013c4c <snmp_get_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Get authentication traps enabled state
 */
u8_t
snmp_get_auth_traps_enabled(void)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	af00      	add	r7, sp, #0
  return snmp_auth_traps_enabled;
 8013c50:	4b02      	ldr	r3, [pc, #8]	@ (8013c5c <snmp_get_auth_traps_enabled+0x10>)
 8013c52:	781b      	ldrb	r3, [r3, #0]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bc80      	pop	{r7}
 8013c5a:	4770      	bx	lr
 8013c5c:	20008638 	.word	0x20008638

08013c60 <snmp_send_trap>:
 * and .iso.org.dod.internet.private.enterprises.yourenterprise
 * (sysObjectID) for specific traps.
 */
err_t
snmp_send_trap(const struct snmp_obj_id* eoid, s32_t generic_trap, s32_t specific_trap, struct snmp_varbind *varbinds)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b092      	sub	sp, #72	@ 0x48
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	60f8      	str	r0, [r7, #12]
 8013c68:	60b9      	str	r1, [r7, #8]
 8013c6a:	607a      	str	r2, [r7, #4]
 8013c6c:	603b      	str	r3, [r7, #0]
  struct snmp_msg_trap trap_msg;
  struct snmp_trap_dst *td;
  struct pbuf *p;
  u16_t i, tot_len;
  err_t err = ERR_OK;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

  trap_msg.snmp_version = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 8013c78:	2300      	movs	r3, #0
 8013c7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8013c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8013dac <snmp_send_trap+0x14c>)
 8013c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c82:	e088      	b.n	8013d96 <snmp_send_trap+0x136>
    if ((td->enable != 0) && !ip_addr_isany(&td->dip)) {
 8013c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c86:	791b      	ldrb	r3, [r3, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d07c      	beq.n	8013d86 <snmp_send_trap+0x126>
 8013c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d079      	beq.n	8013d86 <snmp_send_trap+0x126>
 8013c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d075      	beq.n	8013d86 <snmp_send_trap+0x126>
      /* lookup current source address for this dst */
      if (snmp_get_local_ip_for_dst(snmp_traps_handle, &td->dip, &trap_msg.sip)) {
 8013c9a:	4b45      	ldr	r3, [pc, #276]	@ (8013db0 <snmp_send_trap+0x150>)
 8013c9c:	6818      	ldr	r0, [r3, #0]
 8013c9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013ca0:	f107 0318 	add.w	r3, r7, #24
 8013ca4:	3304      	adds	r3, #4
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	f7ff fadb 	bl	8013262 <snmp_get_local_ip_for_dst>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d066      	beq.n	8013d80 <snmp_send_trap+0x120>
        if (eoid == NULL) {
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d104      	bne.n	8013cc2 <snmp_send_trap+0x62>
          trap_msg.enterprise = snmp_get_device_enterprise_oid();
 8013cb8:	f7fa f96e 	bl	800df98 <snmp_get_device_enterprise_oid>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	61bb      	str	r3, [r7, #24]
 8013cc0:	e001      	b.n	8013cc6 <snmp_send_trap+0x66>
        } else {
          trap_msg.enterprise = eoid;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	61bb      	str	r3, [r7, #24]
        }

        trap_msg.gen_trap = generic_trap;
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	623b      	str	r3, [r7, #32]
        if (generic_trap == SNMP_GENTRAP_ENTERPRISE_SPECIFIC) {
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	2b06      	cmp	r3, #6
 8013cce:	d102      	bne.n	8013cd6 <snmp_send_trap+0x76>
          trap_msg.spc_trap = specific_trap;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013cd4:	e001      	b.n	8013cda <snmp_send_trap+0x7a>
        } else {
          trap_msg.spc_trap = 0;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        MIB2_COPY_SYSUPTIME_TO(&trap_msg.ts);
 8013cda:	f7f7 fc99 	bl	800b610 <sys_now>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	4a34      	ldr	r2, [pc, #208]	@ (8013db4 <snmp_send_trap+0x154>)
 8013ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ce6:	08db      	lsrs	r3, r3, #3
 8013ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* pass 0, calculate length fields */
        tot_len = snmp_trap_varbind_sum(&trap_msg, varbinds);
 8013cea:	f107 0318 	add.w	r3, r7, #24
 8013cee:	6839      	ldr	r1, [r7, #0]
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f000 f883 	bl	8013dfc <snmp_trap_varbind_sum>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        tot_len = snmp_trap_header_sum(&trap_msg, tot_len);
 8013cfa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013cfc:	f107 0318 	add.w	r3, r7, #24
 8013d00:	4611      	mov	r1, r2
 8013d02:	4618      	mov	r0, r3
 8013d04:	f000 f8b4 	bl	8013e70 <snmp_trap_header_sum>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        /* allocate pbuf(s) */
        p = pbuf_alloc(PBUF_TRANSPORT, tot_len, PBUF_RAM);
 8013d0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013d0e:	2200      	movs	r2, #0
 8013d10:	4619      	mov	r1, r3
 8013d12:	2000      	movs	r0, #0
 8013d14:	f001 f99e 	bl	8015054 <pbuf_alloc>
 8013d18:	63b8      	str	r0, [r7, #56]	@ 0x38
        if (p != NULL) {
 8013d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d02b      	beq.n	8013d78 <snmp_send_trap+0x118>
          struct snmp_pbuf_stream pbuf_stream;
          snmp_pbuf_stream_init(&pbuf_stream, p, 0, tot_len);
 8013d20:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013d22:	f107 0010 	add.w	r0, r7, #16
 8013d26:	2200      	movs	r2, #0
 8013d28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013d2a:	f7ff f943 	bl	8012fb4 <snmp_pbuf_stream_init>

          /* pass 1, encode packet ino the pbuf(s) */
          snmp_trap_header_enc(&trap_msg, &pbuf_stream);
 8013d2e:	f107 0210 	add.w	r2, r7, #16
 8013d32:	f107 0318 	add.w	r3, r7, #24
 8013d36:	4611      	mov	r1, r2
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f000 f9b5 	bl	80140a8 <snmp_trap_header_enc>
          snmp_trap_varbind_enc(&trap_msg, &pbuf_stream, varbinds);
 8013d3e:	f107 0110 	add.w	r1, r7, #16
 8013d42:	f107 0318 	add.w	r3, r7, #24
 8013d46:	683a      	ldr	r2, [r7, #0]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f000 f985 	bl	8014058 <snmp_trap_varbind_enc>

          snmp_stats.outtraps++;
 8013d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8013db8 <snmp_send_trap+0x158>)
 8013d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013d52:	3301      	adds	r3, #1
 8013d54:	4a18      	ldr	r2, [pc, #96]	@ (8013db8 <snmp_send_trap+0x158>)
 8013d56:	6693      	str	r3, [r2, #104]	@ 0x68
          snmp_stats.outpkts++;
 8013d58:	4b17      	ldr	r3, [pc, #92]	@ (8013db8 <snmp_send_trap+0x158>)
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	4a16      	ldr	r2, [pc, #88]	@ (8013db8 <snmp_send_trap+0x158>)
 8013d60:	6053      	str	r3, [r2, #4]

          /** send to the TRAP destination */
          snmp_sendto(snmp_traps_handle, p, &td->dip, SNMP_TRAP_PORT);
 8013d62:	4b13      	ldr	r3, [pc, #76]	@ (8013db0 <snmp_send_trap+0x150>)
 8013d64:	6818      	ldr	r0, [r3, #0]
 8013d66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013d68:	23a2      	movs	r3, #162	@ 0xa2
 8013d6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013d6c:	f7ff fa67 	bl	801323e <snmp_sendto>
          pbuf_free(p);
 8013d70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013d72:	f001 fce7 	bl	8015744 <pbuf_free>
 8013d76:	e006      	b.n	8013d86 <snmp_send_trap+0x126>
        } else {
          err = ERR_MEM;
 8013d78:	23ff      	movs	r3, #255	@ 0xff
 8013d7a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8013d7e:	e002      	b.n	8013d86 <snmp_send_trap+0x126>
        }
      } else {
        /* routing error */
        err = ERR_RTE;
 8013d80:	23fc      	movs	r3, #252	@ 0xfc
 8013d82:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 8013d86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8013d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d92:	3308      	adds	r3, #8
 8013d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	f43f af72 	beq.w	8013c84 <snmp_send_trap+0x24>
      }
    }
  }
  return err;
 8013da0:	f997 3041 	ldrsb.w	r3, [r7, #65]	@ 0x41
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3748      	adds	r7, #72	@ 0x48
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	20008630 	.word	0x20008630
 8013db0:	2000862c 	.word	0x2000862c
 8013db4:	cccccccd 	.word	0xcccccccd
 8013db8:	20008584 	.word	0x20008584

08013dbc <snmp_send_trap_generic>:
 * @ingroup snmp_traps
 * Send generic SNMP trap
 */
err_t 
snmp_send_trap_generic(s32_t generic_trap)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
  static const struct snmp_obj_id oid = { 7, { 1, 3, 6, 1, 2, 1, 11 } };
  return snmp_send_trap(&oid, generic_trap, 0, NULL);
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	6879      	ldr	r1, [r7, #4]
 8013dca:	4804      	ldr	r0, [pc, #16]	@ (8013ddc <snmp_send_trap_generic+0x20>)
 8013dcc:	f7ff ff48 	bl	8013c60 <snmp_send_trap>
 8013dd0:	4603      	mov	r3, r0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3708      	adds	r7, #8
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	0803047c 	.word	0x0803047c

08013de0 <snmp_authfail_trap>:
 * @ingroup snmp_traps
 * Send authentication failure trap (used internally by agent) 
 */
void
snmp_authfail_trap(void)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	af00      	add	r7, sp, #0
  if (snmp_auth_traps_enabled != 0) {
 8013de4:	4b04      	ldr	r3, [pc, #16]	@ (8013df8 <snmp_authfail_trap+0x18>)
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d002      	beq.n	8013df2 <snmp_authfail_trap+0x12>
    snmp_send_trap_generic(SNMP_GENTRAP_AUTH_FAILURE);
 8013dec:	2004      	movs	r0, #4
 8013dee:	f7ff ffe5 	bl	8013dbc <snmp_send_trap_generic>
  }
}
 8013df2:	bf00      	nop
 8013df4:	bd80      	pop	{r7, pc}
 8013df6:	bf00      	nop
 8013df8:	20008638 	.word	0x20008638

08013dfc <snmp_trap_varbind_sum>:

static u16_t
snmp_trap_varbind_sum(struct snmp_msg_trap *trap, struct snmp_varbind *varbinds)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b088      	sub	sp, #32
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
  struct snmp_varbind *varbind;
  u16_t tot_len;
  u8_t tot_len_len;

  tot_len = 0;
 8013e06:	2300      	movs	r3, #0
 8013e08:	837b      	strh	r3, [r7, #26]
  varbind = varbinds;
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8013e0e:	e015      	b.n	8013e3c <snmp_trap_varbind_sum+0x40>
    struct snmp_varbind_len len;

    if (snmp_varbind_length(varbind, &len) == ERR_OK) {
 8013e10:	f107 030c 	add.w	r3, r7, #12
 8013e14:	4619      	mov	r1, r3
 8013e16:	69f8      	ldr	r0, [r7, #28]
 8013e18:	f7fe fa2c 	bl	8012274 <snmp_varbind_length>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d109      	bne.n	8013e36 <snmp_trap_varbind_sum+0x3a>
      tot_len += 1 + len.vb_len_len + len.vb_value_len;
 8013e22:	7b3b      	ldrb	r3, [r7, #12]
 8013e24:	461a      	mov	r2, r3
 8013e26:	89fb      	ldrh	r3, [r7, #14]
 8013e28:	4413      	add	r3, r2
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	8b7b      	ldrh	r3, [r7, #26]
 8013e2e:	4413      	add	r3, r2
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	3301      	adds	r3, #1
 8013e34:	837b      	strh	r3, [r7, #26]
    }

    varbind = varbind->next;
 8013e36:	69fb      	ldr	r3, [r7, #28]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d1e6      	bne.n	8013e10 <snmp_trap_varbind_sum+0x14>
  }

  trap->vbseqlen = tot_len;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	8b7a      	ldrh	r2, [r7, #26]
 8013e46:	83da      	strh	r2, [r3, #30]
  snmp_asn1_enc_length_cnt(trap->vbseqlen, &tot_len_len);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	8bdb      	ldrh	r3, [r3, #30]
 8013e4c:	f107 0219 	add.w	r2, r7, #25
 8013e50:	4611      	mov	r1, r2
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7f9 fcfa 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + tot_len_len;
 8013e58:	7e7b      	ldrb	r3, [r7, #25]
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	8b7b      	ldrh	r3, [r7, #26]
 8013e5e:	4413      	add	r3, r2
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	3301      	adds	r3, #1
 8013e64:	837b      	strh	r3, [r7, #26]

  return tot_len;
 8013e66:	8b7b      	ldrh	r3, [r7, #26]
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3720      	adds	r7, #32
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <snmp_trap_header_sum>:
 * @param vb_len varbind-list length
 * @return the required length for encoding the trap header
 */
static u16_t
snmp_trap_header_sum(struct snmp_msg_trap *trap, u16_t vb_len)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	460b      	mov	r3, r1
 8013e7a:	807b      	strh	r3, [r7, #2]
  u16_t tot_len;
  u16_t len;
  u8_t lenlen;

  tot_len = vb_len;
 8013e7c:	887b      	ldrh	r3, [r7, #2]
 8013e7e:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_u32t_cnt(trap->ts, &len);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	691b      	ldr	r3, [r3, #16]
 8013e84:	f107 020c 	add.w	r2, r7, #12
 8013e88:	4611      	mov	r1, r2
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7f9 fcfa 	bl	800d884 <snmp_asn1_enc_u32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8013e90:	89bb      	ldrh	r3, [r7, #12]
 8013e92:	f107 020b 	add.w	r2, r7, #11
 8013e96:	4611      	mov	r1, r2
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7f9 fcd7 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8013e9e:	7afb      	ldrb	r3, [r7, #11]
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	89bb      	ldrh	r3, [r7, #12]
 8013ea4:	4413      	add	r3, r2
 8013ea6:	b29a      	uxth	r2, r3
 8013ea8:	89fb      	ldrh	r3, [r7, #14]
 8013eaa:	4413      	add	r3, r2
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	3301      	adds	r3, #1
 8013eb0:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &len);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	68db      	ldr	r3, [r3, #12]
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	f107 030c 	add.w	r3, r7, #12
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	4610      	mov	r0, r2
 8013ec0:	f7f9 fd2e 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8013ec4:	89bb      	ldrh	r3, [r7, #12]
 8013ec6:	f107 020b 	add.w	r2, r7, #11
 8013eca:	4611      	mov	r1, r2
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7f9 fcbd 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8013ed2:	7afb      	ldrb	r3, [r7, #11]
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	89bb      	ldrh	r3, [r7, #12]
 8013ed8:	4413      	add	r3, r2
 8013eda:	b29a      	uxth	r2, r3
 8013edc:	89fb      	ldrh	r3, [r7, #14]
 8013ede:	4413      	add	r3, r2
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &len);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	689b      	ldr	r3, [r3, #8]
 8013eea:	461a      	mov	r2, r3
 8013eec:	f107 030c 	add.w	r3, r7, #12
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	f7f9 fd14 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8013ef8:	89bb      	ldrh	r3, [r7, #12]
 8013efa:	f107 020b 	add.w	r2, r7, #11
 8013efe:	4611      	mov	r1, r2
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7f9 fca3 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8013f06:	7afb      	ldrb	r3, [r7, #11]
 8013f08:	461a      	mov	r2, r3
 8013f0a:	89bb      	ldrh	r3, [r7, #12]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	89fb      	ldrh	r3, [r7, #14]
 8013f12:	4413      	add	r3, r2
 8013f14:	b29b      	uxth	r3, r3
 8013f16:	3301      	adds	r3, #1
 8013f18:	81fb      	strh	r3, [r7, #14]
#if LWIP_IPV6
    len = sizeof(ip_2_ip6(&trap->sip)->addr);
#endif
  } else {
#if LWIP_IPV4
    len = sizeof(ip_2_ip4(&trap->sip)->addr);
 8013f1a:	2304      	movs	r3, #4
 8013f1c:	81bb      	strh	r3, [r7, #12]
#endif
  }
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8013f1e:	89bb      	ldrh	r3, [r7, #12]
 8013f20:	f107 020b 	add.w	r2, r7, #11
 8013f24:	4611      	mov	r1, r2
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7f9 fc90 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8013f2c:	7afb      	ldrb	r3, [r7, #11]
 8013f2e:	461a      	mov	r2, r3
 8013f30:	89bb      	ldrh	r3, [r7, #12]
 8013f32:	4413      	add	r3, r2
 8013f34:	b29a      	uxth	r2, r3
 8013f36:	89fb      	ldrh	r3, [r7, #14]
 8013f38:	4413      	add	r3, r2
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	3301      	adds	r3, #1
 8013f3e:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &len);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	1d18      	adds	r0, r3, #4
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	f107 030c 	add.w	r3, r7, #12
 8013f52:	461a      	mov	r2, r3
 8013f54:	f7f9 fd0e 	bl	800d974 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8013f58:	89bb      	ldrh	r3, [r7, #12]
 8013f5a:	f107 020b 	add.w	r2, r7, #11
 8013f5e:	4611      	mov	r1, r2
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7f9 fc73 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8013f66:	7afb      	ldrb	r3, [r7, #11]
 8013f68:	461a      	mov	r2, r3
 8013f6a:	89bb      	ldrh	r3, [r7, #12]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	89fb      	ldrh	r3, [r7, #14]
 8013f72:	4413      	add	r3, r2
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	3301      	adds	r3, #1
 8013f78:	81fb      	strh	r3, [r7, #14]

  trap->pdulen = tot_len;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	89fa      	ldrh	r2, [r7, #14]
 8013f7e:	831a      	strh	r2, [r3, #24]
  snmp_asn1_enc_length_cnt(trap->pdulen, &lenlen);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	8b1b      	ldrh	r3, [r3, #24]
 8013f84:	f107 020b 	add.w	r2, r7, #11
 8013f88:	4611      	mov	r1, r2
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7f9 fc5e 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 8013f90:	7afb      	ldrb	r3, [r7, #11]
 8013f92:	461a      	mov	r2, r3
 8013f94:	89fb      	ldrh	r3, [r7, #14]
 8013f96:	4413      	add	r3, r2
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	81fb      	strh	r3, [r7, #14]

  trap->comlen = (u16_t)LWIP_MIN(strlen(snmp_community_trap), 0xFFFF);
 8013f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8014054 <snmp_trap_header_sum+0x1e4>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ec f91a 	bl	80001dc <strlen>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013fae:	4293      	cmp	r3, r2
 8013fb0:	d807      	bhi.n	8013fc2 <snmp_trap_header_sum+0x152>
 8013fb2:	4b28      	ldr	r3, [pc, #160]	@ (8014054 <snmp_trap_header_sum+0x1e4>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ec f910 	bl	80001dc <strlen>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	e001      	b.n	8013fc6 <snmp_trap_header_sum+0x156>
 8013fc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	835a      	strh	r2, [r3, #26]
  snmp_asn1_enc_length_cnt(trap->comlen, &lenlen);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	8b5b      	ldrh	r3, [r3, #26]
 8013fce:	f107 020b 	add.w	r2, r7, #11
 8013fd2:	4611      	mov	r1, r2
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7f9 fc39 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen + trap->comlen;
 8013fda:	7afb      	ldrb	r3, [r7, #11]
 8013fdc:	461a      	mov	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	8b5b      	ldrh	r3, [r3, #26]
 8013fe2:	4413      	add	r3, r2
 8013fe4:	b29a      	uxth	r2, r3
 8013fe6:	89fb      	ldrh	r3, [r7, #14]
 8013fe8:	4413      	add	r3, r2
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	3301      	adds	r3, #1
 8013fee:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &len);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	695b      	ldr	r3, [r3, #20]
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	f107 030c 	add.w	r3, r7, #12
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	4610      	mov	r0, r2
 8013ffe:	f7f9 fc8f 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014002:	89bb      	ldrh	r3, [r7, #12]
 8014004:	f107 020b 	add.w	r2, r7, #11
 8014008:	4611      	mov	r1, r2
 801400a:	4618      	mov	r0, r3
 801400c:	f7f9 fc1e 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014010:	7afb      	ldrb	r3, [r7, #11]
 8014012:	461a      	mov	r2, r3
 8014014:	89bb      	ldrh	r3, [r7, #12]
 8014016:	4413      	add	r3, r2
 8014018:	b29a      	uxth	r2, r3
 801401a:	89fb      	ldrh	r3, [r7, #14]
 801401c:	4413      	add	r3, r2
 801401e:	b29b      	uxth	r3, r3
 8014020:	3301      	adds	r3, #1
 8014022:	81fb      	strh	r3, [r7, #14]

  trap->seqlen = tot_len;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	89fa      	ldrh	r2, [r7, #14]
 8014028:	839a      	strh	r2, [r3, #28]
  snmp_asn1_enc_length_cnt(trap->seqlen, &lenlen);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	8b9b      	ldrh	r3, [r3, #28]
 801402e:	f107 020b 	add.w	r2, r7, #11
 8014032:	4611      	mov	r1, r2
 8014034:	4618      	mov	r0, r3
 8014036:	f7f9 fc09 	bl	800d84c <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 801403a:	7afb      	ldrb	r3, [r7, #11]
 801403c:	461a      	mov	r2, r3
 801403e:	89fb      	ldrh	r3, [r7, #14]
 8014040:	4413      	add	r3, r2
 8014042:	b29b      	uxth	r3, r3
 8014044:	3301      	adds	r3, #1
 8014046:	81fb      	strh	r3, [r7, #14]

  return tot_len;
 8014048:	89fb      	ldrh	r3, [r7, #14]
}
 801404a:	4618      	mov	r0, r3
 801404c:	3710      	adds	r7, #16
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	2000010c 	.word	0x2000010c

08014058 <snmp_trap_varbind_enc>:

static void
snmp_trap_varbind_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbinds)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b088      	sub	sp, #32
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind *varbind;

  varbind = varbinds;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	61fb      	str	r3, [r7, #28]

  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->vbseqlen);
 8014068:	2330      	movs	r3, #48	@ 0x30
 801406a:	753b      	strb	r3, [r7, #20]
 801406c:	2300      	movs	r3, #0
 801406e:	757b      	strb	r3, [r7, #21]
 8014070:	2300      	movs	r3, #0
 8014072:	75bb      	strb	r3, [r7, #22]
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	8bdb      	ldrh	r3, [r3, #30]
 8014078:	833b      	strh	r3, [r7, #24]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 801407a:	f107 0314 	add.w	r3, r7, #20
 801407e:	4619      	mov	r1, r3
 8014080:	68b8      	ldr	r0, [r7, #8]
 8014082:	f7f9 f9f7 	bl	800d474 <snmp_ans1_enc_tlv>

  while (varbind != NULL) {
 8014086:	e006      	b.n	8014096 <snmp_trap_varbind_enc+0x3e>
    snmp_append_outbound_varbind(pbuf_stream, varbind);
 8014088:	69f9      	ldr	r1, [r7, #28]
 801408a:	68b8      	ldr	r0, [r7, #8]
 801408c:	f7fe fa42 	bl	8012514 <snmp_append_outbound_varbind>

    varbind = varbind->next;
 8014090:	69fb      	ldr	r3, [r7, #28]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8014096:	69fb      	ldr	r3, [r7, #28]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d1f5      	bne.n	8014088 <snmp_trap_varbind_enc+0x30>
  }
}
 801409c:	bf00      	nop
 801409e:	bf00      	nop
 80140a0:	3720      	adds	r7, #32
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}
	...

080140a8 <snmp_trap_header_enc>:
/**
 * Encodes trap header from head to tail.
 */
static void
snmp_trap_header_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->seqlen);
 80140b2:	2330      	movs	r3, #48	@ 0x30
 80140b4:	723b      	strb	r3, [r7, #8]
 80140b6:	2300      	movs	r3, #0
 80140b8:	727b      	strb	r3, [r7, #9]
 80140ba:	2300      	movs	r3, #0
 80140bc:	72bb      	strb	r3, [r7, #10]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	8b9b      	ldrh	r3, [r3, #28]
 80140c2:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80140c4:	f107 0308 	add.w	r3, r7, #8
 80140c8:	4619      	mov	r1, r3
 80140ca:	6838      	ldr	r0, [r7, #0]
 80140cc:	f7f9 f9d2 	bl	800d474 <snmp_ans1_enc_tlv>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 80140d0:	2302      	movs	r3, #2
 80140d2:	723b      	strb	r3, [r7, #8]
 80140d4:	2300      	movs	r3, #0
 80140d6:	727b      	strb	r3, [r7, #9]
 80140d8:	2300      	movs	r3, #0
 80140da:	72bb      	strb	r3, [r7, #10]
 80140dc:	2300      	movs	r3, #0
 80140de:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &tlv.value_len);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	695b      	ldr	r3, [r3, #20]
 80140e4:	461a      	mov	r2, r3
 80140e6:	f107 0308 	add.w	r3, r7, #8
 80140ea:	3304      	adds	r3, #4
 80140ec:	4619      	mov	r1, r3
 80140ee:	4610      	mov	r0, r2
 80140f0:	f7f9 fc16 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80140f4:	f107 0308 	add.w	r3, r7, #8
 80140f8:	4619      	mov	r1, r3
 80140fa:	6838      	ldr	r0, [r7, #0]
 80140fc:	f7f9 f9ba 	bl	800d474 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->snmp_version);
 8014100:	89b9      	ldrh	r1, [r7, #12]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	695b      	ldr	r3, [r3, #20]
 8014106:	461a      	mov	r2, r3
 8014108:	6838      	ldr	r0, [r7, #0]
 801410a:	f7f9 fafe 	bl	800d70a <snmp_asn1_enc_s32t>

  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, trap->comlen);
 801410e:	2304      	movs	r3, #4
 8014110:	723b      	strb	r3, [r7, #8]
 8014112:	2300      	movs	r3, #0
 8014114:	727b      	strb	r3, [r7, #9]
 8014116:	2300      	movs	r3, #0
 8014118:	72bb      	strb	r3, [r7, #10]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	8b5b      	ldrh	r3, [r3, #26]
 801411e:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014120:	f107 0308 	add.w	r3, r7, #8
 8014124:	4619      	mov	r1, r3
 8014126:	6838      	ldr	r0, [r7, #0]
 8014128:	f7f9 f9a4 	bl	800d474 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_raw(pbuf_stream,  (const u8_t *)snmp_community_trap, trap->comlen);
 801412c:	4b58      	ldr	r3, [pc, #352]	@ (8014290 <snmp_trap_header_enc+0x1e8>)
 801412e:	6819      	ldr	r1, [r3, #0]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	8b5b      	ldrh	r3, [r3, #26]
 8014134:	461a      	mov	r2, r3
 8014136:	6838      	ldr	r0, [r7, #0]
 8014138:	f7f9 fa27 	bl	800d58a <snmp_asn1_enc_raw>

  /* 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_TRAP), 0, trap->pdulen);
 801413c:	23a4      	movs	r3, #164	@ 0xa4
 801413e:	723b      	strb	r3, [r7, #8]
 8014140:	2300      	movs	r3, #0
 8014142:	727b      	strb	r3, [r7, #9]
 8014144:	2300      	movs	r3, #0
 8014146:	72bb      	strb	r3, [r7, #10]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	8b1b      	ldrh	r3, [r3, #24]
 801414c:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 801414e:	f107 0308 	add.w	r3, r7, #8
 8014152:	4619      	mov	r1, r3
 8014154:	6838      	ldr	r0, [r7, #0]
 8014156:	f7f9 f98d 	bl	800d474 <snmp_ans1_enc_tlv>

  /* object ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, 0, 0);
 801415a:	2306      	movs	r3, #6
 801415c:	723b      	strb	r3, [r7, #8]
 801415e:	2300      	movs	r3, #0
 8014160:	727b      	strb	r3, [r7, #9]
 8014162:	2300      	movs	r3, #0
 8014164:	72bb      	strb	r3, [r7, #10]
 8014166:	2300      	movs	r3, #0
 8014168:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &tlv.value_len);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	1d18      	adds	r0, r3, #4
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	4619      	mov	r1, r3
 8014178:	f107 0308 	add.w	r3, r7, #8
 801417c:	3304      	adds	r3, #4
 801417e:	461a      	mov	r2, r3
 8014180:	f7f9 fbf8 	bl	800d974 <snmp_asn1_enc_oid_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014184:	f107 0308 	add.w	r3, r7, #8
 8014188:	4619      	mov	r1, r3
 801418a:	6838      	ldr	r0, [r7, #0]
 801418c:	f7f9 f972 	bl	800d474 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_oid(pbuf_stream, trap->enterprise->id, trap->enterprise->len);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	1d19      	adds	r1, r3, #4
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	461a      	mov	r2, r3
 801419e:	6838      	ldr	r0, [r7, #0]
 80141a0:	f7f9 fae2 	bl	800d768 <snmp_asn1_enc_oid>
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip6(&trap->sip)->addr, sizeof(ip_2_ip6(&trap->sip)->addr));
#endif
  } else {
#if LWIP_IPV4
    SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_IPADDR, 0, sizeof(ip_2_ip4(&trap->sip)->addr));
 80141a4:	2340      	movs	r3, #64	@ 0x40
 80141a6:	723b      	strb	r3, [r7, #8]
 80141a8:	2300      	movs	r3, #0
 80141aa:	727b      	strb	r3, [r7, #9]
 80141ac:	2300      	movs	r3, #0
 80141ae:	72bb      	strb	r3, [r7, #10]
 80141b0:	2304      	movs	r3, #4
 80141b2:	81bb      	strh	r3, [r7, #12]
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80141b4:	f107 0308 	add.w	r3, r7, #8
 80141b8:	4619      	mov	r1, r3
 80141ba:	6838      	ldr	r0, [r7, #0]
 80141bc:	f7f9 f95a 	bl	800d474 <snmp_ans1_enc_tlv>
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip4(&trap->sip)->addr, sizeof(ip_2_ip4(&trap->sip)->addr));
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3304      	adds	r3, #4
 80141c4:	2204      	movs	r2, #4
 80141c6:	4619      	mov	r1, r3
 80141c8:	6838      	ldr	r0, [r7, #0]
 80141ca:	f7f9 f9de 	bl	800d58a <snmp_asn1_enc_raw>
#endif
  }

  /* trap length */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 80141ce:	2302      	movs	r3, #2
 80141d0:	723b      	strb	r3, [r7, #8]
 80141d2:	2300      	movs	r3, #0
 80141d4:	727b      	strb	r3, [r7, #9]
 80141d6:	2300      	movs	r3, #0
 80141d8:	72bb      	strb	r3, [r7, #10]
 80141da:	2300      	movs	r3, #0
 80141dc:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &tlv.value_len);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	461a      	mov	r2, r3
 80141e4:	f107 0308 	add.w	r3, r7, #8
 80141e8:	3304      	adds	r3, #4
 80141ea:	4619      	mov	r1, r3
 80141ec:	4610      	mov	r0, r2
 80141ee:	f7f9 fb97 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80141f2:	f107 0308 	add.w	r3, r7, #8
 80141f6:	4619      	mov	r1, r3
 80141f8:	6838      	ldr	r0, [r7, #0]
 80141fa:	f7f9 f93b 	bl	800d474 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->gen_trap);
 80141fe:	89b9      	ldrh	r1, [r7, #12]
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	689b      	ldr	r3, [r3, #8]
 8014204:	461a      	mov	r2, r3
 8014206:	6838      	ldr	r0, [r7, #0]
 8014208:	f7f9 fa7f 	bl	800d70a <snmp_asn1_enc_s32t>

  /* specific trap */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 801420c:	2302      	movs	r3, #2
 801420e:	723b      	strb	r3, [r7, #8]
 8014210:	2300      	movs	r3, #0
 8014212:	727b      	strb	r3, [r7, #9]
 8014214:	2300      	movs	r3, #0
 8014216:	72bb      	strb	r3, [r7, #10]
 8014218:	2300      	movs	r3, #0
 801421a:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &tlv.value_len);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	68db      	ldr	r3, [r3, #12]
 8014220:	461a      	mov	r2, r3
 8014222:	f107 0308 	add.w	r3, r7, #8
 8014226:	3304      	adds	r3, #4
 8014228:	4619      	mov	r1, r3
 801422a:	4610      	mov	r0, r2
 801422c:	f7f9 fb78 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014230:	f107 0308 	add.w	r3, r7, #8
 8014234:	4619      	mov	r1, r3
 8014236:	6838      	ldr	r0, [r7, #0]
 8014238:	f7f9 f91c 	bl	800d474 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->spc_trap);
 801423c:	89b9      	ldrh	r1, [r7, #12]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	68db      	ldr	r3, [r3, #12]
 8014242:	461a      	mov	r2, r3
 8014244:	6838      	ldr	r0, [r7, #0]
 8014246:	f7f9 fa60 	bl	800d70a <snmp_asn1_enc_s32t>

  /* timestamp */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_TIMETICKS, 0, 0);
 801424a:	2343      	movs	r3, #67	@ 0x43
 801424c:	723b      	strb	r3, [r7, #8]
 801424e:	2300      	movs	r3, #0
 8014250:	727b      	strb	r3, [r7, #9]
 8014252:	2300      	movs	r3, #0
 8014254:	72bb      	strb	r3, [r7, #10]
 8014256:	2300      	movs	r3, #0
 8014258:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->ts, &tlv.value_len);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	691b      	ldr	r3, [r3, #16]
 801425e:	461a      	mov	r2, r3
 8014260:	f107 0308 	add.w	r3, r7, #8
 8014264:	3304      	adds	r3, #4
 8014266:	4619      	mov	r1, r3
 8014268:	4610      	mov	r0, r2
 801426a:	f7f9 fb59 	bl	800d920 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 801426e:	f107 0308 	add.w	r3, r7, #8
 8014272:	4619      	mov	r1, r3
 8014274:	6838      	ldr	r0, [r7, #0]
 8014276:	f7f9 f8fd 	bl	800d474 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->ts);
 801427a:	89b9      	ldrh	r1, [r7, #12]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	691b      	ldr	r3, [r3, #16]
 8014280:	461a      	mov	r2, r3
 8014282:	6838      	ldr	r0, [r7, #0]
 8014284:	f7f9 fa41 	bl	800d70a <snmp_asn1_enc_s32t>
}
 8014288:	bf00      	nop
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}
 8014290:	2000010c 	.word	0x2000010c

08014294 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	4603      	mov	r3, r0
 801429c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 801429e:	88fb      	ldrh	r3, [r7, #6]
 80142a0:	ba5b      	rev16	r3, r3
 80142a2:	b29b      	uxth	r3, r3
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	370c      	adds	r7, #12
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bc80      	pop	{r7}
 80142ac:	4770      	bx	lr

080142ae <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80142ae:	b480      	push	{r7}
 80142b0:	b083      	sub	sp, #12
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	061a      	lsls	r2, r3, #24
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	021b      	lsls	r3, r3, #8
 80142be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80142c2:	431a      	orrs	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	0a1b      	lsrs	r3, r3, #8
 80142c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80142cc:	431a      	orrs	r2, r3
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	0e1b      	lsrs	r3, r3, #24
 80142d2:	4313      	orrs	r3, r2
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	bc80      	pop	{r7}
 80142dc:	4770      	bx	lr

080142de <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 80142de:	b580      	push	{r7, lr}
 80142e0:	b086      	sub	sp, #24
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	60f8      	str	r0, [r7, #12]
 80142e6:	60b9      	str	r1, [r7, #8]
 80142e8:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 80142ea:	68b8      	ldr	r0, [r7, #8]
 80142ec:	f7eb ff76 	bl	80001dc <strlen>
 80142f0:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d101      	bne.n	80142fc <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	e022      	b.n	8014342 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	617b      	str	r3, [r7, #20]
 8014300:	e012      	b.n	8014328 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	781a      	ldrb	r2, [r3, #0]
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	429a      	cmp	r2, r3
 801430c:	d109      	bne.n	8014322 <lwip_strnstr+0x44>
 801430e:	693a      	ldr	r2, [r7, #16]
 8014310:	68b9      	ldr	r1, [r7, #8]
 8014312:	6978      	ldr	r0, [r7, #20]
 8014314:	f00d fbf1 	bl	8021afa <strncmp>
 8014318:	4603      	mov	r3, r0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d101      	bne.n	8014322 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	e00f      	b.n	8014342 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	3301      	adds	r3, #1
 8014326:	617b      	str	r3, [r7, #20]
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d007      	beq.n	8014340 <lwip_strnstr+0x62>
 8014330:	697a      	ldr	r2, [r7, #20]
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	441a      	add	r2, r3
 8014336:	68f9      	ldr	r1, [r7, #12]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	440b      	add	r3, r1
 801433c:	429a      	cmp	r2, r3
 801433e:	d9e0      	bls.n	8014302 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8014340:	2300      	movs	r3, #0
}
 8014342:	4618      	mov	r0, r3
 8014344:	3718      	adds	r7, #24
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 801434a:	b480      	push	{r7}
 801434c:	b085      	sub	sp, #20
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	1c5a      	adds	r2, r3, #1
 8014358:	607a      	str	r2, [r7, #4]
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	1c5a      	adds	r2, r3, #1
 8014362:	603a      	str	r2, [r7, #0]
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8014368:	7bfa      	ldrb	r2, [r7, #15]
 801436a:	7bbb      	ldrb	r3, [r7, #14]
 801436c:	429a      	cmp	r2, r3
 801436e:	d016      	beq.n	801439e <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8014370:	7bfb      	ldrb	r3, [r7, #15]
 8014372:	f043 0320 	orr.w	r3, r3, #32
 8014376:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014378:	7b7b      	ldrb	r3, [r7, #13]
 801437a:	2b60      	cmp	r3, #96	@ 0x60
 801437c:	d90c      	bls.n	8014398 <lwip_stricmp+0x4e>
 801437e:	7b7b      	ldrb	r3, [r7, #13]
 8014380:	2b7a      	cmp	r3, #122	@ 0x7a
 8014382:	d809      	bhi.n	8014398 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8014384:	7bbb      	ldrb	r3, [r7, #14]
 8014386:	f043 0320 	orr.w	r3, r3, #32
 801438a:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 801438c:	7b7a      	ldrb	r2, [r7, #13]
 801438e:	7b3b      	ldrb	r3, [r7, #12]
 8014390:	429a      	cmp	r2, r3
 8014392:	d003      	beq.n	801439c <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8014394:	2301      	movs	r3, #1
 8014396:	e006      	b.n	80143a6 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8014398:	2301      	movs	r3, #1
 801439a:	e004      	b.n	80143a6 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801439c:	bf00      	nop
      }
    }
  } while (c1 != 0);
 801439e:	7bfb      	ldrb	r3, [r7, #15]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d1d7      	bne.n	8014354 <lwip_stricmp+0xa>
  return 0;
 80143a4:	2300      	movs	r3, #0
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3714      	adds	r7, #20
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bc80      	pop	{r7}
 80143ae:	4770      	bx	lr

080143b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80143b6:	2300      	movs	r3, #0
 80143b8:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80143ba:	f001 fd5b 	bl	8015e74 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80143be:	f000 f8a7 	bl	8014510 <mem_init>
  memp_init();
 80143c2:	f000 fba5 	bl	8014b10 <memp_init>
  pbuf_init();
  netif_init();
 80143c6:	f000 fc8b 	bl	8014ce0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80143ca:	f007 f9c9 	bl	801b760 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80143ce:	f001 fd57 	bl	8015e80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80143d2:	f007 f8a7 	bl	801b524 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80143d6:	bf00      	nop
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
	...

080143e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80143e8:	4b40      	ldr	r3, [pc, #256]	@ (80144ec <plug_holes+0x10c>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d206      	bcs.n	8014400 <plug_holes+0x20>
 80143f2:	4b3f      	ldr	r3, [pc, #252]	@ (80144f0 <plug_holes+0x110>)
 80143f4:	f240 125d 	movw	r2, #349	@ 0x15d
 80143f8:	493e      	ldr	r1, [pc, #248]	@ (80144f4 <plug_holes+0x114>)
 80143fa:	483f      	ldr	r0, [pc, #252]	@ (80144f8 <plug_holes+0x118>)
 80143fc:	f00d f992 	bl	8021724 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014400:	4b3e      	ldr	r3, [pc, #248]	@ (80144fc <plug_holes+0x11c>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	429a      	cmp	r2, r3
 8014408:	d306      	bcc.n	8014418 <plug_holes+0x38>
 801440a:	4b39      	ldr	r3, [pc, #228]	@ (80144f0 <plug_holes+0x110>)
 801440c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014410:	493b      	ldr	r1, [pc, #236]	@ (8014500 <plug_holes+0x120>)
 8014412:	4839      	ldr	r0, [pc, #228]	@ (80144f8 <plug_holes+0x118>)
 8014414:	f00d f986 	bl	8021724 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	791b      	ldrb	r3, [r3, #4]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d006      	beq.n	801442e <plug_holes+0x4e>
 8014420:	4b33      	ldr	r3, [pc, #204]	@ (80144f0 <plug_holes+0x110>)
 8014422:	f240 125f 	movw	r2, #351	@ 0x15f
 8014426:	4937      	ldr	r1, [pc, #220]	@ (8014504 <plug_holes+0x124>)
 8014428:	4833      	ldr	r0, [pc, #204]	@ (80144f8 <plug_holes+0x118>)
 801442a:	f00d f97b 	bl	8021724 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	881b      	ldrh	r3, [r3, #0]
 8014432:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014436:	d906      	bls.n	8014446 <plug_holes+0x66>
 8014438:	4b2d      	ldr	r3, [pc, #180]	@ (80144f0 <plug_holes+0x110>)
 801443a:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 801443e:	4932      	ldr	r1, [pc, #200]	@ (8014508 <plug_holes+0x128>)
 8014440:	482d      	ldr	r0, [pc, #180]	@ (80144f8 <plug_holes+0x118>)
 8014442:	f00d f96f 	bl	8021724 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8014446:	4b29      	ldr	r3, [pc, #164]	@ (80144ec <plug_holes+0x10c>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	687a      	ldr	r2, [r7, #4]
 801444c:	8812      	ldrh	r2, [r2, #0]
 801444e:	4413      	add	r3, r2
 8014450:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	429a      	cmp	r2, r3
 8014458:	d01f      	beq.n	801449a <plug_holes+0xba>
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	791b      	ldrb	r3, [r3, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d11b      	bne.n	801449a <plug_holes+0xba>
 8014462:	4b26      	ldr	r3, [pc, #152]	@ (80144fc <plug_holes+0x11c>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	68fa      	ldr	r2, [r7, #12]
 8014468:	429a      	cmp	r2, r3
 801446a:	d016      	beq.n	801449a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801446c:	4b27      	ldr	r3, [pc, #156]	@ (801450c <plug_holes+0x12c>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	429a      	cmp	r2, r3
 8014474:	d102      	bne.n	801447c <plug_holes+0x9c>
      lfree = mem;
 8014476:	4a25      	ldr	r2, [pc, #148]	@ (801450c <plug_holes+0x12c>)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	881a      	ldrh	r2, [r3, #0]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8014484:	4b19      	ldr	r3, [pc, #100]	@ (80144ec <plug_holes+0x10c>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	687a      	ldr	r2, [r7, #4]
 801448a:	1ad1      	subs	r1, r2, r3
 801448c:	4b17      	ldr	r3, [pc, #92]	@ (80144ec <plug_holes+0x10c>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	68fa      	ldr	r2, [r7, #12]
 8014492:	8812      	ldrh	r2, [r2, #0]
 8014494:	4413      	add	r3, r2
 8014496:	b28a      	uxth	r2, r1
 8014498:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 801449a:	4b14      	ldr	r3, [pc, #80]	@ (80144ec <plug_holes+0x10c>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	8852      	ldrh	r2, [r2, #2]
 80144a2:	4413      	add	r3, r2
 80144a4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d01a      	beq.n	80144e4 <plug_holes+0x104>
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	791b      	ldrb	r3, [r3, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d116      	bne.n	80144e4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80144b6:	4b15      	ldr	r3, [pc, #84]	@ (801450c <plug_holes+0x12c>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d102      	bne.n	80144c6 <plug_holes+0xe6>
      lfree = pmem;
 80144c0:	4a12      	ldr	r2, [pc, #72]	@ (801450c <plug_holes+0x12c>)
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	881a      	ldrh	r2, [r3, #0]
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80144ce:	4b07      	ldr	r3, [pc, #28]	@ (80144ec <plug_holes+0x10c>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	68ba      	ldr	r2, [r7, #8]
 80144d4:	1ad1      	subs	r1, r2, r3
 80144d6:	4b05      	ldr	r3, [pc, #20]	@ (80144ec <plug_holes+0x10c>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	8812      	ldrh	r2, [r2, #0]
 80144de:	4413      	add	r3, r2
 80144e0:	b28a      	uxth	r2, r1
 80144e2:	805a      	strh	r2, [r3, #2]
  }
}
 80144e4:	bf00      	nop
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	20008ca8 	.word	0x20008ca8
 80144f0:	0802515c 	.word	0x0802515c
 80144f4:	0802518c 	.word	0x0802518c
 80144f8:	080251a4 	.word	0x080251a4
 80144fc:	20008cac 	.word	0x20008cac
 8014500:	080251cc 	.word	0x080251cc
 8014504:	080251e8 	.word	0x080251e8
 8014508:	08025204 	.word	0x08025204
 801450c:	20008cb0 	.word	0x20008cb0

08014510 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8014516:	4b1b      	ldr	r3, [pc, #108]	@ (8014584 <mem_init+0x74>)
 8014518:	3303      	adds	r3, #3
 801451a:	f023 0303 	bic.w	r3, r3, #3
 801451e:	461a      	mov	r2, r3
 8014520:	4b19      	ldr	r3, [pc, #100]	@ (8014588 <mem_init+0x78>)
 8014522:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014524:	4b18      	ldr	r3, [pc, #96]	@ (8014588 <mem_init+0x78>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014530:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2200      	movs	r2, #0
 8014536:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2200      	movs	r2, #0
 801453c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 801453e:	4b12      	ldr	r3, [pc, #72]	@ (8014588 <mem_init+0x78>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8014546:	4a11      	ldr	r2, [pc, #68]	@ (801458c <mem_init+0x7c>)
 8014548:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801454a:	4b10      	ldr	r3, [pc, #64]	@ (801458c <mem_init+0x7c>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2201      	movs	r2, #1
 8014550:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014552:	4b0e      	ldr	r3, [pc, #56]	@ (801458c <mem_init+0x7c>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801455a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801455c:	4b0b      	ldr	r3, [pc, #44]	@ (801458c <mem_init+0x7c>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014564:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014566:	4b08      	ldr	r3, [pc, #32]	@ (8014588 <mem_init+0x78>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4a09      	ldr	r2, [pc, #36]	@ (8014590 <mem_init+0x80>)
 801456c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 801456e:	4b09      	ldr	r3, [pc, #36]	@ (8014594 <mem_init+0x84>)
 8014570:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014574:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8014578:	bf00      	nop
 801457a:	370c      	adds	r7, #12
 801457c:	46bd      	mov	sp, r7
 801457e:	bc80      	pop	{r7}
 8014580:	4770      	bx	lr
 8014582:	bf00      	nop
 8014584:	20008654 	.word	0x20008654
 8014588:	20008ca8 	.word	0x20008ca8
 801458c:	20008cac 	.word	0x20008cac
 8014590:	20008cb0 	.word	0x20008cb0
 8014594:	2000bc24 	.word	0x2000bc24

08014598 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d05d      	beq.n	8014662 <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f003 0303 	and.w	r3, r3, #3
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d006      	beq.n	80145be <mem_free+0x26>
 80145b0:	4b2e      	ldr	r3, [pc, #184]	@ (801466c <mem_free+0xd4>)
 80145b2:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80145b6:	492e      	ldr	r1, [pc, #184]	@ (8014670 <mem_free+0xd8>)
 80145b8:	482e      	ldr	r0, [pc, #184]	@ (8014674 <mem_free+0xdc>)
 80145ba:	f00d f8b3 	bl	8021724 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80145be:	4b2e      	ldr	r3, [pc, #184]	@ (8014678 <mem_free+0xe0>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d304      	bcc.n	80145d2 <mem_free+0x3a>
 80145c8:	4b2c      	ldr	r3, [pc, #176]	@ (801467c <mem_free+0xe4>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	687a      	ldr	r2, [r7, #4]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d306      	bcc.n	80145e0 <mem_free+0x48>
 80145d2:	4b26      	ldr	r3, [pc, #152]	@ (801466c <mem_free+0xd4>)
 80145d4:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80145d8:	4929      	ldr	r1, [pc, #164]	@ (8014680 <mem_free+0xe8>)
 80145da:	4826      	ldr	r0, [pc, #152]	@ (8014674 <mem_free+0xdc>)
 80145dc:	f00d f8a2 	bl	8021724 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80145e0:	4b25      	ldr	r3, [pc, #148]	@ (8014678 <mem_free+0xe0>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d304      	bcc.n	80145f4 <mem_free+0x5c>
 80145ea:	4b24      	ldr	r3, [pc, #144]	@ (801467c <mem_free+0xe4>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d308      	bcc.n	8014606 <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 80145f4:	4b23      	ldr	r3, [pc, #140]	@ (8014684 <mem_free+0xec>)
 80145f6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80145fa:	3301      	adds	r3, #1
 80145fc:	b29a      	uxth	r2, r3
 80145fe:	4b21      	ldr	r3, [pc, #132]	@ (8014684 <mem_free+0xec>)
 8014600:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8014604:	e02e      	b.n	8014664 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	3b08      	subs	r3, #8
 801460a:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	791b      	ldrb	r3, [r3, #4]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d106      	bne.n	8014622 <mem_free+0x8a>
 8014614:	4b15      	ldr	r3, [pc, #84]	@ (801466c <mem_free+0xd4>)
 8014616:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 801461a:	491b      	ldr	r1, [pc, #108]	@ (8014688 <mem_free+0xf0>)
 801461c:	4815      	ldr	r0, [pc, #84]	@ (8014674 <mem_free+0xdc>)
 801461e:	f00d f881 	bl	8021724 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	2200      	movs	r2, #0
 8014626:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014628:	4b18      	ldr	r3, [pc, #96]	@ (801468c <mem_free+0xf4>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	68fa      	ldr	r2, [r7, #12]
 801462e:	429a      	cmp	r2, r3
 8014630:	d202      	bcs.n	8014638 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014632:	4a16      	ldr	r2, [pc, #88]	@ (801468c <mem_free+0xf4>)
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8014638:	4b12      	ldr	r3, [pc, #72]	@ (8014684 <mem_free+0xec>)
 801463a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801463e:	4b0e      	ldr	r3, [pc, #56]	@ (8014678 <mem_free+0xe0>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	68f9      	ldr	r1, [r7, #12]
 8014644:	1acb      	subs	r3, r1, r3
 8014646:	b299      	uxth	r1, r3
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	881b      	ldrh	r3, [r3, #0]
 801464c:	1acb      	subs	r3, r1, r3
 801464e:	b29b      	uxth	r3, r3
 8014650:	4413      	add	r3, r2
 8014652:	b29a      	uxth	r2, r3
 8014654:	4b0b      	ldr	r3, [pc, #44]	@ (8014684 <mem_free+0xec>)
 8014656:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801465a:	68f8      	ldr	r0, [r7, #12]
 801465c:	f7ff fec0 	bl	80143e0 <plug_holes>
 8014660:	e000      	b.n	8014664 <mem_free+0xcc>
    return;
 8014662:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8014664:	3710      	adds	r7, #16
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}
 801466a:	bf00      	nop
 801466c:	0802515c 	.word	0x0802515c
 8014670:	08025230 	.word	0x08025230
 8014674:	080251a4 	.word	0x080251a4
 8014678:	20008ca8 	.word	0x20008ca8
 801467c:	20008cac 	.word	0x20008cac
 8014680:	08025254 	.word	0x08025254
 8014684:	2000bc24 	.word	0x2000bc24
 8014688:	0802526c 	.word	0x0802526c
 801468c:	20008cb0 	.word	0x20008cb0

08014690 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b086      	sub	sp, #24
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	460b      	mov	r3, r1
 801469a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 801469c:	887b      	ldrh	r3, [r7, #2]
 801469e:	3303      	adds	r3, #3
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	f023 0303 	bic.w	r3, r3, #3
 80146a6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80146a8:	887b      	ldrh	r3, [r7, #2]
 80146aa:	2b0b      	cmp	r3, #11
 80146ac:	d801      	bhi.n	80146b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80146ae:	230c      	movs	r3, #12
 80146b0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80146b2:	887b      	ldrh	r3, [r7, #2]
 80146b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80146b8:	d901      	bls.n	80146be <mem_trim+0x2e>
    return NULL;
 80146ba:	2300      	movs	r3, #0
 80146bc:	e0d1      	b.n	8014862 <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80146be:	4b6b      	ldr	r3, [pc, #428]	@ (801486c <mem_trim+0x1dc>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d304      	bcc.n	80146d2 <mem_trim+0x42>
 80146c8:	4b69      	ldr	r3, [pc, #420]	@ (8014870 <mem_trim+0x1e0>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d306      	bcc.n	80146e0 <mem_trim+0x50>
 80146d2:	4b68      	ldr	r3, [pc, #416]	@ (8014874 <mem_trim+0x1e4>)
 80146d4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80146d8:	4967      	ldr	r1, [pc, #412]	@ (8014878 <mem_trim+0x1e8>)
 80146da:	4868      	ldr	r0, [pc, #416]	@ (801487c <mem_trim+0x1ec>)
 80146dc:	f00d f822 	bl	8021724 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80146e0:	4b62      	ldr	r3, [pc, #392]	@ (801486c <mem_trim+0x1dc>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	687a      	ldr	r2, [r7, #4]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d304      	bcc.n	80146f4 <mem_trim+0x64>
 80146ea:	4b61      	ldr	r3, [pc, #388]	@ (8014870 <mem_trim+0x1e0>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d309      	bcc.n	8014708 <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 80146f4:	4b62      	ldr	r3, [pc, #392]	@ (8014880 <mem_trim+0x1f0>)
 80146f6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80146fa:	3301      	adds	r3, #1
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	4b60      	ldr	r3, [pc, #384]	@ (8014880 <mem_trim+0x1f0>)
 8014700:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	e0ac      	b.n	8014862 <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	3b08      	subs	r3, #8
 801470c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 801470e:	4b57      	ldr	r3, [pc, #348]	@ (801486c <mem_trim+0x1dc>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	697a      	ldr	r2, [r7, #20]
 8014714:	1ad3      	subs	r3, r2, r3
 8014716:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	881a      	ldrh	r2, [r3, #0]
 801471c:	8a7b      	ldrh	r3, [r7, #18]
 801471e:	1ad3      	subs	r3, r2, r3
 8014720:	b29b      	uxth	r3, r3
 8014722:	3b08      	subs	r3, #8
 8014724:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014726:	887a      	ldrh	r2, [r7, #2]
 8014728:	8a3b      	ldrh	r3, [r7, #16]
 801472a:	429a      	cmp	r2, r3
 801472c:	d906      	bls.n	801473c <mem_trim+0xac>
 801472e:	4b51      	ldr	r3, [pc, #324]	@ (8014874 <mem_trim+0x1e4>)
 8014730:	f240 2206 	movw	r2, #518	@ 0x206
 8014734:	4953      	ldr	r1, [pc, #332]	@ (8014884 <mem_trim+0x1f4>)
 8014736:	4851      	ldr	r0, [pc, #324]	@ (801487c <mem_trim+0x1ec>)
 8014738:	f00c fff4 	bl	8021724 <iprintf>
  if (newsize > size) {
 801473c:	887a      	ldrh	r2, [r7, #2]
 801473e:	8a3b      	ldrh	r3, [r7, #16]
 8014740:	429a      	cmp	r2, r3
 8014742:	d901      	bls.n	8014748 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8014744:	2300      	movs	r3, #0
 8014746:	e08c      	b.n	8014862 <mem_trim+0x1d2>
  }
  if (newsize == size) {
 8014748:	887a      	ldrh	r2, [r7, #2]
 801474a:	8a3b      	ldrh	r3, [r7, #16]
 801474c:	429a      	cmp	r2, r3
 801474e:	d101      	bne.n	8014754 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	e086      	b.n	8014862 <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8014754:	4b45      	ldr	r3, [pc, #276]	@ (801486c <mem_trim+0x1dc>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	697a      	ldr	r2, [r7, #20]
 801475a:	8812      	ldrh	r2, [r2, #0]
 801475c:	4413      	add	r3, r2
 801475e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	791b      	ldrb	r3, [r3, #4]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d13d      	bne.n	80147e4 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	881b      	ldrh	r3, [r3, #0]
 801476c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801476e:	8a7a      	ldrh	r2, [r7, #18]
 8014770:	887b      	ldrh	r3, [r7, #2]
 8014772:	4413      	add	r3, r2
 8014774:	b29b      	uxth	r3, r3
 8014776:	3308      	adds	r3, #8
 8014778:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 801477a:	4b43      	ldr	r3, [pc, #268]	@ (8014888 <mem_trim+0x1f8>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	429a      	cmp	r2, r3
 8014782:	d105      	bne.n	8014790 <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8014784:	4b39      	ldr	r3, [pc, #228]	@ (801486c <mem_trim+0x1dc>)
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	897b      	ldrh	r3, [r7, #10]
 801478a:	4413      	add	r3, r2
 801478c:	4a3e      	ldr	r2, [pc, #248]	@ (8014888 <mem_trim+0x1f8>)
 801478e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8014790:	4b36      	ldr	r3, [pc, #216]	@ (801486c <mem_trim+0x1dc>)
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	897b      	ldrh	r3, [r7, #10]
 8014796:	4413      	add	r3, r2
 8014798:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	2200      	movs	r2, #0
 801479e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	893a      	ldrh	r2, [r7, #8]
 80147a4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	8a7a      	ldrh	r2, [r7, #18]
 80147aa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	897a      	ldrh	r2, [r7, #10]
 80147b0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	881b      	ldrh	r3, [r3, #0]
 80147b6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80147ba:	d006      	beq.n	80147ca <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80147bc:	4b2b      	ldr	r3, [pc, #172]	@ (801486c <mem_trim+0x1dc>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	68fa      	ldr	r2, [r7, #12]
 80147c2:	8812      	ldrh	r2, [r2, #0]
 80147c4:	4413      	add	r3, r2
 80147c6:	897a      	ldrh	r2, [r7, #10]
 80147c8:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80147ca:	4b2d      	ldr	r3, [pc, #180]	@ (8014880 <mem_trim+0x1f0>)
 80147cc:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80147d0:	8879      	ldrh	r1, [r7, #2]
 80147d2:	8a3b      	ldrh	r3, [r7, #16]
 80147d4:	1acb      	subs	r3, r1, r3
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	4413      	add	r3, r2
 80147da:	b29a      	uxth	r2, r3
 80147dc:	4b28      	ldr	r3, [pc, #160]	@ (8014880 <mem_trim+0x1f0>)
 80147de:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80147e2:	e03d      	b.n	8014860 <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80147e4:	887b      	ldrh	r3, [r7, #2]
 80147e6:	f103 0214 	add.w	r2, r3, #20
 80147ea:	8a3b      	ldrh	r3, [r7, #16]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d837      	bhi.n	8014860 <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80147f0:	8a7a      	ldrh	r2, [r7, #18]
 80147f2:	887b      	ldrh	r3, [r7, #2]
 80147f4:	4413      	add	r3, r2
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	3308      	adds	r3, #8
 80147fa:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80147fc:	4b1b      	ldr	r3, [pc, #108]	@ (801486c <mem_trim+0x1dc>)
 80147fe:	681a      	ldr	r2, [r3, #0]
 8014800:	897b      	ldrh	r3, [r7, #10]
 8014802:	4413      	add	r3, r2
 8014804:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8014806:	4b20      	ldr	r3, [pc, #128]	@ (8014888 <mem_trim+0x1f8>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	68fa      	ldr	r2, [r7, #12]
 801480c:	429a      	cmp	r2, r3
 801480e:	d202      	bcs.n	8014816 <mem_trim+0x186>
      lfree = mem2;
 8014810:	4a1d      	ldr	r2, [pc, #116]	@ (8014888 <mem_trim+0x1f8>)
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2200      	movs	r2, #0
 801481a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	881a      	ldrh	r2, [r3, #0]
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	8a7a      	ldrh	r2, [r7, #18]
 8014828:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801482a:	697b      	ldr	r3, [r7, #20]
 801482c:	897a      	ldrh	r2, [r7, #10]
 801482e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	881b      	ldrh	r3, [r3, #0]
 8014834:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014838:	d006      	beq.n	8014848 <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801483a:	4b0c      	ldr	r3, [pc, #48]	@ (801486c <mem_trim+0x1dc>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	68fa      	ldr	r2, [r7, #12]
 8014840:	8812      	ldrh	r2, [r2, #0]
 8014842:	4413      	add	r3, r2
 8014844:	897a      	ldrh	r2, [r7, #10]
 8014846:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8014848:	4b0d      	ldr	r3, [pc, #52]	@ (8014880 <mem_trim+0x1f0>)
 801484a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801484e:	8879      	ldrh	r1, [r7, #2]
 8014850:	8a3b      	ldrh	r3, [r7, #16]
 8014852:	1acb      	subs	r3, r1, r3
 8014854:	b29b      	uxth	r3, r3
 8014856:	4413      	add	r3, r2
 8014858:	b29a      	uxth	r2, r3
 801485a:	4b09      	ldr	r3, [pc, #36]	@ (8014880 <mem_trim+0x1f0>)
 801485c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8014860:	687b      	ldr	r3, [r7, #4]
}
 8014862:	4618      	mov	r0, r3
 8014864:	3718      	adds	r7, #24
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	20008ca8 	.word	0x20008ca8
 8014870:	20008cac 	.word	0x20008cac
 8014874:	0802515c 	.word	0x0802515c
 8014878:	08025280 	.word	0x08025280
 801487c:	080251a4 	.word	0x080251a4
 8014880:	2000bc24 	.word	0x2000bc24
 8014884:	08025298 	.word	0x08025298
 8014888:	20008cb0 	.word	0x20008cb0

0801488c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b088      	sub	sp, #32
 8014890:	af00      	add	r7, sp, #0
 8014892:	4603      	mov	r3, r0
 8014894:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8014896:	88fb      	ldrh	r3, [r7, #6]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d101      	bne.n	80148a0 <mem_malloc+0x14>
    return NULL;
 801489c:	2300      	movs	r3, #0
 801489e:	e0eb      	b.n	8014a78 <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80148a0:	88fb      	ldrh	r3, [r7, #6]
 80148a2:	3303      	adds	r3, #3
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	f023 0303 	bic.w	r3, r3, #3
 80148aa:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80148ac:	88fb      	ldrh	r3, [r7, #6]
 80148ae:	2b0b      	cmp	r3, #11
 80148b0:	d801      	bhi.n	80148b6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80148b2:	230c      	movs	r3, #12
 80148b4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80148b6:	88fb      	ldrh	r3, [r7, #6]
 80148b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80148bc:	d901      	bls.n	80148c2 <mem_malloc+0x36>
    return NULL;
 80148be:	2300      	movs	r3, #0
 80148c0:	e0da      	b.n	8014a78 <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80148c2:	4b6f      	ldr	r3, [pc, #444]	@ (8014a80 <mem_malloc+0x1f4>)
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	4b6f      	ldr	r3, [pc, #444]	@ (8014a84 <mem_malloc+0x1f8>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	1ad3      	subs	r3, r2, r3
 80148cc:	83fb      	strh	r3, [r7, #30]
 80148ce:	e0c3      	b.n	8014a58 <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80148d0:	4b6c      	ldr	r3, [pc, #432]	@ (8014a84 <mem_malloc+0x1f8>)
 80148d2:	681a      	ldr	r2, [r3, #0]
 80148d4:	8bfb      	ldrh	r3, [r7, #30]
 80148d6:	4413      	add	r3, r2
 80148d8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	791b      	ldrb	r3, [r3, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	f040 80b4 	bne.w	8014a4c <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	461a      	mov	r2, r3
 80148ea:	8bfb      	ldrh	r3, [r7, #30]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	f1a3 0208 	sub.w	r2, r3, #8
 80148f2:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80148f4:	429a      	cmp	r2, r3
 80148f6:	f0c0 80a9 	bcc.w	8014a4c <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	461a      	mov	r2, r3
 8014900:	8bfb      	ldrh	r3, [r7, #30]
 8014902:	1ad3      	subs	r3, r2, r3
 8014904:	f1a3 0208 	sub.w	r2, r3, #8
 8014908:	88fb      	ldrh	r3, [r7, #6]
 801490a:	3314      	adds	r3, #20
 801490c:	429a      	cmp	r2, r3
 801490e:	d332      	bcc.n	8014976 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8014910:	8bfa      	ldrh	r2, [r7, #30]
 8014912:	88fb      	ldrh	r3, [r7, #6]
 8014914:	4413      	add	r3, r2
 8014916:	b29b      	uxth	r3, r3
 8014918:	3308      	adds	r3, #8
 801491a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 801491c:	4b59      	ldr	r3, [pc, #356]	@ (8014a84 <mem_malloc+0x1f8>)
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	8a7b      	ldrh	r3, [r7, #18]
 8014922:	4413      	add	r3, r2
 8014924:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	2200      	movs	r2, #0
 801492a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	881a      	ldrh	r2, [r3, #0]
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	8bfa      	ldrh	r2, [r7, #30]
 8014938:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	8a7a      	ldrh	r2, [r7, #18]
 801493e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	2201      	movs	r2, #1
 8014944:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	881b      	ldrh	r3, [r3, #0]
 801494a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801494e:	d006      	beq.n	801495e <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8014950:	4b4c      	ldr	r3, [pc, #304]	@ (8014a84 <mem_malloc+0x1f8>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	68fa      	ldr	r2, [r7, #12]
 8014956:	8812      	ldrh	r2, [r2, #0]
 8014958:	4413      	add	r3, r2
 801495a:	8a7a      	ldrh	r2, [r7, #18]
 801495c:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 801495e:	4b4a      	ldr	r3, [pc, #296]	@ (8014a88 <mem_malloc+0x1fc>)
 8014960:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8014964:	88fb      	ldrh	r3, [r7, #6]
 8014966:	4413      	add	r3, r2
 8014968:	b29b      	uxth	r3, r3
 801496a:	3308      	adds	r3, #8
 801496c:	b29a      	uxth	r2, r3
 801496e:	4b46      	ldr	r3, [pc, #280]	@ (8014a88 <mem_malloc+0x1fc>)
 8014970:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014974:	e013      	b.n	801499e <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	2201      	movs	r2, #1
 801497a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 801497c:	4b42      	ldr	r3, [pc, #264]	@ (8014a88 <mem_malloc+0x1fc>)
 801497e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	8819      	ldrh	r1, [r3, #0]
 8014986:	4b3f      	ldr	r3, [pc, #252]	@ (8014a84 <mem_malloc+0x1f8>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	6978      	ldr	r0, [r7, #20]
 801498c:	1ac3      	subs	r3, r0, r3
 801498e:	b29b      	uxth	r3, r3
 8014990:	1acb      	subs	r3, r1, r3
 8014992:	b29b      	uxth	r3, r3
 8014994:	4413      	add	r3, r2
 8014996:	b29a      	uxth	r2, r3
 8014998:	4b3b      	ldr	r3, [pc, #236]	@ (8014a88 <mem_malloc+0x1fc>)
 801499a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801499e:	4b38      	ldr	r3, [pc, #224]	@ (8014a80 <mem_malloc+0x1f4>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	697a      	ldr	r2, [r7, #20]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d127      	bne.n	80149f8 <mem_malloc+0x16c>
          struct mem *cur = lfree;
 80149a8:	4b35      	ldr	r3, [pc, #212]	@ (8014a80 <mem_malloc+0x1f4>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80149ae:	e005      	b.n	80149bc <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80149b0:	4b34      	ldr	r3, [pc, #208]	@ (8014a84 <mem_malloc+0x1f8>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	69ba      	ldr	r2, [r7, #24]
 80149b6:	8812      	ldrh	r2, [r2, #0]
 80149b8:	4413      	add	r3, r2
 80149ba:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	791b      	ldrb	r3, [r3, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d004      	beq.n	80149ce <mem_malloc+0x142>
 80149c4:	4b31      	ldr	r3, [pc, #196]	@ (8014a8c <mem_malloc+0x200>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	69ba      	ldr	r2, [r7, #24]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d1f0      	bne.n	80149b0 <mem_malloc+0x124>
          }
          lfree = cur;
 80149ce:	4a2c      	ldr	r2, [pc, #176]	@ (8014a80 <mem_malloc+0x1f4>)
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80149d4:	4b2a      	ldr	r3, [pc, #168]	@ (8014a80 <mem_malloc+0x1f4>)
 80149d6:	681a      	ldr	r2, [r3, #0]
 80149d8:	4b2c      	ldr	r3, [pc, #176]	@ (8014a8c <mem_malloc+0x200>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d00b      	beq.n	80149f8 <mem_malloc+0x16c>
 80149e0:	4b27      	ldr	r3, [pc, #156]	@ (8014a80 <mem_malloc+0x1f4>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	791b      	ldrb	r3, [r3, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d006      	beq.n	80149f8 <mem_malloc+0x16c>
 80149ea:	4b29      	ldr	r3, [pc, #164]	@ (8014a90 <mem_malloc+0x204>)
 80149ec:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80149f0:	4928      	ldr	r1, [pc, #160]	@ (8014a94 <mem_malloc+0x208>)
 80149f2:	4829      	ldr	r0, [pc, #164]	@ (8014a98 <mem_malloc+0x20c>)
 80149f4:	f00c fe96 	bl	8021724 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80149f8:	88fa      	ldrh	r2, [r7, #6]
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	4413      	add	r3, r2
 80149fe:	3308      	adds	r3, #8
 8014a00:	4a22      	ldr	r2, [pc, #136]	@ (8014a8c <mem_malloc+0x200>)
 8014a02:	6812      	ldr	r2, [r2, #0]
 8014a04:	4293      	cmp	r3, r2
 8014a06:	d906      	bls.n	8014a16 <mem_malloc+0x18a>
 8014a08:	4b21      	ldr	r3, [pc, #132]	@ (8014a90 <mem_malloc+0x204>)
 8014a0a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8014a0e:	4923      	ldr	r1, [pc, #140]	@ (8014a9c <mem_malloc+0x210>)
 8014a10:	4821      	ldr	r0, [pc, #132]	@ (8014a98 <mem_malloc+0x20c>)
 8014a12:	f00c fe87 	bl	8021724 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	f003 0303 	and.w	r3, r3, #3
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d006      	beq.n	8014a2e <mem_malloc+0x1a2>
 8014a20:	4b1b      	ldr	r3, [pc, #108]	@ (8014a90 <mem_malloc+0x204>)
 8014a22:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8014a26:	491e      	ldr	r1, [pc, #120]	@ (8014aa0 <mem_malloc+0x214>)
 8014a28:	481b      	ldr	r0, [pc, #108]	@ (8014a98 <mem_malloc+0x20c>)
 8014a2a:	f00c fe7b 	bl	8021724 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	f003 0303 	and.w	r3, r3, #3
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d006      	beq.n	8014a46 <mem_malloc+0x1ba>
 8014a38:	4b15      	ldr	r3, [pc, #84]	@ (8014a90 <mem_malloc+0x204>)
 8014a3a:	f240 22d7 	movw	r2, #727	@ 0x2d7
 8014a3e:	4919      	ldr	r1, [pc, #100]	@ (8014aa4 <mem_malloc+0x218>)
 8014a40:	4815      	ldr	r0, [pc, #84]	@ (8014a98 <mem_malloc+0x20c>)
 8014a42:	f00c fe6f 	bl	8021724 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	3308      	adds	r3, #8
 8014a4a:	e015      	b.n	8014a78 <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8014a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8014a84 <mem_malloc+0x1f8>)
 8014a4e:	681a      	ldr	r2, [r3, #0]
 8014a50:	8bfb      	ldrh	r3, [r7, #30]
 8014a52:	4413      	add	r3, r2
 8014a54:	881b      	ldrh	r3, [r3, #0]
 8014a56:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014a58:	8bfa      	ldrh	r2, [r7, #30]
 8014a5a:	88fb      	ldrh	r3, [r7, #6]
 8014a5c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8014a60:	429a      	cmp	r2, r3
 8014a62:	f4ff af35 	bcc.w	80148d0 <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8014a66:	4b08      	ldr	r3, [pc, #32]	@ (8014a88 <mem_malloc+0x1fc>)
 8014a68:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	4b05      	ldr	r3, [pc, #20]	@ (8014a88 <mem_malloc+0x1fc>)
 8014a72:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8014a76:	2300      	movs	r3, #0
}
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3720      	adds	r7, #32
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	20008cb0 	.word	0x20008cb0
 8014a84:	20008ca8 	.word	0x20008ca8
 8014a88:	2000bc24 	.word	0x2000bc24
 8014a8c:	20008cac 	.word	0x20008cac
 8014a90:	0802515c 	.word	0x0802515c
 8014a94:	080252b8 	.word	0x080252b8
 8014a98:	080251a4 	.word	0x080251a4
 8014a9c:	080252d4 	.word	0x080252d4
 8014aa0:	08025304 	.word	0x08025304
 8014aa4:	08025334 	.word	0x08025334

08014aa8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b085      	sub	sp, #20
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	689b      	ldr	r3, [r3, #8]
 8014abc:	3303      	adds	r3, #3
 8014abe:	f023 0303 	bic.w	r3, r3, #3
 8014ac2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	60fb      	str	r3, [r7, #12]
 8014ac8:	e011      	b.n	8014aee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	68db      	ldr	r3, [r3, #12]
 8014ace:	681a      	ldr	r2, [r3, #0]
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	68db      	ldr	r3, [r3, #12]
 8014ad8:	68ba      	ldr	r2, [r7, #8]
 8014ada:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	889b      	ldrh	r3, [r3, #4]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	3301      	adds	r3, #1
 8014aec:	60fb      	str	r3, [r7, #12]
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	88db      	ldrh	r3, [r3, #6]
 8014af2:	461a      	mov	r2, r3
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	4293      	cmp	r3, r2
 8014af8:	dbe7      	blt.n	8014aca <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	687a      	ldr	r2, [r7, #4]
 8014b00:	88d2      	ldrh	r2, [r2, #6]
 8014b02:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014b04:	bf00      	nop
 8014b06:	3714      	adds	r7, #20
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bc80      	pop	{r7}
 8014b0c:	4770      	bx	lr
	...

08014b10 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014b16:	2300      	movs	r3, #0
 8014b18:	80fb      	strh	r3, [r7, #6]
 8014b1a:	e014      	b.n	8014b46 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8014b1c:	88fb      	ldrh	r3, [r7, #6]
 8014b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8014b58 <memp_init+0x48>)
 8014b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff ffbf 	bl	8014aa8 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8014b2a:	88fb      	ldrh	r3, [r7, #6]
 8014b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8014b58 <memp_init+0x48>)
 8014b2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014b32:	88fb      	ldrh	r3, [r7, #6]
 8014b34:	6812      	ldr	r2, [r2, #0]
 8014b36:	4909      	ldr	r1, [pc, #36]	@ (8014b5c <memp_init+0x4c>)
 8014b38:	332c      	adds	r3, #44	@ 0x2c
 8014b3a:	009b      	lsls	r3, r3, #2
 8014b3c:	440b      	add	r3, r1
 8014b3e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014b40:	88fb      	ldrh	r3, [r7, #6]
 8014b42:	3301      	adds	r3, #1
 8014b44:	80fb      	strh	r3, [r7, #6]
 8014b46:	88fb      	ldrh	r3, [r7, #6]
 8014b48:	2b08      	cmp	r3, #8
 8014b4a:	d9e7      	bls.n	8014b1c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014b4c:	bf00      	nop
 8014b4e:	bf00      	nop
 8014b50:	3708      	adds	r7, #8
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	080305d8 	.word	0x080305d8
 8014b5c:	2000bc24 	.word	0x2000bc24

08014b60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d026      	beq.n	8014bc4 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	68db      	ldr	r3, [r3, #12]
 8014b7a:	68fa      	ldr	r2, [r7, #12]
 8014b7c:	6812      	ldr	r2, [r2, #0]
 8014b7e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f003 0303 	and.w	r3, r3, #3
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d006      	beq.n	8014b98 <do_memp_malloc_pool+0x38>
 8014b8a:	4b14      	ldr	r3, [pc, #80]	@ (8014bdc <do_memp_malloc_pool+0x7c>)
 8014b8c:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8014b90:	4913      	ldr	r1, [pc, #76]	@ (8014be0 <do_memp_malloc_pool+0x80>)
 8014b92:	4814      	ldr	r0, [pc, #80]	@ (8014be4 <do_memp_malloc_pool+0x84>)
 8014b94:	f00c fdc6 	bl	8021724 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	889a      	ldrh	r2, [r3, #4]
 8014b9e:	3201      	adds	r2, #1
 8014ba0:	b292      	uxth	r2, r2
 8014ba2:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	889a      	ldrh	r2, [r3, #4]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	88db      	ldrh	r3, [r3, #6]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d905      	bls.n	8014bc0 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	8892      	ldrh	r2, [r2, #4]
 8014bbe:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	e006      	b.n	8014bd2 <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	881a      	ldrh	r2, [r3, #0]
 8014bca:	3201      	adds	r2, #1
 8014bcc:	b292      	uxth	r2, r2
 8014bce:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8014bd0:	2300      	movs	r3, #0
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3710      	adds	r7, #16
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	08025358 	.word	0x08025358
 8014be0:	08025388 	.word	0x08025388
 8014be4:	080253ac 	.word	0x080253ac

08014be8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b084      	sub	sp, #16
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	4603      	mov	r3, r0
 8014bf0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014bf2:	79fb      	ldrb	r3, [r7, #7]
 8014bf4:	2b08      	cmp	r3, #8
 8014bf6:	d908      	bls.n	8014c0a <memp_malloc+0x22>
 8014bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8014c24 <memp_malloc+0x3c>)
 8014bfa:	f240 1287 	movw	r2, #391	@ 0x187
 8014bfe:	490a      	ldr	r1, [pc, #40]	@ (8014c28 <memp_malloc+0x40>)
 8014c00:	480a      	ldr	r0, [pc, #40]	@ (8014c2c <memp_malloc+0x44>)
 8014c02:	f00c fd8f 	bl	8021724 <iprintf>
 8014c06:	2300      	movs	r3, #0
 8014c08:	e008      	b.n	8014c1c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014c0a:	79fb      	ldrb	r3, [r7, #7]
 8014c0c:	4a08      	ldr	r2, [pc, #32]	@ (8014c30 <memp_malloc+0x48>)
 8014c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7ff ffa4 	bl	8014b60 <do_memp_malloc_pool>
 8014c18:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3710      	adds	r7, #16
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	08025358 	.word	0x08025358
 8014c28:	080253e8 	.word	0x080253e8
 8014c2c:	080253ac 	.word	0x080253ac
 8014c30:	080305d8 	.word	0x080305d8

08014c34 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	f003 0303 	and.w	r3, r3, #3
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d006      	beq.n	8014c56 <do_memp_free_pool+0x22>
 8014c48:	4b0d      	ldr	r3, [pc, #52]	@ (8014c80 <do_memp_free_pool+0x4c>)
 8014c4a:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014c4e:	490d      	ldr	r1, [pc, #52]	@ (8014c84 <do_memp_free_pool+0x50>)
 8014c50:	480d      	ldr	r0, [pc, #52]	@ (8014c88 <do_memp_free_pool+0x54>)
 8014c52:	f00c fd67 	bl	8021724 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	889a      	ldrh	r2, [r3, #4]
 8014c60:	3a01      	subs	r2, #1
 8014c62:	b292      	uxth	r2, r2
 8014c64:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	681a      	ldr	r2, [r3, #0]
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	68db      	ldr	r3, [r3, #12]
 8014c74:	68fa      	ldr	r2, [r7, #12]
 8014c76:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8014c78:	bf00      	nop
 8014c7a:	3710      	adds	r7, #16
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	08025358 	.word	0x08025358
 8014c84:	08025408 	.word	0x08025408
 8014c88:	080253ac 	.word	0x080253ac

08014c8c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	4603      	mov	r3, r0
 8014c94:	6039      	str	r1, [r7, #0]
 8014c96:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014c98:	79fb      	ldrb	r3, [r7, #7]
 8014c9a:	2b08      	cmp	r3, #8
 8014c9c:	d907      	bls.n	8014cae <memp_free+0x22>
 8014c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8014cd0 <memp_free+0x44>)
 8014ca0:	f240 12db 	movw	r2, #475	@ 0x1db
 8014ca4:	490b      	ldr	r1, [pc, #44]	@ (8014cd4 <memp_free+0x48>)
 8014ca6:	480c      	ldr	r0, [pc, #48]	@ (8014cd8 <memp_free+0x4c>)
 8014ca8:	f00c fd3c 	bl	8021724 <iprintf>
 8014cac:	e00c      	b.n	8014cc8 <memp_free+0x3c>

  if (mem == NULL) {
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d008      	beq.n	8014cc6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014cb4:	79fb      	ldrb	r3, [r7, #7]
 8014cb6:	4a09      	ldr	r2, [pc, #36]	@ (8014cdc <memp_free+0x50>)
 8014cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cbc:	6839      	ldr	r1, [r7, #0]
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7ff ffb8 	bl	8014c34 <do_memp_free_pool>
 8014cc4:	e000      	b.n	8014cc8 <memp_free+0x3c>
    return;
 8014cc6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014cc8:	3708      	adds	r7, #8
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	08025358 	.word	0x08025358
 8014cd4:	08025428 	.word	0x08025428
 8014cd8:	080253ac 	.word	0x080253ac
 8014cdc:	080305d8 	.word	0x080305d8

08014ce0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014ce4:	bf00      	nop
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bc80      	pop	{r7}
 8014cea:	4770      	bx	lr

08014cec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	60b9      	str	r1, [r7, #8]
 8014cf6:	607a      	str	r2, [r7, #4]
 8014cf8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8014cfa:	69fb      	ldr	r3, [r7, #28]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d105      	bne.n	8014d0c <netif_add+0x20>
 8014d00:	4b24      	ldr	r3, [pc, #144]	@ (8014d94 <netif_add+0xa8>)
 8014d02:	22fb      	movs	r2, #251	@ 0xfb
 8014d04:	4924      	ldr	r1, [pc, #144]	@ (8014d98 <netif_add+0xac>)
 8014d06:	4825      	ldr	r0, [pc, #148]	@ (8014d9c <netif_add+0xb0>)
 8014d08:	f00c fd0c 	bl	8021724 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2200      	movs	r2, #0
 8014d16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2200      	movs	r2, #0
 8014d22:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	3324      	adds	r3, #36	@ 0x24
 8014d2a:	2204      	movs	r2, #4
 8014d2c:	2100      	movs	r1, #0
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f00c fece 	bl	8021ad0 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	2203      	movs	r2, #3
 8014d38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	69ba      	ldr	r2, [r7, #24]
 8014d46:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8014d48:	4b15      	ldr	r3, [pc, #84]	@ (8014da0 <netif_add+0xb4>)
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	1c5a      	adds	r2, r3, #1
 8014d4e:	b2d1      	uxtb	r1, r2
 8014d50:	4a13      	ldr	r2, [pc, #76]	@ (8014da0 <netif_add+0xb4>)
 8014d52:	7011      	strb	r1, [r2, #0]
 8014d54:	68fa      	ldr	r2, [r7, #12]
 8014d56:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
  netif->input = input;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	6a3a      	ldr	r2, [r7, #32]
 8014d5e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	68b9      	ldr	r1, [r7, #8]
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f000 f81e 	bl	8014da8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014d6c:	69fb      	ldr	r3, [r7, #28]
 8014d6e:	68f8      	ldr	r0, [r7, #12]
 8014d70:	4798      	blx	r3
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d001      	beq.n	8014d7c <netif_add+0x90>
    return NULL;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	e007      	b.n	8014d8c <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014d7c:	4b09      	ldr	r3, [pc, #36]	@ (8014da4 <netif_add+0xb8>)
 8014d7e:	681a      	ldr	r2, [r3, #0]
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014d84:	4a07      	ldr	r2, [pc, #28]	@ (8014da4 <netif_add+0xb8>)
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
}
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	3710      	adds	r7, #16
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}
 8014d94:	08025444 	.word	0x08025444
 8014d98:	08025478 	.word	0x08025478
 8014d9c:	08025490 	.word	0x08025490
 8014da0:	2000bc20 	.word	0x2000bc20
 8014da4:	2000bc18 	.word	0x2000bc18

08014da8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
 8014db4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d003      	beq.n	8014dc4 <netif_set_addr+0x1c>
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10c      	bne.n	8014dde <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8014dc4:	68b9      	ldr	r1, [r7, #8]
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	f000 f81a 	bl	8014e00 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8014dcc:	6879      	ldr	r1, [r7, #4]
 8014dce:	68f8      	ldr	r0, [r7, #12]
 8014dd0:	f000 f861 	bl	8014e96 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8014dd4:	6839      	ldr	r1, [r7, #0]
 8014dd6:	68f8      	ldr	r0, [r7, #12]
 8014dd8:	f000 f84a 	bl	8014e70 <netif_set_gw>
 8014ddc:	e00c      	b.n	8014df8 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8014dde:	6879      	ldr	r1, [r7, #4]
 8014de0:	68f8      	ldr	r0, [r7, #12]
 8014de2:	f000 f858 	bl	8014e96 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8014de6:	6839      	ldr	r1, [r7, #0]
 8014de8:	68f8      	ldr	r0, [r7, #12]
 8014dea:	f000 f841 	bl	8014e70 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8014dee:	68b9      	ldr	r1, [r7, #8]
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	f000 f805 	bl	8014e00 <netif_set_ipaddr>
  }
}
 8014df6:	bf00      	nop
 8014df8:	bf00      	nop
 8014dfa:	3710      	adds	r7, #16
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d003      	beq.n	8014e18 <netif_set_ipaddr+0x18>
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	60fb      	str	r3, [r7, #12]
 8014e16:	e002      	b.n	8014e1e <netif_set_ipaddr+0x1e>
 8014e18:	4b14      	ldr	r3, [pc, #80]	@ (8014e6c <netif_set_ipaddr+0x6c>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8014e1e:	68fa      	ldr	r2, [r7, #12]
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	3304      	adds	r3, #4
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d01c      	beq.n	8014e64 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	3304      	adds	r3, #4
 8014e2e:	f107 020c 	add.w	r2, r7, #12
 8014e32:	4611      	mov	r1, r2
 8014e34:	4618      	mov	r0, r3
 8014e36:	f002 fc5b 	bl	80176f0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	3304      	adds	r3, #4
 8014e3e:	f107 020c 	add.w	r2, r7, #12
 8014e42:	4611      	mov	r1, r2
 8014e44:	4618      	mov	r0, r3
 8014e46:	f007 f889 	bl	801bf5c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d002      	beq.n	8014e56 <netif_set_ipaddr+0x56>
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	e000      	b.n	8014e58 <netif_set_ipaddr+0x58>
 8014e56:	2300      	movs	r3, #0
 8014e58:	687a      	ldr	r2, [r7, #4]
 8014e5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014e5c:	2101      	movs	r1, #1
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f000 f868 	bl	8014f34 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8014e64:	bf00      	nop
 8014e66:	3710      	adds	r7, #16
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	0803064c 	.word	0x0803064c

08014e70 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8014e70:	b480      	push	{r7}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d002      	beq.n	8014e86 <netif_set_gw+0x16>
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	e000      	b.n	8014e88 <netif_set_gw+0x18>
 8014e86:	2300      	movs	r3, #0
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8014e8c:	bf00      	nop
 8014e8e:	370c      	adds	r7, #12
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bc80      	pop	{r7}
 8014e94:	4770      	bx	lr

08014e96 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8014e96:	b480      	push	{r7}
 8014e98:	b083      	sub	sp, #12
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	6078      	str	r0, [r7, #4]
 8014e9e:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d002      	beq.n	8014eac <netif_set_netmask+0x16>
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	e000      	b.n	8014eae <netif_set_netmask+0x18>
 8014eac:	2300      	movs	r3, #0
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8014eb2:	bf00      	nop
 8014eb4:	370c      	adds	r7, #12
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bc80      	pop	{r7}
 8014eba:	4770      	bx	lr

08014ebc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014ebc:	b480      	push	{r7}
 8014ebe:	b083      	sub	sp, #12
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014ec4:	4a03      	ldr	r2, [pc, #12]	@ (8014ed4 <netif_set_default+0x18>)
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8014eca:	bf00      	nop
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bc80      	pop	{r7}
 8014ed2:	4770      	bx	lr
 8014ed4:	2000bc1c 	.word	0x2000bc1c

08014ed8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014ee6:	f003 0301 	and.w	r3, r3, #1
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d11c      	bne.n	8014f28 <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014ef4:	f043 0301 	orr.w	r3, r3, #1
 8014ef8:	b2da      	uxtb	r2, r3
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8014f00:	f7f6 fb86 	bl	800b610 <sys_now>
 8014f04:	4603      	mov	r3, r0
 8014f06:	4a0a      	ldr	r2, [pc, #40]	@ (8014f30 <netif_set_up+0x58>)
 8014f08:	fba2 2303 	umull	r2, r3, r2, r3
 8014f0c:	08da      	lsrs	r2, r3, #3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	63da      	str	r2, [r3, #60]	@ 0x3c

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014f18:	f003 0304 	and.w	r3, r3, #4
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d003      	beq.n	8014f28 <netif_set_up+0x50>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8014f20:	2103      	movs	r1, #3
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f000 f806 	bl	8014f34 <netif_issue_reports>
    }
  }
}
 8014f28:	bf00      	nop
 8014f2a:	3708      	adds	r7, #8
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	cccccccd 	.word	0xcccccccd

08014f34 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014f40:	78fb      	ldrb	r3, [r7, #3]
 8014f42:	f003 0301 	and.w	r3, r3, #1
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d011      	beq.n	8014f6e <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	3304      	adds	r3, #4
 8014f4e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d00c      	beq.n	8014f6e <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014f5a:	f003 0308 	and.w	r3, r3, #8
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d005      	beq.n	8014f6e <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	3304      	adds	r3, #4
 8014f66:	4619      	mov	r1, r3
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f009 fe91 	bl	801ec90 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8014f6e:	bf00      	nop
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
	...

08014f78 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014f86:	f003 0301 	and.w	r3, r3, #1
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d01b      	beq.n	8014fc6 <netif_set_down+0x4e>
    netif->flags &= ~NETIF_FLAG_UP;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014f94:	f023 0301 	bic.w	r3, r3, #1
 8014f98:	b2da      	uxtb	r2, r3
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8014fa0:	f7f6 fb36 	bl	800b610 <sys_now>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8014fd0 <netif_set_down+0x58>)
 8014fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8014fac:	08da      	lsrs	r2, r3, #3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014fb8:	f003 0308 	and.w	r3, r3, #8
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d002      	beq.n	8014fc6 <netif_set_down+0x4e>
      etharp_cleanup_netif(netif);
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f009 f97b 	bl	801e2bc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014fc6:	bf00      	nop
 8014fc8:	3708      	adds	r7, #8
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	cccccccd 	.word	0xcccccccd

08014fd4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
  if (netif) {
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d002      	beq.n	8014fea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	683a      	ldr	r2, [r7, #0]
 8014fe8:	61da      	str	r2, [r3, #28]
  }
}
 8014fea:	bf00      	nop
 8014fec:	370c      	adds	r7, #12
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bc80      	pop	{r7}
 8014ff2:	4770      	bx	lr

08014ff4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b082      	sub	sp, #8
 8014ff8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8015034 <pbuf_free_ooseq+0x40>)
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015000:	4b0d      	ldr	r3, [pc, #52]	@ (8015038 <pbuf_free_ooseq+0x44>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	607b      	str	r3, [r7, #4]
 8015006:	e00f      	b.n	8015028 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801500c:	2b00      	cmp	r3, #0
 801500e:	d008      	beq.n	8015022 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015014:	4618      	mov	r0, r3
 8015016:	f001 ffb4 	bl	8016f82 <tcp_segs_free>
      pcb->ooseq = NULL;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2200      	movs	r2, #0
 801501e:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8015020:	e005      	b.n	801502e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	607b      	str	r3, [r7, #4]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d1ec      	bne.n	8015008 <pbuf_free_ooseq+0x14>
    }
  }
}
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}
 8015034:	2000bc21 	.word	0x2000bc21
 8015038:	2000bdc8 	.word	0x2000bdc8

0801503c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801503c:	b480      	push	{r7}
 801503e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8015040:	4b03      	ldr	r3, [pc, #12]	@ (8015050 <pbuf_pool_is_empty+0x14>)
 8015042:	2201      	movs	r2, #1
 8015044:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015046:	bf00      	nop
 8015048:	46bd      	mov	sp, r7
 801504a:	bc80      	pop	{r7}
 801504c:	4770      	bx	lr
 801504e:	bf00      	nop
 8015050:	2000bc21 	.word	0x2000bc21

08015054 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b088      	sub	sp, #32
 8015058:	af00      	add	r7, sp, #0
 801505a:	4603      	mov	r3, r0
 801505c:	71fb      	strb	r3, [r7, #7]
 801505e:	460b      	mov	r3, r1
 8015060:	80bb      	strh	r3, [r7, #4]
 8015062:	4613      	mov	r3, r2
 8015064:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8015066:	79fb      	ldrb	r3, [r7, #7]
 8015068:	2b04      	cmp	r3, #4
 801506a:	d81c      	bhi.n	80150a6 <pbuf_alloc+0x52>
 801506c:	a201      	add	r2, pc, #4	@ (adr r2, 8015074 <pbuf_alloc+0x20>)
 801506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015072:	bf00      	nop
 8015074:	08015089 	.word	0x08015089
 8015078:	0801508f 	.word	0x0801508f
 801507c:	08015095 	.word	0x08015095
 8015080:	0801509b 	.word	0x0801509b
 8015084:	080150a1 	.word	0x080150a1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8015088:	2336      	movs	r3, #54	@ 0x36
 801508a:	82fb      	strh	r3, [r7, #22]
    break;
 801508c:	e014      	b.n	80150b8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801508e:	2322      	movs	r3, #34	@ 0x22
 8015090:	82fb      	strh	r3, [r7, #22]
    break;
 8015092:	e011      	b.n	80150b8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8015094:	230e      	movs	r3, #14
 8015096:	82fb      	strh	r3, [r7, #22]
    break;
 8015098:	e00e      	b.n	80150b8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801509a:	2300      	movs	r3, #0
 801509c:	82fb      	strh	r3, [r7, #22]
    break;
 801509e:	e00b      	b.n	80150b8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80150a0:	2300      	movs	r3, #0
 80150a2:	82fb      	strh	r3, [r7, #22]
    break;
 80150a4:	e008      	b.n	80150b8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80150a6:	4ba1      	ldr	r3, [pc, #644]	@ (801532c <pbuf_alloc+0x2d8>)
 80150a8:	f44f 728b 	mov.w	r2, #278	@ 0x116
 80150ac:	49a0      	ldr	r1, [pc, #640]	@ (8015330 <pbuf_alloc+0x2dc>)
 80150ae:	48a1      	ldr	r0, [pc, #644]	@ (8015334 <pbuf_alloc+0x2e0>)
 80150b0:	f00c fb38 	bl	8021724 <iprintf>
    return NULL;
 80150b4:	2300      	movs	r3, #0
 80150b6:	e15c      	b.n	8015372 <pbuf_alloc+0x31e>
  }

  switch (type) {
 80150b8:	79bb      	ldrb	r3, [r7, #6]
 80150ba:	2b03      	cmp	r3, #3
 80150bc:	d00d      	beq.n	80150da <pbuf_alloc+0x86>
 80150be:	2b03      	cmp	r3, #3
 80150c0:	f300 8146 	bgt.w	8015350 <pbuf_alloc+0x2fc>
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f000 80d0 	beq.w	801526a <pbuf_alloc+0x216>
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f2c0 8140 	blt.w	8015350 <pbuf_alloc+0x2fc>
 80150d0:	3b01      	subs	r3, #1
 80150d2:	2b01      	cmp	r3, #1
 80150d4:	f200 813c 	bhi.w	8015350 <pbuf_alloc+0x2fc>
 80150d8:	e10d      	b.n	80152f6 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80150da:	2008      	movs	r0, #8
 80150dc:	f7ff fd84 	bl	8014be8 <memp_malloc>
 80150e0:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80150e2:	69fb      	ldr	r3, [r7, #28]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d103      	bne.n	80150f0 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80150e8:	f7ff ffa8 	bl	801503c <pbuf_pool_is_empty>
      return NULL;
 80150ec:	2300      	movs	r3, #0
 80150ee:	e140      	b.n	8015372 <pbuf_alloc+0x31e>
    }
    p->type = type;
 80150f0:	69fb      	ldr	r3, [r7, #28]
 80150f2:	79ba      	ldrb	r2, [r7, #6]
 80150f4:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80150f6:	69fb      	ldr	r3, [r7, #28]
 80150f8:	2200      	movs	r2, #0
 80150fa:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80150fc:	8afb      	ldrh	r3, [r7, #22]
 80150fe:	3310      	adds	r3, #16
 8015100:	69fa      	ldr	r2, [r7, #28]
 8015102:	4413      	add	r3, r2
 8015104:	3303      	adds	r3, #3
 8015106:	f023 0303 	bic.w	r3, r3, #3
 801510a:	461a      	mov	r2, r3
 801510c:	69fb      	ldr	r3, [r7, #28]
 801510e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	685b      	ldr	r3, [r3, #4]
 8015114:	f003 0303 	and.w	r3, r3, #3
 8015118:	2b00      	cmp	r3, #0
 801511a:	d006      	beq.n	801512a <pbuf_alloc+0xd6>
 801511c:	4b83      	ldr	r3, [pc, #524]	@ (801532c <pbuf_alloc+0x2d8>)
 801511e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8015122:	4985      	ldr	r1, [pc, #532]	@ (8015338 <pbuf_alloc+0x2e4>)
 8015124:	4883      	ldr	r0, [pc, #524]	@ (8015334 <pbuf_alloc+0x2e0>)
 8015126:	f00c fafd 	bl	8021724 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 801512a:	69fb      	ldr	r3, [r7, #28]
 801512c:	88ba      	ldrh	r2, [r7, #4]
 801512e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8015130:	8afb      	ldrh	r3, [r7, #22]
 8015132:	3303      	adds	r3, #3
 8015134:	f023 0303 	bic.w	r3, r3, #3
 8015138:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 801513c:	88bb      	ldrh	r3, [r7, #4]
 801513e:	4293      	cmp	r3, r2
 8015140:	bf28      	it	cs
 8015142:	4613      	movcs	r3, r2
 8015144:	b29a      	uxth	r2, r3
 8015146:	69fb      	ldr	r3, [r7, #28]
 8015148:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801514a:	69fb      	ldr	r3, [r7, #28]
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	69fa      	ldr	r2, [r7, #28]
 8015150:	8952      	ldrh	r2, [r2, #10]
 8015152:	441a      	add	r2, r3
 8015154:	69fb      	ldr	r3, [r7, #28]
 8015156:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801515a:	429a      	cmp	r2, r3
 801515c:	d906      	bls.n	801516c <pbuf_alloc+0x118>
 801515e:	4b73      	ldr	r3, [pc, #460]	@ (801532c <pbuf_alloc+0x2d8>)
 8015160:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8015164:	4975      	ldr	r1, [pc, #468]	@ (801533c <pbuf_alloc+0x2e8>)
 8015166:	4873      	ldr	r0, [pc, #460]	@ (8015334 <pbuf_alloc+0x2e0>)
 8015168:	f00c fadc 	bl	8021724 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801516c:	8afb      	ldrh	r3, [r7, #22]
 801516e:	3303      	adds	r3, #3
 8015170:	f023 0303 	bic.w	r3, r3, #3
 8015174:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8015178:	d106      	bne.n	8015188 <pbuf_alloc+0x134>
 801517a:	4b6c      	ldr	r3, [pc, #432]	@ (801532c <pbuf_alloc+0x2d8>)
 801517c:	f240 1231 	movw	r2, #305	@ 0x131
 8015180:	496f      	ldr	r1, [pc, #444]	@ (8015340 <pbuf_alloc+0x2ec>)
 8015182:	486c      	ldr	r0, [pc, #432]	@ (8015334 <pbuf_alloc+0x2e0>)
 8015184:	f00c face 	bl	8021724 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8015188:	69fb      	ldr	r3, [r7, #28]
 801518a:	2201      	movs	r2, #1
 801518c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801518e:	69fb      	ldr	r3, [r7, #28]
 8015190:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8015192:	88bb      	ldrh	r3, [r7, #4]
 8015194:	69fa      	ldr	r2, [r7, #28]
 8015196:	8952      	ldrh	r2, [r2, #10]
 8015198:	1a9b      	subs	r3, r3, r2
 801519a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801519c:	e061      	b.n	8015262 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801519e:	2008      	movs	r0, #8
 80151a0:	f7ff fd22 	bl	8014be8 <memp_malloc>
 80151a4:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d106      	bne.n	80151ba <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80151ac:	f7ff ff46 	bl	801503c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80151b0:	69f8      	ldr	r0, [r7, #28]
 80151b2:	f000 fac7 	bl	8015744 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80151b6:	2300      	movs	r3, #0
 80151b8:	e0db      	b.n	8015372 <pbuf_alloc+0x31e>
      }
      q->type = type;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	79ba      	ldrb	r2, [r7, #6]
 80151be:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	2200      	movs	r2, #0
 80151c4:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	2200      	movs	r2, #0
 80151ca:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80151d8:	4293      	cmp	r3, r2
 80151da:	dd06      	ble.n	80151ea <pbuf_alloc+0x196>
 80151dc:	4b53      	ldr	r3, [pc, #332]	@ (801532c <pbuf_alloc+0x2d8>)
 80151de:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 80151e2:	4958      	ldr	r1, [pc, #352]	@ (8015344 <pbuf_alloc+0x2f0>)
 80151e4:	4853      	ldr	r0, [pc, #332]	@ (8015334 <pbuf_alloc+0x2e0>)
 80151e6:	f00c fa9d 	bl	8021724 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	b29a      	uxth	r2, r3
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80151fa:	bf28      	it	cs
 80151fc:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8015200:	b29a      	uxth	r2, r3
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f103 0210 	add.w	r2, r3, #16
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	f003 0303 	and.w	r3, r3, #3
 8015218:	2b00      	cmp	r3, #0
 801521a:	d006      	beq.n	801522a <pbuf_alloc+0x1d6>
 801521c:	4b43      	ldr	r3, [pc, #268]	@ (801532c <pbuf_alloc+0x2d8>)
 801521e:	f240 1251 	movw	r2, #337	@ 0x151
 8015222:	4949      	ldr	r1, [pc, #292]	@ (8015348 <pbuf_alloc+0x2f4>)
 8015224:	4843      	ldr	r0, [pc, #268]	@ (8015334 <pbuf_alloc+0x2e0>)
 8015226:	f00c fa7d 	bl	8021724 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801522a:	69fb      	ldr	r3, [r7, #28]
 801522c:	685b      	ldr	r3, [r3, #4]
 801522e:	69fa      	ldr	r2, [r7, #28]
 8015230:	8952      	ldrh	r2, [r2, #10]
 8015232:	441a      	add	r2, r3
 8015234:	69fb      	ldr	r3, [r7, #28]
 8015236:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801523a:	429a      	cmp	r2, r3
 801523c:	d906      	bls.n	801524c <pbuf_alloc+0x1f8>
 801523e:	4b3b      	ldr	r3, [pc, #236]	@ (801532c <pbuf_alloc+0x2d8>)
 8015240:	f240 1253 	movw	r2, #339	@ 0x153
 8015244:	493d      	ldr	r1, [pc, #244]	@ (801533c <pbuf_alloc+0x2e8>)
 8015246:	483b      	ldr	r0, [pc, #236]	@ (8015334 <pbuf_alloc+0x2e0>)
 8015248:	f00c fa6c 	bl	8021724 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2201      	movs	r2, #1
 8015250:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	895b      	ldrh	r3, [r3, #10]
 8015256:	461a      	mov	r2, r3
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	1a9b      	subs	r3, r3, r2
 801525c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	2b00      	cmp	r3, #0
 8015266:	dc9a      	bgt.n	801519e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8015268:	e07c      	b.n	8015364 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801526a:	8afb      	ldrh	r3, [r7, #22]
 801526c:	3313      	adds	r3, #19
 801526e:	b29b      	uxth	r3, r3
 8015270:	f023 0303 	bic.w	r3, r3, #3
 8015274:	b29a      	uxth	r2, r3
 8015276:	88bb      	ldrh	r3, [r7, #4]
 8015278:	3303      	adds	r3, #3
 801527a:	b29b      	uxth	r3, r3
 801527c:	f023 0303 	bic.w	r3, r3, #3
 8015280:	b29b      	uxth	r3, r3
 8015282:	4413      	add	r3, r2
 8015284:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8015286:	897a      	ldrh	r2, [r7, #10]
 8015288:	88bb      	ldrh	r3, [r7, #4]
 801528a:	3303      	adds	r3, #3
 801528c:	f023 0303 	bic.w	r3, r3, #3
 8015290:	429a      	cmp	r2, r3
 8015292:	d201      	bcs.n	8015298 <pbuf_alloc+0x244>
        return NULL;
 8015294:	2300      	movs	r3, #0
 8015296:	e06c      	b.n	8015372 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8015298:	897b      	ldrh	r3, [r7, #10]
 801529a:	4618      	mov	r0, r3
 801529c:	f7ff faf6 	bl	801488c <mem_malloc>
 80152a0:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80152a2:	69fb      	ldr	r3, [r7, #28]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d101      	bne.n	80152ac <pbuf_alloc+0x258>
      return NULL;
 80152a8:	2300      	movs	r3, #0
 80152aa:	e062      	b.n	8015372 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80152ac:	8afb      	ldrh	r3, [r7, #22]
 80152ae:	3310      	adds	r3, #16
 80152b0:	69fa      	ldr	r2, [r7, #28]
 80152b2:	4413      	add	r3, r2
 80152b4:	3303      	adds	r3, #3
 80152b6:	f023 0303 	bic.w	r3, r3, #3
 80152ba:	461a      	mov	r2, r3
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80152c0:	69fb      	ldr	r3, [r7, #28]
 80152c2:	88ba      	ldrh	r2, [r7, #4]
 80152c4:	811a      	strh	r2, [r3, #8]
 80152c6:	69fb      	ldr	r3, [r7, #28]
 80152c8:	891a      	ldrh	r2, [r3, #8]
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80152ce:	69fb      	ldr	r3, [r7, #28]
 80152d0:	2200      	movs	r2, #0
 80152d2:	601a      	str	r2, [r3, #0]
    p->type = type;
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	79ba      	ldrb	r2, [r7, #6]
 80152d8:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80152da:	69fb      	ldr	r3, [r7, #28]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	f003 0303 	and.w	r3, r3, #3
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d03d      	beq.n	8015362 <pbuf_alloc+0x30e>
 80152e6:	4b11      	ldr	r3, [pc, #68]	@ (801532c <pbuf_alloc+0x2d8>)
 80152e8:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 80152ec:	4917      	ldr	r1, [pc, #92]	@ (801534c <pbuf_alloc+0x2f8>)
 80152ee:	4811      	ldr	r0, [pc, #68]	@ (8015334 <pbuf_alloc+0x2e0>)
 80152f0:	f00c fa18 	bl	8021724 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80152f4:	e035      	b.n	8015362 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80152f6:	2007      	movs	r0, #7
 80152f8:	f7ff fc76 	bl	8014be8 <memp_malloc>
 80152fc:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80152fe:	69fb      	ldr	r3, [r7, #28]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d101      	bne.n	8015308 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8015304:	2300      	movs	r3, #0
 8015306:	e034      	b.n	8015372 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	2200      	movs	r2, #0
 801530c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801530e:	69fb      	ldr	r3, [r7, #28]
 8015310:	88ba      	ldrh	r2, [r7, #4]
 8015312:	811a      	strh	r2, [r3, #8]
 8015314:	69fb      	ldr	r3, [r7, #28]
 8015316:	891a      	ldrh	r2, [r3, #8]
 8015318:	69fb      	ldr	r3, [r7, #28]
 801531a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801531c:	69fb      	ldr	r3, [r7, #28]
 801531e:	2200      	movs	r2, #0
 8015320:	601a      	str	r2, [r3, #0]
    p->type = type;
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	79ba      	ldrb	r2, [r7, #6]
 8015326:	731a      	strb	r2, [r3, #12]
    break;
 8015328:	e01c      	b.n	8015364 <pbuf_alloc+0x310>
 801532a:	bf00      	nop
 801532c:	080254b8 	.word	0x080254b8
 8015330:	080254e8 	.word	0x080254e8
 8015334:	08025504 	.word	0x08025504
 8015338:	0802552c 	.word	0x0802552c
 801533c:	0802555c 	.word	0x0802555c
 8015340:	08025590 	.word	0x08025590
 8015344:	080255c4 	.word	0x080255c4
 8015348:	080255d8 	.word	0x080255d8
 801534c:	08025608 	.word	0x08025608
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015350:	4b0a      	ldr	r3, [pc, #40]	@ (801537c <pbuf_alloc+0x328>)
 8015352:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8015356:	490a      	ldr	r1, [pc, #40]	@ (8015380 <pbuf_alloc+0x32c>)
 8015358:	480a      	ldr	r0, [pc, #40]	@ (8015384 <pbuf_alloc+0x330>)
 801535a:	f00c f9e3 	bl	8021724 <iprintf>
    return NULL;
 801535e:	2300      	movs	r3, #0
 8015360:	e007      	b.n	8015372 <pbuf_alloc+0x31e>
    break;
 8015362:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	2201      	movs	r2, #1
 8015368:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801536a:	69fb      	ldr	r3, [r7, #28]
 801536c:	2200      	movs	r2, #0
 801536e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015370:	69fb      	ldr	r3, [r7, #28]
}
 8015372:	4618      	mov	r0, r3
 8015374:	3720      	adds	r7, #32
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}
 801537a:	bf00      	nop
 801537c:	080254b8 	.word	0x080254b8
 8015380:	08025634 	.word	0x08025634
 8015384:	08025504 	.word	0x08025504

08015388 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	603b      	str	r3, [r7, #0]
 8015390:	4603      	mov	r3, r0
 8015392:	71fb      	strb	r3, [r7, #7]
 8015394:	460b      	mov	r3, r1
 8015396:	80bb      	strh	r3, [r7, #4]
 8015398:	4613      	mov	r3, r2
 801539a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 801539c:	79fb      	ldrb	r3, [r7, #7]
 801539e:	2b04      	cmp	r3, #4
 80153a0:	d81b      	bhi.n	80153da <pbuf_alloced_custom+0x52>
 80153a2:	a201      	add	r2, pc, #4	@ (adr r2, 80153a8 <pbuf_alloced_custom+0x20>)
 80153a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153a8:	080153bd 	.word	0x080153bd
 80153ac:	080153c3 	.word	0x080153c3
 80153b0:	080153c9 	.word	0x080153c9
 80153b4:	080153cf 	.word	0x080153cf
 80153b8:	080153d5 	.word	0x080153d5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80153bc:	2336      	movs	r3, #54	@ 0x36
 80153be:	81fb      	strh	r3, [r7, #14]
    break;
 80153c0:	e014      	b.n	80153ec <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80153c2:	2322      	movs	r3, #34	@ 0x22
 80153c4:	81fb      	strh	r3, [r7, #14]
    break;
 80153c6:	e011      	b.n	80153ec <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80153c8:	230e      	movs	r3, #14
 80153ca:	81fb      	strh	r3, [r7, #14]
    break;
 80153cc:	e00e      	b.n	80153ec <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80153ce:	2300      	movs	r3, #0
 80153d0:	81fb      	strh	r3, [r7, #14]
    break;
 80153d2:	e00b      	b.n	80153ec <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80153d4:	2300      	movs	r3, #0
 80153d6:	81fb      	strh	r3, [r7, #14]
    break;
 80153d8:	e008      	b.n	80153ec <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80153da:	4b1d      	ldr	r3, [pc, #116]	@ (8015450 <pbuf_alloced_custom+0xc8>)
 80153dc:	f240 12c5 	movw	r2, #453	@ 0x1c5
 80153e0:	491c      	ldr	r1, [pc, #112]	@ (8015454 <pbuf_alloced_custom+0xcc>)
 80153e2:	481d      	ldr	r0, [pc, #116]	@ (8015458 <pbuf_alloced_custom+0xd0>)
 80153e4:	f00c f99e 	bl	8021724 <iprintf>
    return NULL;
 80153e8:	2300      	movs	r3, #0
 80153ea:	e02d      	b.n	8015448 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80153ec:	89fb      	ldrh	r3, [r7, #14]
 80153ee:	3303      	adds	r3, #3
 80153f0:	f023 0203 	bic.w	r2, r3, #3
 80153f4:	88bb      	ldrh	r3, [r7, #4]
 80153f6:	441a      	add	r2, r3
 80153f8:	8bbb      	ldrh	r3, [r7, #28]
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d901      	bls.n	8015402 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80153fe:	2300      	movs	r3, #0
 8015400:	e022      	b.n	8015448 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8015402:	683b      	ldr	r3, [r7, #0]
 8015404:	2200      	movs	r2, #0
 8015406:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d008      	beq.n	8015420 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801540e:	89fb      	ldrh	r3, [r7, #14]
 8015410:	3303      	adds	r3, #3
 8015412:	f023 0303 	bic.w	r3, r3, #3
 8015416:	69ba      	ldr	r2, [r7, #24]
 8015418:	441a      	add	r2, r3
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	605a      	str	r2, [r3, #4]
 801541e:	e002      	b.n	8015426 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	2200      	movs	r2, #0
 8015424:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	2202      	movs	r2, #2
 801542a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	88ba      	ldrh	r2, [r7, #4]
 8015430:	811a      	strh	r2, [r3, #8]
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	891a      	ldrh	r2, [r3, #8]
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	79ba      	ldrb	r2, [r7, #6]
 801543e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	2201      	movs	r2, #1
 8015444:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8015446:	683b      	ldr	r3, [r7, #0]
}
 8015448:	4618      	mov	r0, r3
 801544a:	3710      	adds	r7, #16
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}
 8015450:	080254b8 	.word	0x080254b8
 8015454:	08025650 	.word	0x08025650
 8015458:	08025504 	.word	0x08025504

0801545c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b086      	sub	sp, #24
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	460b      	mov	r3, r1
 8015466:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d106      	bne.n	801547c <pbuf_realloc+0x20>
 801546e:	4b4b      	ldr	r3, [pc, #300]	@ (801559c <pbuf_realloc+0x140>)
 8015470:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8015474:	494a      	ldr	r1, [pc, #296]	@ (80155a0 <pbuf_realloc+0x144>)
 8015476:	484b      	ldr	r0, [pc, #300]	@ (80155a4 <pbuf_realloc+0x148>)
 8015478:	f00c f954 	bl	8021724 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	7b1b      	ldrb	r3, [r3, #12]
 8015480:	2b03      	cmp	r3, #3
 8015482:	d012      	beq.n	80154aa <pbuf_realloc+0x4e>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	7b1b      	ldrb	r3, [r3, #12]
 8015488:	2b01      	cmp	r3, #1
 801548a:	d00e      	beq.n	80154aa <pbuf_realloc+0x4e>
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	7b1b      	ldrb	r3, [r3, #12]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d00a      	beq.n	80154aa <pbuf_realloc+0x4e>
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	7b1b      	ldrb	r3, [r3, #12]
 8015498:	2b02      	cmp	r3, #2
 801549a:	d006      	beq.n	80154aa <pbuf_realloc+0x4e>
 801549c:	4b3f      	ldr	r3, [pc, #252]	@ (801559c <pbuf_realloc+0x140>)
 801549e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80154a2:	4941      	ldr	r1, [pc, #260]	@ (80155a8 <pbuf_realloc+0x14c>)
 80154a4:	483f      	ldr	r0, [pc, #252]	@ (80155a4 <pbuf_realloc+0x148>)
 80154a6:	f00c f93d 	bl	8021724 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	891b      	ldrh	r3, [r3, #8]
 80154ae:	887a      	ldrh	r2, [r7, #2]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d26e      	bcs.n	8015592 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80154b4:	887b      	ldrh	r3, [r7, #2]
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	8912      	ldrh	r2, [r2, #8]
 80154ba:	1a9b      	subs	r3, r3, r2
 80154bc:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80154be:	887b      	ldrh	r3, [r7, #2]
 80154c0:	827b      	strh	r3, [r7, #18]
  q = p;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80154c6:	e025      	b.n	8015514 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	895b      	ldrh	r3, [r3, #10]
 80154cc:	8a7a      	ldrh	r2, [r7, #18]
 80154ce:	1ad3      	subs	r3, r2, r3
 80154d0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80154d8:	4293      	cmp	r3, r2
 80154da:	dd06      	ble.n	80154ea <pbuf_realloc+0x8e>
 80154dc:	4b2f      	ldr	r3, [pc, #188]	@ (801559c <pbuf_realloc+0x140>)
 80154de:	f240 220b 	movw	r2, #523	@ 0x20b
 80154e2:	4932      	ldr	r1, [pc, #200]	@ (80155ac <pbuf_realloc+0x150>)
 80154e4:	482f      	ldr	r0, [pc, #188]	@ (80155a4 <pbuf_realloc+0x148>)
 80154e6:	f00c f91d 	bl	8021724 <iprintf>
    q->tot_len += (u16_t)grow;
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	891a      	ldrh	r2, [r3, #8]
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	4413      	add	r3, r2
 80154f4:	b29a      	uxth	r2, r3
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d106      	bne.n	8015514 <pbuf_realloc+0xb8>
 8015506:	4b25      	ldr	r3, [pc, #148]	@ (801559c <pbuf_realloc+0x140>)
 8015508:	f240 220f 	movw	r2, #527	@ 0x20f
 801550c:	4928      	ldr	r1, [pc, #160]	@ (80155b0 <pbuf_realloc+0x154>)
 801550e:	4825      	ldr	r0, [pc, #148]	@ (80155a4 <pbuf_realloc+0x148>)
 8015510:	f00c f908 	bl	8021724 <iprintf>
  while (rem_len > q->len) {
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	895b      	ldrh	r3, [r3, #10]
 8015518:	8a7a      	ldrh	r2, [r7, #18]
 801551a:	429a      	cmp	r2, r3
 801551c:	d8d4      	bhi.n	80154c8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	7b1b      	ldrb	r3, [r3, #12]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d121      	bne.n	801556a <pbuf_realloc+0x10e>
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	895b      	ldrh	r3, [r3, #10]
 801552a:	8a7a      	ldrh	r2, [r7, #18]
 801552c:	429a      	cmp	r2, r3
 801552e:	d01c      	beq.n	801556a <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	7b5b      	ldrb	r3, [r3, #13]
 8015534:	f003 0302 	and.w	r3, r3, #2
 8015538:	2b00      	cmp	r3, #0
 801553a:	d116      	bne.n	801556a <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	685a      	ldr	r2, [r3, #4]
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	1ad3      	subs	r3, r2, r3
 8015544:	b29a      	uxth	r2, r3
 8015546:	8a7b      	ldrh	r3, [r7, #18]
 8015548:	4413      	add	r3, r2
 801554a:	b29b      	uxth	r3, r3
 801554c:	4619      	mov	r1, r3
 801554e:	6978      	ldr	r0, [r7, #20]
 8015550:	f7ff f89e 	bl	8014690 <mem_trim>
 8015554:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d106      	bne.n	801556a <pbuf_realloc+0x10e>
 801555c:	4b0f      	ldr	r3, [pc, #60]	@ (801559c <pbuf_realloc+0x140>)
 801555e:	f240 221d 	movw	r2, #541	@ 0x21d
 8015562:	4914      	ldr	r1, [pc, #80]	@ (80155b4 <pbuf_realloc+0x158>)
 8015564:	480f      	ldr	r0, [pc, #60]	@ (80155a4 <pbuf_realloc+0x148>)
 8015566:	f00c f8dd 	bl	8021724 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	8a7a      	ldrh	r2, [r7, #18]
 801556e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	895a      	ldrh	r2, [r3, #10]
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d004      	beq.n	801558a <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	4618      	mov	r0, r3
 8015586:	f000 f8dd 	bl	8015744 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	2200      	movs	r2, #0
 801558e:	601a      	str	r2, [r3, #0]
 8015590:	e000      	b.n	8015594 <pbuf_realloc+0x138>
    return;
 8015592:	bf00      	nop

}
 8015594:	3718      	adds	r7, #24
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	080254b8 	.word	0x080254b8
 80155a0:	08025674 	.word	0x08025674
 80155a4:	08025504 	.word	0x08025504
 80155a8:	0802568c 	.word	0x0802568c
 80155ac:	080256a8 	.word	0x080256a8
 80155b0:	080256bc 	.word	0x080256bc
 80155b4:	080256d4 	.word	0x080256d4

080155b8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	460b      	mov	r3, r1
 80155c2:	807b      	strh	r3, [r7, #2]
 80155c4:	4613      	mov	r3, r2
 80155c6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d106      	bne.n	80155dc <pbuf_header_impl+0x24>
 80155ce:	4b46      	ldr	r3, [pc, #280]	@ (80156e8 <pbuf_header_impl+0x130>)
 80155d0:	f240 223f 	movw	r2, #575	@ 0x23f
 80155d4:	4945      	ldr	r1, [pc, #276]	@ (80156ec <pbuf_header_impl+0x134>)
 80155d6:	4846      	ldr	r0, [pc, #280]	@ (80156f0 <pbuf_header_impl+0x138>)
 80155d8:	f00c f8a4 	bl	8021724 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80155dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d002      	beq.n	80155ea <pbuf_header_impl+0x32>
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d101      	bne.n	80155ee <pbuf_header_impl+0x36>
    return 0;
 80155ea:	2300      	movs	r3, #0
 80155ec:	e078      	b.n	80156e0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80155ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	da10      	bge.n	8015618 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80155f6:	887b      	ldrh	r3, [r7, #2]
 80155f8:	425b      	negs	r3, r3
 80155fa:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	895b      	ldrh	r3, [r3, #10]
 8015600:	89fa      	ldrh	r2, [r7, #14]
 8015602:	429a      	cmp	r2, r3
 8015604:	d90a      	bls.n	801561c <pbuf_header_impl+0x64>
 8015606:	4b38      	ldr	r3, [pc, #224]	@ (80156e8 <pbuf_header_impl+0x130>)
 8015608:	f240 2247 	movw	r2, #583	@ 0x247
 801560c:	4939      	ldr	r1, [pc, #228]	@ (80156f4 <pbuf_header_impl+0x13c>)
 801560e:	4838      	ldr	r0, [pc, #224]	@ (80156f0 <pbuf_header_impl+0x138>)
 8015610:	f00c f888 	bl	8021724 <iprintf>
 8015614:	2301      	movs	r3, #1
 8015616:	e063      	b.n	80156e0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8015618:	887b      	ldrh	r3, [r7, #2]
 801561a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	7b1b      	ldrb	r3, [r3, #12]
 8015620:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8015628:	89bb      	ldrh	r3, [r7, #12]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d002      	beq.n	8015634 <pbuf_header_impl+0x7c>
 801562e:	89bb      	ldrh	r3, [r7, #12]
 8015630:	2b03      	cmp	r3, #3
 8015632:	d112      	bne.n	801565a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	685a      	ldr	r2, [r3, #4]
 8015638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801563c:	425b      	negs	r3, r3
 801563e:	441a      	add	r2, r3
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	685a      	ldr	r2, [r3, #4]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	3310      	adds	r3, #16
 801564c:	429a      	cmp	r2, r3
 801564e:	d238      	bcs.n	80156c2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	68ba      	ldr	r2, [r7, #8]
 8015654:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8015656:	2301      	movs	r3, #1
 8015658:	e042      	b.n	80156e0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801565a:	89bb      	ldrh	r3, [r7, #12]
 801565c:	2b02      	cmp	r3, #2
 801565e:	d002      	beq.n	8015666 <pbuf_header_impl+0xae>
 8015660:	89bb      	ldrh	r3, [r7, #12]
 8015662:	2b01      	cmp	r3, #1
 8015664:	d124      	bne.n	80156b0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8015666:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801566a:	2b00      	cmp	r3, #0
 801566c:	da0d      	bge.n	801568a <pbuf_header_impl+0xd2>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	895b      	ldrh	r3, [r3, #10]
 8015672:	89fa      	ldrh	r2, [r7, #14]
 8015674:	429a      	cmp	r2, r3
 8015676:	d808      	bhi.n	801568a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	685a      	ldr	r2, [r3, #4]
 801567c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015680:	425b      	negs	r3, r3
 8015682:	441a      	add	r2, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	605a      	str	r2, [r3, #4]
 8015688:	e011      	b.n	80156ae <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801568a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801568e:	2b00      	cmp	r3, #0
 8015690:	dd0b      	ble.n	80156aa <pbuf_header_impl+0xf2>
 8015692:	787b      	ldrb	r3, [r7, #1]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d008      	beq.n	80156aa <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	685a      	ldr	r2, [r3, #4]
 801569c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80156a0:	425b      	negs	r3, r3
 80156a2:	441a      	add	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	605a      	str	r2, [r3, #4]
 80156a8:	e001      	b.n	80156ae <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80156aa:	2301      	movs	r3, #1
 80156ac:	e018      	b.n	80156e0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80156ae:	e008      	b.n	80156c2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80156b0:	4b0d      	ldr	r3, [pc, #52]	@ (80156e8 <pbuf_header_impl+0x130>)
 80156b2:	f240 2277 	movw	r2, #631	@ 0x277
 80156b6:	4910      	ldr	r1, [pc, #64]	@ (80156f8 <pbuf_header_impl+0x140>)
 80156b8:	480d      	ldr	r0, [pc, #52]	@ (80156f0 <pbuf_header_impl+0x138>)
 80156ba:	f00c f833 	bl	8021724 <iprintf>
    return 1;
 80156be:	2301      	movs	r3, #1
 80156c0:	e00e      	b.n	80156e0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	895a      	ldrh	r2, [r3, #10]
 80156c6:	887b      	ldrh	r3, [r7, #2]
 80156c8:	4413      	add	r3, r2
 80156ca:	b29a      	uxth	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	891a      	ldrh	r2, [r3, #8]
 80156d4:	887b      	ldrh	r3, [r7, #2]
 80156d6:	4413      	add	r3, r2
 80156d8:	b29a      	uxth	r2, r3
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80156de:	2300      	movs	r3, #0
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3710      	adds	r7, #16
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	080254b8 	.word	0x080254b8
 80156ec:	080256f0 	.word	0x080256f0
 80156f0:	08025504 	.word	0x08025504
 80156f4:	080256fc 	.word	0x080256fc
 80156f8:	0802571c 	.word	0x0802571c

080156fc <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8015708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801570c:	2200      	movs	r2, #0
 801570e:	4619      	mov	r1, r3
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f7ff ff51 	bl	80155b8 <pbuf_header_impl>
 8015716:	4603      	mov	r3, r0
}
 8015718:	4618      	mov	r0, r3
 801571a:	3708      	adds	r7, #8
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}

08015720 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	460b      	mov	r3, r1
 801572a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 801572c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015730:	2201      	movs	r2, #1
 8015732:	4619      	mov	r1, r3
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f7ff ff3f 	bl	80155b8 <pbuf_header_impl>
 801573a:	4603      	mov	r3, r0
}
 801573c:	4618      	mov	r0, r3
 801573e:	3708      	adds	r7, #8
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}

08015744 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b086      	sub	sp, #24
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d10b      	bne.n	801576a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d106      	bne.n	8015766 <pbuf_free+0x22>
 8015758:	4b3e      	ldr	r3, [pc, #248]	@ (8015854 <pbuf_free+0x110>)
 801575a:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801575e:	493e      	ldr	r1, [pc, #248]	@ (8015858 <pbuf_free+0x114>)
 8015760:	483e      	ldr	r0, [pc, #248]	@ (801585c <pbuf_free+0x118>)
 8015762:	f00b ffdf 	bl	8021724 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015766:	2300      	movs	r3, #0
 8015768:	e070      	b.n	801584c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	7b1b      	ldrb	r3, [r3, #12]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d012      	beq.n	8015798 <pbuf_free+0x54>
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	7b1b      	ldrb	r3, [r3, #12]
 8015776:	2b01      	cmp	r3, #1
 8015778:	d00e      	beq.n	8015798 <pbuf_free+0x54>
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	7b1b      	ldrb	r3, [r3, #12]
 801577e:	2b02      	cmp	r3, #2
 8015780:	d00a      	beq.n	8015798 <pbuf_free+0x54>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	7b1b      	ldrb	r3, [r3, #12]
 8015786:	2b03      	cmp	r3, #3
 8015788:	d006      	beq.n	8015798 <pbuf_free+0x54>
 801578a:	4b32      	ldr	r3, [pc, #200]	@ (8015854 <pbuf_free+0x110>)
 801578c:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8015790:	4933      	ldr	r1, [pc, #204]	@ (8015860 <pbuf_free+0x11c>)
 8015792:	4832      	ldr	r0, [pc, #200]	@ (801585c <pbuf_free+0x118>)
 8015794:	f00b ffc6 	bl	8021724 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8015798:	2300      	movs	r3, #0
 801579a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801579c:	e052      	b.n	8015844 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	89db      	ldrh	r3, [r3, #14]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d106      	bne.n	80157b4 <pbuf_free+0x70>
 80157a6:	4b2b      	ldr	r3, [pc, #172]	@ (8015854 <pbuf_free+0x110>)
 80157a8:	f240 22eb 	movw	r2, #747	@ 0x2eb
 80157ac:	492d      	ldr	r1, [pc, #180]	@ (8015864 <pbuf_free+0x120>)
 80157ae:	482b      	ldr	r0, [pc, #172]	@ (801585c <pbuf_free+0x118>)
 80157b0:	f00b ffb8 	bl	8021724 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	89db      	ldrh	r3, [r3, #14]
 80157b8:	3b01      	subs	r3, #1
 80157ba:	b29a      	uxth	r2, r3
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	81da      	strh	r2, [r3, #14]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	89db      	ldrh	r3, [r3, #14]
 80157c4:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80157c6:	8abb      	ldrh	r3, [r7, #20]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d139      	bne.n	8015840 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	7b1b      	ldrb	r3, [r3, #12]
 80157d6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	7b5b      	ldrb	r3, [r3, #13]
 80157dc:	f003 0302 	and.w	r3, r3, #2
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d011      	beq.n	8015808 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	691b      	ldr	r3, [r3, #16]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d106      	bne.n	80157fe <pbuf_free+0xba>
 80157f0:	4b18      	ldr	r3, [pc, #96]	@ (8015854 <pbuf_free+0x110>)
 80157f2:	f240 22f9 	movw	r2, #761	@ 0x2f9
 80157f6:	491c      	ldr	r1, [pc, #112]	@ (8015868 <pbuf_free+0x124>)
 80157f8:	4818      	ldr	r0, [pc, #96]	@ (801585c <pbuf_free+0x118>)
 80157fa:	f00b ff93 	bl	8021724 <iprintf>
        pc->custom_free_function(p);
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	691b      	ldr	r3, [r3, #16]
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	4798      	blx	r3
 8015806:	e015      	b.n	8015834 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8015808:	89fb      	ldrh	r3, [r7, #14]
 801580a:	2b03      	cmp	r3, #3
 801580c:	d104      	bne.n	8015818 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	2008      	movs	r0, #8
 8015812:	f7ff fa3b 	bl	8014c8c <memp_free>
 8015816:	e00d      	b.n	8015834 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8015818:	89fb      	ldrh	r3, [r7, #14]
 801581a:	2b01      	cmp	r3, #1
 801581c:	d002      	beq.n	8015824 <pbuf_free+0xe0>
 801581e:	89fb      	ldrh	r3, [r7, #14]
 8015820:	2b02      	cmp	r3, #2
 8015822:	d104      	bne.n	801582e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8015824:	6879      	ldr	r1, [r7, #4]
 8015826:	2007      	movs	r0, #7
 8015828:	f7ff fa30 	bl	8014c8c <memp_free>
 801582c:	e002      	b.n	8015834 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f7fe feb2 	bl	8014598 <mem_free>
        }
      }
      count++;
 8015834:	7dfb      	ldrb	r3, [r7, #23]
 8015836:	3301      	adds	r3, #1
 8015838:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	607b      	str	r3, [r7, #4]
 801583e:	e001      	b.n	8015844 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8015840:	2300      	movs	r3, #0
 8015842:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d1a9      	bne.n	801579e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801584a:	7dfb      	ldrb	r3, [r7, #23]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3718      	adds	r7, #24
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	080254b8 	.word	0x080254b8
 8015858:	080256f0 	.word	0x080256f0
 801585c:	08025504 	.word	0x08025504
 8015860:	0802572c 	.word	0x0802572c
 8015864:	08025744 	.word	0x08025744
 8015868:	0802575c 	.word	0x0802575c

0801586c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801586c:	b480      	push	{r7}
 801586e:	b085      	sub	sp, #20
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015874:	2300      	movs	r3, #0
 8015876:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015878:	e005      	b.n	8015886 <pbuf_clen+0x1a>
    ++len;
 801587a:	89fb      	ldrh	r3, [r7, #14]
 801587c:	3301      	adds	r3, #1
 801587e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d1f6      	bne.n	801587a <pbuf_clen+0xe>
  }
  return len;
 801588c:	89fb      	ldrh	r3, [r7, #14]
}
 801588e:	4618      	mov	r0, r3
 8015890:	3714      	adds	r7, #20
 8015892:	46bd      	mov	sp, r7
 8015894:	bc80      	pop	{r7}
 8015896:	4770      	bx	lr

08015898 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d010      	beq.n	80158c8 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	89db      	ldrh	r3, [r3, #14]
 80158aa:	3301      	adds	r3, #1
 80158ac:	b29a      	uxth	r2, r3
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	89db      	ldrh	r3, [r3, #14]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d106      	bne.n	80158c8 <pbuf_ref+0x30>
 80158ba:	4b05      	ldr	r3, [pc, #20]	@ (80158d0 <pbuf_ref+0x38>)
 80158bc:	f240 3239 	movw	r2, #825	@ 0x339
 80158c0:	4904      	ldr	r1, [pc, #16]	@ (80158d4 <pbuf_ref+0x3c>)
 80158c2:	4805      	ldr	r0, [pc, #20]	@ (80158d8 <pbuf_ref+0x40>)
 80158c4:	f00b ff2e 	bl	8021724 <iprintf>
  }
}
 80158c8:	bf00      	nop
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}
 80158d0:	080254b8 	.word	0x080254b8
 80158d4:	08025780 	.word	0x08025780
 80158d8:	08025504 	.word	0x08025504

080158dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d002      	beq.n	80158f2 <pbuf_cat+0x16>
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d107      	bne.n	8015902 <pbuf_cat+0x26>
 80158f2:	4b20      	ldr	r3, [pc, #128]	@ (8015974 <pbuf_cat+0x98>)
 80158f4:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80158f8:	491f      	ldr	r1, [pc, #124]	@ (8015978 <pbuf_cat+0x9c>)
 80158fa:	4820      	ldr	r0, [pc, #128]	@ (801597c <pbuf_cat+0xa0>)
 80158fc:	f00b ff12 	bl	8021724 <iprintf>
 8015900:	e034      	b.n	801596c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	60fb      	str	r3, [r7, #12]
 8015906:	e00a      	b.n	801591e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	891a      	ldrh	r2, [r3, #8]
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	891b      	ldrh	r3, [r3, #8]
 8015910:	4413      	add	r3, r2
 8015912:	b29a      	uxth	r2, r3
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	60fb      	str	r3, [r7, #12]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d1f0      	bne.n	8015908 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	891a      	ldrh	r2, [r3, #8]
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	895b      	ldrh	r3, [r3, #10]
 801592e:	429a      	cmp	r2, r3
 8015930:	d006      	beq.n	8015940 <pbuf_cat+0x64>
 8015932:	4b10      	ldr	r3, [pc, #64]	@ (8015974 <pbuf_cat+0x98>)
 8015934:	f240 3255 	movw	r2, #853	@ 0x355
 8015938:	4911      	ldr	r1, [pc, #68]	@ (8015980 <pbuf_cat+0xa4>)
 801593a:	4810      	ldr	r0, [pc, #64]	@ (801597c <pbuf_cat+0xa0>)
 801593c:	f00b fef2 	bl	8021724 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d006      	beq.n	8015956 <pbuf_cat+0x7a>
 8015948:	4b0a      	ldr	r3, [pc, #40]	@ (8015974 <pbuf_cat+0x98>)
 801594a:	f240 3256 	movw	r2, #854	@ 0x356
 801594e:	490d      	ldr	r1, [pc, #52]	@ (8015984 <pbuf_cat+0xa8>)
 8015950:	480a      	ldr	r0, [pc, #40]	@ (801597c <pbuf_cat+0xa0>)
 8015952:	f00b fee7 	bl	8021724 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	891a      	ldrh	r2, [r3, #8]
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	891b      	ldrh	r3, [r3, #8]
 801595e:	4413      	add	r3, r2
 8015960:	b29a      	uxth	r2, r3
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	683a      	ldr	r2, [r7, #0]
 801596a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801596c:	3710      	adds	r7, #16
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}
 8015972:	bf00      	nop
 8015974:	080254b8 	.word	0x080254b8
 8015978:	08025794 	.word	0x08025794
 801597c:	08025504 	.word	0x08025504
 8015980:	080257cc 	.word	0x080257cc
 8015984:	080257fc 	.word	0x080257fc

08015988 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8015992:	6839      	ldr	r1, [r7, #0]
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f7ff ffa1 	bl	80158dc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801599a:	6838      	ldr	r0, [r7, #0]
 801599c:	f7ff ff7c 	bl	8015898 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80159a0:	bf00      	nop
 80159a2:	3708      	adds	r7, #8
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}

080159a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80159b2:	2300      	movs	r3, #0
 80159b4:	81fb      	strh	r3, [r7, #14]
 80159b6:	2300      	movs	r3, #0
 80159b8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d008      	beq.n	80159d2 <pbuf_copy+0x2a>
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d005      	beq.n	80159d2 <pbuf_copy+0x2a>
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	891a      	ldrh	r2, [r3, #8]
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	891b      	ldrh	r3, [r3, #8]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d209      	bcs.n	80159e6 <pbuf_copy+0x3e>
 80159d2:	4b54      	ldr	r3, [pc, #336]	@ (8015b24 <pbuf_copy+0x17c>)
 80159d4:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 80159d8:	4953      	ldr	r1, [pc, #332]	@ (8015b28 <pbuf_copy+0x180>)
 80159da:	4854      	ldr	r0, [pc, #336]	@ (8015b2c <pbuf_copy+0x184>)
 80159dc:	f00b fea2 	bl	8021724 <iprintf>
 80159e0:	f06f 030f 	mvn.w	r3, #15
 80159e4:	e099      	b.n	8015b1a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	895b      	ldrh	r3, [r3, #10]
 80159ea:	461a      	mov	r2, r3
 80159ec:	89fb      	ldrh	r3, [r7, #14]
 80159ee:	1ad2      	subs	r2, r2, r3
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	895b      	ldrh	r3, [r3, #10]
 80159f4:	4619      	mov	r1, r3
 80159f6:	89bb      	ldrh	r3, [r7, #12]
 80159f8:	1acb      	subs	r3, r1, r3
 80159fa:	429a      	cmp	r2, r3
 80159fc:	db05      	blt.n	8015a0a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	895a      	ldrh	r2, [r3, #10]
 8015a02:	89bb      	ldrh	r3, [r7, #12]
 8015a04:	1ad3      	subs	r3, r2, r3
 8015a06:	817b      	strh	r3, [r7, #10]
 8015a08:	e004      	b.n	8015a14 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	895a      	ldrh	r2, [r3, #10]
 8015a0e:	89fb      	ldrh	r3, [r7, #14]
 8015a10:	1ad3      	subs	r3, r2, r3
 8015a12:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	685a      	ldr	r2, [r3, #4]
 8015a18:	89fb      	ldrh	r3, [r7, #14]
 8015a1a:	18d0      	adds	r0, r2, r3
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	685a      	ldr	r2, [r3, #4]
 8015a20:	89bb      	ldrh	r3, [r7, #12]
 8015a22:	4413      	add	r3, r2
 8015a24:	897a      	ldrh	r2, [r7, #10]
 8015a26:	4619      	mov	r1, r3
 8015a28:	f00c f927 	bl	8021c7a <memcpy>
    offset_to += len;
 8015a2c:	89fa      	ldrh	r2, [r7, #14]
 8015a2e:	897b      	ldrh	r3, [r7, #10]
 8015a30:	4413      	add	r3, r2
 8015a32:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8015a34:	89ba      	ldrh	r2, [r7, #12]
 8015a36:	897b      	ldrh	r3, [r7, #10]
 8015a38:	4413      	add	r3, r2
 8015a3a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	895b      	ldrh	r3, [r3, #10]
 8015a40:	89fa      	ldrh	r2, [r7, #14]
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d906      	bls.n	8015a54 <pbuf_copy+0xac>
 8015a46:	4b37      	ldr	r3, [pc, #220]	@ (8015b24 <pbuf_copy+0x17c>)
 8015a48:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015a4c:	4938      	ldr	r1, [pc, #224]	@ (8015b30 <pbuf_copy+0x188>)
 8015a4e:	4837      	ldr	r0, [pc, #220]	@ (8015b2c <pbuf_copy+0x184>)
 8015a50:	f00b fe68 	bl	8021724 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	895b      	ldrh	r3, [r3, #10]
 8015a58:	89ba      	ldrh	r2, [r7, #12]
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d906      	bls.n	8015a6c <pbuf_copy+0xc4>
 8015a5e:	4b31      	ldr	r3, [pc, #196]	@ (8015b24 <pbuf_copy+0x17c>)
 8015a60:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8015a64:	4933      	ldr	r1, [pc, #204]	@ (8015b34 <pbuf_copy+0x18c>)
 8015a66:	4831      	ldr	r0, [pc, #196]	@ (8015b2c <pbuf_copy+0x184>)
 8015a68:	f00b fe5c 	bl	8021724 <iprintf>
    if (offset_from >= p_from->len) {
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	895b      	ldrh	r3, [r3, #10]
 8015a70:	89ba      	ldrh	r2, [r7, #12]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d304      	bcc.n	8015a80 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	895b      	ldrh	r3, [r3, #10]
 8015a84:	89fa      	ldrh	r2, [r7, #14]
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d114      	bne.n	8015ab4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d10c      	bne.n	8015ab4 <pbuf_copy+0x10c>
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d009      	beq.n	8015ab4 <pbuf_copy+0x10c>
 8015aa0:	4b20      	ldr	r3, [pc, #128]	@ (8015b24 <pbuf_copy+0x17c>)
 8015aa2:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8015aa6:	4924      	ldr	r1, [pc, #144]	@ (8015b38 <pbuf_copy+0x190>)
 8015aa8:	4820      	ldr	r0, [pc, #128]	@ (8015b2c <pbuf_copy+0x184>)
 8015aaa:	f00b fe3b 	bl	8021724 <iprintf>
 8015aae:	f06f 030f 	mvn.w	r3, #15
 8015ab2:	e032      	b.n	8015b1a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d013      	beq.n	8015ae2 <pbuf_copy+0x13a>
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	895a      	ldrh	r2, [r3, #10]
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	891b      	ldrh	r3, [r3, #8]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d10d      	bne.n	8015ae2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d009      	beq.n	8015ae2 <pbuf_copy+0x13a>
 8015ace:	4b15      	ldr	r3, [pc, #84]	@ (8015b24 <pbuf_copy+0x17c>)
 8015ad0:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8015ad4:	4919      	ldr	r1, [pc, #100]	@ (8015b3c <pbuf_copy+0x194>)
 8015ad6:	4815      	ldr	r0, [pc, #84]	@ (8015b2c <pbuf_copy+0x184>)
 8015ad8:	f00b fe24 	bl	8021724 <iprintf>
 8015adc:	f06f 0305 	mvn.w	r3, #5
 8015ae0:	e01b      	b.n	8015b1a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d013      	beq.n	8015b10 <pbuf_copy+0x168>
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	895a      	ldrh	r2, [r3, #10]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	891b      	ldrh	r3, [r3, #8]
 8015af0:	429a      	cmp	r2, r3
 8015af2:	d10d      	bne.n	8015b10 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d009      	beq.n	8015b10 <pbuf_copy+0x168>
 8015afc:	4b09      	ldr	r3, [pc, #36]	@ (8015b24 <pbuf_copy+0x17c>)
 8015afe:	f240 32e2 	movw	r2, #994	@ 0x3e2
 8015b02:	490e      	ldr	r1, [pc, #56]	@ (8015b3c <pbuf_copy+0x194>)
 8015b04:	4809      	ldr	r0, [pc, #36]	@ (8015b2c <pbuf_copy+0x184>)
 8015b06:	f00b fe0d 	bl	8021724 <iprintf>
 8015b0a:	f06f 0305 	mvn.w	r3, #5
 8015b0e:	e004      	b.n	8015b1a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	f47f af67 	bne.w	80159e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8015b18:	2300      	movs	r3, #0
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3710      	adds	r7, #16
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	080254b8 	.word	0x080254b8
 8015b28:	08025848 	.word	0x08025848
 8015b2c:	08025504 	.word	0x08025504
 8015b30:	08025878 	.word	0x08025878
 8015b34:	08025890 	.word	0x08025890
 8015b38:	080258ac 	.word	0x080258ac
 8015b3c:	080258bc 	.word	0x080258bc

08015b40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b088      	sub	sp, #32
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	4611      	mov	r1, r2
 8015b4c:	461a      	mov	r2, r3
 8015b4e:	460b      	mov	r3, r1
 8015b50:	80fb      	strh	r3, [r7, #6]
 8015b52:	4613      	mov	r3, r2
 8015b54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015b56:	2300      	movs	r3, #0
 8015b58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d108      	bne.n	8015b72 <pbuf_copy_partial+0x32>
 8015b60:	4b30      	ldr	r3, [pc, #192]	@ (8015c24 <pbuf_copy_partial+0xe4>)
 8015b62:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8015b66:	4930      	ldr	r1, [pc, #192]	@ (8015c28 <pbuf_copy_partial+0xe8>)
 8015b68:	4830      	ldr	r0, [pc, #192]	@ (8015c2c <pbuf_copy_partial+0xec>)
 8015b6a:	f00b fddb 	bl	8021724 <iprintf>
 8015b6e:	2300      	movs	r3, #0
 8015b70:	e054      	b.n	8015c1c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015b72:	68bb      	ldr	r3, [r7, #8]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d108      	bne.n	8015b8a <pbuf_copy_partial+0x4a>
 8015b78:	4b2a      	ldr	r3, [pc, #168]	@ (8015c24 <pbuf_copy_partial+0xe4>)
 8015b7a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8015b7e:	492c      	ldr	r1, [pc, #176]	@ (8015c30 <pbuf_copy_partial+0xf0>)
 8015b80:	482a      	ldr	r0, [pc, #168]	@ (8015c2c <pbuf_copy_partial+0xec>)
 8015b82:	f00b fdcf 	bl	8021724 <iprintf>
 8015b86:	2300      	movs	r3, #0
 8015b88:	e048      	b.n	8015c1c <pbuf_copy_partial+0xdc>

  left = 0;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d002      	beq.n	8015b9a <pbuf_copy_partial+0x5a>
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d101      	bne.n	8015b9e <pbuf_copy_partial+0x5e>
    return 0;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	e03e      	b.n	8015c1c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	61fb      	str	r3, [r7, #28]
 8015ba2:	e034      	b.n	8015c0e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8015ba4:	88bb      	ldrh	r3, [r7, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d00a      	beq.n	8015bc0 <pbuf_copy_partial+0x80>
 8015baa:	69fb      	ldr	r3, [r7, #28]
 8015bac:	895b      	ldrh	r3, [r3, #10]
 8015bae:	88ba      	ldrh	r2, [r7, #4]
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d305      	bcc.n	8015bc0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8015bb4:	69fb      	ldr	r3, [r7, #28]
 8015bb6:	895b      	ldrh	r3, [r3, #10]
 8015bb8:	88ba      	ldrh	r2, [r7, #4]
 8015bba:	1ad3      	subs	r3, r2, r3
 8015bbc:	80bb      	strh	r3, [r7, #4]
 8015bbe:	e023      	b.n	8015c08 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8015bc0:	69fb      	ldr	r3, [r7, #28]
 8015bc2:	895a      	ldrh	r2, [r3, #10]
 8015bc4:	88bb      	ldrh	r3, [r7, #4]
 8015bc6:	1ad3      	subs	r3, r2, r3
 8015bc8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015bca:	8b3a      	ldrh	r2, [r7, #24]
 8015bcc:	88fb      	ldrh	r3, [r7, #6]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	d901      	bls.n	8015bd6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8015bd2:	88fb      	ldrh	r3, [r7, #6]
 8015bd4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8015bd6:	8b7b      	ldrh	r3, [r7, #26]
 8015bd8:	68ba      	ldr	r2, [r7, #8]
 8015bda:	18d0      	adds	r0, r2, r3
 8015bdc:	69fb      	ldr	r3, [r7, #28]
 8015bde:	685a      	ldr	r2, [r3, #4]
 8015be0:	88bb      	ldrh	r3, [r7, #4]
 8015be2:	4413      	add	r3, r2
 8015be4:	8b3a      	ldrh	r2, [r7, #24]
 8015be6:	4619      	mov	r1, r3
 8015be8:	f00c f847 	bl	8021c7a <memcpy>
      copied_total += buf_copy_len;
 8015bec:	8afa      	ldrh	r2, [r7, #22]
 8015bee:	8b3b      	ldrh	r3, [r7, #24]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8015bf4:	8b7a      	ldrh	r2, [r7, #26]
 8015bf6:	8b3b      	ldrh	r3, [r7, #24]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8015bfc:	88fa      	ldrh	r2, [r7, #6]
 8015bfe:	8b3b      	ldrh	r3, [r7, #24]
 8015c00:	1ad3      	subs	r3, r2, r3
 8015c02:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015c04:	2300      	movs	r3, #0
 8015c06:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	61fb      	str	r3, [r7, #28]
 8015c0e:	88fb      	ldrh	r3, [r7, #6]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d002      	beq.n	8015c1a <pbuf_copy_partial+0xda>
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d1c4      	bne.n	8015ba4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8015c1a:	8afb      	ldrh	r3, [r7, #22]
}
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	3720      	adds	r7, #32
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	080254b8 	.word	0x080254b8
 8015c28:	080258e8 	.word	0x080258e8
 8015c2c:	08025504 	.word	0x08025504
 8015c30:	08025908 	.word	0x08025908

08015c34 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b087      	sub	sp, #28
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	60f8      	str	r0, [r7, #12]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	607a      	str	r2, [r7, #4]
 8015c40:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8015c42:	897b      	ldrh	r3, [r7, #10]
 8015c44:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8015c4a:	e007      	b.n	8015c5c <pbuf_skip_const+0x28>
    offset_left -= q->len;
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	895b      	ldrh	r3, [r3, #10]
 8015c50:	8afa      	ldrh	r2, [r7, #22]
 8015c52:	1ad3      	subs	r3, r2, r3
 8015c54:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8015c5c:	693b      	ldr	r3, [r7, #16]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d004      	beq.n	8015c6c <pbuf_skip_const+0x38>
 8015c62:	693b      	ldr	r3, [r7, #16]
 8015c64:	895b      	ldrh	r3, [r3, #10]
 8015c66:	8afa      	ldrh	r2, [r7, #22]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d2ef      	bcs.n	8015c4c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d002      	beq.n	8015c78 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	8afa      	ldrh	r2, [r7, #22]
 8015c76:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8015c78:	693b      	ldr	r3, [r7, #16]
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	371c      	adds	r7, #28
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bc80      	pop	{r7}
 8015c82:	4770      	bx	lr

08015c84 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b086      	sub	sp, #24
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	607a      	str	r2, [r7, #4]
 8015c90:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 8015c92:	897b      	ldrh	r3, [r7, #10]
 8015c94:	687a      	ldr	r2, [r7, #4]
 8015c96:	4619      	mov	r1, r3
 8015c98:	68f8      	ldr	r0, [r7, #12]
 8015c9a:	f7ff ffcb 	bl	8015c34 <pbuf_skip_const>
 8015c9e:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 8015ca0:	697b      	ldr	r3, [r7, #20]
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3718      	adds	r7, #24
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
	...

08015cac <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b088      	sub	sp, #32
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	60f8      	str	r0, [r7, #12]
 8015cb4:	60b9      	str	r1, [r7, #8]
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8015cba:	88fb      	ldrh	r3, [r7, #6]
 8015cbc:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d109      	bne.n	8015cdc <pbuf_take+0x30>
 8015cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8015db4 <pbuf_take+0x108>)
 8015cca:	f240 4284 	movw	r2, #1156	@ 0x484
 8015cce:	493a      	ldr	r1, [pc, #232]	@ (8015db8 <pbuf_take+0x10c>)
 8015cd0:	483a      	ldr	r0, [pc, #232]	@ (8015dbc <pbuf_take+0x110>)
 8015cd2:	f00b fd27 	bl	8021724 <iprintf>
 8015cd6:	f06f 030f 	mvn.w	r3, #15
 8015cda:	e066      	b.n	8015daa <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d109      	bne.n	8015cf6 <pbuf_take+0x4a>
 8015ce2:	4b34      	ldr	r3, [pc, #208]	@ (8015db4 <pbuf_take+0x108>)
 8015ce4:	f240 4285 	movw	r2, #1157	@ 0x485
 8015ce8:	4935      	ldr	r1, [pc, #212]	@ (8015dc0 <pbuf_take+0x114>)
 8015cea:	4834      	ldr	r0, [pc, #208]	@ (8015dbc <pbuf_take+0x110>)
 8015cec:	f00b fd1a 	bl	8021724 <iprintf>
 8015cf0:	f06f 030f 	mvn.w	r3, #15
 8015cf4:	e059      	b.n	8015daa <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	891b      	ldrh	r3, [r3, #8]
 8015cfa:	88fa      	ldrh	r2, [r7, #6]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d909      	bls.n	8015d14 <pbuf_take+0x68>
 8015d00:	4b2c      	ldr	r3, [pc, #176]	@ (8015db4 <pbuf_take+0x108>)
 8015d02:	f240 4286 	movw	r2, #1158	@ 0x486
 8015d06:	492f      	ldr	r1, [pc, #188]	@ (8015dc4 <pbuf_take+0x118>)
 8015d08:	482c      	ldr	r0, [pc, #176]	@ (8015dbc <pbuf_take+0x110>)
 8015d0a:	f00b fd0b 	bl	8021724 <iprintf>
 8015d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d12:	e04a      	b.n	8015daa <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d007      	beq.n	8015d2a <pbuf_take+0x7e>
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d004      	beq.n	8015d2a <pbuf_take+0x7e>
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	891b      	ldrh	r3, [r3, #8]
 8015d24:	88fa      	ldrh	r2, [r7, #6]
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d902      	bls.n	8015d30 <pbuf_take+0x84>
    return ERR_ARG;
 8015d2a:	f06f 030f 	mvn.w	r3, #15
 8015d2e:	e03c      	b.n	8015daa <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	61fb      	str	r3, [r7, #28]
 8015d34:	e027      	b.n	8015d86 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d106      	bne.n	8015d4a <pbuf_take+0x9e>
 8015d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8015db4 <pbuf_take+0x108>)
 8015d3e:	f240 428e 	movw	r2, #1166	@ 0x48e
 8015d42:	4921      	ldr	r1, [pc, #132]	@ (8015dc8 <pbuf_take+0x11c>)
 8015d44:	481d      	ldr	r0, [pc, #116]	@ (8015dbc <pbuf_take+0x110>)
 8015d46:	f00b fced 	bl	8021724 <iprintf>
    buf_copy_len = total_copy_len;
 8015d4a:	8b3b      	ldrh	r3, [r7, #24]
 8015d4c:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	895b      	ldrh	r3, [r3, #10]
 8015d52:	8b7a      	ldrh	r2, [r7, #26]
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d902      	bls.n	8015d5e <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	895b      	ldrh	r3, [r3, #10]
 8015d5c:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	6858      	ldr	r0, [r3, #4]
 8015d62:	8afb      	ldrh	r3, [r7, #22]
 8015d64:	68ba      	ldr	r2, [r7, #8]
 8015d66:	4413      	add	r3, r2
 8015d68:	8b7a      	ldrh	r2, [r7, #26]
 8015d6a:	4619      	mov	r1, r3
 8015d6c:	f00b ff85 	bl	8021c7a <memcpy>
    total_copy_len -= buf_copy_len;
 8015d70:	8b3a      	ldrh	r2, [r7, #24]
 8015d72:	8b7b      	ldrh	r3, [r7, #26]
 8015d74:	1ad3      	subs	r3, r2, r3
 8015d76:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8015d78:	8afa      	ldrh	r2, [r7, #22]
 8015d7a:	8b7b      	ldrh	r3, [r7, #26]
 8015d7c:	4413      	add	r3, r2
 8015d7e:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	61fb      	str	r3, [r7, #28]
 8015d86:	8b3b      	ldrh	r3, [r7, #24]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d1d4      	bne.n	8015d36 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8015d8c:	8b3b      	ldrh	r3, [r7, #24]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d103      	bne.n	8015d9a <pbuf_take+0xee>
 8015d92:	8afa      	ldrh	r2, [r7, #22]
 8015d94:	88fb      	ldrh	r3, [r7, #6]
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d006      	beq.n	8015da8 <pbuf_take+0xfc>
 8015d9a:	4b06      	ldr	r3, [pc, #24]	@ (8015db4 <pbuf_take+0x108>)
 8015d9c:	f240 4299 	movw	r2, #1177	@ 0x499
 8015da0:	490a      	ldr	r1, [pc, #40]	@ (8015dcc <pbuf_take+0x120>)
 8015da2:	4806      	ldr	r0, [pc, #24]	@ (8015dbc <pbuf_take+0x110>)
 8015da4:	f00b fcbe 	bl	8021724 <iprintf>
  return ERR_OK;
 8015da8:	2300      	movs	r3, #0
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3720      	adds	r7, #32
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
 8015db2:	bf00      	nop
 8015db4:	080254b8 	.word	0x080254b8
 8015db8:	0802592c 	.word	0x0802592c
 8015dbc:	08025504 	.word	0x08025504
 8015dc0:	08025944 	.word	0x08025944
 8015dc4:	08025960 	.word	0x08025960
 8015dc8:	08025980 	.word	0x08025980
 8015dcc:	08025998 	.word	0x08025998

08015dd0 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b088      	sub	sp, #32
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	60f8      	str	r0, [r7, #12]
 8015dd8:	60b9      	str	r1, [r7, #8]
 8015dda:	4611      	mov	r1, r2
 8015ddc:	461a      	mov	r2, r3
 8015dde:	460b      	mov	r3, r1
 8015de0:	80fb      	strh	r3, [r7, #6]
 8015de2:	4613      	mov	r3, r2
 8015de4:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 8015de6:	f107 0210 	add.w	r2, r7, #16
 8015dea:	88bb      	ldrh	r3, [r7, #4]
 8015dec:	4619      	mov	r1, r3
 8015dee:	68f8      	ldr	r0, [r7, #12]
 8015df0:	f7ff ff48 	bl	8015c84 <pbuf_skip>
 8015df4:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8015df6:	69fb      	ldr	r3, [r7, #28]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d035      	beq.n	8015e68 <pbuf_take_at+0x98>
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	891b      	ldrh	r3, [r3, #8]
 8015e00:	461a      	mov	r2, r3
 8015e02:	8a3b      	ldrh	r3, [r7, #16]
 8015e04:	4619      	mov	r1, r3
 8015e06:	88fb      	ldrh	r3, [r7, #6]
 8015e08:	440b      	add	r3, r1
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	db2c      	blt.n	8015e68 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 8015e0e:	88fb      	ldrh	r3, [r7, #6]
 8015e10:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 8015e16:	88fa      	ldrh	r2, [r7, #6]
 8015e18:	69fb      	ldr	r3, [r7, #28]
 8015e1a:	895b      	ldrh	r3, [r3, #10]
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	8a3b      	ldrh	r3, [r7, #16]
 8015e20:	1acb      	subs	r3, r1, r3
 8015e22:	4293      	cmp	r3, r2
 8015e24:	bfa8      	it	ge
 8015e26:	4613      	movge	r3, r2
 8015e28:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	8a3a      	ldrh	r2, [r7, #16]
 8015e30:	4413      	add	r3, r2
 8015e32:	8a7a      	ldrh	r2, [r7, #18]
 8015e34:	68b9      	ldr	r1, [r7, #8]
 8015e36:	4618      	mov	r0, r3
 8015e38:	f00b ff1f 	bl	8021c7a <memcpy>
    remaining_len -= first_copy_len;
 8015e3c:	8b7a      	ldrh	r2, [r7, #26]
 8015e3e:	8a7b      	ldrh	r3, [r7, #18]
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8015e44:	8a7b      	ldrh	r3, [r7, #18]
 8015e46:	697a      	ldr	r2, [r7, #20]
 8015e48:	4413      	add	r3, r2
 8015e4a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8015e4c:	8b7b      	ldrh	r3, [r7, #26]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d008      	beq.n	8015e64 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8015e52:	69fb      	ldr	r3, [r7, #28]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	8b7a      	ldrh	r2, [r7, #26]
 8015e58:	6979      	ldr	r1, [r7, #20]
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7ff ff26 	bl	8015cac <pbuf_take>
 8015e60:	4603      	mov	r3, r0
 8015e62:	e003      	b.n	8015e6c <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 8015e64:	2300      	movs	r3, #0
 8015e66:	e001      	b.n	8015e6c <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 8015e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3720      	adds	r7, #32
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8015e74:	b480      	push	{r7}
 8015e76:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8015e78:	bf00      	nop
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bc80      	pop	{r7}
 8015e7e:	4770      	bx	lr

08015e80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015e80:	b480      	push	{r7}
 8015e82:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8015e84:	bf00      	nop
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bc80      	pop	{r7}
 8015e8a:	4770      	bx	lr

08015e8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015e90:	f000 ffaa 	bl	8016de8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015e94:	4b07      	ldr	r3, [pc, #28]	@ (8015eb4 <tcp_tmr+0x28>)
 8015e96:	781b      	ldrb	r3, [r3, #0]
 8015e98:	3301      	adds	r3, #1
 8015e9a:	b2da      	uxtb	r2, r3
 8015e9c:	4b05      	ldr	r3, [pc, #20]	@ (8015eb4 <tcp_tmr+0x28>)
 8015e9e:	701a      	strb	r2, [r3, #0]
 8015ea0:	4b04      	ldr	r3, [pc, #16]	@ (8015eb4 <tcp_tmr+0x28>)
 8015ea2:	781b      	ldrb	r3, [r3, #0]
 8015ea4:	f003 0301 	and.w	r3, r3, #1
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d001      	beq.n	8015eb0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015eac:	f000 fcd8 	bl	8016860 <tcp_slowtmr>
  }
}
 8015eb0:	bf00      	nop
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	2000bdd1 	.word	0x2000bdd1

08015eb8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b085      	sub	sp, #20
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	60fb      	str	r3, [r7, #12]
 8015ec6:	e00a      	b.n	8015ede <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ecc:	683a      	ldr	r2, [r7, #0]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d102      	bne.n	8015ed8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	68db      	ldr	r3, [r3, #12]
 8015edc:	60fb      	str	r3, [r7, #12]
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d1f1      	bne.n	8015ec8 <tcp_remove_listener+0x10>
      }
   }
}
 8015ee4:	bf00      	nop
 8015ee6:	bf00      	nop
 8015ee8:	3714      	adds	r7, #20
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bc80      	pop	{r7}
 8015eee:	4770      	bx	lr

08015ef0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b084      	sub	sp, #16
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d105      	bne.n	8015f0a <tcp_listen_closed+0x1a>
 8015efe:	4b13      	ldr	r3, [pc, #76]	@ (8015f4c <tcp_listen_closed+0x5c>)
 8015f00:	22c0      	movs	r2, #192	@ 0xc0
 8015f02:	4913      	ldr	r1, [pc, #76]	@ (8015f50 <tcp_listen_closed+0x60>)
 8015f04:	4813      	ldr	r0, [pc, #76]	@ (8015f54 <tcp_listen_closed+0x64>)
 8015f06:	f00b fc0d 	bl	8021724 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	7d1b      	ldrb	r3, [r3, #20]
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	d005      	beq.n	8015f1e <tcp_listen_closed+0x2e>
 8015f12:	4b0e      	ldr	r3, [pc, #56]	@ (8015f4c <tcp_listen_closed+0x5c>)
 8015f14:	22c1      	movs	r2, #193	@ 0xc1
 8015f16:	4910      	ldr	r1, [pc, #64]	@ (8015f58 <tcp_listen_closed+0x68>)
 8015f18:	480e      	ldr	r0, [pc, #56]	@ (8015f54 <tcp_listen_closed+0x64>)
 8015f1a:	f00b fc03 	bl	8021724 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015f1e:	2301      	movs	r3, #1
 8015f20:	60fb      	str	r3, [r7, #12]
 8015f22:	e00b      	b.n	8015f3c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8015f24:	4a0d      	ldr	r2, [pc, #52]	@ (8015f5c <tcp_listen_closed+0x6c>)
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	6879      	ldr	r1, [r7, #4]
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7ff ffc1 	bl	8015eb8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	3301      	adds	r3, #1
 8015f3a:	60fb      	str	r3, [r7, #12]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	2b03      	cmp	r3, #3
 8015f40:	d9f0      	bls.n	8015f24 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015f42:	bf00      	nop
 8015f44:	bf00      	nop
 8015f46:	3710      	adds	r7, #16
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd80      	pop	{r7, pc}
 8015f4c:	08025a3c 	.word	0x08025a3c
 8015f50:	08025a6c 	.word	0x08025a6c
 8015f54:	08025a78 	.word	0x08025a78
 8015f58:	08025aa0 	.word	0x08025aa0
 8015f5c:	08030614 	.word	0x08030614

08015f60 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015f60:	b5b0      	push	{r4, r5, r7, lr}
 8015f62:	b086      	sub	sp, #24
 8015f64:	af02      	add	r7, sp, #8
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015f6c:	78fb      	ldrb	r3, [r7, #3]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d075      	beq.n	801605e <tcp_close_shutdown+0xfe>
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	7d1b      	ldrb	r3, [r3, #20]
 8015f76:	2b04      	cmp	r3, #4
 8015f78:	d003      	beq.n	8015f82 <tcp_close_shutdown+0x22>
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	7d1b      	ldrb	r3, [r3, #20]
 8015f7e:	2b07      	cmp	r3, #7
 8015f80:	d16d      	bne.n	801605e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d104      	bne.n	8015f94 <tcp_close_shutdown+0x34>
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f8e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015f92:	d064      	beq.n	801605e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	7e9b      	ldrb	r3, [r3, #26]
 8015f98:	f003 0310 	and.w	r3, r3, #16
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d106      	bne.n	8015fae <tcp_close_shutdown+0x4e>
 8015fa0:	4b5e      	ldr	r3, [pc, #376]	@ (801611c <tcp_close_shutdown+0x1bc>)
 8015fa2:	f240 120f 	movw	r2, #271	@ 0x10f
 8015fa6:	495e      	ldr	r1, [pc, #376]	@ (8016120 <tcp_close_shutdown+0x1c0>)
 8015fa8:	485e      	ldr	r0, [pc, #376]	@ (8016124 <tcp_close_shutdown+0x1c4>)
 8015faa:	f00b fbbb 	bl	8021724 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015fb6:	687c      	ldr	r4, [r7, #4]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	1d1d      	adds	r5, r3, #4
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	8adb      	ldrh	r3, [r3, #22]
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	8b12      	ldrh	r2, [r2, #24]
 8015fc4:	9201      	str	r2, [sp, #4]
 8015fc6:	9300      	str	r3, [sp, #0]
 8015fc8:	462b      	mov	r3, r5
 8015fca:	4622      	mov	r2, r4
 8015fcc:	f004 fffc 	bl	801afc8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f001 fa73 	bl	80174bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015fd6:	4b54      	ldr	r3, [pc, #336]	@ (8016128 <tcp_close_shutdown+0x1c8>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	d105      	bne.n	8015fec <tcp_close_shutdown+0x8c>
 8015fe0:	4b51      	ldr	r3, [pc, #324]	@ (8016128 <tcp_close_shutdown+0x1c8>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	4a50      	ldr	r2, [pc, #320]	@ (8016128 <tcp_close_shutdown+0x1c8>)
 8015fe8:	6013      	str	r3, [r2, #0]
 8015fea:	e013      	b.n	8016014 <tcp_close_shutdown+0xb4>
 8015fec:	4b4e      	ldr	r3, [pc, #312]	@ (8016128 <tcp_close_shutdown+0x1c8>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	60fb      	str	r3, [r7, #12]
 8015ff2:	e00c      	b.n	801600e <tcp_close_shutdown+0xae>
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	68db      	ldr	r3, [r3, #12]
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d104      	bne.n	8016008 <tcp_close_shutdown+0xa8>
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	68da      	ldr	r2, [r3, #12]
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	60da      	str	r2, [r3, #12]
 8016006:	e005      	b.n	8016014 <tcp_close_shutdown+0xb4>
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	68db      	ldr	r3, [r3, #12]
 801600c:	60fb      	str	r3, [r7, #12]
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d1ef      	bne.n	8015ff4 <tcp_close_shutdown+0x94>
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2200      	movs	r2, #0
 8016018:	60da      	str	r2, [r3, #12]
 801601a:	4b44      	ldr	r3, [pc, #272]	@ (801612c <tcp_close_shutdown+0x1cc>)
 801601c:	2201      	movs	r2, #1
 801601e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	7d1b      	ldrb	r3, [r3, #20]
 8016024:	2b04      	cmp	r3, #4
 8016026:	d10c      	bne.n	8016042 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	220a      	movs	r2, #10
 801602c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801602e:	4b40      	ldr	r3, [pc, #256]	@ (8016130 <tcp_close_shutdown+0x1d0>)
 8016030:	681a      	ldr	r2, [r3, #0]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	60da      	str	r2, [r3, #12]
 8016036:	4a3e      	ldr	r2, [pc, #248]	@ (8016130 <tcp_close_shutdown+0x1d0>)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6013      	str	r3, [r2, #0]
 801603c:	f005 fa3c 	bl	801b4b8 <tcp_timer_needed>
 8016040:	e00b      	b.n	801605a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8016042:	4b3c      	ldr	r3, [pc, #240]	@ (8016134 <tcp_close_shutdown+0x1d4>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	687a      	ldr	r2, [r7, #4]
 8016048:	429a      	cmp	r2, r3
 801604a:	d102      	bne.n	8016052 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 801604c:	f003 fe12 	bl	8019c74 <tcp_trigger_input_pcb_close>
 8016050:	e003      	b.n	801605a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8016052:	6879      	ldr	r1, [r7, #4]
 8016054:	2001      	movs	r0, #1
 8016056:	f7fe fe19 	bl	8014c8c <memp_free>
        }
      }
      return ERR_OK;
 801605a:	2300      	movs	r3, #0
 801605c:	e05a      	b.n	8016114 <tcp_close_shutdown+0x1b4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	7d1b      	ldrb	r3, [r3, #20]
 8016062:	2b02      	cmp	r3, #2
 8016064:	d03d      	beq.n	80160e2 <tcp_close_shutdown+0x182>
 8016066:	2b02      	cmp	r3, #2
 8016068:	dc4e      	bgt.n	8016108 <tcp_close_shutdown+0x1a8>
 801606a:	2b00      	cmp	r3, #0
 801606c:	d002      	beq.n	8016074 <tcp_close_shutdown+0x114>
 801606e:	2b01      	cmp	r3, #1
 8016070:	d02b      	beq.n	80160ca <tcp_close_shutdown+0x16a>
 8016072:	e049      	b.n	8016108 <tcp_close_shutdown+0x1a8>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	8adb      	ldrh	r3, [r3, #22]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d021      	beq.n	80160c0 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801607c:	4b2e      	ldr	r3, [pc, #184]	@ (8016138 <tcp_close_shutdown+0x1d8>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	429a      	cmp	r2, r3
 8016084:	d105      	bne.n	8016092 <tcp_close_shutdown+0x132>
 8016086:	4b2c      	ldr	r3, [pc, #176]	@ (8016138 <tcp_close_shutdown+0x1d8>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	68db      	ldr	r3, [r3, #12]
 801608c:	4a2a      	ldr	r2, [pc, #168]	@ (8016138 <tcp_close_shutdown+0x1d8>)
 801608e:	6013      	str	r3, [r2, #0]
 8016090:	e013      	b.n	80160ba <tcp_close_shutdown+0x15a>
 8016092:	4b29      	ldr	r3, [pc, #164]	@ (8016138 <tcp_close_shutdown+0x1d8>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	60bb      	str	r3, [r7, #8]
 8016098:	e00c      	b.n	80160b4 <tcp_close_shutdown+0x154>
 801609a:	68bb      	ldr	r3, [r7, #8]
 801609c:	68db      	ldr	r3, [r3, #12]
 801609e:	687a      	ldr	r2, [r7, #4]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	d104      	bne.n	80160ae <tcp_close_shutdown+0x14e>
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	68da      	ldr	r2, [r3, #12]
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	60da      	str	r2, [r3, #12]
 80160ac:	e005      	b.n	80160ba <tcp_close_shutdown+0x15a>
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	68db      	ldr	r3, [r3, #12]
 80160b2:	60bb      	str	r3, [r7, #8]
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d1ef      	bne.n	801609a <tcp_close_shutdown+0x13a>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2200      	movs	r2, #0
 80160be:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80160c0:	6879      	ldr	r1, [r7, #4]
 80160c2:	2001      	movs	r0, #1
 80160c4:	f7fe fde2 	bl	8014c8c <memp_free>
    break;
 80160c8:	e023      	b.n	8016112 <tcp_close_shutdown+0x1b2>
  case LISTEN:
    tcp_listen_closed(pcb);
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7ff ff10 	bl	8015ef0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80160d0:	6879      	ldr	r1, [r7, #4]
 80160d2:	481a      	ldr	r0, [pc, #104]	@ (801613c <tcp_close_shutdown+0x1dc>)
 80160d4:	f001 fa34 	bl	8017540 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80160d8:	6879      	ldr	r1, [r7, #4]
 80160da:	2002      	movs	r0, #2
 80160dc:	f7fe fdd6 	bl	8014c8c <memp_free>
    break;
 80160e0:	e017      	b.n	8016112 <tcp_close_shutdown+0x1b2>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80160e2:	6879      	ldr	r1, [r7, #4]
 80160e4:	4810      	ldr	r0, [pc, #64]	@ (8016128 <tcp_close_shutdown+0x1c8>)
 80160e6:	f001 fa2b 	bl	8017540 <tcp_pcb_remove>
 80160ea:	4b10      	ldr	r3, [pc, #64]	@ (801612c <tcp_close_shutdown+0x1cc>)
 80160ec:	2201      	movs	r2, #1
 80160ee:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80160f0:	6879      	ldr	r1, [r7, #4]
 80160f2:	2001      	movs	r0, #1
 80160f4:	f7fe fdca 	bl	8014c8c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
 80160f8:	4b11      	ldr	r3, [pc, #68]	@ (8016140 <tcp_close_shutdown+0x1e0>)
 80160fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80160fe:	3301      	adds	r3, #1
 8016100:	4a0f      	ldr	r2, [pc, #60]	@ (8016140 <tcp_close_shutdown+0x1e0>)
 8016102:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
    break;
 8016106:	e004      	b.n	8016112 <tcp_close_shutdown+0x1b2>
  default:
    return tcp_close_shutdown_fin(pcb);
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 f81b 	bl	8016144 <tcp_close_shutdown_fin>
 801610e:	4603      	mov	r3, r0
 8016110:	e000      	b.n	8016114 <tcp_close_shutdown+0x1b4>
  }
  return ERR_OK;
 8016112:	2300      	movs	r3, #0
}
 8016114:	4618      	mov	r0, r3
 8016116:	3710      	adds	r7, #16
 8016118:	46bd      	mov	sp, r7
 801611a:	bdb0      	pop	{r4, r5, r7, pc}
 801611c:	08025a3c 	.word	0x08025a3c
 8016120:	08025ab8 	.word	0x08025ab8
 8016124:	08025a78 	.word	0x08025a78
 8016128:	2000bdc8 	.word	0x2000bdc8
 801612c:	2000bdd0 	.word	0x2000bdd0
 8016130:	2000bdcc 	.word	0x2000bdcc
 8016134:	2000be08 	.word	0x2000be08
 8016138:	2000bdc0 	.word	0x2000bdc0
 801613c:	2000bdc4 	.word	0x2000bdc4
 8016140:	2000bc24 	.word	0x2000bc24

08016144 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d106      	bne.n	8016160 <tcp_close_shutdown_fin+0x1c>
 8016152:	4b38      	ldr	r3, [pc, #224]	@ (8016234 <tcp_close_shutdown_fin+0xf0>)
 8016154:	f240 124d 	movw	r2, #333	@ 0x14d
 8016158:	4937      	ldr	r1, [pc, #220]	@ (8016238 <tcp_close_shutdown_fin+0xf4>)
 801615a:	4838      	ldr	r0, [pc, #224]	@ (801623c <tcp_close_shutdown_fin+0xf8>)
 801615c:	f00b fae2 	bl	8021724 <iprintf>

  switch (pcb->state) {
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	7d1b      	ldrb	r3, [r3, #20]
 8016164:	2b07      	cmp	r3, #7
 8016166:	d02e      	beq.n	80161c6 <tcp_close_shutdown_fin+0x82>
 8016168:	2b07      	cmp	r3, #7
 801616a:	dc40      	bgt.n	80161ee <tcp_close_shutdown_fin+0xaa>
 801616c:	2b03      	cmp	r3, #3
 801616e:	d002      	beq.n	8016176 <tcp_close_shutdown_fin+0x32>
 8016170:	2b04      	cmp	r3, #4
 8016172:	d014      	beq.n	801619e <tcp_close_shutdown_fin+0x5a>
 8016174:	e03b      	b.n	80161ee <tcp_close_shutdown_fin+0xaa>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f003 fe06 	bl	8019d88 <tcp_send_fin>
 801617c:	4603      	mov	r3, r0
 801617e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d134      	bne.n	80161f2 <tcp_close_shutdown_fin+0xae>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
 8016188:	4b2d      	ldr	r3, [pc, #180]	@ (8016240 <tcp_close_shutdown_fin+0xfc>)
 801618a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801618e:	3301      	adds	r3, #1
 8016190:	4a2b      	ldr	r2, [pc, #172]	@ (8016240 <tcp_close_shutdown_fin+0xfc>)
 8016192:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
      pcb->state = FIN_WAIT_1;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2205      	movs	r2, #5
 801619a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801619c:	e029      	b.n	80161f2 <tcp_close_shutdown_fin+0xae>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f003 fdf2 	bl	8019d88 <tcp_send_fin>
 80161a4:	4603      	mov	r3, r0
 80161a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80161a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d122      	bne.n	80161f6 <tcp_close_shutdown_fin+0xb2>
      MIB2_STATS_INC(mib2.tcpestabresets);
 80161b0:	4b23      	ldr	r3, [pc, #140]	@ (8016240 <tcp_close_shutdown_fin+0xfc>)
 80161b2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80161b6:	3301      	adds	r3, #1
 80161b8:	4a21      	ldr	r2, [pc, #132]	@ (8016240 <tcp_close_shutdown_fin+0xfc>)
 80161ba:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = FIN_WAIT_1;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	2205      	movs	r2, #5
 80161c2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80161c4:	e017      	b.n	80161f6 <tcp_close_shutdown_fin+0xb2>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	f003 fdde 	bl	8019d88 <tcp_send_fin>
 80161cc:	4603      	mov	r3, r0
 80161ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80161d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d110      	bne.n	80161fa <tcp_close_shutdown_fin+0xb6>
      MIB2_STATS_INC(mib2.tcpestabresets);
 80161d8:	4b19      	ldr	r3, [pc, #100]	@ (8016240 <tcp_close_shutdown_fin+0xfc>)
 80161da:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80161de:	3301      	adds	r3, #1
 80161e0:	4a17      	ldr	r2, [pc, #92]	@ (8016240 <tcp_close_shutdown_fin+0xfc>)
 80161e2:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = LAST_ACK;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2209      	movs	r2, #9
 80161ea:	751a      	strb	r2, [r3, #20]
    }
    break;
 80161ec:	e005      	b.n	80161fa <tcp_close_shutdown_fin+0xb6>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80161ee:	2300      	movs	r3, #0
 80161f0:	e01c      	b.n	801622c <tcp_close_shutdown_fin+0xe8>
    break;
 80161f2:	bf00      	nop
 80161f4:	e002      	b.n	80161fc <tcp_close_shutdown_fin+0xb8>
    break;
 80161f6:	bf00      	nop
 80161f8:	e000      	b.n	80161fc <tcp_close_shutdown_fin+0xb8>
    break;
 80161fa:	bf00      	nop
  }

  if (err == ERR_OK) {
 80161fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d103      	bne.n	801620c <tcp_close_shutdown_fin+0xc8>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f004 fc47 	bl	801aa98 <tcp_output>
 801620a:	e00d      	b.n	8016228 <tcp_close_shutdown_fin+0xe4>
  } else if (err == ERR_MEM) {
 801620c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016214:	d108      	bne.n	8016228 <tcp_close_shutdown_fin+0xe4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	7e9b      	ldrb	r3, [r3, #26]
 801621a:	f043 0308 	orr.w	r3, r3, #8
 801621e:	b2da      	uxtb	r2, r3
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016224:	2300      	movs	r3, #0
 8016226:	e001      	b.n	801622c <tcp_close_shutdown_fin+0xe8>
  }
  return err;
 8016228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801622c:	4618      	mov	r0, r3
 801622e:	3710      	adds	r7, #16
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	08025a3c 	.word	0x08025a3c
 8016238:	08025a6c 	.word	0x08025a6c
 801623c:	08025a78 	.word	0x08025a78
 8016240:	2000bc24 	.word	0x2000bc24

08016244 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	7d1b      	ldrb	r3, [r3, #20]
 8016250:	2b01      	cmp	r3, #1
 8016252:	d006      	beq.n	8016262 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	7e9b      	ldrb	r3, [r3, #26]
 8016258:	f043 0310 	orr.w	r3, r3, #16
 801625c:	b2da      	uxtb	r2, r3
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016262:	2101      	movs	r1, #1
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f7ff fe7b 	bl	8015f60 <tcp_close_shutdown>
 801626a:	4603      	mov	r3, r0
}
 801626c:	4618      	mov	r0, r3
 801626e:	3708      	adds	r7, #8
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b08c      	sub	sp, #48	@ 0x30
 8016278:	af02      	add	r7, sp, #8
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	7d1b      	ldrb	r3, [r3, #20]
 8016282:	2b01      	cmp	r3, #1
 8016284:	d106      	bne.n	8016294 <tcp_abandon+0x20>
 8016286:	4b4d      	ldr	r3, [pc, #308]	@ (80163bc <tcp_abandon+0x148>)
 8016288:	f240 12df 	movw	r2, #479	@ 0x1df
 801628c:	494c      	ldr	r1, [pc, #304]	@ (80163c0 <tcp_abandon+0x14c>)
 801628e:	484d      	ldr	r0, [pc, #308]	@ (80163c4 <tcp_abandon+0x150>)
 8016290:	f00b fa48 	bl	8021724 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	7d1b      	ldrb	r3, [r3, #20]
 8016298:	2b0a      	cmp	r3, #10
 801629a:	d108      	bne.n	80162ae <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801629c:	6879      	ldr	r1, [r7, #4]
 801629e:	484a      	ldr	r0, [pc, #296]	@ (80163c8 <tcp_abandon+0x154>)
 80162a0:	f001 f94e 	bl	8017540 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80162a4:	6879      	ldr	r1, [r7, #4]
 80162a6:	2001      	movs	r0, #1
 80162a8:	f7fe fcf0 	bl	8014c8c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80162ac:	e081      	b.n	80163b2 <tcp_abandon+0x13e>
    int send_rst = 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162c0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80162c8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	691b      	ldr	r3, [r3, #16]
 80162ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	7d1b      	ldrb	r3, [r3, #20]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d126      	bne.n	8016326 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	8adb      	ldrh	r3, [r3, #22]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d02e      	beq.n	801633e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80162e0:	4b3a      	ldr	r3, [pc, #232]	@ (80163cc <tcp_abandon+0x158>)
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	687a      	ldr	r2, [r7, #4]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d105      	bne.n	80162f6 <tcp_abandon+0x82>
 80162ea:	4b38      	ldr	r3, [pc, #224]	@ (80163cc <tcp_abandon+0x158>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	68db      	ldr	r3, [r3, #12]
 80162f0:	4a36      	ldr	r2, [pc, #216]	@ (80163cc <tcp_abandon+0x158>)
 80162f2:	6013      	str	r3, [r2, #0]
 80162f4:	e013      	b.n	801631e <tcp_abandon+0xaa>
 80162f6:	4b35      	ldr	r3, [pc, #212]	@ (80163cc <tcp_abandon+0x158>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	61fb      	str	r3, [r7, #28]
 80162fc:	e00c      	b.n	8016318 <tcp_abandon+0xa4>
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	68db      	ldr	r3, [r3, #12]
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	429a      	cmp	r2, r3
 8016306:	d104      	bne.n	8016312 <tcp_abandon+0x9e>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	68da      	ldr	r2, [r3, #12]
 801630c:	69fb      	ldr	r3, [r7, #28]
 801630e:	60da      	str	r2, [r3, #12]
 8016310:	e005      	b.n	801631e <tcp_abandon+0xaa>
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	68db      	ldr	r3, [r3, #12]
 8016316:	61fb      	str	r3, [r7, #28]
 8016318:	69fb      	ldr	r3, [r7, #28]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d1ef      	bne.n	80162fe <tcp_abandon+0x8a>
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2200      	movs	r2, #0
 8016322:	60da      	str	r2, [r3, #12]
 8016324:	e00b      	b.n	801633e <tcp_abandon+0xca>
      send_rst = reset;
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	8adb      	ldrh	r3, [r3, #22]
 801632e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016330:	6879      	ldr	r1, [r7, #4]
 8016332:	4827      	ldr	r0, [pc, #156]	@ (80163d0 <tcp_abandon+0x15c>)
 8016334:	f001 f904 	bl	8017540 <tcp_pcb_remove>
 8016338:	4b26      	ldr	r3, [pc, #152]	@ (80163d4 <tcp_abandon+0x160>)
 801633a:	2201      	movs	r2, #1
 801633c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016342:	2b00      	cmp	r3, #0
 8016344:	d004      	beq.n	8016350 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801634a:	4618      	mov	r0, r3
 801634c:	f000 fe19 	bl	8016f82 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016354:	2b00      	cmp	r3, #0
 8016356:	d004      	beq.n	8016362 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801635c:	4618      	mov	r0, r3
 801635e:	f000 fe10 	bl	8016f82 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016366:	2b00      	cmp	r3, #0
 8016368:	d004      	beq.n	8016374 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801636e:	4618      	mov	r0, r3
 8016370:	f000 fe07 	bl	8016f82 <tcp_segs_free>
    if (send_rst) {
 8016374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016376:	2b00      	cmp	r3, #0
 8016378:	d00c      	beq.n	8016394 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801637a:	687a      	ldr	r2, [r7, #4]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	1d19      	adds	r1, r3, #4
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	8b1b      	ldrh	r3, [r3, #24]
 8016384:	9301      	str	r3, [sp, #4]
 8016386:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016388:	9300      	str	r3, [sp, #0]
 801638a:	460b      	mov	r3, r1
 801638c:	6979      	ldr	r1, [r7, #20]
 801638e:	69b8      	ldr	r0, [r7, #24]
 8016390:	f004 fe1a 	bl	801afc8 <tcp_rst>
    last_state = pcb->state;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	7d1b      	ldrb	r3, [r3, #20]
 8016398:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801639a:	6879      	ldr	r1, [r7, #4]
 801639c:	2001      	movs	r0, #1
 801639e:	f7fe fc75 	bl	8014c8c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d004      	beq.n	80163b2 <tcp_abandon+0x13e>
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	f06f 010c 	mvn.w	r1, #12
 80163ae:	68f8      	ldr	r0, [r7, #12]
 80163b0:	4798      	blx	r3
}
 80163b2:	bf00      	nop
 80163b4:	3728      	adds	r7, #40	@ 0x28
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}
 80163ba:	bf00      	nop
 80163bc:	08025a3c 	.word	0x08025a3c
 80163c0:	08025ad4 	.word	0x08025ad4
 80163c4:	08025a78 	.word	0x08025a78
 80163c8:	2000bdcc 	.word	0x2000bdcc
 80163cc:	2000bdc0 	.word	0x2000bdc0
 80163d0:	2000bdc8 	.word	0x2000bdc8
 80163d4:	2000bdd0 	.word	0x2000bdd0

080163d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b082      	sub	sp, #8
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80163e0:	2101      	movs	r1, #1
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f7ff ff46 	bl	8016274 <tcp_abandon>
}
 80163e8:	bf00      	nop
 80163ea:	3708      	adds	r7, #8
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}

080163f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b088      	sub	sp, #32
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	60f8      	str	r0, [r7, #12]
 80163f8:	60b9      	str	r1, [r7, #8]
 80163fa:	4613      	mov	r3, r2
 80163fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80163fe:	2304      	movs	r3, #4
 8016400:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d101      	bne.n	801640c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016408:	4b3c      	ldr	r3, [pc, #240]	@ (80164fc <tcp_bind+0x10c>)
 801640a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d002      	beq.n	8016418 <tcp_bind+0x28>
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d102      	bne.n	801641e <tcp_bind+0x2e>
    return ERR_VAL;
 8016418:	f06f 0305 	mvn.w	r3, #5
 801641c:	e06a      	b.n	80164f4 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	7d1b      	ldrb	r3, [r3, #20]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d009      	beq.n	801643a <tcp_bind+0x4a>
 8016426:	4b36      	ldr	r3, [pc, #216]	@ (8016500 <tcp_bind+0x110>)
 8016428:	f44f 7211 	mov.w	r2, #580	@ 0x244
 801642c:	4935      	ldr	r1, [pc, #212]	@ (8016504 <tcp_bind+0x114>)
 801642e:	4836      	ldr	r0, [pc, #216]	@ (8016508 <tcp_bind+0x118>)
 8016430:	f00b f978 	bl	8021724 <iprintf>
 8016434:	f06f 0305 	mvn.w	r3, #5
 8016438:	e05c      	b.n	80164f4 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801643a:	88fb      	ldrh	r3, [r7, #6]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d109      	bne.n	8016454 <tcp_bind+0x64>
    port = tcp_new_port();
 8016440:	f000 f9ca 	bl	80167d8 <tcp_new_port>
 8016444:	4603      	mov	r3, r0
 8016446:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016448:	88fb      	ldrh	r3, [r7, #6]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d135      	bne.n	80164ba <tcp_bind+0xca>
      return ERR_BUF;
 801644e:	f06f 0301 	mvn.w	r3, #1
 8016452:	e04f      	b.n	80164f4 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016454:	2300      	movs	r3, #0
 8016456:	61fb      	str	r3, [r7, #28]
 8016458:	e02b      	b.n	80164b2 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801645a:	4a2c      	ldr	r2, [pc, #176]	@ (801650c <tcp_bind+0x11c>)
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	61bb      	str	r3, [r7, #24]
 8016466:	e01e      	b.n	80164a6 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8016468:	69bb      	ldr	r3, [r7, #24]
 801646a:	8adb      	ldrh	r3, [r3, #22]
 801646c:	88fa      	ldrh	r2, [r7, #6]
 801646e:	429a      	cmp	r2, r3
 8016470:	d116      	bne.n	80164a0 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016472:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016474:	2b00      	cmp	r3, #0
 8016476:	d010      	beq.n	801649a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016478:	69bb      	ldr	r3, [r7, #24]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d00c      	beq.n	801649a <tcp_bind+0xaa>
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d009      	beq.n	801649a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d005      	beq.n	801649a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801648e:	69bb      	ldr	r3, [r7, #24]
 8016490:	681a      	ldr	r2, [r3, #0]
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016496:	429a      	cmp	r2, r3
 8016498:	d102      	bne.n	80164a0 <tcp_bind+0xb0>
              return ERR_USE;
 801649a:	f06f 0307 	mvn.w	r3, #7
 801649e:	e029      	b.n	80164f4 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80164a0:	69bb      	ldr	r3, [r7, #24]
 80164a2:	68db      	ldr	r3, [r3, #12]
 80164a4:	61bb      	str	r3, [r7, #24]
 80164a6:	69bb      	ldr	r3, [r7, #24]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d1dd      	bne.n	8016468 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80164ac:	69fb      	ldr	r3, [r7, #28]
 80164ae:	3301      	adds	r3, #1
 80164b0:	61fb      	str	r3, [r7, #28]
 80164b2:	69fa      	ldr	r2, [r7, #28]
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	429a      	cmp	r2, r3
 80164b8:	dbcf      	blt.n	801645a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d00c      	beq.n	80164da <tcp_bind+0xea>
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d008      	beq.n	80164da <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d002      	beq.n	80164d4 <tcp_bind+0xe4>
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	e000      	b.n	80164d6 <tcp_bind+0xe6>
 80164d4:	2300      	movs	r3, #0
 80164d6:	68fa      	ldr	r2, [r7, #12]
 80164d8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	88fa      	ldrh	r2, [r7, #6]
 80164de:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80164e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016510 <tcp_bind+0x120>)
 80164e2:	681a      	ldr	r2, [r3, #0]
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	60da      	str	r2, [r3, #12]
 80164e8:	4a09      	ldr	r2, [pc, #36]	@ (8016510 <tcp_bind+0x120>)
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	6013      	str	r3, [r2, #0]
 80164ee:	f004 ffe3 	bl	801b4b8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80164f2:	2300      	movs	r3, #0
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3720      	adds	r7, #32
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	0803064c 	.word	0x0803064c
 8016500:	08025a3c 	.word	0x08025a3c
 8016504:	08025b08 	.word	0x08025b08
 8016508:	08025a78 	.word	0x08025a78
 801650c:	08030614 	.word	0x08030614
 8016510:	2000bdc0 	.word	0x2000bdc0

08016514 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b084      	sub	sp, #16
 8016518:	af00      	add	r7, sp, #0
 801651a:	60f8      	str	r0, [r7, #12]
 801651c:	60b9      	str	r1, [r7, #8]
 801651e:	4613      	mov	r3, r2
 8016520:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8016522:	68b8      	ldr	r0, [r7, #8]
 8016524:	f7ff ff58 	bl	80163d8 <tcp_abort>

  return ERR_ABRT;
 8016528:	f06f 030c 	mvn.w	r3, #12
}
 801652c:	4618      	mov	r0, r3
 801652e:	3710      	adds	r7, #16
 8016530:	46bd      	mov	sp, r7
 8016532:	bd80      	pop	{r7, pc}

08016534 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b082      	sub	sp, #8
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
 801653c:	460b      	mov	r3, r1
 801653e:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016540:	78fb      	ldrb	r3, [r7, #3]
 8016542:	2200      	movs	r2, #0
 8016544:	4619      	mov	r1, r3
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f000 f806 	bl	8016558 <tcp_listen_with_backlog_and_err>
 801654c:	4603      	mov	r3, r0
}
 801654e:	4618      	mov	r0, r3
 8016550:	3708      	adds	r7, #8
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
	...

08016558 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b088      	sub	sp, #32
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	460b      	mov	r3, r1
 8016562:	607a      	str	r2, [r7, #4]
 8016564:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016566:	2300      	movs	r3, #0
 8016568:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	7d1b      	ldrb	r3, [r3, #20]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d009      	beq.n	8016586 <tcp_listen_with_backlog_and_err+0x2e>
 8016572:	4b3f      	ldr	r3, [pc, #252]	@ (8016670 <tcp_listen_with_backlog_and_err+0x118>)
 8016574:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 8016578:	493e      	ldr	r1, [pc, #248]	@ (8016674 <tcp_listen_with_backlog_and_err+0x11c>)
 801657a:	483f      	ldr	r0, [pc, #252]	@ (8016678 <tcp_listen_with_backlog_and_err+0x120>)
 801657c:	f00b f8d2 	bl	8021724 <iprintf>
 8016580:	23f1      	movs	r3, #241	@ 0xf1
 8016582:	76fb      	strb	r3, [r7, #27]
 8016584:	e069      	b.n	801665a <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	7d1b      	ldrb	r3, [r3, #20]
 801658a:	2b01      	cmp	r3, #1
 801658c:	d104      	bne.n	8016598 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016592:	23f7      	movs	r3, #247	@ 0xf7
 8016594:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016596:	e060      	b.n	801665a <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016598:	2002      	movs	r0, #2
 801659a:	f7fe fb25 	bl	8014be8 <memp_malloc>
 801659e:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80165a0:	69fb      	ldr	r3, [r7, #28]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d102      	bne.n	80165ac <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80165a6:	23ff      	movs	r3, #255	@ 0xff
 80165a8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80165aa:	e056      	b.n	801665a <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	691a      	ldr	r2, [r3, #16]
 80165b0:	69fb      	ldr	r3, [r7, #28]
 80165b2:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	8ada      	ldrh	r2, [r3, #22]
 80165b8:	69fb      	ldr	r3, [r7, #28]
 80165ba:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	2201      	movs	r2, #1
 80165c0:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	7d5a      	ldrb	r2, [r3, #21]
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	7a1a      	ldrb	r2, [r3, #8]
 80165ce:	69fb      	ldr	r3, [r7, #28]
 80165d0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	7a9a      	ldrb	r2, [r3, #10]
 80165d6:	69fb      	ldr	r3, [r7, #28]
 80165d8:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	7a5a      	ldrb	r2, [r3, #9]
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681a      	ldr	r2, [r3, #0]
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	8adb      	ldrh	r3, [r3, #22]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d021      	beq.n	8016636 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80165f2:	4b22      	ldr	r3, [pc, #136]	@ (801667c <tcp_listen_with_backlog_and_err+0x124>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	68fa      	ldr	r2, [r7, #12]
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d105      	bne.n	8016608 <tcp_listen_with_backlog_and_err+0xb0>
 80165fc:	4b1f      	ldr	r3, [pc, #124]	@ (801667c <tcp_listen_with_backlog_and_err+0x124>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	68db      	ldr	r3, [r3, #12]
 8016602:	4a1e      	ldr	r2, [pc, #120]	@ (801667c <tcp_listen_with_backlog_and_err+0x124>)
 8016604:	6013      	str	r3, [r2, #0]
 8016606:	e013      	b.n	8016630 <tcp_listen_with_backlog_and_err+0xd8>
 8016608:	4b1c      	ldr	r3, [pc, #112]	@ (801667c <tcp_listen_with_backlog_and_err+0x124>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	617b      	str	r3, [r7, #20]
 801660e:	e00c      	b.n	801662a <tcp_listen_with_backlog_and_err+0xd2>
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	68db      	ldr	r3, [r3, #12]
 8016614:	68fa      	ldr	r2, [r7, #12]
 8016616:	429a      	cmp	r2, r3
 8016618:	d104      	bne.n	8016624 <tcp_listen_with_backlog_and_err+0xcc>
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	68da      	ldr	r2, [r3, #12]
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	60da      	str	r2, [r3, #12]
 8016622:	e005      	b.n	8016630 <tcp_listen_with_backlog_and_err+0xd8>
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	68db      	ldr	r3, [r3, #12]
 8016628:	617b      	str	r3, [r7, #20]
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d1ef      	bne.n	8016610 <tcp_listen_with_backlog_and_err+0xb8>
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2200      	movs	r2, #0
 8016634:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8016636:	68f9      	ldr	r1, [r7, #12]
 8016638:	2001      	movs	r0, #1
 801663a:	f7fe fb27 	bl	8014c8c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	4a0f      	ldr	r2, [pc, #60]	@ (8016680 <tcp_listen_with_backlog_and_err+0x128>)
 8016642:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016644:	4b0f      	ldr	r3, [pc, #60]	@ (8016684 <tcp_listen_with_backlog_and_err+0x12c>)
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	60da      	str	r2, [r3, #12]
 801664c:	4a0d      	ldr	r2, [pc, #52]	@ (8016684 <tcp_listen_with_backlog_and_err+0x12c>)
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	6013      	str	r3, [r2, #0]
 8016652:	f004 ff31 	bl	801b4b8 <tcp_timer_needed>
  res = ERR_OK;
 8016656:	2300      	movs	r3, #0
 8016658:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d002      	beq.n	8016666 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	7efa      	ldrb	r2, [r7, #27]
 8016664:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016666:	69fb      	ldr	r3, [r7, #28]
}
 8016668:	4618      	mov	r0, r3
 801666a:	3720      	adds	r7, #32
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	08025a3c 	.word	0x08025a3c
 8016674:	08025b30 	.word	0x08025b30
 8016678:	08025a78 	.word	0x08025a78
 801667c:	2000bdc0 	.word	0x2000bdc0
 8016680:	08016515 	.word	0x08016515
 8016684:	2000bdc4 	.word	0x2000bdc4

08016688 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016694:	687a      	ldr	r2, [r7, #4]
 8016696:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016698:	4413      	add	r3, r2
 801669a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80166a4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80166a8:	bf28      	it	cs
 80166aa:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80166ae:	b292      	uxth	r2, r2
 80166b0:	4413      	add	r3, r2
 80166b2:	68fa      	ldr	r2, [r7, #12]
 80166b4:	1ad3      	subs	r3, r2, r3
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	db08      	blt.n	80166cc <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166c6:	68fa      	ldr	r2, [r7, #12]
 80166c8:	1ad3      	subs	r3, r2, r3
 80166ca:	e020      	b.n	801670e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166d4:	1ad3      	subs	r3, r2, r3
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	dd03      	ble.n	80166e2 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2200      	movs	r2, #0
 80166de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80166e0:	e014      	b.n	801670c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166ea:	1ad3      	subs	r3, r2, r3
 80166ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80166ee:	68bb      	ldr	r3, [r7, #8]
 80166f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80166f4:	d306      	bcc.n	8016704 <tcp_update_rcv_ann_wnd+0x7c>
 80166f6:	4b08      	ldr	r3, [pc, #32]	@ (8016718 <tcp_update_rcv_ann_wnd+0x90>)
 80166f8:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80166fc:	4907      	ldr	r1, [pc, #28]	@ (801671c <tcp_update_rcv_ann_wnd+0x94>)
 80166fe:	4808      	ldr	r0, [pc, #32]	@ (8016720 <tcp_update_rcv_ann_wnd+0x98>)
 8016700:	f00b f810 	bl	8021724 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	b29a      	uxth	r2, r3
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801670c:	2300      	movs	r3, #0
  }
}
 801670e:	4618      	mov	r0, r3
 8016710:	3710      	adds	r7, #16
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	08025a3c 	.word	0x08025a3c
 801671c:	08025b54 	.word	0x08025b54
 8016720:	08025a78 	.word	0x08025a78

08016724 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b084      	sub	sp, #16
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	460b      	mov	r3, r1
 801672e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	7d1b      	ldrb	r3, [r3, #20]
 8016734:	2b01      	cmp	r3, #1
 8016736:	d106      	bne.n	8016746 <tcp_recved+0x22>
 8016738:	4b23      	ldr	r3, [pc, #140]	@ (80167c8 <tcp_recved+0xa4>)
 801673a:	f240 321f 	movw	r2, #799	@ 0x31f
 801673e:	4923      	ldr	r1, [pc, #140]	@ (80167cc <tcp_recved+0xa8>)
 8016740:	4823      	ldr	r0, [pc, #140]	@ (80167d0 <tcp_recved+0xac>)
 8016742:	f00a ffef 	bl	8021724 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801674a:	887b      	ldrh	r3, [r7, #2]
 801674c:	4413      	add	r3, r2
 801674e:	b29a      	uxth	r2, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016758:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801675c:	d904      	bls.n	8016768 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016764:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016766:	e017      	b.n	8016798 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801676c:	2b00      	cmp	r3, #0
 801676e:	d113      	bne.n	8016798 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	7d1b      	ldrb	r3, [r3, #20]
 8016774:	2b07      	cmp	r3, #7
 8016776:	d003      	beq.n	8016780 <tcp_recved+0x5c>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	7d1b      	ldrb	r3, [r3, #20]
 801677c:	2b09      	cmp	r3, #9
 801677e:	d104      	bne.n	801678a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016786:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016788:	e006      	b.n	8016798 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801678a:	4b0f      	ldr	r3, [pc, #60]	@ (80167c8 <tcp_recved+0xa4>)
 801678c:	f240 322d 	movw	r2, #813	@ 0x32d
 8016790:	4910      	ldr	r1, [pc, #64]	@ (80167d4 <tcp_recved+0xb0>)
 8016792:	480f      	ldr	r0, [pc, #60]	@ (80167d0 <tcp_recved+0xac>)
 8016794:	f00a ffc6 	bl	8021724 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f7ff ff75 	bl	8016688 <tcp_update_rcv_ann_wnd>
 801679e:	4603      	mov	r3, r0
 80167a0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80167a8:	db09      	blt.n	80167be <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	7e9b      	ldrb	r3, [r3, #26]
 80167ae:	f043 0302 	orr.w	r3, r3, #2
 80167b2:	b2da      	uxtb	r2, r3
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f004 f96d 	bl	801aa98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80167be:	bf00      	nop
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	08025a3c 	.word	0x08025a3c
 80167cc:	08025b70 	.word	0x08025b70
 80167d0:	08025a78 	.word	0x08025a78
 80167d4:	08025b98 	.word	0x08025b98

080167d8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80167d8:	b480      	push	{r7}
 80167da:	b083      	sub	sp, #12
 80167dc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80167de:	2300      	movs	r3, #0
 80167e0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80167e2:	4b1d      	ldr	r3, [pc, #116]	@ (8016858 <tcp_new_port+0x80>)
 80167e4:	881b      	ldrh	r3, [r3, #0]
 80167e6:	1c5a      	adds	r2, r3, #1
 80167e8:	b291      	uxth	r1, r2
 80167ea:	4a1b      	ldr	r2, [pc, #108]	@ (8016858 <tcp_new_port+0x80>)
 80167ec:	8011      	strh	r1, [r2, #0]
 80167ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80167f2:	4293      	cmp	r3, r2
 80167f4:	d103      	bne.n	80167fe <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80167f6:	4b18      	ldr	r3, [pc, #96]	@ (8016858 <tcp_new_port+0x80>)
 80167f8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80167fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80167fe:	2300      	movs	r3, #0
 8016800:	71fb      	strb	r3, [r7, #7]
 8016802:	e01e      	b.n	8016842 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016804:	79fb      	ldrb	r3, [r7, #7]
 8016806:	4a15      	ldr	r2, [pc, #84]	@ (801685c <tcp_new_port+0x84>)
 8016808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	603b      	str	r3, [r7, #0]
 8016810:	e011      	b.n	8016836 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	8ada      	ldrh	r2, [r3, #22]
 8016816:	4b10      	ldr	r3, [pc, #64]	@ (8016858 <tcp_new_port+0x80>)
 8016818:	881b      	ldrh	r3, [r3, #0]
 801681a:	429a      	cmp	r2, r3
 801681c:	d108      	bne.n	8016830 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801681e:	88bb      	ldrh	r3, [r7, #4]
 8016820:	3301      	adds	r3, #1
 8016822:	80bb      	strh	r3, [r7, #4]
 8016824:	88bb      	ldrh	r3, [r7, #4]
 8016826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801682a:	d3da      	bcc.n	80167e2 <tcp_new_port+0xa>
          return 0;
 801682c:	2300      	movs	r3, #0
 801682e:	e00d      	b.n	801684c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	603b      	str	r3, [r7, #0]
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d1ea      	bne.n	8016812 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801683c:	79fb      	ldrb	r3, [r7, #7]
 801683e:	3301      	adds	r3, #1
 8016840:	71fb      	strb	r3, [r7, #7]
 8016842:	79fb      	ldrb	r3, [r7, #7]
 8016844:	2b03      	cmp	r3, #3
 8016846:	d9dd      	bls.n	8016804 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016848:	4b03      	ldr	r3, [pc, #12]	@ (8016858 <tcp_new_port+0x80>)
 801684a:	881b      	ldrh	r3, [r3, #0]
}
 801684c:	4618      	mov	r0, r3
 801684e:	370c      	adds	r7, #12
 8016850:	46bd      	mov	sp, r7
 8016852:	bc80      	pop	{r7}
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	20000110 	.word	0x20000110
 801685c:	08030614 	.word	0x08030614

08016860 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016860:	b5b0      	push	{r4, r5, r7, lr}
 8016862:	b08c      	sub	sp, #48	@ 0x30
 8016864:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016866:	2300      	movs	r3, #0
 8016868:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 801686a:	4b98      	ldr	r3, [pc, #608]	@ (8016acc <tcp_slowtmr+0x26c>)
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	3301      	adds	r3, #1
 8016870:	4a96      	ldr	r2, [pc, #600]	@ (8016acc <tcp_slowtmr+0x26c>)
 8016872:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016874:	4b96      	ldr	r3, [pc, #600]	@ (8016ad0 <tcp_slowtmr+0x270>)
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	3301      	adds	r3, #1
 801687a:	b2da      	uxtb	r2, r3
 801687c:	4b94      	ldr	r3, [pc, #592]	@ (8016ad0 <tcp_slowtmr+0x270>)
 801687e:	701a      	strb	r2, [r3, #0]
 8016880:	e000      	b.n	8016884 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8016882:	bf00      	nop
  prev = NULL;
 8016884:	2300      	movs	r3, #0
 8016886:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8016888:	4b92      	ldr	r3, [pc, #584]	@ (8016ad4 <tcp_slowtmr+0x274>)
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 801688e:	e227      	b.n	8016ce0 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016892:	7d1b      	ldrb	r3, [r3, #20]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d106      	bne.n	80168a6 <tcp_slowtmr+0x46>
 8016898:	4b8f      	ldr	r3, [pc, #572]	@ (8016ad8 <tcp_slowtmr+0x278>)
 801689a:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 801689e:	498f      	ldr	r1, [pc, #572]	@ (8016adc <tcp_slowtmr+0x27c>)
 80168a0:	488f      	ldr	r0, [pc, #572]	@ (8016ae0 <tcp_slowtmr+0x280>)
 80168a2:	f00a ff3f 	bl	8021724 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80168a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168a8:	7d1b      	ldrb	r3, [r3, #20]
 80168aa:	2b01      	cmp	r3, #1
 80168ac:	d106      	bne.n	80168bc <tcp_slowtmr+0x5c>
 80168ae:	4b8a      	ldr	r3, [pc, #552]	@ (8016ad8 <tcp_slowtmr+0x278>)
 80168b0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80168b4:	498b      	ldr	r1, [pc, #556]	@ (8016ae4 <tcp_slowtmr+0x284>)
 80168b6:	488a      	ldr	r0, [pc, #552]	@ (8016ae0 <tcp_slowtmr+0x280>)
 80168b8:	f00a ff34 	bl	8021724 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80168bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168be:	7d1b      	ldrb	r3, [r3, #20]
 80168c0:	2b0a      	cmp	r3, #10
 80168c2:	d106      	bne.n	80168d2 <tcp_slowtmr+0x72>
 80168c4:	4b84      	ldr	r3, [pc, #528]	@ (8016ad8 <tcp_slowtmr+0x278>)
 80168c6:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 80168ca:	4987      	ldr	r1, [pc, #540]	@ (8016ae8 <tcp_slowtmr+0x288>)
 80168cc:	4884      	ldr	r0, [pc, #528]	@ (8016ae0 <tcp_slowtmr+0x280>)
 80168ce:	f00a ff29 	bl	8021724 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80168d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168d4:	7f5a      	ldrb	r2, [r3, #29]
 80168d6:	4b7e      	ldr	r3, [pc, #504]	@ (8016ad0 <tcp_slowtmr+0x270>)
 80168d8:	781b      	ldrb	r3, [r3, #0]
 80168da:	429a      	cmp	r2, r3
 80168dc:	d103      	bne.n	80168e6 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 80168de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168e0:	68db      	ldr	r3, [r3, #12]
 80168e2:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 80168e4:	e1fc      	b.n	8016ce0 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 80168e6:	4b7a      	ldr	r3, [pc, #488]	@ (8016ad0 <tcp_slowtmr+0x270>)
 80168e8:	781a      	ldrb	r2, [r3, #0]
 80168ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168ec:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 80168ee:	2300      	movs	r3, #0
 80168f0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80168f2:	2300      	movs	r3, #0
 80168f4:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80168f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168f8:	7d1b      	ldrb	r3, [r3, #20]
 80168fa:	2b02      	cmp	r3, #2
 80168fc:	d108      	bne.n	8016910 <tcp_slowtmr+0xb0>
 80168fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016904:	2b05      	cmp	r3, #5
 8016906:	d903      	bls.n	8016910 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 8016908:	7ffb      	ldrb	r3, [r7, #31]
 801690a:	3301      	adds	r3, #1
 801690c:	77fb      	strb	r3, [r7, #31]
 801690e:	e0a2      	b.n	8016a56 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8016910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016916:	2b0b      	cmp	r3, #11
 8016918:	d903      	bls.n	8016922 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 801691a:	7ffb      	ldrb	r3, [r7, #31]
 801691c:	3301      	adds	r3, #1
 801691e:	77fb      	strb	r3, [r7, #31]
 8016920:	e099      	b.n	8016a56 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 8016922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016924:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016928:	2b00      	cmp	r3, #0
 801692a:	d032      	beq.n	8016992 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801692e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016932:	3b01      	subs	r3, #1
 8016934:	4a6d      	ldr	r2, [pc, #436]	@ (8016aec <tcp_slowtmr+0x28c>)
 8016936:	5cd3      	ldrb	r3, [r2, r3]
 8016938:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 801693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801693c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8016940:	7cfa      	ldrb	r2, [r7, #19]
 8016942:	429a      	cmp	r2, r3
 8016944:	d907      	bls.n	8016956 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 8016946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016948:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801694c:	3301      	adds	r3, #1
 801694e:	b2da      	uxtb	r2, r3
 8016950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016952:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8016956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016958:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801695c:	7cfa      	ldrb	r2, [r7, #19]
 801695e:	429a      	cmp	r2, r3
 8016960:	d879      	bhi.n	8016a56 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8016962:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016964:	f004 fcde 	bl	801b324 <tcp_zero_window_probe>
 8016968:	4603      	mov	r3, r0
 801696a:	2b00      	cmp	r3, #0
 801696c:	d173      	bne.n	8016a56 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 801696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016970:	2200      	movs	r2, #0
 8016972:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016978:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801697c:	2b06      	cmp	r3, #6
 801697e:	d86a      	bhi.n	8016a56 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 8016980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016982:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016986:	3301      	adds	r3, #1
 8016988:	b2da      	uxtb	r2, r3
 801698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801698c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8016990:	e061      	b.n	8016a56 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 8016992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016994:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016998:	2b00      	cmp	r3, #0
 801699a:	db08      	blt.n	80169ae <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 801699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801699e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	3301      	adds	r3, #1
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	b21a      	sxth	r2, r3
 80169aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ac:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80169ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d04f      	beq.n	8016a56 <tcp_slowtmr+0x1f6>
 80169b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80169bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80169c2:	429a      	cmp	r2, r3
 80169c4:	db47      	blt.n	8016a56 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 80169c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c8:	7d1b      	ldrb	r3, [r3, #20]
 80169ca:	2b02      	cmp	r3, #2
 80169cc:	d018      	beq.n	8016a00 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80169ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80169d4:	2b0c      	cmp	r3, #12
 80169d6:	bf28      	it	cs
 80169d8:	230c      	movcs	r3, #12
 80169da:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80169dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80169e2:	10db      	asrs	r3, r3, #3
 80169e4:	b21b      	sxth	r3, r3
 80169e6:	461a      	mov	r2, r3
 80169e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80169ee:	4413      	add	r3, r2
 80169f0:	7dfa      	ldrb	r2, [r7, #23]
 80169f2:	493f      	ldr	r1, [pc, #252]	@ (8016af0 <tcp_slowtmr+0x290>)
 80169f4:	5c8a      	ldrb	r2, [r1, r2]
 80169f6:	4093      	lsls	r3, r2
 80169f8:	b21a      	sxth	r2, r3
 80169fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 8016a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a02:	2200      	movs	r2, #0
 8016a04:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016a12:	4293      	cmp	r3, r2
 8016a14:	bf28      	it	cs
 8016a16:	4613      	movcs	r3, r2
 8016a18:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8016a1a:	8abb      	ldrh	r3, [r7, #20]
 8016a1c:	085b      	lsrs	r3, r3, #1
 8016a1e:	b29a      	uxth	r2, r3
 8016a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a22:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a30:	005b      	lsls	r3, r3, #1
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d206      	bcs.n	8016a46 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 8016a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a3c:	005b      	lsls	r3, r3, #1
 8016a3e:	b29a      	uxth	r2, r3
 8016a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a42:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8016a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a48:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8016a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 8016a50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016a52:	f004 fb41 	bl	801b0d8 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8016a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a58:	7d1b      	ldrb	r3, [r3, #20]
 8016a5a:	2b06      	cmp	r3, #6
 8016a5c:	d10f      	bne.n	8016a7e <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 8016a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a60:	7e9b      	ldrb	r3, [r3, #26]
 8016a62:	f003 0310 	and.w	r3, r3, #16
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d009      	beq.n	8016a7e <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016a6a:	4b18      	ldr	r3, [pc, #96]	@ (8016acc <tcp_slowtmr+0x26c>)
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a70:	6a1b      	ldr	r3, [r3, #32]
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	2b28      	cmp	r3, #40	@ 0x28
 8016a76:	d902      	bls.n	8016a7e <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8016a78:	7ffb      	ldrb	r3, [r7, #31]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a80:	7a1b      	ldrb	r3, [r3, #8]
 8016a82:	f003 0308 	and.w	r3, r3, #8
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d05d      	beq.n	8016b46 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 8016a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a8c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016a8e:	2b04      	cmp	r3, #4
 8016a90:	d003      	beq.n	8016a9a <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 8016a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a94:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8016a96:	2b07      	cmp	r3, #7
 8016a98:	d155      	bne.n	8016b46 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8016acc <tcp_slowtmr+0x26c>)
 8016a9c:	681a      	ldr	r2, [r3, #0]
 8016a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa0:	6a1b      	ldr	r3, [r3, #32]
 8016aa2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8016aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016aaa:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8016aae:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8016ab2:	4910      	ldr	r1, [pc, #64]	@ (8016af4 <tcp_slowtmr+0x294>)
 8016ab4:	fba1 1303 	umull	r1, r3, r1, r3
 8016ab8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d91c      	bls.n	8016af8 <tcp_slowtmr+0x298>
        ++pcb_remove;
 8016abe:	7ffb      	ldrb	r3, [r7, #31]
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8016ac4:	7fbb      	ldrb	r3, [r7, #30]
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	77bb      	strb	r3, [r7, #30]
 8016aca:	e03c      	b.n	8016b46 <tcp_slowtmr+0x2e6>
 8016acc:	2000bdbc 	.word	0x2000bdbc
 8016ad0:	2000bdd2 	.word	0x2000bdd2
 8016ad4:	2000bdc8 	.word	0x2000bdc8
 8016ad8:	08025a3c 	.word	0x08025a3c
 8016adc:	08025bec 	.word	0x08025bec
 8016ae0:	08025a78 	.word	0x08025a78
 8016ae4:	08025c18 	.word	0x08025c18
 8016ae8:	08025c44 	.word	0x08025c44
 8016aec:	0803060c 	.word	0x0803060c
 8016af0:	080305fc 	.word	0x080305fc
 8016af4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016af8:	4b97      	ldr	r3, [pc, #604]	@ (8016d58 <tcp_slowtmr+0x4f8>)
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016afe:	6a1b      	ldr	r3, [r3, #32]
 8016b00:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b04:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8016b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b0a:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8016b0e:	4618      	mov	r0, r3
 8016b10:	4b92      	ldr	r3, [pc, #584]	@ (8016d5c <tcp_slowtmr+0x4fc>)
 8016b12:	fb00 f303 	mul.w	r3, r0, r3
 8016b16:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8016b18:	4991      	ldr	r1, [pc, #580]	@ (8016d60 <tcp_slowtmr+0x500>)
 8016b1a:	fba1 1303 	umull	r1, r3, r1, r3
 8016b1e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d910      	bls.n	8016b46 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 8016b24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016b26:	f004 fbb5 	bl	801b294 <tcp_keepalive>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8016b2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d107      	bne.n	8016b46 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 8016b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b38:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8016b3c:	3301      	adds	r3, #1
 8016b3e:	b2da      	uxtb	r2, r3
 8016b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b42:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 8016b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d016      	beq.n	8016b7c <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8016b4e:	4b82      	ldr	r3, [pc, #520]	@ (8016d58 <tcp_slowtmr+0x4f8>)
 8016b50:	681a      	ldr	r2, [r3, #0]
 8016b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b54:	6a1b      	ldr	r3, [r3, #32]
 8016b56:	1ad2      	subs	r2, r2, r3
 8016b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016b5e:	4619      	mov	r1, r3
 8016b60:	460b      	mov	r3, r1
 8016b62:	005b      	lsls	r3, r3, #1
 8016b64:	440b      	add	r3, r1
 8016b66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d307      	bcc.n	8016b7c <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 8016b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b70:	4618      	mov	r0, r3
 8016b72:	f000 fa06 	bl	8016f82 <tcp_segs_free>
      pcb->ooseq = NULL;
 8016b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b78:	2200      	movs	r2, #0
 8016b7a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 8016b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b7e:	7d1b      	ldrb	r3, [r3, #20]
 8016b80:	2b03      	cmp	r3, #3
 8016b82:	d109      	bne.n	8016b98 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016b84:	4b74      	ldr	r3, [pc, #464]	@ (8016d58 <tcp_slowtmr+0x4f8>)
 8016b86:	681a      	ldr	r2, [r3, #0]
 8016b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b8a:	6a1b      	ldr	r3, [r3, #32]
 8016b8c:	1ad3      	subs	r3, r2, r3
 8016b8e:	2b28      	cmp	r3, #40	@ 0x28
 8016b90:	d902      	bls.n	8016b98 <tcp_slowtmr+0x338>
        ++pcb_remove;
 8016b92:	7ffb      	ldrb	r3, [r7, #31]
 8016b94:	3301      	adds	r3, #1
 8016b96:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8016b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b9a:	7d1b      	ldrb	r3, [r3, #20]
 8016b9c:	2b09      	cmp	r3, #9
 8016b9e:	d109      	bne.n	8016bb4 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8016d58 <tcp_slowtmr+0x4f8>)
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ba6:	6a1b      	ldr	r3, [r3, #32]
 8016ba8:	1ad3      	subs	r3, r2, r3
 8016baa:	2bf0      	cmp	r3, #240	@ 0xf0
 8016bac:	d902      	bls.n	8016bb4 <tcp_slowtmr+0x354>
        ++pcb_remove;
 8016bae:	7ffb      	ldrb	r3, [r7, #31]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8016bb4:	7ffb      	ldrb	r3, [r7, #31]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d05d      	beq.n	8016c76 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 8016bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016bc0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8016bc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016bc4:	f000 fc7a 	bl	80174bc <tcp_pcb_purge>
      if (prev != NULL) {
 8016bc8:	6a3b      	ldr	r3, [r7, #32]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d010      	beq.n	8016bf0 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016bce:	4b65      	ldr	r3, [pc, #404]	@ (8016d64 <tcp_slowtmr+0x504>)
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d106      	bne.n	8016be6 <tcp_slowtmr+0x386>
 8016bd8:	4b63      	ldr	r3, [pc, #396]	@ (8016d68 <tcp_slowtmr+0x508>)
 8016bda:	f240 4289 	movw	r2, #1161	@ 0x489
 8016bde:	4963      	ldr	r1, [pc, #396]	@ (8016d6c <tcp_slowtmr+0x50c>)
 8016be0:	4863      	ldr	r0, [pc, #396]	@ (8016d70 <tcp_slowtmr+0x510>)
 8016be2:	f00a fd9f 	bl	8021724 <iprintf>
        prev->next = pcb->next;
 8016be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be8:	68da      	ldr	r2, [r3, #12]
 8016bea:	6a3b      	ldr	r3, [r7, #32]
 8016bec:	60da      	str	r2, [r3, #12]
 8016bee:	e00f      	b.n	8016c10 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8016d64 <tcp_slowtmr+0x504>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d006      	beq.n	8016c08 <tcp_slowtmr+0x3a8>
 8016bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8016d68 <tcp_slowtmr+0x508>)
 8016bfc:	f240 428d 	movw	r2, #1165	@ 0x48d
 8016c00:	495c      	ldr	r1, [pc, #368]	@ (8016d74 <tcp_slowtmr+0x514>)
 8016c02:	485b      	ldr	r0, [pc, #364]	@ (8016d70 <tcp_slowtmr+0x510>)
 8016c04:	f00a fd8e 	bl	8021724 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c0a:	68db      	ldr	r3, [r3, #12]
 8016c0c:	4a55      	ldr	r2, [pc, #340]	@ (8016d64 <tcp_slowtmr+0x504>)
 8016c0e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8016c10:	7fbb      	ldrb	r3, [r7, #30]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d010      	beq.n	8016c38 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c18:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016c1e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8016c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c22:	1d1d      	adds	r5, r3, #4
 8016c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c26:	8adb      	ldrh	r3, [r3, #22]
 8016c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c2a:	8b12      	ldrh	r2, [r2, #24]
 8016c2c:	9201      	str	r2, [sp, #4]
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	462b      	mov	r3, r5
 8016c32:	4622      	mov	r2, r4
 8016c34:	f004 f9c8 	bl	801afc8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8016c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3a:	691b      	ldr	r3, [r3, #16]
 8016c3c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c40:	7d1b      	ldrb	r3, [r3, #20]
 8016c42:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c46:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c4a:	68db      	ldr	r3, [r3, #12]
 8016c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8016c4e:	6839      	ldr	r1, [r7, #0]
 8016c50:	2001      	movs	r0, #1
 8016c52:	f7fe f81b 	bl	8014c8c <memp_free>
      tcp_active_pcbs_changed = 0;
 8016c56:	4b48      	ldr	r3, [pc, #288]	@ (8016d78 <tcp_slowtmr+0x518>)
 8016c58:	2200      	movs	r2, #0
 8016c5a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d004      	beq.n	8016c6c <tcp_slowtmr+0x40c>
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	f06f 010c 	mvn.w	r1, #12
 8016c68:	68b8      	ldr	r0, [r7, #8]
 8016c6a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016c6c:	4b42      	ldr	r3, [pc, #264]	@ (8016d78 <tcp_slowtmr+0x518>)
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d035      	beq.n	8016ce0 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8016c74:	e606      	b.n	8016884 <tcp_slowtmr+0x24>
      prev = pcb;
 8016c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c78:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8016c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c7c:	68db      	ldr	r3, [r3, #12]
 8016c7e:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8016c80:	6a3b      	ldr	r3, [r7, #32]
 8016c82:	7edb      	ldrb	r3, [r3, #27]
 8016c84:	3301      	adds	r3, #1
 8016c86:	b2da      	uxtb	r2, r3
 8016c88:	6a3b      	ldr	r3, [r7, #32]
 8016c8a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8016c8c:	6a3b      	ldr	r3, [r7, #32]
 8016c8e:	7eda      	ldrb	r2, [r3, #27]
 8016c90:	6a3b      	ldr	r3, [r7, #32]
 8016c92:	7f1b      	ldrb	r3, [r3, #28]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d323      	bcc.n	8016ce0 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8016c98:	6a3b      	ldr	r3, [r7, #32]
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 8016c9e:	4b36      	ldr	r3, [pc, #216]	@ (8016d78 <tcp_slowtmr+0x518>)
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016ca4:	6a3b      	ldr	r3, [r7, #32]
 8016ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d00a      	beq.n	8016cc4 <tcp_slowtmr+0x464>
 8016cae:	6a3b      	ldr	r3, [r7, #32]
 8016cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016cb4:	6a3a      	ldr	r2, [r7, #32]
 8016cb6:	6912      	ldr	r2, [r2, #16]
 8016cb8:	6a39      	ldr	r1, [r7, #32]
 8016cba:	4610      	mov	r0, r2
 8016cbc:	4798      	blx	r3
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	777b      	strb	r3, [r7, #29]
 8016cc2:	e001      	b.n	8016cc8 <tcp_slowtmr+0x468>
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8016cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8016d78 <tcp_slowtmr+0x518>)
 8016cca:	781b      	ldrb	r3, [r3, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	f47f add8 	bne.w	8016882 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016cd2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d102      	bne.n	8016ce0 <tcp_slowtmr+0x480>
          tcp_output(prev);
 8016cda:	6a38      	ldr	r0, [r7, #32]
 8016cdc:	f003 fedc 	bl	801aa98 <tcp_output>
  while (pcb != NULL) {
 8016ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	f47f add4 	bne.w	8016890 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8016cec:	4b23      	ldr	r3, [pc, #140]	@ (8016d7c <tcp_slowtmr+0x51c>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8016cf2:	e068      	b.n	8016dc6 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cf6:	7d1b      	ldrb	r3, [r3, #20]
 8016cf8:	2b0a      	cmp	r3, #10
 8016cfa:	d006      	beq.n	8016d0a <tcp_slowtmr+0x4aa>
 8016cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8016d68 <tcp_slowtmr+0x508>)
 8016cfe:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8016d02:	491f      	ldr	r1, [pc, #124]	@ (8016d80 <tcp_slowtmr+0x520>)
 8016d04:	481a      	ldr	r0, [pc, #104]	@ (8016d70 <tcp_slowtmr+0x510>)
 8016d06:	f00a fd0d 	bl	8021724 <iprintf>
    pcb_remove = 0;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016d0e:	4b12      	ldr	r3, [pc, #72]	@ (8016d58 <tcp_slowtmr+0x4f8>)
 8016d10:	681a      	ldr	r2, [r3, #0]
 8016d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d14:	6a1b      	ldr	r3, [r3, #32]
 8016d16:	1ad3      	subs	r3, r2, r3
 8016d18:	2bf0      	cmp	r3, #240	@ 0xf0
 8016d1a:	d902      	bls.n	8016d22 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 8016d1c:	7ffb      	ldrb	r3, [r7, #31]
 8016d1e:	3301      	adds	r3, #1
 8016d20:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016d22:	7ffb      	ldrb	r3, [r7, #31]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d049      	beq.n	8016dbc <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016d28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d2a:	f000 fbc7 	bl	80174bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016d2e:	6a3b      	ldr	r3, [r7, #32]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d029      	beq.n	8016d88 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016d34:	4b11      	ldr	r3, [pc, #68]	@ (8016d7c <tcp_slowtmr+0x51c>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d106      	bne.n	8016d4c <tcp_slowtmr+0x4ec>
 8016d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8016d68 <tcp_slowtmr+0x508>)
 8016d40:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8016d44:	490f      	ldr	r1, [pc, #60]	@ (8016d84 <tcp_slowtmr+0x524>)
 8016d46:	480a      	ldr	r0, [pc, #40]	@ (8016d70 <tcp_slowtmr+0x510>)
 8016d48:	f00a fcec 	bl	8021724 <iprintf>
        prev->next = pcb->next;
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d4e:	68da      	ldr	r2, [r3, #12]
 8016d50:	6a3b      	ldr	r3, [r7, #32]
 8016d52:	60da      	str	r2, [r3, #12]
 8016d54:	e028      	b.n	8016da8 <tcp_slowtmr+0x548>
 8016d56:	bf00      	nop
 8016d58:	2000bdbc 	.word	0x2000bdbc
 8016d5c:	000124f8 	.word	0x000124f8
 8016d60:	10624dd3 	.word	0x10624dd3
 8016d64:	2000bdc8 	.word	0x2000bdc8
 8016d68:	08025a3c 	.word	0x08025a3c
 8016d6c:	08025c74 	.word	0x08025c74
 8016d70:	08025a78 	.word	0x08025a78
 8016d74:	08025ca0 	.word	0x08025ca0
 8016d78:	2000bdd0 	.word	0x2000bdd0
 8016d7c:	2000bdcc 	.word	0x2000bdcc
 8016d80:	08025ccc 	.word	0x08025ccc
 8016d84:	08025cfc 	.word	0x08025cfc
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016d88:	4b13      	ldr	r3, [pc, #76]	@ (8016dd8 <tcp_slowtmr+0x578>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d006      	beq.n	8016da0 <tcp_slowtmr+0x540>
 8016d92:	4b12      	ldr	r3, [pc, #72]	@ (8016ddc <tcp_slowtmr+0x57c>)
 8016d94:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8016d98:	4911      	ldr	r1, [pc, #68]	@ (8016de0 <tcp_slowtmr+0x580>)
 8016d9a:	4812      	ldr	r0, [pc, #72]	@ (8016de4 <tcp_slowtmr+0x584>)
 8016d9c:	f00a fcc2 	bl	8021724 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da2:	68db      	ldr	r3, [r3, #12]
 8016da4:	4a0c      	ldr	r2, [pc, #48]	@ (8016dd8 <tcp_slowtmr+0x578>)
 8016da6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016daa:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8016dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dae:	68db      	ldr	r3, [r3, #12]
 8016db0:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8016db2:	69b9      	ldr	r1, [r7, #24]
 8016db4:	2001      	movs	r0, #1
 8016db6:	f7fd ff69 	bl	8014c8c <memp_free>
 8016dba:	e004      	b.n	8016dc6 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 8016dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dbe:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8016dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dc2:	68db      	ldr	r3, [r3, #12]
 8016dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8016dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d193      	bne.n	8016cf4 <tcp_slowtmr+0x494>
    }
  }
}
 8016dcc:	bf00      	nop
 8016dce:	bf00      	nop
 8016dd0:	3728      	adds	r7, #40	@ 0x28
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	2000bdcc 	.word	0x2000bdcc
 8016ddc:	08025a3c 	.word	0x08025a3c
 8016de0:	08025d24 	.word	0x08025d24
 8016de4:	08025a78 	.word	0x08025a78

08016de8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b082      	sub	sp, #8
 8016dec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016dee:	4b2d      	ldr	r3, [pc, #180]	@ (8016ea4 <tcp_fasttmr+0xbc>)
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	3301      	adds	r3, #1
 8016df4:	b2da      	uxtb	r2, r3
 8016df6:	4b2b      	ldr	r3, [pc, #172]	@ (8016ea4 <tcp_fasttmr+0xbc>)
 8016df8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8016ea8 <tcp_fasttmr+0xc0>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016e00:	e048      	b.n	8016e94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	7f5a      	ldrb	r2, [r3, #29]
 8016e06:	4b27      	ldr	r3, [pc, #156]	@ (8016ea4 <tcp_fasttmr+0xbc>)
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	d03f      	beq.n	8016e8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016e0e:	4b25      	ldr	r3, [pc, #148]	@ (8016ea4 <tcp_fasttmr+0xbc>)
 8016e10:	781a      	ldrb	r2, [r3, #0]
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	7e9b      	ldrb	r3, [r3, #26]
 8016e1a:	f003 0301 	and.w	r3, r3, #1
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d010      	beq.n	8016e44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	7e9b      	ldrb	r3, [r3, #26]
 8016e26:	f043 0302 	orr.w	r3, r3, #2
 8016e2a:	b2da      	uxtb	r2, r3
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f003 fe31 	bl	801aa98 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	7e9b      	ldrb	r3, [r3, #26]
 8016e3a:	f023 0303 	bic.w	r3, r3, #3
 8016e3e:	b2da      	uxtb	r2, r3
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	7e9b      	ldrb	r3, [r3, #26]
 8016e48:	f003 0308 	and.w	r3, r3, #8
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d009      	beq.n	8016e64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	7e9b      	ldrb	r3, [r3, #26]
 8016e54:	f023 0308 	bic.w	r3, r3, #8
 8016e58:	b2da      	uxtb	r2, r3
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f7ff f970 	bl	8016144 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d00a      	beq.n	8016e88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016e72:	4b0e      	ldr	r3, [pc, #56]	@ (8016eac <tcp_fasttmr+0xc4>)
 8016e74:	2200      	movs	r2, #0
 8016e76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	f000 f819 	bl	8016eb0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8016eac <tcp_fasttmr+0xc4>)
 8016e80:	781b      	ldrb	r3, [r3, #0]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d000      	beq.n	8016e88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016e86:	e7b8      	b.n	8016dfa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	607b      	str	r3, [r7, #4]
 8016e8c:	e002      	b.n	8016e94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	68db      	ldr	r3, [r3, #12]
 8016e92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d1b3      	bne.n	8016e02 <tcp_fasttmr+0x1a>
    }
  }
}
 8016e9a:	bf00      	nop
 8016e9c:	bf00      	nop
 8016e9e:	3708      	adds	r7, #8
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	2000bdd2 	.word	0x2000bdd2
 8016ea8:	2000bdc8 	.word	0x2000bdc8
 8016eac:	2000bdd0 	.word	0x2000bdd0

08016eb0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016eb0:	b590      	push	{r4, r7, lr}
 8016eb2:	b085      	sub	sp, #20
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ebc:	7b5b      	ldrb	r3, [r3, #13]
 8016ebe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ec4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d00b      	beq.n	8016eee <tcp_process_refused_data+0x3e>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	6918      	ldr	r0, [r3, #16]
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	68ba      	ldr	r2, [r7, #8]
 8016ee4:	6879      	ldr	r1, [r7, #4]
 8016ee6:	47a0      	blx	r4
 8016ee8:	4603      	mov	r3, r0
 8016eea:	73fb      	strb	r3, [r7, #15]
 8016eec:	e007      	b.n	8016efe <tcp_process_refused_data+0x4e>
 8016eee:	2300      	movs	r3, #0
 8016ef0:	68ba      	ldr	r2, [r7, #8]
 8016ef2:	6879      	ldr	r1, [r7, #4]
 8016ef4:	2000      	movs	r0, #0
 8016ef6:	f000 f89b 	bl	8017030 <tcp_recv_null>
 8016efa:	4603      	mov	r3, r0
 8016efc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d12a      	bne.n	8016f5c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8016f06:	7bbb      	ldrb	r3, [r7, #14]
 8016f08:	f003 0320 	and.w	r3, r3, #32
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d033      	beq.n	8016f78 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f14:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016f18:	d005      	beq.n	8016f26 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f1e:	3301      	adds	r3, #1
 8016f20:	b29a      	uxth	r2, r3
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d00b      	beq.n	8016f48 <tcp_process_refused_data+0x98>
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6918      	ldr	r0, [r3, #16]
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	6879      	ldr	r1, [r7, #4]
 8016f40:	47a0      	blx	r4
 8016f42:	4603      	mov	r3, r0
 8016f44:	73fb      	strb	r3, [r7, #15]
 8016f46:	e001      	b.n	8016f4c <tcp_process_refused_data+0x9c>
 8016f48:	2300      	movs	r3, #0
 8016f4a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f50:	f113 0f0d 	cmn.w	r3, #13
 8016f54:	d110      	bne.n	8016f78 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8016f56:	f06f 030c 	mvn.w	r3, #12
 8016f5a:	e00e      	b.n	8016f7a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8016f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f60:	f113 0f0d 	cmn.w	r3, #13
 8016f64:	d102      	bne.n	8016f6c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016f66:	f06f 030c 	mvn.w	r3, #12
 8016f6a:	e006      	b.n	8016f7a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	68ba      	ldr	r2, [r7, #8]
 8016f70:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8016f72:	f06f 0304 	mvn.w	r3, #4
 8016f76:	e000      	b.n	8016f7a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8016f78:	2300      	movs	r3, #0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3714      	adds	r7, #20
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd90      	pop	{r4, r7, pc}

08016f82 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016f82:	b580      	push	{r7, lr}
 8016f84:	b084      	sub	sp, #16
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016f8a:	e007      	b.n	8016f9c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f000 f80a 	bl	8016fac <tcp_seg_free>
    seg = next;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d1f4      	bne.n	8016f8c <tcp_segs_free+0xa>
  }
}
 8016fa2:	bf00      	nop
 8016fa4:	bf00      	nop
 8016fa6:	3710      	adds	r7, #16
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd80      	pop	{r7, pc}

08016fac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b082      	sub	sp, #8
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d00c      	beq.n	8016fd4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	685b      	ldr	r3, [r3, #4]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d004      	beq.n	8016fcc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	685b      	ldr	r3, [r3, #4]
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f7fe fbbc 	bl	8015744 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016fcc:	6879      	ldr	r1, [r7, #4]
 8016fce:	2003      	movs	r0, #3
 8016fd0:	f7fd fe5c 	bl	8014c8c <memp_free>
  }
}
 8016fd4:	bf00      	nop
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b083      	sub	sp, #12
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	78fa      	ldrb	r2, [r7, #3]
 8016fec:	755a      	strb	r2, [r3, #21]
}
 8016fee:	bf00      	nop
 8016ff0:	370c      	adds	r7, #12
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	bc80      	pop	{r7}
 8016ff6:	4770      	bx	lr

08016ff8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b084      	sub	sp, #16
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017000:	2003      	movs	r0, #3
 8017002:	f7fd fdf1 	bl	8014be8 <memp_malloc>
 8017006:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d101      	bne.n	8017012 <tcp_seg_copy+0x1a>
    return NULL;
 801700e:	2300      	movs	r3, #0
 8017010:	e00a      	b.n	8017028 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017012:	2210      	movs	r2, #16
 8017014:	6879      	ldr	r1, [r7, #4]
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	f00a fe2f 	bl	8021c7a <memcpy>
  pbuf_ref(cseg->p);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	4618      	mov	r0, r3
 8017022:	f7fe fc39 	bl	8015898 <pbuf_ref>
  return cseg;
 8017026:	68fb      	ldr	r3, [r7, #12]
}
 8017028:	4618      	mov	r0, r3
 801702a:	3710      	adds	r7, #16
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}

08017030 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b084      	sub	sp, #16
 8017034:	af00      	add	r7, sp, #0
 8017036:	60f8      	str	r0, [r7, #12]
 8017038:	60b9      	str	r1, [r7, #8]
 801703a:	607a      	str	r2, [r7, #4]
 801703c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d009      	beq.n	8017058 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	891b      	ldrh	r3, [r3, #8]
 8017048:	4619      	mov	r1, r3
 801704a:	68b8      	ldr	r0, [r7, #8]
 801704c:	f7ff fb6a 	bl	8016724 <tcp_recved>
    pbuf_free(p);
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f7fe fb77 	bl	8015744 <pbuf_free>
 8017056:	e008      	b.n	801706a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8017058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d104      	bne.n	801706a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8017060:	68b8      	ldr	r0, [r7, #8]
 8017062:	f7ff f8ef 	bl	8016244 <tcp_close>
 8017066:	4603      	mov	r3, r0
 8017068:	e000      	b.n	801706c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801706a:	2300      	movs	r3, #0
}
 801706c:	4618      	mov	r0, r3
 801706e:	3710      	adds	r7, #16
 8017070:	46bd      	mov	sp, r7
 8017072:	bd80      	pop	{r7, pc}

08017074 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b086      	sub	sp, #24
 8017078:	af00      	add	r7, sp, #0
 801707a:	4603      	mov	r3, r0
 801707c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801707e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017082:	2b00      	cmp	r3, #0
 8017084:	db01      	blt.n	801708a <tcp_kill_prio+0x16>
 8017086:	79fb      	ldrb	r3, [r7, #7]
 8017088:	e000      	b.n	801708c <tcp_kill_prio+0x18>
 801708a:	237f      	movs	r3, #127	@ 0x7f
 801708c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801708e:	2300      	movs	r3, #0
 8017090:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017092:	2300      	movs	r3, #0
 8017094:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017096:	4b16      	ldr	r3, [pc, #88]	@ (80170f0 <tcp_kill_prio+0x7c>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	617b      	str	r3, [r7, #20]
 801709c:	e01a      	b.n	80170d4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	7d5b      	ldrb	r3, [r3, #21]
 80170a2:	7afa      	ldrb	r2, [r7, #11]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d312      	bcc.n	80170ce <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80170a8:	4b12      	ldr	r3, [pc, #72]	@ (80170f4 <tcp_kill_prio+0x80>)
 80170aa:	681a      	ldr	r2, [r3, #0]
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	6a1b      	ldr	r3, [r3, #32]
 80170b0:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80170b2:	68fa      	ldr	r2, [r7, #12]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d80a      	bhi.n	80170ce <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80170b8:	4b0e      	ldr	r3, [pc, #56]	@ (80170f4 <tcp_kill_prio+0x80>)
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	697b      	ldr	r3, [r7, #20]
 80170be:	6a1b      	ldr	r3, [r3, #32]
 80170c0:	1ad3      	subs	r3, r2, r3
 80170c2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80170c8:	697b      	ldr	r3, [r7, #20]
 80170ca:	7d5b      	ldrb	r3, [r3, #21]
 80170cc:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	617b      	str	r3, [r7, #20]
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d1e1      	bne.n	801709e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80170da:	693b      	ldr	r3, [r7, #16]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d002      	beq.n	80170e6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80170e0:	6938      	ldr	r0, [r7, #16]
 80170e2:	f7ff f979 	bl	80163d8 <tcp_abort>
  }
}
 80170e6:	bf00      	nop
 80170e8:	3718      	adds	r7, #24
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	2000bdc8 	.word	0x2000bdc8
 80170f4:	2000bdbc 	.word	0x2000bdbc

080170f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b086      	sub	sp, #24
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	4603      	mov	r3, r0
 8017100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017102:	79fb      	ldrb	r3, [r7, #7]
 8017104:	2b08      	cmp	r3, #8
 8017106:	d009      	beq.n	801711c <tcp_kill_state+0x24>
 8017108:	79fb      	ldrb	r3, [r7, #7]
 801710a:	2b09      	cmp	r3, #9
 801710c:	d006      	beq.n	801711c <tcp_kill_state+0x24>
 801710e:	4b1a      	ldr	r3, [pc, #104]	@ (8017178 <tcp_kill_state+0x80>)
 8017110:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8017114:	4919      	ldr	r1, [pc, #100]	@ (801717c <tcp_kill_state+0x84>)
 8017116:	481a      	ldr	r0, [pc, #104]	@ (8017180 <tcp_kill_state+0x88>)
 8017118:	f00a fb04 	bl	8021724 <iprintf>

  inactivity = 0;
 801711c:	2300      	movs	r3, #0
 801711e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017120:	2300      	movs	r3, #0
 8017122:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017124:	4b17      	ldr	r3, [pc, #92]	@ (8017184 <tcp_kill_state+0x8c>)
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	617b      	str	r3, [r7, #20]
 801712a:	e017      	b.n	801715c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	7d1b      	ldrb	r3, [r3, #20]
 8017130:	79fa      	ldrb	r2, [r7, #7]
 8017132:	429a      	cmp	r2, r3
 8017134:	d10f      	bne.n	8017156 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017136:	4b14      	ldr	r3, [pc, #80]	@ (8017188 <tcp_kill_state+0x90>)
 8017138:	681a      	ldr	r2, [r3, #0]
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	6a1b      	ldr	r3, [r3, #32]
 801713e:	1ad3      	subs	r3, r2, r3
 8017140:	68fa      	ldr	r2, [r7, #12]
 8017142:	429a      	cmp	r2, r3
 8017144:	d807      	bhi.n	8017156 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017146:	4b10      	ldr	r3, [pc, #64]	@ (8017188 <tcp_kill_state+0x90>)
 8017148:	681a      	ldr	r2, [r3, #0]
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	6a1b      	ldr	r3, [r3, #32]
 801714e:	1ad3      	subs	r3, r2, r3
 8017150:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	68db      	ldr	r3, [r3, #12]
 801715a:	617b      	str	r3, [r7, #20]
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d1e4      	bne.n	801712c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017162:	693b      	ldr	r3, [r7, #16]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d003      	beq.n	8017170 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017168:	2100      	movs	r1, #0
 801716a:	6938      	ldr	r0, [r7, #16]
 801716c:	f7ff f882 	bl	8016274 <tcp_abandon>
  }
}
 8017170:	bf00      	nop
 8017172:	3718      	adds	r7, #24
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}
 8017178:	08025a3c 	.word	0x08025a3c
 801717c:	08025d4c 	.word	0x08025d4c
 8017180:	08025a78 	.word	0x08025a78
 8017184:	2000bdc8 	.word	0x2000bdc8
 8017188:	2000bdbc 	.word	0x2000bdbc

0801718c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b084      	sub	sp, #16
 8017190:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017196:	2300      	movs	r3, #0
 8017198:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801719a:	4b12      	ldr	r3, [pc, #72]	@ (80171e4 <tcp_kill_timewait+0x58>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	60fb      	str	r3, [r7, #12]
 80171a0:	e012      	b.n	80171c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80171a2:	4b11      	ldr	r3, [pc, #68]	@ (80171e8 <tcp_kill_timewait+0x5c>)
 80171a4:	681a      	ldr	r2, [r3, #0]
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	6a1b      	ldr	r3, [r3, #32]
 80171aa:	1ad3      	subs	r3, r2, r3
 80171ac:	687a      	ldr	r2, [r7, #4]
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d807      	bhi.n	80171c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80171b2:	4b0d      	ldr	r3, [pc, #52]	@ (80171e8 <tcp_kill_timewait+0x5c>)
 80171b4:	681a      	ldr	r2, [r3, #0]
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	6a1b      	ldr	r3, [r3, #32]
 80171ba:	1ad3      	subs	r3, r2, r3
 80171bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	68db      	ldr	r3, [r3, #12]
 80171c6:	60fb      	str	r3, [r7, #12]
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d1e9      	bne.n	80171a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d002      	beq.n	80171da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80171d4:	68b8      	ldr	r0, [r7, #8]
 80171d6:	f7ff f8ff 	bl	80163d8 <tcp_abort>
  }
}
 80171da:	bf00      	nop
 80171dc:	3710      	adds	r7, #16
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}
 80171e2:	bf00      	nop
 80171e4:	2000bdcc 	.word	0x2000bdcc
 80171e8:	2000bdbc 	.word	0x2000bdbc

080171ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	4603      	mov	r3, r0
 80171f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80171f6:	2001      	movs	r0, #1
 80171f8:	f7fd fcf6 	bl	8014be8 <memp_malloc>
 80171fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d14c      	bne.n	801729e <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017204:	f7ff ffc2 	bl	801718c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017208:	2001      	movs	r0, #1
 801720a:	f7fd fced 	bl	8014be8 <memp_malloc>
 801720e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d139      	bne.n	801728a <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017216:	2009      	movs	r0, #9
 8017218:	f7ff ff6e 	bl	80170f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801721c:	2001      	movs	r0, #1
 801721e:	f7fd fce3 	bl	8014be8 <memp_malloc>
 8017222:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d125      	bne.n	8017276 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801722a:	2008      	movs	r0, #8
 801722c:	f7ff ff64 	bl	80170f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017230:	2001      	movs	r0, #1
 8017232:	f7fd fcd9 	bl	8014be8 <memp_malloc>
 8017236:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d111      	bne.n	8017262 <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801723e:	79fb      	ldrb	r3, [r7, #7]
 8017240:	4618      	mov	r0, r3
 8017242:	f7ff ff17 	bl	8017074 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017246:	2001      	movs	r0, #1
 8017248:	f7fd fcce 	bl	8014be8 <memp_malloc>
 801724c:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d006      	beq.n	8017262 <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017254:	4b36      	ldr	r3, [pc, #216]	@ (8017330 <tcp_alloc+0x144>)
 8017256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801725a:	881a      	ldrh	r2, [r3, #0]
 801725c:	3a01      	subs	r2, #1
 801725e:	b292      	uxth	r2, r2
 8017260:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d006      	beq.n	8017276 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017268:	4b31      	ldr	r3, [pc, #196]	@ (8017330 <tcp_alloc+0x144>)
 801726a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801726e:	881a      	ldrh	r2, [r3, #0]
 8017270:	3a01      	subs	r2, #1
 8017272:	b292      	uxth	r2, r2
 8017274:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d006      	beq.n	801728a <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801727c:	4b2c      	ldr	r3, [pc, #176]	@ (8017330 <tcp_alloc+0x144>)
 801727e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017282:	881a      	ldrh	r2, [r3, #0]
 8017284:	3a01      	subs	r2, #1
 8017286:	b292      	uxth	r2, r2
 8017288:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d006      	beq.n	801729e <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017290:	4b27      	ldr	r3, [pc, #156]	@ (8017330 <tcp_alloc+0x144>)
 8017292:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017296:	881a      	ldrh	r2, [r3, #0]
 8017298:	3a01      	subs	r2, #1
 801729a:	b292      	uxth	r2, r2
 801729c:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d03f      	beq.n	8017324 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80172a4:	2298      	movs	r2, #152	@ 0x98
 80172a6:	2100      	movs	r1, #0
 80172a8:	68f8      	ldr	r0, [r7, #12]
 80172aa:	f00a fc11 	bl	8021ad0 <memset>
    pcb->prio = prio;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	79fa      	ldrb	r2, [r7, #7]
 80172b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80172ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80172c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	22ff      	movs	r2, #255	@ 0xff
 80172d2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80172da:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2206      	movs	r2, #6
 80172e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	2206      	movs	r2, #6
 80172e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80172f0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	2201      	movs	r2, #1
 80172f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80172fa:	4b0e      	ldr	r3, [pc, #56]	@ (8017334 <tcp_alloc+0x148>)
 80172fc:	681a      	ldr	r2, [r3, #0]
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017302:	4b0d      	ldr	r3, [pc, #52]	@ (8017338 <tcp_alloc+0x14c>)
 8017304:	781a      	ldrb	r2, [r3, #0]
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017310:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	4a09      	ldr	r2, [pc, #36]	@ (801733c <tcp_alloc+0x150>)
 8017318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	4a08      	ldr	r2, [pc, #32]	@ (8017340 <tcp_alloc+0x154>)
 8017320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017324:	68fb      	ldr	r3, [r7, #12]
}
 8017326:	4618      	mov	r0, r3
 8017328:	3710      	adds	r7, #16
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	2000bc24 	.word	0x2000bc24
 8017334:	2000bdbc 	.word	0x2000bdbc
 8017338:	2000bdd2 	.word	0x2000bdd2
 801733c:	08017031 	.word	0x08017031
 8017340:	006ddd00 	.word	0x006ddd00

08017344 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b084      	sub	sp, #16
 8017348:	af00      	add	r7, sp, #0
 801734a:	4603      	mov	r3, r0
 801734c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801734e:	2040      	movs	r0, #64	@ 0x40
 8017350:	f7ff ff4c 	bl	80171ec <tcp_alloc>
 8017354:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017356:	68fb      	ldr	r3, [r7, #12]
}
 8017358:	4618      	mov	r0, r3
 801735a:	3710      	adds	r7, #16
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}

08017360 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017360:	b480      	push	{r7}
 8017362:	b083      	sub	sp, #12
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
 8017368:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d002      	beq.n	8017376 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	683a      	ldr	r2, [r7, #0]
 8017374:	611a      	str	r2, [r3, #16]
  }
}
 8017376:	bf00      	nop
 8017378:	370c      	adds	r7, #12
 801737a:	46bd      	mov	sp, r7
 801737c:	bc80      	pop	{r7}
 801737e:	4770      	bx	lr

08017380 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b082      	sub	sp, #8
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00e      	beq.n	80173ae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	7d1b      	ldrb	r3, [r3, #20]
 8017394:	2b01      	cmp	r3, #1
 8017396:	d106      	bne.n	80173a6 <tcp_recv+0x26>
 8017398:	4b07      	ldr	r3, [pc, #28]	@ (80173b8 <tcp_recv+0x38>)
 801739a:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 801739e:	4907      	ldr	r1, [pc, #28]	@ (80173bc <tcp_recv+0x3c>)
 80173a0:	4807      	ldr	r0, [pc, #28]	@ (80173c0 <tcp_recv+0x40>)
 80173a2:	f00a f9bf 	bl	8021724 <iprintf>
    pcb->recv = recv;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	683a      	ldr	r2, [r7, #0]
 80173aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80173ae:	bf00      	nop
 80173b0:	3708      	adds	r7, #8
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop
 80173b8:	08025a3c 	.word	0x08025a3c
 80173bc:	08025d5c 	.word	0x08025d5c
 80173c0:	08025a78 	.word	0x08025a78

080173c4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b082      	sub	sp, #8
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d00d      	beq.n	80173f0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	7d1b      	ldrb	r3, [r3, #20]
 80173d8:	2b01      	cmp	r3, #1
 80173da:	d106      	bne.n	80173ea <tcp_sent+0x26>
 80173dc:	4b06      	ldr	r3, [pc, #24]	@ (80173f8 <tcp_sent+0x34>)
 80173de:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 80173e2:	4906      	ldr	r1, [pc, #24]	@ (80173fc <tcp_sent+0x38>)
 80173e4:	4806      	ldr	r0, [pc, #24]	@ (8017400 <tcp_sent+0x3c>)
 80173e6:	f00a f99d 	bl	8021724 <iprintf>
    pcb->sent = sent;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	683a      	ldr	r2, [r7, #0]
 80173ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 80173f0:	bf00      	nop
 80173f2:	3708      	adds	r7, #8
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	08025a3c 	.word	0x08025a3c
 80173fc:	08025d84 	.word	0x08025d84
 8017400:	08025a78 	.word	0x08025a78

08017404 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d00e      	beq.n	8017432 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	7d1b      	ldrb	r3, [r3, #20]
 8017418:	2b01      	cmp	r3, #1
 801741a:	d106      	bne.n	801742a <tcp_err+0x26>
 801741c:	4b07      	ldr	r3, [pc, #28]	@ (801743c <tcp_err+0x38>)
 801741e:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 8017422:	4907      	ldr	r1, [pc, #28]	@ (8017440 <tcp_err+0x3c>)
 8017424:	4807      	ldr	r0, [pc, #28]	@ (8017444 <tcp_err+0x40>)
 8017426:	f00a f97d 	bl	8021724 <iprintf>
    pcb->errf = err;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	683a      	ldr	r2, [r7, #0]
 801742e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 8017432:	bf00      	nop
 8017434:	3708      	adds	r7, #8
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}
 801743a:	bf00      	nop
 801743c:	08025a3c 	.word	0x08025a3c
 8017440:	08025dac 	.word	0x08025dac
 8017444:	08025a78 	.word	0x08025a78

08017448 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017448:	b480      	push	{r7}
 801744a:	b085      	sub	sp, #20
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d008      	beq.n	801746a <tcp_accept+0x22>
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	7d1b      	ldrb	r3, [r3, #20]
 801745c:	2b01      	cmp	r3, #1
 801745e:	d104      	bne.n	801746a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	683a      	ldr	r2, [r7, #0]
 8017468:	619a      	str	r2, [r3, #24]
  }
}
 801746a:	bf00      	nop
 801746c:	3714      	adds	r7, #20
 801746e:	46bd      	mov	sp, r7
 8017470:	bc80      	pop	{r7}
 8017472:	4770      	bx	lr

08017474 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b084      	sub	sp, #16
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	4613      	mov	r3, r2
 8017480:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	7d1b      	ldrb	r3, [r3, #20]
 8017486:	2b01      	cmp	r3, #1
 8017488:	d106      	bne.n	8017498 <tcp_poll+0x24>
 801748a:	4b09      	ldr	r3, [pc, #36]	@ (80174b0 <tcp_poll+0x3c>)
 801748c:	f240 7203 	movw	r2, #1795	@ 0x703
 8017490:	4908      	ldr	r1, [pc, #32]	@ (80174b4 <tcp_poll+0x40>)
 8017492:	4809      	ldr	r0, [pc, #36]	@ (80174b8 <tcp_poll+0x44>)
 8017494:	f00a f946 	bl	8021724 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	68ba      	ldr	r2, [r7, #8]
 801749c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	79fa      	ldrb	r2, [r7, #7]
 80174a4:	771a      	strb	r2, [r3, #28]
}
 80174a6:	bf00      	nop
 80174a8:	3710      	adds	r7, #16
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}
 80174ae:	bf00      	nop
 80174b0:	08025a3c 	.word	0x08025a3c
 80174b4:	08025dd4 	.word	0x08025dd4
 80174b8:	08025a78 	.word	0x08025a78

080174bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	7d1b      	ldrb	r3, [r3, #20]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d034      	beq.n	8017536 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80174d0:	2b0a      	cmp	r3, #10
 80174d2:	d030      	beq.n	8017536 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80174d8:	2b01      	cmp	r3, #1
 80174da:	d02c      	beq.n	8017536 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d007      	beq.n	80174f4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7fe f92b 	bl	8015744 <pbuf_free>
      pcb->refused_data = NULL;
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2200      	movs	r2, #0
 80174f2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7ff fd42 	bl	8016f82 <tcp_segs_free>
    pcb->ooseq = NULL;
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	2200      	movs	r2, #0
 8017502:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801750a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017510:	4618      	mov	r0, r3
 8017512:	f7ff fd36 	bl	8016f82 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801751a:	4618      	mov	r0, r3
 801751c:	f7ff fd31 	bl	8016f82 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2200      	movs	r2, #0
 8017524:	669a      	str	r2, [r3, #104]	@ 0x68
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	2200      	movs	r2, #0
 8017532:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8017536:	bf00      	nop
 8017538:	3708      	adds	r7, #8
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}
	...

08017540 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b084      	sub	sp, #16
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	683a      	ldr	r2, [r7, #0]
 8017550:	429a      	cmp	r2, r3
 8017552:	d105      	bne.n	8017560 <tcp_pcb_remove+0x20>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	68da      	ldr	r2, [r3, #12]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	601a      	str	r2, [r3, #0]
 801755e:	e013      	b.n	8017588 <tcp_pcb_remove+0x48>
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	60fb      	str	r3, [r7, #12]
 8017566:	e00c      	b.n	8017582 <tcp_pcb_remove+0x42>
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	68db      	ldr	r3, [r3, #12]
 801756c:	683a      	ldr	r2, [r7, #0]
 801756e:	429a      	cmp	r2, r3
 8017570:	d104      	bne.n	801757c <tcp_pcb_remove+0x3c>
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	68da      	ldr	r2, [r3, #12]
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	60da      	str	r2, [r3, #12]
 801757a:	e005      	b.n	8017588 <tcp_pcb_remove+0x48>
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	60fb      	str	r3, [r7, #12]
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d1ef      	bne.n	8017568 <tcp_pcb_remove+0x28>
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	2200      	movs	r2, #0
 801758c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801758e:	6838      	ldr	r0, [r7, #0]
 8017590:	f7ff ff94 	bl	80174bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	7d1b      	ldrb	r3, [r3, #20]
 8017598:	2b0a      	cmp	r3, #10
 801759a:	d013      	beq.n	80175c4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d00f      	beq.n	80175c4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	7e9b      	ldrb	r3, [r3, #26]
 80175a8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d009      	beq.n	80175c4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	7e9b      	ldrb	r3, [r3, #26]
 80175b4:	f043 0302 	orr.w	r3, r3, #2
 80175b8:	b2da      	uxtb	r2, r3
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80175be:	6838      	ldr	r0, [r7, #0]
 80175c0:	f003 fa6a 	bl	801aa98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	7d1b      	ldrb	r3, [r3, #20]
 80175c8:	2b01      	cmp	r3, #1
 80175ca:	d020      	beq.n	801760e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d006      	beq.n	80175e2 <tcp_pcb_remove+0xa2>
 80175d4:	4b13      	ldr	r3, [pc, #76]	@ (8017624 <tcp_pcb_remove+0xe4>)
 80175d6:	f240 7253 	movw	r2, #1875	@ 0x753
 80175da:	4913      	ldr	r1, [pc, #76]	@ (8017628 <tcp_pcb_remove+0xe8>)
 80175dc:	4813      	ldr	r0, [pc, #76]	@ (801762c <tcp_pcb_remove+0xec>)
 80175de:	f00a f8a1 	bl	8021724 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d006      	beq.n	80175f8 <tcp_pcb_remove+0xb8>
 80175ea:	4b0e      	ldr	r3, [pc, #56]	@ (8017624 <tcp_pcb_remove+0xe4>)
 80175ec:	f240 7254 	movw	r2, #1876	@ 0x754
 80175f0:	490f      	ldr	r1, [pc, #60]	@ (8017630 <tcp_pcb_remove+0xf0>)
 80175f2:	480e      	ldr	r0, [pc, #56]	@ (801762c <tcp_pcb_remove+0xec>)
 80175f4:	f00a f896 	bl	8021724 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d006      	beq.n	801760e <tcp_pcb_remove+0xce>
 8017600:	4b08      	ldr	r3, [pc, #32]	@ (8017624 <tcp_pcb_remove+0xe4>)
 8017602:	f240 7256 	movw	r2, #1878	@ 0x756
 8017606:	490b      	ldr	r1, [pc, #44]	@ (8017634 <tcp_pcb_remove+0xf4>)
 8017608:	4808      	ldr	r0, [pc, #32]	@ (801762c <tcp_pcb_remove+0xec>)
 801760a:	f00a f88b 	bl	8021724 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	2200      	movs	r2, #0
 8017612:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	2200      	movs	r2, #0
 8017618:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801761a:	bf00      	nop
 801761c:	3710      	adds	r7, #16
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}
 8017622:	bf00      	nop
 8017624:	08025a3c 	.word	0x08025a3c
 8017628:	08025df4 	.word	0x08025df4
 801762c:	08025a78 	.word	0x08025a78
 8017630:	08025e0c 	.word	0x08025e0c
 8017634:	08025e28 	.word	0x08025e28

08017638 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017638:	b480      	push	{r7}
 801763a:	b083      	sub	sp, #12
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017640:	4b06      	ldr	r3, [pc, #24]	@ (801765c <tcp_next_iss+0x24>)
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	4b06      	ldr	r3, [pc, #24]	@ (8017660 <tcp_next_iss+0x28>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	4413      	add	r3, r2
 801764a:	4a04      	ldr	r2, [pc, #16]	@ (801765c <tcp_next_iss+0x24>)
 801764c:	6013      	str	r3, [r2, #0]
  return iss;
 801764e:	4b03      	ldr	r3, [pc, #12]	@ (801765c <tcp_next_iss+0x24>)
 8017650:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017652:	4618      	mov	r0, r3
 8017654:	370c      	adds	r7, #12
 8017656:	46bd      	mov	sp, r7
 8017658:	bc80      	pop	{r7}
 801765a:	4770      	bx	lr
 801765c:	20000114 	.word	0x20000114
 8017660:	2000bdbc 	.word	0x2000bdbc

08017664 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b084      	sub	sp, #16
 8017668:	af00      	add	r7, sp, #0
 801766a:	4603      	mov	r3, r0
 801766c:	6039      	str	r1, [r7, #0]
 801766e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8017670:	6838      	ldr	r0, [r7, #0]
 8017672:	f007 fda9 	bl	801f1c8 <ip4_route>
 8017676:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d101      	bne.n	8017682 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801767e:	88fb      	ldrh	r3, [r7, #6]
 8017680:	e010      	b.n	80176a4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017686:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017688:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d008      	beq.n	80176a2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8017690:	897b      	ldrh	r3, [r7, #10]
 8017692:	3b28      	subs	r3, #40	@ 0x28
 8017694:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017696:	893a      	ldrh	r2, [r7, #8]
 8017698:	88fb      	ldrh	r3, [r7, #6]
 801769a:	4293      	cmp	r3, r2
 801769c:	bf28      	it	cs
 801769e:	4613      	movcs	r3, r2
 80176a0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80176a2:	88fb      	ldrh	r3, [r7, #6]
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3710      	adds	r7, #16
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
 80176b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80176ba:	e011      	b.n	80176e0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	681a      	ldr	r2, [r3, #0]
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d108      	bne.n	80176da <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80176ce:	68f8      	ldr	r0, [r7, #12]
 80176d0:	f7fe fe82 	bl	80163d8 <tcp_abort>
      pcb = next;
 80176d4:	68bb      	ldr	r3, [r7, #8]
 80176d6:	60fb      	str	r3, [r7, #12]
 80176d8:	e002      	b.n	80176e0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	68db      	ldr	r3, [r3, #12]
 80176de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d1ea      	bne.n	80176bc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80176e6:	bf00      	nop
 80176e8:	bf00      	nop
 80176ea:	3710      	adds	r7, #16
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}

080176f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d02c      	beq.n	801775a <tcp_netif_ip_addr_changed+0x6a>
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d028      	beq.n	801775a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017708:	4b16      	ldr	r3, [pc, #88]	@ (8017764 <tcp_netif_ip_addr_changed+0x74>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	4619      	mov	r1, r3
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	f7ff ffcc 	bl	80176ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017714:	4b14      	ldr	r3, [pc, #80]	@ (8017768 <tcp_netif_ip_addr_changed+0x78>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	4619      	mov	r1, r3
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f7ff ffc6 	bl	80176ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d019      	beq.n	801775a <tcp_netif_ip_addr_changed+0x6a>
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d015      	beq.n	801775a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801772e:	4b0f      	ldr	r3, [pc, #60]	@ (801776c <tcp_netif_ip_addr_changed+0x7c>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	60fb      	str	r3, [r7, #12]
 8017734:	e00e      	b.n	8017754 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	68db      	ldr	r3, [r3, #12]
 801773a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	681a      	ldr	r2, [r3, #0]
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	429a      	cmp	r2, r3
 8017746:	d103      	bne.n	8017750 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	681a      	ldr	r2, [r3, #0]
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	60fb      	str	r3, [r7, #12]
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d1ed      	bne.n	8017736 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801775a:	bf00      	nop
 801775c:	3710      	adds	r7, #16
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}
 8017762:	bf00      	nop
 8017764:	2000bdc8 	.word	0x2000bdc8
 8017768:	2000bdc0 	.word	0x2000bdc0
 801776c:	2000bdc4 	.word	0x2000bdc4

08017770 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017770:	b590      	push	{r4, r7, lr}
 8017772:	b08b      	sub	sp, #44	@ 0x2c
 8017774:	af02      	add	r7, sp, #8
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 801777a:	4b99      	ldr	r3, [pc, #612]	@ (80179e0 <tcp_input+0x270>)
 801777c:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8017780:	3301      	adds	r3, #1
 8017782:	b29a      	uxth	r2, r3
 8017784:	4b96      	ldr	r3, [pc, #600]	@ (80179e0 <tcp_input+0x270>)
 8017786:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 801778a:	4b95      	ldr	r3, [pc, #596]	@ (80179e0 <tcp_input+0x270>)
 801778c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8017790:	3301      	adds	r3, #1
 8017792:	4a93      	ldr	r2, [pc, #588]	@ (80179e0 <tcp_input+0x270>)
 8017794:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  tcphdr = (struct tcp_hdr *)p->payload;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	4a91      	ldr	r2, [pc, #580]	@ (80179e4 <tcp_input+0x274>)
 801779e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	895b      	ldrh	r3, [r3, #10]
 80177a4:	2b13      	cmp	r3, #19
 80177a6:	d808      	bhi.n	80177ba <tcp_input+0x4a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 80177a8:	4b8d      	ldr	r3, [pc, #564]	@ (80179e0 <tcp_input+0x270>)
 80177aa:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80177ae:	3301      	adds	r3, #1
 80177b0:	b29a      	uxth	r2, r3
 80177b2:	4b8b      	ldr	r3, [pc, #556]	@ (80179e0 <tcp_input+0x270>)
 80177b4:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 80177b8:	e3e0      	b.n	8017f7c <tcp_input+0x80c>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80177ba:	4b8b      	ldr	r3, [pc, #556]	@ (80179e8 <tcp_input+0x278>)
 80177bc:	695b      	ldr	r3, [r3, #20]
 80177be:	4a8a      	ldr	r2, [pc, #552]	@ (80179e8 <tcp_input+0x278>)
 80177c0:	6812      	ldr	r2, [r2, #0]
 80177c2:	4611      	mov	r1, r2
 80177c4:	4618      	mov	r0, r3
 80177c6:	f008 f863 	bl	801f890 <ip4_addr_isbroadcast_u32>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d105      	bne.n	80177dc <tcp_input+0x6c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80177d0:	4b85      	ldr	r3, [pc, #532]	@ (80179e8 <tcp_input+0x278>)
 80177d2:	695b      	ldr	r3, [r3, #20]
 80177d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80177d8:	2be0      	cmp	r3, #224	@ 0xe0
 80177da:	d108      	bne.n	80177ee <tcp_input+0x7e>
    TCP_STATS_INC(tcp.proterr);
 80177dc:	4b80      	ldr	r3, [pc, #512]	@ (80179e0 <tcp_input+0x270>)
 80177de:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80177e2:	3301      	adds	r3, #1
 80177e4:	b29a      	uxth	r2, r3
 80177e6:	4b7e      	ldr	r3, [pc, #504]	@ (80179e0 <tcp_input+0x270>)
 80177e8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 80177ec:	e3c6      	b.n	8017f7c <tcp_input+0x80c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80177ee:	4b7d      	ldr	r3, [pc, #500]	@ (80179e4 <tcp_input+0x274>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	899b      	ldrh	r3, [r3, #12]
 80177f4:	b29b      	uxth	r3, r3
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7fc fd4c 	bl	8014294 <lwip_htons>
 80177fc:	4603      	mov	r3, r0
 80177fe:	0b1b      	lsrs	r3, r3, #12
 8017800:	b29b      	uxth	r3, r3
 8017802:	b2db      	uxtb	r3, r3
 8017804:	009b      	lsls	r3, r3, #2
 8017806:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017808:	7cbb      	ldrb	r3, [r7, #18]
 801780a:	2b13      	cmp	r3, #19
 801780c:	d905      	bls.n	801781a <tcp_input+0xaa>
 801780e:	7cbb      	ldrb	r3, [r7, #18]
 8017810:	b29a      	uxth	r2, r3
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	891b      	ldrh	r3, [r3, #8]
 8017816:	429a      	cmp	r2, r3
 8017818:	d908      	bls.n	801782c <tcp_input+0xbc>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 801781a:	4b71      	ldr	r3, [pc, #452]	@ (80179e0 <tcp_input+0x270>)
 801781c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017820:	3301      	adds	r3, #1
 8017822:	b29a      	uxth	r2, r3
 8017824:	4b6e      	ldr	r3, [pc, #440]	@ (80179e0 <tcp_input+0x270>)
 8017826:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 801782a:	e3a7      	b.n	8017f7c <tcp_input+0x80c>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801782c:	7cbb      	ldrb	r3, [r7, #18]
 801782e:	b29b      	uxth	r3, r3
 8017830:	3b14      	subs	r3, #20
 8017832:	b29a      	uxth	r2, r3
 8017834:	4b6d      	ldr	r3, [pc, #436]	@ (80179ec <tcp_input+0x27c>)
 8017836:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017838:	4b6d      	ldr	r3, [pc, #436]	@ (80179f0 <tcp_input+0x280>)
 801783a:	2200      	movs	r2, #0
 801783c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	895a      	ldrh	r2, [r3, #10]
 8017842:	7cbb      	ldrb	r3, [r7, #18]
 8017844:	b29b      	uxth	r3, r3
 8017846:	429a      	cmp	r2, r3
 8017848:	d30d      	bcc.n	8017866 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801784a:	4b68      	ldr	r3, [pc, #416]	@ (80179ec <tcp_input+0x27c>)
 801784c:	881a      	ldrh	r2, [r3, #0]
 801784e:	4b69      	ldr	r3, [pc, #420]	@ (80179f4 <tcp_input+0x284>)
 8017850:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8017852:	7cbb      	ldrb	r3, [r7, #18]
 8017854:	b29b      	uxth	r3, r3
 8017856:	425b      	negs	r3, r3
 8017858:	b29b      	uxth	r3, r3
 801785a:	b21b      	sxth	r3, r3
 801785c:	4619      	mov	r1, r3
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f7fd ff4c 	bl	80156fc <pbuf_header>
 8017864:	e05d      	b.n	8017922 <tcp_input+0x1b2>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d105      	bne.n	801787a <tcp_input+0x10a>
 801786e:	4b62      	ldr	r3, [pc, #392]	@ (80179f8 <tcp_input+0x288>)
 8017870:	22b2      	movs	r2, #178	@ 0xb2
 8017872:	4962      	ldr	r1, [pc, #392]	@ (80179fc <tcp_input+0x28c>)
 8017874:	4862      	ldr	r0, [pc, #392]	@ (8017a00 <tcp_input+0x290>)
 8017876:	f009 ff55 	bl	8021724 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801787a:	f06f 0113 	mvn.w	r1, #19
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f7fd ff3c 	bl	80156fc <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	895a      	ldrh	r2, [r3, #10]
 8017888:	4b5a      	ldr	r3, [pc, #360]	@ (80179f4 <tcp_input+0x284>)
 801788a:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801788c:	4b57      	ldr	r3, [pc, #348]	@ (80179ec <tcp_input+0x27c>)
 801788e:	881a      	ldrh	r2, [r3, #0]
 8017890:	4b58      	ldr	r3, [pc, #352]	@ (80179f4 <tcp_input+0x284>)
 8017892:	881b      	ldrh	r3, [r3, #0]
 8017894:	1ad3      	subs	r3, r2, r3
 8017896:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8017898:	4b56      	ldr	r3, [pc, #344]	@ (80179f4 <tcp_input+0x284>)
 801789a:	881b      	ldrh	r3, [r3, #0]
 801789c:	425b      	negs	r3, r3
 801789e:	b29b      	uxth	r3, r3
 80178a0:	b21b      	sxth	r3, r3
 80178a2:	4619      	mov	r1, r3
 80178a4:	6878      	ldr	r0, [r7, #4]
 80178a6:	f7fd ff29 	bl	80156fc <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	895b      	ldrh	r3, [r3, #10]
 80178b0:	8a3a      	ldrh	r2, [r7, #16]
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d908      	bls.n	80178c8 <tcp_input+0x158>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 80178b6:	4b4a      	ldr	r3, [pc, #296]	@ (80179e0 <tcp_input+0x270>)
 80178b8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80178bc:	3301      	adds	r3, #1
 80178be:	b29a      	uxth	r2, r3
 80178c0:	4b47      	ldr	r3, [pc, #284]	@ (80179e0 <tcp_input+0x270>)
 80178c2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 80178c6:	e359      	b.n	8017f7c <tcp_input+0x80c>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	685b      	ldr	r3, [r3, #4]
 80178ce:	4a48      	ldr	r2, [pc, #288]	@ (80179f0 <tcp_input+0x280>)
 80178d0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681a      	ldr	r2, [r3, #0]
 80178d6:	8a3b      	ldrh	r3, [r7, #16]
 80178d8:	425b      	negs	r3, r3
 80178da:	b29b      	uxth	r3, r3
 80178dc:	b21b      	sxth	r3, r3
 80178de:	4619      	mov	r1, r3
 80178e0:	4610      	mov	r0, r2
 80178e2:	f7fd ff0b 	bl	80156fc <pbuf_header>
    p->tot_len -= opt2len;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	891a      	ldrh	r2, [r3, #8]
 80178ea:	8a3b      	ldrh	r3, [r7, #16]
 80178ec:	1ad3      	subs	r3, r2, r3
 80178ee:	b29a      	uxth	r2, r3
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	895b      	ldrh	r3, [r3, #10]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d005      	beq.n	8017908 <tcp_input+0x198>
 80178fc:	4b3e      	ldr	r3, [pc, #248]	@ (80179f8 <tcp_input+0x288>)
 80178fe:	22cf      	movs	r2, #207	@ 0xcf
 8017900:	4940      	ldr	r1, [pc, #256]	@ (8017a04 <tcp_input+0x294>)
 8017902:	483f      	ldr	r0, [pc, #252]	@ (8017a00 <tcp_input+0x290>)
 8017904:	f009 ff0e 	bl	8021724 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	891a      	ldrh	r2, [r3, #8]
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	891b      	ldrh	r3, [r3, #8]
 8017912:	429a      	cmp	r2, r3
 8017914:	d005      	beq.n	8017922 <tcp_input+0x1b2>
 8017916:	4b38      	ldr	r3, [pc, #224]	@ (80179f8 <tcp_input+0x288>)
 8017918:	22d0      	movs	r2, #208	@ 0xd0
 801791a:	493b      	ldr	r1, [pc, #236]	@ (8017a08 <tcp_input+0x298>)
 801791c:	4838      	ldr	r0, [pc, #224]	@ (8017a00 <tcp_input+0x290>)
 801791e:	f009 ff01 	bl	8021724 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017922:	4b30      	ldr	r3, [pc, #192]	@ (80179e4 <tcp_input+0x274>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	881b      	ldrh	r3, [r3, #0]
 8017928:	b29b      	uxth	r3, r3
 801792a:	4a2e      	ldr	r2, [pc, #184]	@ (80179e4 <tcp_input+0x274>)
 801792c:	6814      	ldr	r4, [r2, #0]
 801792e:	4618      	mov	r0, r3
 8017930:	f7fc fcb0 	bl	8014294 <lwip_htons>
 8017934:	4603      	mov	r3, r0
 8017936:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017938:	4b2a      	ldr	r3, [pc, #168]	@ (80179e4 <tcp_input+0x274>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	885b      	ldrh	r3, [r3, #2]
 801793e:	b29b      	uxth	r3, r3
 8017940:	4a28      	ldr	r2, [pc, #160]	@ (80179e4 <tcp_input+0x274>)
 8017942:	6814      	ldr	r4, [r2, #0]
 8017944:	4618      	mov	r0, r3
 8017946:	f7fc fca5 	bl	8014294 <lwip_htons>
 801794a:	4603      	mov	r3, r0
 801794c:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801794e:	4b25      	ldr	r3, [pc, #148]	@ (80179e4 <tcp_input+0x274>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	685b      	ldr	r3, [r3, #4]
 8017954:	4a23      	ldr	r2, [pc, #140]	@ (80179e4 <tcp_input+0x274>)
 8017956:	6814      	ldr	r4, [r2, #0]
 8017958:	4618      	mov	r0, r3
 801795a:	f7fc fca8 	bl	80142ae <lwip_htonl>
 801795e:	4603      	mov	r3, r0
 8017960:	6063      	str	r3, [r4, #4]
 8017962:	6863      	ldr	r3, [r4, #4]
 8017964:	4a29      	ldr	r2, [pc, #164]	@ (8017a0c <tcp_input+0x29c>)
 8017966:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017968:	4b1e      	ldr	r3, [pc, #120]	@ (80179e4 <tcp_input+0x274>)
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	689b      	ldr	r3, [r3, #8]
 801796e:	4a1d      	ldr	r2, [pc, #116]	@ (80179e4 <tcp_input+0x274>)
 8017970:	6814      	ldr	r4, [r2, #0]
 8017972:	4618      	mov	r0, r3
 8017974:	f7fc fc9b 	bl	80142ae <lwip_htonl>
 8017978:	4603      	mov	r3, r0
 801797a:	60a3      	str	r3, [r4, #8]
 801797c:	68a3      	ldr	r3, [r4, #8]
 801797e:	4a24      	ldr	r2, [pc, #144]	@ (8017a10 <tcp_input+0x2a0>)
 8017980:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017982:	4b18      	ldr	r3, [pc, #96]	@ (80179e4 <tcp_input+0x274>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	89db      	ldrh	r3, [r3, #14]
 8017988:	b29b      	uxth	r3, r3
 801798a:	4a16      	ldr	r2, [pc, #88]	@ (80179e4 <tcp_input+0x274>)
 801798c:	6814      	ldr	r4, [r2, #0]
 801798e:	4618      	mov	r0, r3
 8017990:	f7fc fc80 	bl	8014294 <lwip_htons>
 8017994:	4603      	mov	r3, r0
 8017996:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017998:	4b12      	ldr	r3, [pc, #72]	@ (80179e4 <tcp_input+0x274>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	899b      	ldrh	r3, [r3, #12]
 801799e:	b29b      	uxth	r3, r3
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7fc fc77 	bl	8014294 <lwip_htons>
 80179a6:	4603      	mov	r3, r0
 80179a8:	b2db      	uxtb	r3, r3
 80179aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80179ae:	b2da      	uxtb	r2, r3
 80179b0:	4b18      	ldr	r3, [pc, #96]	@ (8017a14 <tcp_input+0x2a4>)
 80179b2:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	891b      	ldrh	r3, [r3, #8]
 80179b8:	4a16      	ldr	r2, [pc, #88]	@ (8017a14 <tcp_input+0x2a4>)
 80179ba:	7812      	ldrb	r2, [r2, #0]
 80179bc:	f002 0203 	and.w	r2, r2, #3
 80179c0:	2a00      	cmp	r2, #0
 80179c2:	bf14      	ite	ne
 80179c4:	2201      	movne	r2, #1
 80179c6:	2200      	moveq	r2, #0
 80179c8:	b2d2      	uxtb	r2, r2
 80179ca:	4413      	add	r3, r2
 80179cc:	b29a      	uxth	r2, r3
 80179ce:	4b12      	ldr	r3, [pc, #72]	@ (8017a18 <tcp_input+0x2a8>)
 80179d0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80179d2:	2300      	movs	r3, #0
 80179d4:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80179d6:	4b11      	ldr	r3, [pc, #68]	@ (8017a1c <tcp_input+0x2ac>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	61fb      	str	r3, [r7, #28]
 80179dc:	e08d      	b.n	8017afa <tcp_input+0x38a>
 80179de:	bf00      	nop
 80179e0:	2000bc24 	.word	0x2000bc24
 80179e4:	2000bde4 	.word	0x2000bde4
 80179e8:	2000863c 	.word	0x2000863c
 80179ec:	2000bde8 	.word	0x2000bde8
 80179f0:	2000bdec 	.word	0x2000bdec
 80179f4:	2000bdea 	.word	0x2000bdea
 80179f8:	08025e40 	.word	0x08025e40
 80179fc:	08025e74 	.word	0x08025e74
 8017a00:	08025e84 	.word	0x08025e84
 8017a04:	08025eac 	.word	0x08025eac
 8017a08:	08025eb8 	.word	0x08025eb8
 8017a0c:	2000bdf4 	.word	0x2000bdf4
 8017a10:	2000bdf8 	.word	0x2000bdf8
 8017a14:	2000be00 	.word	0x2000be00
 8017a18:	2000bdfe 	.word	0x2000bdfe
 8017a1c:	2000bdc8 	.word	0x2000bdc8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	7d1b      	ldrb	r3, [r3, #20]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d105      	bne.n	8017a34 <tcp_input+0x2c4>
 8017a28:	4b77      	ldr	r3, [pc, #476]	@ (8017c08 <tcp_input+0x498>)
 8017a2a:	22e2      	movs	r2, #226	@ 0xe2
 8017a2c:	4977      	ldr	r1, [pc, #476]	@ (8017c0c <tcp_input+0x49c>)
 8017a2e:	4878      	ldr	r0, [pc, #480]	@ (8017c10 <tcp_input+0x4a0>)
 8017a30:	f009 fe78 	bl	8021724 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017a34:	69fb      	ldr	r3, [r7, #28]
 8017a36:	7d1b      	ldrb	r3, [r3, #20]
 8017a38:	2b0a      	cmp	r3, #10
 8017a3a:	d105      	bne.n	8017a48 <tcp_input+0x2d8>
 8017a3c:	4b72      	ldr	r3, [pc, #456]	@ (8017c08 <tcp_input+0x498>)
 8017a3e:	22e3      	movs	r2, #227	@ 0xe3
 8017a40:	4974      	ldr	r1, [pc, #464]	@ (8017c14 <tcp_input+0x4a4>)
 8017a42:	4873      	ldr	r0, [pc, #460]	@ (8017c10 <tcp_input+0x4a0>)
 8017a44:	f009 fe6e 	bl	8021724 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017a48:	69fb      	ldr	r3, [r7, #28]
 8017a4a:	7d1b      	ldrb	r3, [r3, #20]
 8017a4c:	2b01      	cmp	r3, #1
 8017a4e:	d105      	bne.n	8017a5c <tcp_input+0x2ec>
 8017a50:	4b6d      	ldr	r3, [pc, #436]	@ (8017c08 <tcp_input+0x498>)
 8017a52:	22e4      	movs	r2, #228	@ 0xe4
 8017a54:	4970      	ldr	r1, [pc, #448]	@ (8017c18 <tcp_input+0x4a8>)
 8017a56:	486e      	ldr	r0, [pc, #440]	@ (8017c10 <tcp_input+0x4a0>)
 8017a58:	f009 fe64 	bl	8021724 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8017a5c:	69fb      	ldr	r3, [r7, #28]
 8017a5e:	8b1a      	ldrh	r2, [r3, #24]
 8017a60:	4b6e      	ldr	r3, [pc, #440]	@ (8017c1c <tcp_input+0x4ac>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	881b      	ldrh	r3, [r3, #0]
 8017a66:	b29b      	uxth	r3, r3
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d141      	bne.n	8017af0 <tcp_input+0x380>
        pcb->local_port == tcphdr->dest &&
 8017a6c:	69fb      	ldr	r3, [r7, #28]
 8017a6e:	8ada      	ldrh	r2, [r3, #22]
 8017a70:	4b6a      	ldr	r3, [pc, #424]	@ (8017c1c <tcp_input+0x4ac>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	885b      	ldrh	r3, [r3, #2]
 8017a76:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d139      	bne.n	8017af0 <tcp_input+0x380>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017a7c:	69fb      	ldr	r3, [r7, #28]
 8017a7e:	685a      	ldr	r2, [r3, #4]
 8017a80:	4b67      	ldr	r3, [pc, #412]	@ (8017c20 <tcp_input+0x4b0>)
 8017a82:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017a84:	429a      	cmp	r2, r3
 8017a86:	d133      	bne.n	8017af0 <tcp_input+0x380>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017a88:	69fb      	ldr	r3, [r7, #28]
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	4b64      	ldr	r3, [pc, #400]	@ (8017c20 <tcp_input+0x4b0>)
 8017a8e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017a90:	429a      	cmp	r2, r3
 8017a92:	d12d      	bne.n	8017af0 <tcp_input+0x380>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	69fa      	ldr	r2, [r7, #28]
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	d105      	bne.n	8017aaa <tcp_input+0x33a>
 8017a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8017c08 <tcp_input+0x498>)
 8017aa0:	22ec      	movs	r2, #236	@ 0xec
 8017aa2:	4960      	ldr	r1, [pc, #384]	@ (8017c24 <tcp_input+0x4b4>)
 8017aa4:	485a      	ldr	r0, [pc, #360]	@ (8017c10 <tcp_input+0x4a0>)
 8017aa6:	f009 fe3d 	bl	8021724 <iprintf>
      if (prev != NULL) {
 8017aaa:	69bb      	ldr	r3, [r7, #24]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d00b      	beq.n	8017ac8 <tcp_input+0x358>
        prev->next = pcb->next;
 8017ab0:	69fb      	ldr	r3, [r7, #28]
 8017ab2:	68da      	ldr	r2, [r3, #12]
 8017ab4:	69bb      	ldr	r3, [r7, #24]
 8017ab6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8017c28 <tcp_input+0x4b8>)
 8017aba:	681a      	ldr	r2, [r3, #0]
 8017abc:	69fb      	ldr	r3, [r7, #28]
 8017abe:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017ac0:	4a59      	ldr	r2, [pc, #356]	@ (8017c28 <tcp_input+0x4b8>)
 8017ac2:	69fb      	ldr	r3, [r7, #28]
 8017ac4:	6013      	str	r3, [r2, #0]
 8017ac6:	e007      	b.n	8017ad8 <tcp_input+0x368>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017ac8:	4b58      	ldr	r3, [pc, #352]	@ (8017c2c <tcp_input+0x4bc>)
 8017aca:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017ace:	3301      	adds	r3, #1
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	4b56      	ldr	r3, [pc, #344]	@ (8017c2c <tcp_input+0x4bc>)
 8017ad4:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017ad8:	69fb      	ldr	r3, [r7, #28]
 8017ada:	68db      	ldr	r3, [r3, #12]
 8017adc:	69fa      	ldr	r2, [r7, #28]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d10f      	bne.n	8017b02 <tcp_input+0x392>
 8017ae2:	4b49      	ldr	r3, [pc, #292]	@ (8017c08 <tcp_input+0x498>)
 8017ae4:	22f4      	movs	r2, #244	@ 0xf4
 8017ae6:	4952      	ldr	r1, [pc, #328]	@ (8017c30 <tcp_input+0x4c0>)
 8017ae8:	4849      	ldr	r0, [pc, #292]	@ (8017c10 <tcp_input+0x4a0>)
 8017aea:	f009 fe1b 	bl	8021724 <iprintf>
      break;
 8017aee:	e008      	b.n	8017b02 <tcp_input+0x392>
    }
    prev = pcb;
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017af4:	69fb      	ldr	r3, [r7, #28]
 8017af6:	68db      	ldr	r3, [r3, #12]
 8017af8:	61fb      	str	r3, [r7, #28]
 8017afa:	69fb      	ldr	r3, [r7, #28]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d18f      	bne.n	8017a20 <tcp_input+0x2b0>
 8017b00:	e000      	b.n	8017b04 <tcp_input+0x394>
      break;
 8017b02:	bf00      	nop
  }

  if (pcb == NULL) {
 8017b04:	69fb      	ldr	r3, [r7, #28]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	f040 809a 	bne.w	8017c40 <tcp_input+0x4d0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b0c:	4b49      	ldr	r3, [pc, #292]	@ (8017c34 <tcp_input+0x4c4>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	61fb      	str	r3, [r7, #28]
 8017b12:	e02f      	b.n	8017b74 <tcp_input+0x404>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	7d1b      	ldrb	r3, [r3, #20]
 8017b18:	2b0a      	cmp	r3, #10
 8017b1a:	d005      	beq.n	8017b28 <tcp_input+0x3b8>
 8017b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8017c08 <tcp_input+0x498>)
 8017b1e:	22fe      	movs	r2, #254	@ 0xfe
 8017b20:	4945      	ldr	r1, [pc, #276]	@ (8017c38 <tcp_input+0x4c8>)
 8017b22:	483b      	ldr	r0, [pc, #236]	@ (8017c10 <tcp_input+0x4a0>)
 8017b24:	f009 fdfe 	bl	8021724 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8017b28:	69fb      	ldr	r3, [r7, #28]
 8017b2a:	8b1a      	ldrh	r2, [r3, #24]
 8017b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8017c1c <tcp_input+0x4ac>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	881b      	ldrh	r3, [r3, #0]
 8017b32:	b29b      	uxth	r3, r3
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d11a      	bne.n	8017b6e <tcp_input+0x3fe>
          pcb->local_port == tcphdr->dest &&
 8017b38:	69fb      	ldr	r3, [r7, #28]
 8017b3a:	8ada      	ldrh	r2, [r3, #22]
 8017b3c:	4b37      	ldr	r3, [pc, #220]	@ (8017c1c <tcp_input+0x4ac>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	885b      	ldrh	r3, [r3, #2]
 8017b42:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017b44:	429a      	cmp	r2, r3
 8017b46:	d112      	bne.n	8017b6e <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b48:	69fb      	ldr	r3, [r7, #28]
 8017b4a:	685a      	ldr	r2, [r3, #4]
 8017b4c:	4b34      	ldr	r3, [pc, #208]	@ (8017c20 <tcp_input+0x4b0>)
 8017b4e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d10c      	bne.n	8017b6e <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	681a      	ldr	r2, [r3, #0]
 8017b58:	4b31      	ldr	r3, [pc, #196]	@ (8017c20 <tcp_input+0x4b0>)
 8017b5a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d106      	bne.n	8017b6e <tcp_input+0x3fe>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8017b60:	69f8      	ldr	r0, [r7, #28]
 8017b62:	f000 fb5b 	bl	801821c <tcp_timewait_input>
        pbuf_free(p);
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7fd fdec 	bl	8015744 <pbuf_free>
        return;
 8017b6c:	e21a      	b.n	8017fa4 <tcp_input+0x834>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	68db      	ldr	r3, [r3, #12]
 8017b72:	61fb      	str	r3, [r7, #28]
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d1cc      	bne.n	8017b14 <tcp_input+0x3a4>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8017c3c <tcp_input+0x4cc>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	617b      	str	r3, [r7, #20]
 8017b84:	e019      	b.n	8017bba <tcp_input+0x44a>
      if (lpcb->local_port == tcphdr->dest) {
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	8ada      	ldrh	r2, [r3, #22]
 8017b8a:	4b24      	ldr	r3, [pc, #144]	@ (8017c1c <tcp_input+0x4ac>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	885b      	ldrh	r3, [r3, #2]
 8017b90:	b29b      	uxth	r3, r3
 8017b92:	429a      	cmp	r2, r3
 8017b94:	d10c      	bne.n	8017bb0 <tcp_input+0x440>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	681a      	ldr	r2, [r3, #0]
 8017b9a:	4b21      	ldr	r3, [pc, #132]	@ (8017c20 <tcp_input+0x4b0>)
 8017b9c:	695b      	ldr	r3, [r3, #20]
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	d00f      	beq.n	8017bc2 <tcp_input+0x452>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017ba2:	697b      	ldr	r3, [r7, #20]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d00d      	beq.n	8017bc4 <tcp_input+0x454>
 8017ba8:	697b      	ldr	r3, [r7, #20]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d009      	beq.n	8017bc4 <tcp_input+0x454>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017bb0:	697b      	ldr	r3, [r7, #20]
 8017bb2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017bb4:	697b      	ldr	r3, [r7, #20]
 8017bb6:	68db      	ldr	r3, [r3, #12]
 8017bb8:	617b      	str	r3, [r7, #20]
 8017bba:	697b      	ldr	r3, [r7, #20]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d1e2      	bne.n	8017b86 <tcp_input+0x416>
 8017bc0:	e000      	b.n	8017bc4 <tcp_input+0x454>
            break;
 8017bc2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017bc4:	697b      	ldr	r3, [r7, #20]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d03a      	beq.n	8017c40 <tcp_input+0x4d0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017bca:	69bb      	ldr	r3, [r7, #24]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d00b      	beq.n	8017be8 <tcp_input+0x478>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017bd0:	697b      	ldr	r3, [r7, #20]
 8017bd2:	68da      	ldr	r2, [r3, #12]
 8017bd4:	69bb      	ldr	r3, [r7, #24]
 8017bd6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017bd8:	4b18      	ldr	r3, [pc, #96]	@ (8017c3c <tcp_input+0x4cc>)
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017be0:	4a16      	ldr	r2, [pc, #88]	@ (8017c3c <tcp_input+0x4cc>)
 8017be2:	697b      	ldr	r3, [r7, #20]
 8017be4:	6013      	str	r3, [r2, #0]
 8017be6:	e007      	b.n	8017bf8 <tcp_input+0x488>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017be8:	4b10      	ldr	r3, [pc, #64]	@ (8017c2c <tcp_input+0x4bc>)
 8017bea:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017bee:	3301      	adds	r3, #1
 8017bf0:	b29a      	uxth	r2, r3
 8017bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8017c2c <tcp_input+0x4bc>)
 8017bf4:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8017bf8:	6978      	ldr	r0, [r7, #20]
 8017bfa:	f000 fa1d 	bl	8018038 <tcp_listen_input>
      pbuf_free(p);
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f7fd fda0 	bl	8015744 <pbuf_free>
      return;
 8017c04:	e1ce      	b.n	8017fa4 <tcp_input+0x834>
 8017c06:	bf00      	nop
 8017c08:	08025e40 	.word	0x08025e40
 8017c0c:	08025ed8 	.word	0x08025ed8
 8017c10:	08025e84 	.word	0x08025e84
 8017c14:	08025f00 	.word	0x08025f00
 8017c18:	08025f2c 	.word	0x08025f2c
 8017c1c:	2000bde4 	.word	0x2000bde4
 8017c20:	2000863c 	.word	0x2000863c
 8017c24:	08025f54 	.word	0x08025f54
 8017c28:	2000bdc8 	.word	0x2000bdc8
 8017c2c:	2000bc24 	.word	0x2000bc24
 8017c30:	08025f80 	.word	0x08025f80
 8017c34:	2000bdcc 	.word	0x2000bdcc
 8017c38:	08025fac 	.word	0x08025fac
 8017c3c:	2000bdc4 	.word	0x2000bdc4
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	f000 8164 	beq.w	8017f10 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017c48:	4b9a      	ldr	r3, [pc, #616]	@ (8017eb4 <tcp_input+0x744>)
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	891a      	ldrh	r2, [r3, #8]
 8017c52:	4b98      	ldr	r3, [pc, #608]	@ (8017eb4 <tcp_input+0x744>)
 8017c54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017c56:	4a97      	ldr	r2, [pc, #604]	@ (8017eb4 <tcp_input+0x744>)
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017c5c:	4b96      	ldr	r3, [pc, #600]	@ (8017eb8 <tcp_input+0x748>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	4a94      	ldr	r2, [pc, #592]	@ (8017eb4 <tcp_input+0x744>)
 8017c62:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8017c64:	4b95      	ldr	r3, [pc, #596]	@ (8017ebc <tcp_input+0x74c>)
 8017c66:	2200      	movs	r2, #0
 8017c68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017c6a:	4b95      	ldr	r3, [pc, #596]	@ (8017ec0 <tcp_input+0x750>)
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017c70:	4b94      	ldr	r3, [pc, #592]	@ (8017ec4 <tcp_input+0x754>)
 8017c72:	2200      	movs	r2, #0
 8017c74:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017c76:	4b94      	ldr	r3, [pc, #592]	@ (8017ec8 <tcp_input+0x758>)
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	f003 0308 	and.w	r3, r3, #8
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d006      	beq.n	8017c90 <tcp_input+0x520>
      p->flags |= PBUF_FLAG_PUSH;
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	7b5b      	ldrb	r3, [r3, #13]
 8017c86:	f043 0301 	orr.w	r3, r3, #1
 8017c8a:	b2da      	uxtb	r2, r3
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017c90:	69fb      	ldr	r3, [r7, #28]
 8017c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d025      	beq.n	8017ce4 <tcp_input+0x574>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017c98:	69f8      	ldr	r0, [r7, #28]
 8017c9a:	f7ff f909 	bl	8016eb0 <tcp_process_refused_data>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	f113 0f0d 	cmn.w	r3, #13
 8017ca4:	d007      	beq.n	8017cb6 <tcp_input+0x546>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017ca6:	69fb      	ldr	r3, [r7, #28]
 8017ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d01a      	beq.n	8017ce4 <tcp_input+0x574>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017cae:	4b87      	ldr	r3, [pc, #540]	@ (8017ecc <tcp_input+0x75c>)
 8017cb0:	881b      	ldrh	r3, [r3, #0]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d016      	beq.n	8017ce4 <tcp_input+0x574>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017cb6:	69fb      	ldr	r3, [r7, #28]
 8017cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d102      	bne.n	8017cc4 <tcp_input+0x554>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017cbe:	69f8      	ldr	r0, [r7, #28]
 8017cc0:	f002 fe8e 	bl	801a9e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8017cc4:	4b82      	ldr	r3, [pc, #520]	@ (8017ed0 <tcp_input+0x760>)
 8017cc6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017cca:	3301      	adds	r3, #1
 8017ccc:	b29a      	uxth	r2, r3
 8017cce:	4b80      	ldr	r3, [pc, #512]	@ (8017ed0 <tcp_input+0x760>)
 8017cd0:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 8017cd4:	4b7e      	ldr	r3, [pc, #504]	@ (8017ed0 <tcp_input+0x760>)
 8017cd6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8017cda:	3301      	adds	r3, #1
 8017cdc:	4a7c      	ldr	r2, [pc, #496]	@ (8017ed0 <tcp_input+0x760>)
 8017cde:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        goto aborted;
 8017ce2:	e102      	b.n	8017eea <tcp_input+0x77a>
      }
    }
    tcp_input_pcb = pcb;
 8017ce4:	4a7b      	ldr	r2, [pc, #492]	@ (8017ed4 <tcp_input+0x764>)
 8017ce6:	69fb      	ldr	r3, [r7, #28]
 8017ce8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017cea:	69f8      	ldr	r0, [r7, #28]
 8017cec:	f000 fafe 	bl	80182ec <tcp_process>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017cf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017cf8:	f113 0f0d 	cmn.w	r3, #13
 8017cfc:	f000 80d0 	beq.w	8017ea0 <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 8017d00:	4b6f      	ldr	r3, [pc, #444]	@ (8017ec0 <tcp_input+0x750>)
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	f003 0308 	and.w	r3, r3, #8
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d016      	beq.n	8017d3a <tcp_input+0x5ca>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017d0c:	69fb      	ldr	r3, [r7, #28]
 8017d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d008      	beq.n	8017d28 <tcp_input+0x5b8>
 8017d16:	69fb      	ldr	r3, [r7, #28]
 8017d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017d1c:	69fa      	ldr	r2, [r7, #28]
 8017d1e:	6912      	ldr	r2, [r2, #16]
 8017d20:	f06f 010d 	mvn.w	r1, #13
 8017d24:	4610      	mov	r0, r2
 8017d26:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017d28:	69f9      	ldr	r1, [r7, #28]
 8017d2a:	486b      	ldr	r0, [pc, #428]	@ (8017ed8 <tcp_input+0x768>)
 8017d2c:	f7ff fc08 	bl	8017540 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8017d30:	69f9      	ldr	r1, [r7, #28]
 8017d32:	2001      	movs	r0, #1
 8017d34:	f7fc ffaa 	bl	8014c8c <memp_free>
 8017d38:	e0d7      	b.n	8017eea <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017d3e:	4b61      	ldr	r3, [pc, #388]	@ (8017ec4 <tcp_input+0x754>)
 8017d40:	881b      	ldrh	r3, [r3, #0]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d01b      	beq.n	8017d7e <tcp_input+0x60e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017d46:	4b5f      	ldr	r3, [pc, #380]	@ (8017ec4 <tcp_input+0x754>)
 8017d48:	881b      	ldrh	r3, [r3, #0]
 8017d4a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017d4c:	69fb      	ldr	r3, [r7, #28]
 8017d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d009      	beq.n	8017d68 <tcp_input+0x5f8>
 8017d54:	69fb      	ldr	r3, [r7, #28]
 8017d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017d58:	69fa      	ldr	r2, [r7, #28]
 8017d5a:	6910      	ldr	r0, [r2, #16]
 8017d5c:	89fa      	ldrh	r2, [r7, #14]
 8017d5e:	69f9      	ldr	r1, [r7, #28]
 8017d60:	4798      	blx	r3
 8017d62:	4603      	mov	r3, r0
 8017d64:	74fb      	strb	r3, [r7, #19]
 8017d66:	e001      	b.n	8017d6c <tcp_input+0x5fc>
 8017d68:	2300      	movs	r3, #0
 8017d6a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017d6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017d70:	f113 0f0d 	cmn.w	r3, #13
 8017d74:	f000 8096 	beq.w	8017ea4 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017d78:	4b52      	ldr	r3, [pc, #328]	@ (8017ec4 <tcp_input+0x754>)
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017d7e:	69f8      	ldr	r0, [r7, #28]
 8017d80:	f000 f928 	bl	8017fd4 <tcp_input_delayed_close>
 8017d84:	4603      	mov	r3, r0
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	f040 808e 	bne.w	8017ea8 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8017ebc <tcp_input+0x74c>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d041      	beq.n	8017e18 <tcp_input+0x6a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017d94:	69fb      	ldr	r3, [r7, #28]
 8017d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d006      	beq.n	8017daa <tcp_input+0x63a>
 8017d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8017edc <tcp_input+0x76c>)
 8017d9e:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8017da2:	494f      	ldr	r1, [pc, #316]	@ (8017ee0 <tcp_input+0x770>)
 8017da4:	484f      	ldr	r0, [pc, #316]	@ (8017ee4 <tcp_input+0x774>)
 8017da6:	f009 fcbd 	bl	8021724 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017daa:	69fb      	ldr	r3, [r7, #28]
 8017dac:	7e9b      	ldrb	r3, [r3, #26]
 8017dae:	f003 0310 	and.w	r3, r3, #16
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d008      	beq.n	8017dc8 <tcp_input+0x658>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017db6:	4b41      	ldr	r3, [pc, #260]	@ (8017ebc <tcp_input+0x74c>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f7fd fcc2 	bl	8015744 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017dc0:	69f8      	ldr	r0, [r7, #28]
 8017dc2:	f7fe fb09 	bl	80163d8 <tcp_abort>
            goto aborted;
 8017dc6:	e090      	b.n	8017eea <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d00c      	beq.n	8017dec <tcp_input+0x67c>
 8017dd2:	69fb      	ldr	r3, [r7, #28]
 8017dd4:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8017dd8:	69fb      	ldr	r3, [r7, #28]
 8017dda:	6918      	ldr	r0, [r3, #16]
 8017ddc:	4b37      	ldr	r3, [pc, #220]	@ (8017ebc <tcp_input+0x74c>)
 8017dde:	681a      	ldr	r2, [r3, #0]
 8017de0:	2300      	movs	r3, #0
 8017de2:	69f9      	ldr	r1, [r7, #28]
 8017de4:	47a0      	blx	r4
 8017de6:	4603      	mov	r3, r0
 8017de8:	74fb      	strb	r3, [r7, #19]
 8017dea:	e008      	b.n	8017dfe <tcp_input+0x68e>
 8017dec:	4b33      	ldr	r3, [pc, #204]	@ (8017ebc <tcp_input+0x74c>)
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	2300      	movs	r3, #0
 8017df2:	69f9      	ldr	r1, [r7, #28]
 8017df4:	2000      	movs	r0, #0
 8017df6:	f7ff f91b 	bl	8017030 <tcp_recv_null>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017dfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e02:	f113 0f0d 	cmn.w	r3, #13
 8017e06:	d051      	beq.n	8017eac <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017e08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d003      	beq.n	8017e18 <tcp_input+0x6a8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017e10:	4b2a      	ldr	r3, [pc, #168]	@ (8017ebc <tcp_input+0x74c>)
 8017e12:	681a      	ldr	r2, [r3, #0]
 8017e14:	69fb      	ldr	r3, [r7, #28]
 8017e16:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017e18:	4b29      	ldr	r3, [pc, #164]	@ (8017ec0 <tcp_input+0x750>)
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	f003 0320 	and.w	r3, r3, #32
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d030      	beq.n	8017e86 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d009      	beq.n	8017e40 <tcp_input+0x6d0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017e2c:	69fb      	ldr	r3, [r7, #28]
 8017e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e30:	7b5a      	ldrb	r2, [r3, #13]
 8017e32:	69fb      	ldr	r3, [r7, #28]
 8017e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e36:	f042 0220 	orr.w	r2, r2, #32
 8017e3a:	b2d2      	uxtb	r2, r2
 8017e3c:	735a      	strb	r2, [r3, #13]
 8017e3e:	e022      	b.n	8017e86 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017e40:	69fb      	ldr	r3, [r7, #28]
 8017e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017e44:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017e48:	d005      	beq.n	8017e56 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8017e4a:	69fb      	ldr	r3, [r7, #28]
 8017e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017e4e:	3301      	adds	r3, #1
 8017e50:	b29a      	uxth	r2, r3
 8017e52:	69fb      	ldr	r3, [r7, #28]
 8017e54:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017e56:	69fb      	ldr	r3, [r7, #28]
 8017e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d00b      	beq.n	8017e78 <tcp_input+0x708>
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8017e66:	69fb      	ldr	r3, [r7, #28]
 8017e68:	6918      	ldr	r0, [r3, #16]
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	69f9      	ldr	r1, [r7, #28]
 8017e70:	47a0      	blx	r4
 8017e72:	4603      	mov	r3, r0
 8017e74:	74fb      	strb	r3, [r7, #19]
 8017e76:	e001      	b.n	8017e7c <tcp_input+0x70c>
 8017e78:	2300      	movs	r3, #0
 8017e7a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017e7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e80:	f113 0f0d 	cmn.w	r3, #13
 8017e84:	d014      	beq.n	8017eb0 <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017e86:	4b13      	ldr	r3, [pc, #76]	@ (8017ed4 <tcp_input+0x764>)
 8017e88:	2200      	movs	r2, #0
 8017e8a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017e8c:	69f8      	ldr	r0, [r7, #28]
 8017e8e:	f000 f8a1 	bl	8017fd4 <tcp_input_delayed_close>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d127      	bne.n	8017ee8 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017e98:	69f8      	ldr	r0, [r7, #28]
 8017e9a:	f002 fdfd 	bl	801aa98 <tcp_output>
 8017e9e:	e024      	b.n	8017eea <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017ea0:	bf00      	nop
 8017ea2:	e022      	b.n	8017eea <tcp_input+0x77a>
              goto aborted;
 8017ea4:	bf00      	nop
 8017ea6:	e020      	b.n	8017eea <tcp_input+0x77a>
          goto aborted;
 8017ea8:	bf00      	nop
 8017eaa:	e01e      	b.n	8017eea <tcp_input+0x77a>
            goto aborted;
 8017eac:	bf00      	nop
 8017eae:	e01c      	b.n	8017eea <tcp_input+0x77a>
              goto aborted;
 8017eb0:	bf00      	nop
 8017eb2:	e01a      	b.n	8017eea <tcp_input+0x77a>
 8017eb4:	2000bdd4 	.word	0x2000bdd4
 8017eb8:	2000bde4 	.word	0x2000bde4
 8017ebc:	2000be04 	.word	0x2000be04
 8017ec0:	2000be01 	.word	0x2000be01
 8017ec4:	2000bdfc 	.word	0x2000bdfc
 8017ec8:	2000be00 	.word	0x2000be00
 8017ecc:	2000bdfe 	.word	0x2000bdfe
 8017ed0:	2000bc24 	.word	0x2000bc24
 8017ed4:	2000be08 	.word	0x2000be08
 8017ed8:	2000bdc8 	.word	0x2000bdc8
 8017edc:	08025e40 	.word	0x08025e40
 8017ee0:	08025fdc 	.word	0x08025fdc
 8017ee4:	08025e84 	.word	0x08025e84
          goto aborted;
 8017ee8:	bf00      	nop
    tcp_input_pcb = NULL;
 8017eea:	4b30      	ldr	r3, [pc, #192]	@ (8017fac <tcp_input+0x83c>)
 8017eec:	2200      	movs	r2, #0
 8017eee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8017fb0 <tcp_input+0x840>)
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8017ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8017fb4 <tcp_input+0x844>)
 8017ef8:	685b      	ldr	r3, [r3, #4]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d051      	beq.n	8017fa2 <tcp_input+0x832>
    {
      pbuf_free(inseg.p);
 8017efe:	4b2d      	ldr	r3, [pc, #180]	@ (8017fb4 <tcp_input+0x844>)
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	4618      	mov	r0, r3
 8017f04:	f7fd fc1e 	bl	8015744 <pbuf_free>
      inseg.p = NULL;
 8017f08:	4b2a      	ldr	r3, [pc, #168]	@ (8017fb4 <tcp_input+0x844>)
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017f0e:	e048      	b.n	8017fa2 <tcp_input+0x832>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017f10:	4b29      	ldr	r3, [pc, #164]	@ (8017fb8 <tcp_input+0x848>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	899b      	ldrh	r3, [r3, #12]
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7fc f9bb 	bl	8014294 <lwip_htons>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	f003 0304 	and.w	r3, r3, #4
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d125      	bne.n	8017f74 <tcp_input+0x804>
      TCP_STATS_INC(tcp.proterr);
 8017f28:	4b24      	ldr	r3, [pc, #144]	@ (8017fbc <tcp_input+0x84c>)
 8017f2a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8017f2e:	3301      	adds	r3, #1
 8017f30:	b29a      	uxth	r2, r3
 8017f32:	4b22      	ldr	r3, [pc, #136]	@ (8017fbc <tcp_input+0x84c>)
 8017f34:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8017f38:	4b20      	ldr	r3, [pc, #128]	@ (8017fbc <tcp_input+0x84c>)
 8017f3a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017f3e:	3301      	adds	r3, #1
 8017f40:	b29a      	uxth	r2, r3
 8017f42:	4b1e      	ldr	r3, [pc, #120]	@ (8017fbc <tcp_input+0x84c>)
 8017f44:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f48:	4b1d      	ldr	r3, [pc, #116]	@ (8017fc0 <tcp_input+0x850>)
 8017f4a:	6818      	ldr	r0, [r3, #0]
 8017f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8017fc4 <tcp_input+0x854>)
 8017f4e:	881b      	ldrh	r3, [r3, #0]
 8017f50:	461a      	mov	r2, r3
 8017f52:	4b1d      	ldr	r3, [pc, #116]	@ (8017fc8 <tcp_input+0x858>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f58:	4b17      	ldr	r3, [pc, #92]	@ (8017fb8 <tcp_input+0x848>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f5c:	885b      	ldrh	r3, [r3, #2]
 8017f5e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f60:	4a15      	ldr	r2, [pc, #84]	@ (8017fb8 <tcp_input+0x848>)
 8017f62:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f64:	8812      	ldrh	r2, [r2, #0]
 8017f66:	b292      	uxth	r2, r2
 8017f68:	9201      	str	r2, [sp, #4]
 8017f6a:	9300      	str	r3, [sp, #0]
 8017f6c:	4b17      	ldr	r3, [pc, #92]	@ (8017fcc <tcp_input+0x85c>)
 8017f6e:	4a18      	ldr	r2, [pc, #96]	@ (8017fd0 <tcp_input+0x860>)
 8017f70:	f003 f82a 	bl	801afc8 <tcp_rst>
    pbuf_free(p);
 8017f74:	6878      	ldr	r0, [r7, #4]
 8017f76:	f7fd fbe5 	bl	8015744 <pbuf_free>
  return;
 8017f7a:	e012      	b.n	8017fa2 <tcp_input+0x832>
dropped:
  TCP_STATS_INC(tcp.drop);
 8017f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8017fbc <tcp_input+0x84c>)
 8017f7e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017f82:	3301      	adds	r3, #1
 8017f84:	b29a      	uxth	r2, r3
 8017f86:	4b0d      	ldr	r3, [pc, #52]	@ (8017fbc <tcp_input+0x84c>)
 8017f88:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
 8017f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8017fbc <tcp_input+0x84c>)
 8017f8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8017f92:	3301      	adds	r3, #1
 8017f94:	4a09      	ldr	r2, [pc, #36]	@ (8017fbc <tcp_input+0x84c>)
 8017f96:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  pbuf_free(p);
 8017f9a:	6878      	ldr	r0, [r7, #4]
 8017f9c:	f7fd fbd2 	bl	8015744 <pbuf_free>
 8017fa0:	e000      	b.n	8017fa4 <tcp_input+0x834>
  return;
 8017fa2:	bf00      	nop
}
 8017fa4:	3724      	adds	r7, #36	@ 0x24
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd90      	pop	{r4, r7, pc}
 8017faa:	bf00      	nop
 8017fac:	2000be08 	.word	0x2000be08
 8017fb0:	2000be04 	.word	0x2000be04
 8017fb4:	2000bdd4 	.word	0x2000bdd4
 8017fb8:	2000bde4 	.word	0x2000bde4
 8017fbc:	2000bc24 	.word	0x2000bc24
 8017fc0:	2000bdf8 	.word	0x2000bdf8
 8017fc4:	2000bdfe 	.word	0x2000bdfe
 8017fc8:	2000bdf4 	.word	0x2000bdf4
 8017fcc:	2000864c 	.word	0x2000864c
 8017fd0:	20008650 	.word	0x20008650

08017fd4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8017fdc:	4b14      	ldr	r3, [pc, #80]	@ (8018030 <tcp_input_delayed_close+0x5c>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	f003 0310 	and.w	r3, r3, #16
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d01d      	beq.n	8018024 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	7e9b      	ldrb	r3, [r3, #26]
 8017fec:	f003 0310 	and.w	r3, r3, #16
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d10d      	bne.n	8018010 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d008      	beq.n	8018010 <tcp_input_delayed_close+0x3c>
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018004:	687a      	ldr	r2, [r7, #4]
 8018006:	6912      	ldr	r2, [r2, #16]
 8018008:	f06f 010e 	mvn.w	r1, #14
 801800c:	4610      	mov	r0, r2
 801800e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018010:	6879      	ldr	r1, [r7, #4]
 8018012:	4808      	ldr	r0, [pc, #32]	@ (8018034 <tcp_input_delayed_close+0x60>)
 8018014:	f7ff fa94 	bl	8017540 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8018018:	6879      	ldr	r1, [r7, #4]
 801801a:	2001      	movs	r0, #1
 801801c:	f7fc fe36 	bl	8014c8c <memp_free>
    return 1;
 8018020:	2301      	movs	r3, #1
 8018022:	e000      	b.n	8018026 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8018024:	2300      	movs	r3, #0
}
 8018026:	4618      	mov	r0, r3
 8018028:	3708      	adds	r7, #8
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	2000be01 	.word	0x2000be01
 8018034:	2000bdc8 	.word	0x2000bdc8

08018038 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b088      	sub	sp, #32
 801803c:	af02      	add	r7, sp, #8
 801803e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018040:	4b6b      	ldr	r3, [pc, #428]	@ (80181f0 <tcp_listen_input+0x1b8>)
 8018042:	781b      	ldrb	r3, [r3, #0]
 8018044:	f003 0304 	and.w	r3, r3, #4
 8018048:	2b00      	cmp	r3, #0
 801804a:	f040 80ca 	bne.w	80181e2 <tcp_listen_input+0x1aa>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801804e:	4b68      	ldr	r3, [pc, #416]	@ (80181f0 <tcp_listen_input+0x1b8>)
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	f003 0310 	and.w	r3, r3, #16
 8018056:	2b00      	cmp	r3, #0
 8018058:	d016      	beq.n	8018088 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801805a:	4b66      	ldr	r3, [pc, #408]	@ (80181f4 <tcp_listen_input+0x1bc>)
 801805c:	6818      	ldr	r0, [r3, #0]
 801805e:	4b66      	ldr	r3, [pc, #408]	@ (80181f8 <tcp_listen_input+0x1c0>)
 8018060:	881b      	ldrh	r3, [r3, #0]
 8018062:	461a      	mov	r2, r3
 8018064:	4b65      	ldr	r3, [pc, #404]	@ (80181fc <tcp_listen_input+0x1c4>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801806a:	4b65      	ldr	r3, [pc, #404]	@ (8018200 <tcp_listen_input+0x1c8>)
 801806c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801806e:	885b      	ldrh	r3, [r3, #2]
 8018070:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018072:	4a63      	ldr	r2, [pc, #396]	@ (8018200 <tcp_listen_input+0x1c8>)
 8018074:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018076:	8812      	ldrh	r2, [r2, #0]
 8018078:	b292      	uxth	r2, r2
 801807a:	9201      	str	r2, [sp, #4]
 801807c:	9300      	str	r3, [sp, #0]
 801807e:	4b61      	ldr	r3, [pc, #388]	@ (8018204 <tcp_listen_input+0x1cc>)
 8018080:	4a61      	ldr	r2, [pc, #388]	@ (8018208 <tcp_listen_input+0x1d0>)
 8018082:	f002 ffa1 	bl	801afc8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018086:	e0ae      	b.n	80181e6 <tcp_listen_input+0x1ae>
  } else if (flags & TCP_SYN) {
 8018088:	4b59      	ldr	r3, [pc, #356]	@ (80181f0 <tcp_listen_input+0x1b8>)
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	f003 0302 	and.w	r3, r3, #2
 8018090:	2b00      	cmp	r3, #0
 8018092:	f000 80a8 	beq.w	80181e6 <tcp_listen_input+0x1ae>
    npcb = tcp_alloc(pcb->prio);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	7d5b      	ldrb	r3, [r3, #21]
 801809a:	4618      	mov	r0, r3
 801809c:	f7ff f8a6 	bl	80171ec <tcp_alloc>
 80180a0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d119      	bne.n	80180dc <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 80180a8:	4b58      	ldr	r3, [pc, #352]	@ (801820c <tcp_listen_input+0x1d4>)
 80180aa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80180ae:	3301      	adds	r3, #1
 80180b0:	b29a      	uxth	r2, r3
 80180b2:	4b56      	ldr	r3, [pc, #344]	@ (801820c <tcp_listen_input+0x1d4>)
 80180b4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	699b      	ldr	r3, [r3, #24]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d00a      	beq.n	80180d6 <tcp_listen_input+0x9e>
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	699b      	ldr	r3, [r3, #24]
 80180c4:	687a      	ldr	r2, [r7, #4]
 80180c6:	6910      	ldr	r0, [r2, #16]
 80180c8:	f04f 32ff 	mov.w	r2, #4294967295
 80180cc:	2100      	movs	r1, #0
 80180ce:	4798      	blx	r3
 80180d0:	4603      	mov	r3, r0
 80180d2:	73bb      	strb	r3, [r7, #14]
      return;
 80180d4:	e088      	b.n	80181e8 <tcp_listen_input+0x1b0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80180d6:	23f0      	movs	r3, #240	@ 0xf0
 80180d8:	73bb      	strb	r3, [r7, #14]
      return;
 80180da:	e085      	b.n	80181e8 <tcp_listen_input+0x1b0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80180dc:	4b4c      	ldr	r3, [pc, #304]	@ (8018210 <tcp_listen_input+0x1d8>)
 80180de:	695a      	ldr	r2, [r3, #20]
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80180e4:	4b4a      	ldr	r3, [pc, #296]	@ (8018210 <tcp_listen_input+0x1d8>)
 80180e6:	691a      	ldr	r2, [r3, #16]
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	8ada      	ldrh	r2, [r3, #22]
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80180f4:	4b42      	ldr	r3, [pc, #264]	@ (8018200 <tcp_listen_input+0x1c8>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	881b      	ldrh	r3, [r3, #0]
 80180fa:	b29a      	uxth	r2, r3
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	2203      	movs	r2, #3
 8018104:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018106:	4b3d      	ldr	r3, [pc, #244]	@ (80181fc <tcp_listen_input+0x1c4>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	1c5a      	adds	r2, r3, #1
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018110:	697b      	ldr	r3, [r7, #20]
 8018112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8018118:	6978      	ldr	r0, [r7, #20]
 801811a:	f7ff fa8d 	bl	8017638 <tcp_next_iss>
 801811e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018120:	697b      	ldr	r3, [r7, #20]
 8018122:	693a      	ldr	r2, [r7, #16]
 8018124:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	693a      	ldr	r2, [r7, #16]
 801812a:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 801812c:	697b      	ldr	r3, [r7, #20]
 801812e:	693a      	ldr	r2, [r7, #16]
 8018130:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8018132:	697b      	ldr	r3, [r7, #20]
 8018134:	693a      	ldr	r2, [r7, #16]
 8018136:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018138:	4b30      	ldr	r3, [pc, #192]	@ (80181fc <tcp_listen_input+0x1c4>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	1e5a      	subs	r2, r3, #1
 801813e:	697b      	ldr	r3, [r7, #20]
 8018140:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	691a      	ldr	r2, [r3, #16]
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	687a      	ldr	r2, [r7, #4]
 801814e:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	7a1b      	ldrb	r3, [r3, #8]
 8018154:	f003 030c 	and.w	r3, r3, #12
 8018158:	b2da      	uxtb	r2, r3
 801815a:	697b      	ldr	r3, [r7, #20]
 801815c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801815e:	4b2d      	ldr	r3, [pc, #180]	@ (8018214 <tcp_listen_input+0x1dc>)
 8018160:	681a      	ldr	r2, [r3, #0]
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	60da      	str	r2, [r3, #12]
 8018166:	4a2b      	ldr	r2, [pc, #172]	@ (8018214 <tcp_listen_input+0x1dc>)
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	6013      	str	r3, [r2, #0]
 801816c:	f003 f9a4 	bl	801b4b8 <tcp_timer_needed>
 8018170:	4b29      	ldr	r3, [pc, #164]	@ (8018218 <tcp_listen_input+0x1e0>)
 8018172:	2201      	movs	r2, #1
 8018174:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018176:	6978      	ldr	r0, [r7, #20]
 8018178:	f001 fd16 	bl	8019ba8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801817c:	4b20      	ldr	r3, [pc, #128]	@ (8018200 <tcp_listen_input+0x1c8>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	89db      	ldrh	r3, [r3, #14]
 8018182:	b29a      	uxth	r2, r3
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801818a:	697b      	ldr	r3, [r7, #20]
 801818c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	3304      	adds	r3, #4
 801819e:	4619      	mov	r1, r3
 80181a0:	4610      	mov	r0, r2
 80181a2:	f7ff fa5f 	bl	8017664 <tcp_eff_send_mss_impl>
 80181a6:	4603      	mov	r3, r0
 80181a8:	461a      	mov	r2, r3
 80181aa:	697b      	ldr	r3, [r7, #20]
 80181ac:	865a      	strh	r2, [r3, #50]	@ 0x32
    MIB2_STATS_INC(mib2.tcppassiveopens);
 80181ae:	4b17      	ldr	r3, [pc, #92]	@ (801820c <tcp_listen_input+0x1d4>)
 80181b0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80181b4:	3301      	adds	r3, #1
 80181b6:	4a15      	ldr	r2, [pc, #84]	@ (801820c <tcp_listen_input+0x1d4>)
 80181b8:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80181bc:	2112      	movs	r1, #18
 80181be:	6978      	ldr	r0, [r7, #20]
 80181c0:	f002 faf8 	bl	801a7b4 <tcp_enqueue_flags>
 80181c4:	4603      	mov	r3, r0
 80181c6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80181c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d004      	beq.n	80181da <tcp_listen_input+0x1a2>
      tcp_abandon(npcb, 0);
 80181d0:	2100      	movs	r1, #0
 80181d2:	6978      	ldr	r0, [r7, #20]
 80181d4:	f7fe f84e 	bl	8016274 <tcp_abandon>
      return;
 80181d8:	e006      	b.n	80181e8 <tcp_listen_input+0x1b0>
    tcp_output(npcb);
 80181da:	6978      	ldr	r0, [r7, #20]
 80181dc:	f002 fc5c 	bl	801aa98 <tcp_output>
  return;
 80181e0:	e001      	b.n	80181e6 <tcp_listen_input+0x1ae>
    return;
 80181e2:	bf00      	nop
 80181e4:	e000      	b.n	80181e8 <tcp_listen_input+0x1b0>
  return;
 80181e6:	bf00      	nop
}
 80181e8:	3718      	adds	r7, #24
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}
 80181ee:	bf00      	nop
 80181f0:	2000be00 	.word	0x2000be00
 80181f4:	2000bdf8 	.word	0x2000bdf8
 80181f8:	2000bdfe 	.word	0x2000bdfe
 80181fc:	2000bdf4 	.word	0x2000bdf4
 8018200:	2000bde4 	.word	0x2000bde4
 8018204:	2000864c 	.word	0x2000864c
 8018208:	20008650 	.word	0x20008650
 801820c:	2000bc24 	.word	0x2000bc24
 8018210:	2000863c 	.word	0x2000863c
 8018214:	2000bdc8 	.word	0x2000bdc8
 8018218:	2000bdd0 	.word	0x2000bdd0

0801821c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b084      	sub	sp, #16
 8018220:	af02      	add	r7, sp, #8
 8018222:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018224:	4b29      	ldr	r3, [pc, #164]	@ (80182cc <tcp_timewait_input+0xb0>)
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	f003 0304 	and.w	r3, r3, #4
 801822c:	2b00      	cmp	r3, #0
 801822e:	d146      	bne.n	80182be <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018230:	4b26      	ldr	r3, [pc, #152]	@ (80182cc <tcp_timewait_input+0xb0>)
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	f003 0302 	and.w	r3, r3, #2
 8018238:	2b00      	cmp	r3, #0
 801823a:	d027      	beq.n	801828c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801823c:	4b24      	ldr	r3, [pc, #144]	@ (80182d0 <tcp_timewait_input+0xb4>)
 801823e:	681a      	ldr	r2, [r3, #0]
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018244:	1ad3      	subs	r3, r2, r3
 8018246:	2b00      	cmp	r3, #0
 8018248:	db2a      	blt.n	80182a0 <tcp_timewait_input+0x84>
 801824a:	4b21      	ldr	r3, [pc, #132]	@ (80182d0 <tcp_timewait_input+0xb4>)
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018252:	6879      	ldr	r1, [r7, #4]
 8018254:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018256:	440b      	add	r3, r1
 8018258:	1ad3      	subs	r3, r2, r3
 801825a:	2b00      	cmp	r3, #0
 801825c:	dc20      	bgt.n	80182a0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801825e:	4b1d      	ldr	r3, [pc, #116]	@ (80182d4 <tcp_timewait_input+0xb8>)
 8018260:	6818      	ldr	r0, [r3, #0]
 8018262:	4b1d      	ldr	r3, [pc, #116]	@ (80182d8 <tcp_timewait_input+0xbc>)
 8018264:	881b      	ldrh	r3, [r3, #0]
 8018266:	461a      	mov	r2, r3
 8018268:	4b19      	ldr	r3, [pc, #100]	@ (80182d0 <tcp_timewait_input+0xb4>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801826e:	4b1b      	ldr	r3, [pc, #108]	@ (80182dc <tcp_timewait_input+0xc0>)
 8018270:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018272:	885b      	ldrh	r3, [r3, #2]
 8018274:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018276:	4a19      	ldr	r2, [pc, #100]	@ (80182dc <tcp_timewait_input+0xc0>)
 8018278:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801827a:	8812      	ldrh	r2, [r2, #0]
 801827c:	b292      	uxth	r2, r2
 801827e:	9201      	str	r2, [sp, #4]
 8018280:	9300      	str	r3, [sp, #0]
 8018282:	4b17      	ldr	r3, [pc, #92]	@ (80182e0 <tcp_timewait_input+0xc4>)
 8018284:	4a17      	ldr	r2, [pc, #92]	@ (80182e4 <tcp_timewait_input+0xc8>)
 8018286:	f002 fe9f 	bl	801afc8 <tcp_rst>
      return;
 801828a:	e01b      	b.n	80182c4 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 801828c:	4b0f      	ldr	r3, [pc, #60]	@ (80182cc <tcp_timewait_input+0xb0>)
 801828e:	781b      	ldrb	r3, [r3, #0]
 8018290:	f003 0301 	and.w	r3, r3, #1
 8018294:	2b00      	cmp	r3, #0
 8018296:	d003      	beq.n	80182a0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018298:	4b13      	ldr	r3, [pc, #76]	@ (80182e8 <tcp_timewait_input+0xcc>)
 801829a:	681a      	ldr	r2, [r3, #0]
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80182a0:	4b0d      	ldr	r3, [pc, #52]	@ (80182d8 <tcp_timewait_input+0xbc>)
 80182a2:	881b      	ldrh	r3, [r3, #0]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d00c      	beq.n	80182c2 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	7e9b      	ldrb	r3, [r3, #26]
 80182ac:	f043 0302 	orr.w	r3, r3, #2
 80182b0:	b2da      	uxtb	r2, r3
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80182b6:	6878      	ldr	r0, [r7, #4]
 80182b8:	f002 fbee 	bl	801aa98 <tcp_output>
  }
  return;
 80182bc:	e001      	b.n	80182c2 <tcp_timewait_input+0xa6>
    return;
 80182be:	bf00      	nop
 80182c0:	e000      	b.n	80182c4 <tcp_timewait_input+0xa8>
  return;
 80182c2:	bf00      	nop
}
 80182c4:	3708      	adds	r7, #8
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}
 80182ca:	bf00      	nop
 80182cc:	2000be00 	.word	0x2000be00
 80182d0:	2000bdf4 	.word	0x2000bdf4
 80182d4:	2000bdf8 	.word	0x2000bdf8
 80182d8:	2000bdfe 	.word	0x2000bdfe
 80182dc:	2000bde4 	.word	0x2000bde4
 80182e0:	2000864c 	.word	0x2000864c
 80182e4:	20008650 	.word	0x20008650
 80182e8:	2000bdbc 	.word	0x2000bdbc

080182ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b08a      	sub	sp, #40	@ 0x28
 80182f0:	af02      	add	r7, sp, #8
 80182f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80182f4:	2300      	movs	r3, #0
 80182f6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80182f8:	2300      	movs	r3, #0
 80182fa:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80182fc:	4b93      	ldr	r3, [pc, #588]	@ (801854c <tcp_process+0x260>)
 80182fe:	781b      	ldrb	r3, [r3, #0]
 8018300:	f003 0304 	and.w	r3, r3, #4
 8018304:	2b00      	cmp	r3, #0
 8018306:	d04e      	beq.n	80183a6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	7d1b      	ldrb	r3, [r3, #20]
 801830c:	2b02      	cmp	r3, #2
 801830e:	d108      	bne.n	8018322 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018314:	4b8e      	ldr	r3, [pc, #568]	@ (8018550 <tcp_process+0x264>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	429a      	cmp	r2, r3
 801831a:	d123      	bne.n	8018364 <tcp_process+0x78>
        acceptable = 1;
 801831c:	2301      	movs	r3, #1
 801831e:	76fb      	strb	r3, [r7, #27]
 8018320:	e020      	b.n	8018364 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018326:	4b8b      	ldr	r3, [pc, #556]	@ (8018554 <tcp_process+0x268>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	429a      	cmp	r2, r3
 801832c:	d102      	bne.n	8018334 <tcp_process+0x48>
        acceptable = 1;
 801832e:	2301      	movs	r3, #1
 8018330:	76fb      	strb	r3, [r7, #27]
 8018332:	e017      	b.n	8018364 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018334:	4b87      	ldr	r3, [pc, #540]	@ (8018554 <tcp_process+0x268>)
 8018336:	681a      	ldr	r2, [r3, #0]
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801833c:	1ad3      	subs	r3, r2, r3
 801833e:	2b00      	cmp	r3, #0
 8018340:	db10      	blt.n	8018364 <tcp_process+0x78>
 8018342:	4b84      	ldr	r3, [pc, #528]	@ (8018554 <tcp_process+0x268>)
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801834a:	6879      	ldr	r1, [r7, #4]
 801834c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801834e:	440b      	add	r3, r1
 8018350:	1ad3      	subs	r3, r2, r3
 8018352:	2b00      	cmp	r3, #0
 8018354:	dc06      	bgt.n	8018364 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	7e9b      	ldrb	r3, [r3, #26]
 801835a:	f043 0302 	orr.w	r3, r3, #2
 801835e:	b2da      	uxtb	r2, r3
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018364:	7efb      	ldrb	r3, [r7, #27]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d01b      	beq.n	80183a2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	7d1b      	ldrb	r3, [r3, #20]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d106      	bne.n	8018380 <tcp_process+0x94>
 8018372:	4b79      	ldr	r3, [pc, #484]	@ (8018558 <tcp_process+0x26c>)
 8018374:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018378:	4978      	ldr	r1, [pc, #480]	@ (801855c <tcp_process+0x270>)
 801837a:	4879      	ldr	r0, [pc, #484]	@ (8018560 <tcp_process+0x274>)
 801837c:	f009 f9d2 	bl	8021724 <iprintf>
      recv_flags |= TF_RESET;
 8018380:	4b78      	ldr	r3, [pc, #480]	@ (8018564 <tcp_process+0x278>)
 8018382:	781b      	ldrb	r3, [r3, #0]
 8018384:	f043 0308 	orr.w	r3, r3, #8
 8018388:	b2da      	uxtb	r2, r3
 801838a:	4b76      	ldr	r3, [pc, #472]	@ (8018564 <tcp_process+0x278>)
 801838c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	7e9b      	ldrb	r3, [r3, #26]
 8018392:	f023 0301 	bic.w	r3, r3, #1
 8018396:	b2da      	uxtb	r2, r3
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801839c:	f06f 030d 	mvn.w	r3, #13
 80183a0:	e348      	b.n	8018a34 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80183a2:	2300      	movs	r3, #0
 80183a4:	e346      	b.n	8018a34 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80183a6:	4b69      	ldr	r3, [pc, #420]	@ (801854c <tcp_process+0x260>)
 80183a8:	781b      	ldrb	r3, [r3, #0]
 80183aa:	f003 0302 	and.w	r3, r3, #2
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d010      	beq.n	80183d4 <tcp_process+0xe8>
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	7d1b      	ldrb	r3, [r3, #20]
 80183b6:	2b02      	cmp	r3, #2
 80183b8:	d00c      	beq.n	80183d4 <tcp_process+0xe8>
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	7d1b      	ldrb	r3, [r3, #20]
 80183be:	2b03      	cmp	r3, #3
 80183c0:	d008      	beq.n	80183d4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	7e9b      	ldrb	r3, [r3, #26]
 80183c6:	f043 0302 	orr.w	r3, r3, #2
 80183ca:	b2da      	uxtb	r2, r3
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80183d0:	2300      	movs	r3, #0
 80183d2:	e32f      	b.n	8018a34 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	7e9b      	ldrb	r3, [r3, #26]
 80183d8:	f003 0310 	and.w	r3, r3, #16
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d103      	bne.n	80183e8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80183e0:	4b61      	ldr	r3, [pc, #388]	@ (8018568 <tcp_process+0x27c>)
 80183e2:	681a      	ldr	r2, [r3, #0]
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2200      	movs	r2, #0
 80183ec:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 80183f0:	6878      	ldr	r0, [r7, #4]
 80183f2:	f001 fbd9 	bl	8019ba8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	7d1b      	ldrb	r3, [r3, #20]
 80183fa:	3b02      	subs	r3, #2
 80183fc:	2b07      	cmp	r3, #7
 80183fe:	f200 8309 	bhi.w	8018a14 <tcp_process+0x728>
 8018402:	a201      	add	r2, pc, #4	@ (adr r2, 8018408 <tcp_process+0x11c>)
 8018404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018408:	08018429 	.word	0x08018429
 801840c:	0801861f 	.word	0x0801861f
 8018410:	08018777 	.word	0x08018777
 8018414:	080187a1 	.word	0x080187a1
 8018418:	080188c3 	.word	0x080188c3
 801841c:	08018777 	.word	0x08018777
 8018420:	0801894f 	.word	0x0801894f
 8018424:	080189df 	.word	0x080189df
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018428:	4b48      	ldr	r3, [pc, #288]	@ (801854c <tcp_process+0x260>)
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	f003 0310 	and.w	r3, r3, #16
 8018430:	2b00      	cmp	r3, #0
 8018432:	f000 80ca 	beq.w	80185ca <tcp_process+0x2de>
 8018436:	4b45      	ldr	r3, [pc, #276]	@ (801854c <tcp_process+0x260>)
 8018438:	781b      	ldrb	r3, [r3, #0]
 801843a:	f003 0302 	and.w	r3, r3, #2
 801843e:	2b00      	cmp	r3, #0
 8018440:	f000 80c3 	beq.w	80185ca <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018448:	1c5a      	adds	r2, r3, #1
 801844a:	4b41      	ldr	r3, [pc, #260]	@ (8018550 <tcp_process+0x264>)
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	429a      	cmp	r2, r3
 8018450:	f040 80bb 	bne.w	80185ca <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8018454:	4b3f      	ldr	r3, [pc, #252]	@ (8018554 <tcp_process+0x268>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	1c5a      	adds	r2, r3, #1
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 8018466:	4b3a      	ldr	r3, [pc, #232]	@ (8018550 <tcp_process+0x264>)
 8018468:	681a      	ldr	r2, [r3, #0]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801846e:	4b3f      	ldr	r3, [pc, #252]	@ (801856c <tcp_process+0x280>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	89db      	ldrh	r3, [r3, #14]
 8018474:	b29a      	uxth	r2, r3
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018488:	4b32      	ldr	r3, [pc, #200]	@ (8018554 <tcp_process+0x268>)
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	1e5a      	subs	r2, r3, #1
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2204      	movs	r2, #4
 8018496:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	3304      	adds	r3, #4
 80184a0:	4619      	mov	r1, r3
 80184a2:	4610      	mov	r0, r2
 80184a4:	f7ff f8de 	bl	8017664 <tcp_eff_send_mss_impl>
 80184a8:	4603      	mov	r3, r0
 80184aa:	461a      	mov	r2, r3
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184b4:	005b      	lsls	r3, r3, #1
 80184b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80184ba:	429a      	cmp	r2, r3
 80184bc:	bf38      	it	cc
 80184be:	461a      	movcc	r2, r3
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184c4:	009b      	lsls	r3, r3, #2
 80184c6:	4293      	cmp	r3, r2
 80184c8:	bf28      	it	cs
 80184ca:	4613      	movcs	r3, r2
 80184cc:	b29a      	uxth	r2, r3
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d106      	bne.n	80184ec <tcp_process+0x200>
 80184de:	4b1e      	ldr	r3, [pc, #120]	@ (8018558 <tcp_process+0x26c>)
 80184e0:	f240 321a 	movw	r2, #794	@ 0x31a
 80184e4:	4922      	ldr	r1, [pc, #136]	@ (8018570 <tcp_process+0x284>)
 80184e6:	481e      	ldr	r0, [pc, #120]	@ (8018560 <tcp_process+0x274>)
 80184e8:	f009 f91c 	bl	8021724 <iprintf>
      --pcb->snd_queuelen;
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80184f2:	3b01      	subs	r3, #1
 80184f4:	b29a      	uxth	r2, r3
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018500:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8018502:	69fb      	ldr	r3, [r7, #28]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d111      	bne.n	801852c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801850c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801850e:	69fb      	ldr	r3, [r7, #28]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d106      	bne.n	8018522 <tcp_process+0x236>
 8018514:	4b10      	ldr	r3, [pc, #64]	@ (8018558 <tcp_process+0x26c>)
 8018516:	f240 3222 	movw	r2, #802	@ 0x322
 801851a:	4916      	ldr	r1, [pc, #88]	@ (8018574 <tcp_process+0x288>)
 801851c:	4810      	ldr	r0, [pc, #64]	@ (8018560 <tcp_process+0x274>)
 801851e:	f009 f901 	bl	8021724 <iprintf>
        pcb->unsent = rseg->next;
 8018522:	69fb      	ldr	r3, [r7, #28]
 8018524:	681a      	ldr	r2, [r3, #0]
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	669a      	str	r2, [r3, #104]	@ 0x68
 801852a:	e003      	b.n	8018534 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	681a      	ldr	r2, [r3, #0]
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8018534:	69f8      	ldr	r0, [r7, #28]
 8018536:	f7fe fd39 	bl	8016fac <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801853e:	2b00      	cmp	r3, #0
 8018540:	d11a      	bne.n	8018578 <tcp_process+0x28c>
        pcb->rtime = -1;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018548:	861a      	strh	r2, [r3, #48]	@ 0x30
 801854a:	e01c      	b.n	8018586 <tcp_process+0x29a>
 801854c:	2000be00 	.word	0x2000be00
 8018550:	2000bdf8 	.word	0x2000bdf8
 8018554:	2000bdf4 	.word	0x2000bdf4
 8018558:	08025e40 	.word	0x08025e40
 801855c:	08025ff8 	.word	0x08025ff8
 8018560:	08025e84 	.word	0x08025e84
 8018564:	2000be01 	.word	0x2000be01
 8018568:	2000bdbc 	.word	0x2000bdbc
 801856c:	2000bde4 	.word	0x2000bde4
 8018570:	08026018 	.word	0x08026018
 8018574:	08026030 	.word	0x08026030
      } else {
        pcb->rtime = 0;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2200      	movs	r2, #0
 801857c:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	2200      	movs	r2, #0
 8018582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801858c:	2b00      	cmp	r3, #0
 801858e:	d00a      	beq.n	80185a6 <tcp_process+0x2ba>
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018596:	687a      	ldr	r2, [r7, #4]
 8018598:	6910      	ldr	r0, [r2, #16]
 801859a:	2200      	movs	r2, #0
 801859c:	6879      	ldr	r1, [r7, #4]
 801859e:	4798      	blx	r3
 80185a0:	4603      	mov	r3, r0
 80185a2:	76bb      	strb	r3, [r7, #26]
 80185a4:	e001      	b.n	80185aa <tcp_process+0x2be>
 80185a6:	2300      	movs	r3, #0
 80185a8:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80185aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80185ae:	f113 0f0d 	cmn.w	r3, #13
 80185b2:	d102      	bne.n	80185ba <tcp_process+0x2ce>
        return ERR_ABRT;
 80185b4:	f06f 030c 	mvn.w	r3, #12
 80185b8:	e23c      	b.n	8018a34 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	7e9b      	ldrb	r3, [r3, #26]
 80185be:	f043 0302 	orr.w	r3, r3, #2
 80185c2:	b2da      	uxtb	r2, r3
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80185c8:	e226      	b.n	8018a18 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 80185ca:	4b93      	ldr	r3, [pc, #588]	@ (8018818 <tcp_process+0x52c>)
 80185cc:	781b      	ldrb	r3, [r3, #0]
 80185ce:	f003 0310 	and.w	r3, r3, #16
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	f000 8220 	beq.w	8018a18 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80185d8:	4b90      	ldr	r3, [pc, #576]	@ (801881c <tcp_process+0x530>)
 80185da:	6818      	ldr	r0, [r3, #0]
 80185dc:	4b90      	ldr	r3, [pc, #576]	@ (8018820 <tcp_process+0x534>)
 80185de:	881b      	ldrh	r3, [r3, #0]
 80185e0:	461a      	mov	r2, r3
 80185e2:	4b90      	ldr	r3, [pc, #576]	@ (8018824 <tcp_process+0x538>)
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80185e8:	4b8f      	ldr	r3, [pc, #572]	@ (8018828 <tcp_process+0x53c>)
 80185ea:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80185ec:	885b      	ldrh	r3, [r3, #2]
 80185ee:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80185f0:	4a8d      	ldr	r2, [pc, #564]	@ (8018828 <tcp_process+0x53c>)
 80185f2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80185f4:	8812      	ldrh	r2, [r2, #0]
 80185f6:	b292      	uxth	r2, r2
 80185f8:	9201      	str	r2, [sp, #4]
 80185fa:	9300      	str	r3, [sp, #0]
 80185fc:	4b8b      	ldr	r3, [pc, #556]	@ (801882c <tcp_process+0x540>)
 80185fe:	4a8c      	ldr	r2, [pc, #560]	@ (8018830 <tcp_process+0x544>)
 8018600:	f002 fce2 	bl	801afc8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801860a:	2b05      	cmp	r3, #5
 801860c:	f200 8204 	bhi.w	8018a18 <tcp_process+0x72c>
        pcb->rtime = 0;
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	2200      	movs	r2, #0
 8018614:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f002 fd5e 	bl	801b0d8 <tcp_rexmit_rto>
    break;
 801861c:	e1fc      	b.n	8018a18 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801861e:	4b7e      	ldr	r3, [pc, #504]	@ (8018818 <tcp_process+0x52c>)
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	f003 0310 	and.w	r3, r3, #16
 8018626:	2b00      	cmp	r3, #0
 8018628:	f000 8091 	beq.w	801874e <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801862c:	4b7b      	ldr	r3, [pc, #492]	@ (801881c <tcp_process+0x530>)
 801862e:	681a      	ldr	r2, [r3, #0]
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018634:	1ad3      	subs	r3, r2, r3
 8018636:	3b01      	subs	r3, #1
 8018638:	2b00      	cmp	r3, #0
 801863a:	db71      	blt.n	8018720 <tcp_process+0x434>
 801863c:	4b77      	ldr	r3, [pc, #476]	@ (801881c <tcp_process+0x530>)
 801863e:	681a      	ldr	r2, [r3, #0]
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018644:	1ad3      	subs	r3, r2, r3
 8018646:	2b00      	cmp	r3, #0
 8018648:	dc6a      	bgt.n	8018720 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	2204      	movs	r2, #4
 801864e:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018654:	2b00      	cmp	r3, #0
 8018656:	d00b      	beq.n	8018670 <tcp_process+0x384>
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801865c:	699b      	ldr	r3, [r3, #24]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d106      	bne.n	8018670 <tcp_process+0x384>
 8018662:	4b74      	ldr	r3, [pc, #464]	@ (8018834 <tcp_process+0x548>)
 8018664:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8018668:	4973      	ldr	r1, [pc, #460]	@ (8018838 <tcp_process+0x54c>)
 801866a:	4874      	ldr	r0, [pc, #464]	@ (801883c <tcp_process+0x550>)
 801866c:	f009 f85a 	bl	8021724 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018674:	2b00      	cmp	r3, #0
 8018676:	d102      	bne.n	801867e <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8018678:	23fa      	movs	r3, #250	@ 0xfa
 801867a:	76bb      	strb	r3, [r7, #26]
 801867c:	e011      	b.n	80186a2 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018682:	699b      	ldr	r3, [r3, #24]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d00a      	beq.n	801869e <tcp_process+0x3b2>
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801868c:	699b      	ldr	r3, [r3, #24]
 801868e:	687a      	ldr	r2, [r7, #4]
 8018690:	6910      	ldr	r0, [r2, #16]
 8018692:	2200      	movs	r2, #0
 8018694:	6879      	ldr	r1, [r7, #4]
 8018696:	4798      	blx	r3
 8018698:	4603      	mov	r3, r0
 801869a:	76bb      	strb	r3, [r7, #26]
 801869c:	e001      	b.n	80186a2 <tcp_process+0x3b6>
 801869e:	23f0      	movs	r3, #240	@ 0xf0
 80186a0:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80186a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d00a      	beq.n	80186c0 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80186aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80186ae:	f113 0f0d 	cmn.w	r3, #13
 80186b2:	d002      	beq.n	80186ba <tcp_process+0x3ce>
            tcp_abort(pcb);
 80186b4:	6878      	ldr	r0, [r7, #4]
 80186b6:	f7fd fe8f 	bl	80163d8 <tcp_abort>
          }
          return ERR_ABRT;
 80186ba:	f06f 030c 	mvn.w	r3, #12
 80186be:	e1b9      	b.n	8018a34 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f000 fa3d 	bl	8018b40 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80186c6:	4b5e      	ldr	r3, [pc, #376]	@ (8018840 <tcp_process+0x554>)
 80186c8:	881b      	ldrh	r3, [r3, #0]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d005      	beq.n	80186da <tcp_process+0x3ee>
          recv_acked--;
 80186ce:	4b5c      	ldr	r3, [pc, #368]	@ (8018840 <tcp_process+0x554>)
 80186d0:	881b      	ldrh	r3, [r3, #0]
 80186d2:	3b01      	subs	r3, #1
 80186d4:	b29a      	uxth	r2, r3
 80186d6:	4b5a      	ldr	r3, [pc, #360]	@ (8018840 <tcp_process+0x554>)
 80186d8:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80186de:	005b      	lsls	r3, r3, #1
 80186e0:	f241 121c 	movw	r2, #4380	@ 0x111c
 80186e4:	429a      	cmp	r2, r3
 80186e6:	bf38      	it	cc
 80186e8:	461a      	movcc	r2, r3
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80186ee:	009b      	lsls	r3, r3, #2
 80186f0:	4293      	cmp	r3, r2
 80186f2:	bf28      	it	cs
 80186f4:	4613      	movcs	r3, r2
 80186f6:	b29a      	uxth	r2, r3
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80186fe:	4b51      	ldr	r3, [pc, #324]	@ (8018844 <tcp_process+0x558>)
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	f003 0320 	and.w	r3, r3, #32
 8018706:	2b00      	cmp	r3, #0
 8018708:	d034      	beq.n	8018774 <tcp_process+0x488>
          tcp_ack_now(pcb);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	7e9b      	ldrb	r3, [r3, #26]
 801870e:	f043 0302 	orr.w	r3, r3, #2
 8018712:	b2da      	uxtb	r2, r3
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2207      	movs	r2, #7
 801871c:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801871e:	e029      	b.n	8018774 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018720:	4b3e      	ldr	r3, [pc, #248]	@ (801881c <tcp_process+0x530>)
 8018722:	6818      	ldr	r0, [r3, #0]
 8018724:	4b3e      	ldr	r3, [pc, #248]	@ (8018820 <tcp_process+0x534>)
 8018726:	881b      	ldrh	r3, [r3, #0]
 8018728:	461a      	mov	r2, r3
 801872a:	4b3e      	ldr	r3, [pc, #248]	@ (8018824 <tcp_process+0x538>)
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018730:	4b3d      	ldr	r3, [pc, #244]	@ (8018828 <tcp_process+0x53c>)
 8018732:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018734:	885b      	ldrh	r3, [r3, #2]
 8018736:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018738:	4a3b      	ldr	r2, [pc, #236]	@ (8018828 <tcp_process+0x53c>)
 801873a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801873c:	8812      	ldrh	r2, [r2, #0]
 801873e:	b292      	uxth	r2, r2
 8018740:	9201      	str	r2, [sp, #4]
 8018742:	9300      	str	r3, [sp, #0]
 8018744:	4b39      	ldr	r3, [pc, #228]	@ (801882c <tcp_process+0x540>)
 8018746:	4a3a      	ldr	r2, [pc, #232]	@ (8018830 <tcp_process+0x544>)
 8018748:	f002 fc3e 	bl	801afc8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801874c:	e166      	b.n	8018a1c <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801874e:	4b32      	ldr	r3, [pc, #200]	@ (8018818 <tcp_process+0x52c>)
 8018750:	781b      	ldrb	r3, [r3, #0]
 8018752:	f003 0302 	and.w	r3, r3, #2
 8018756:	2b00      	cmp	r3, #0
 8018758:	f000 8160 	beq.w	8018a1c <tcp_process+0x730>
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018760:	1e5a      	subs	r2, r3, #1
 8018762:	4b30      	ldr	r3, [pc, #192]	@ (8018824 <tcp_process+0x538>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	429a      	cmp	r2, r3
 8018768:	f040 8158 	bne.w	8018a1c <tcp_process+0x730>
      tcp_rexmit(pcb);
 801876c:	6878      	ldr	r0, [r7, #4]
 801876e:	f002 fce9 	bl	801b144 <tcp_rexmit>
    break;
 8018772:	e153      	b.n	8018a1c <tcp_process+0x730>
 8018774:	e152      	b.n	8018a1c <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f000 f9e2 	bl	8018b40 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801877c:	4b31      	ldr	r3, [pc, #196]	@ (8018844 <tcp_process+0x558>)
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	f003 0320 	and.w	r3, r3, #32
 8018784:	2b00      	cmp	r3, #0
 8018786:	f000 814b 	beq.w	8018a20 <tcp_process+0x734>
      tcp_ack_now(pcb);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	7e9b      	ldrb	r3, [r3, #26]
 801878e:	f043 0302 	orr.w	r3, r3, #2
 8018792:	b2da      	uxtb	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	2207      	movs	r2, #7
 801879c:	751a      	strb	r2, [r3, #20]
    }
    break;
 801879e:	e13f      	b.n	8018a20 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80187a0:	6878      	ldr	r0, [r7, #4]
 80187a2:	f000 f9cd 	bl	8018b40 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80187a6:	4b27      	ldr	r3, [pc, #156]	@ (8018844 <tcp_process+0x558>)
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	f003 0320 	and.w	r3, r3, #32
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d070      	beq.n	8018894 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80187b2:	4b19      	ldr	r3, [pc, #100]	@ (8018818 <tcp_process+0x52c>)
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	f003 0310 	and.w	r3, r3, #16
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d05f      	beq.n	801887e <tcp_process+0x592>
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80187c2:	4b16      	ldr	r3, [pc, #88]	@ (801881c <tcp_process+0x530>)
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d159      	bne.n	801887e <tcp_process+0x592>
          pcb->unsent == NULL) {
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d155      	bne.n	801887e <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	7e9b      	ldrb	r3, [r3, #26]
 80187d6:	f043 0302 	orr.w	r3, r3, #2
 80187da:	b2da      	uxtb	r2, r3
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f7fe fe6b 	bl	80174bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80187e6:	4b18      	ldr	r3, [pc, #96]	@ (8018848 <tcp_process+0x55c>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	687a      	ldr	r2, [r7, #4]
 80187ec:	429a      	cmp	r2, r3
 80187ee:	d105      	bne.n	80187fc <tcp_process+0x510>
 80187f0:	4b15      	ldr	r3, [pc, #84]	@ (8018848 <tcp_process+0x55c>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	68db      	ldr	r3, [r3, #12]
 80187f6:	4a14      	ldr	r2, [pc, #80]	@ (8018848 <tcp_process+0x55c>)
 80187f8:	6013      	str	r3, [r2, #0]
 80187fa:	e02d      	b.n	8018858 <tcp_process+0x56c>
 80187fc:	4b12      	ldr	r3, [pc, #72]	@ (8018848 <tcp_process+0x55c>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	617b      	str	r3, [r7, #20]
 8018802:	e026      	b.n	8018852 <tcp_process+0x566>
 8018804:	697b      	ldr	r3, [r7, #20]
 8018806:	68db      	ldr	r3, [r3, #12]
 8018808:	687a      	ldr	r2, [r7, #4]
 801880a:	429a      	cmp	r2, r3
 801880c:	d11e      	bne.n	801884c <tcp_process+0x560>
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	68da      	ldr	r2, [r3, #12]
 8018812:	697b      	ldr	r3, [r7, #20]
 8018814:	60da      	str	r2, [r3, #12]
 8018816:	e01f      	b.n	8018858 <tcp_process+0x56c>
 8018818:	2000be00 	.word	0x2000be00
 801881c:	2000bdf8 	.word	0x2000bdf8
 8018820:	2000bdfe 	.word	0x2000bdfe
 8018824:	2000bdf4 	.word	0x2000bdf4
 8018828:	2000bde4 	.word	0x2000bde4
 801882c:	2000864c 	.word	0x2000864c
 8018830:	20008650 	.word	0x20008650
 8018834:	08025e40 	.word	0x08025e40
 8018838:	08026044 	.word	0x08026044
 801883c:	08025e84 	.word	0x08025e84
 8018840:	2000bdfc 	.word	0x2000bdfc
 8018844:	2000be01 	.word	0x2000be01
 8018848:	2000bdc8 	.word	0x2000bdc8
 801884c:	697b      	ldr	r3, [r7, #20]
 801884e:	68db      	ldr	r3, [r3, #12]
 8018850:	617b      	str	r3, [r7, #20]
 8018852:	697b      	ldr	r3, [r7, #20]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d1d5      	bne.n	8018804 <tcp_process+0x518>
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2200      	movs	r2, #0
 801885c:	60da      	str	r2, [r3, #12]
 801885e:	4b77      	ldr	r3, [pc, #476]	@ (8018a3c <tcp_process+0x750>)
 8018860:	2201      	movs	r2, #1
 8018862:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	220a      	movs	r2, #10
 8018868:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801886a:	4b75      	ldr	r3, [pc, #468]	@ (8018a40 <tcp_process+0x754>)
 801886c:	681a      	ldr	r2, [r3, #0]
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	60da      	str	r2, [r3, #12]
 8018872:	4a73      	ldr	r2, [pc, #460]	@ (8018a40 <tcp_process+0x754>)
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	6013      	str	r3, [r2, #0]
 8018878:	f002 fe1e 	bl	801b4b8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801887c:	e0d2      	b.n	8018a24 <tcp_process+0x738>
        tcp_ack_now(pcb);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	7e9b      	ldrb	r3, [r3, #26]
 8018882:	f043 0302 	orr.w	r3, r3, #2
 8018886:	b2da      	uxtb	r2, r3
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2208      	movs	r2, #8
 8018890:	751a      	strb	r2, [r3, #20]
    break;
 8018892:	e0c7      	b.n	8018a24 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018894:	4b6b      	ldr	r3, [pc, #428]	@ (8018a44 <tcp_process+0x758>)
 8018896:	781b      	ldrb	r3, [r3, #0]
 8018898:	f003 0310 	and.w	r3, r3, #16
 801889c:	2b00      	cmp	r3, #0
 801889e:	f000 80c1 	beq.w	8018a24 <tcp_process+0x738>
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80188a6:	4b68      	ldr	r3, [pc, #416]	@ (8018a48 <tcp_process+0x75c>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	429a      	cmp	r2, r3
 80188ac:	f040 80ba 	bne.w	8018a24 <tcp_process+0x738>
               pcb->unsent == NULL) {
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	f040 80b5 	bne.w	8018a24 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	2206      	movs	r2, #6
 80188be:	751a      	strb	r2, [r3, #20]
    break;
 80188c0:	e0b0      	b.n	8018a24 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f000 f93c 	bl	8018b40 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80188c8:	4b60      	ldr	r3, [pc, #384]	@ (8018a4c <tcp_process+0x760>)
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	f003 0320 	and.w	r3, r3, #32
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	f000 80a9 	beq.w	8018a28 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	7e9b      	ldrb	r3, [r3, #26]
 80188da:	f043 0302 	orr.w	r3, r3, #2
 80188de:	b2da      	uxtb	r2, r3
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80188e4:	6878      	ldr	r0, [r7, #4]
 80188e6:	f7fe fde9 	bl	80174bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80188ea:	4b59      	ldr	r3, [pc, #356]	@ (8018a50 <tcp_process+0x764>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	687a      	ldr	r2, [r7, #4]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d105      	bne.n	8018900 <tcp_process+0x614>
 80188f4:	4b56      	ldr	r3, [pc, #344]	@ (8018a50 <tcp_process+0x764>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	68db      	ldr	r3, [r3, #12]
 80188fa:	4a55      	ldr	r2, [pc, #340]	@ (8018a50 <tcp_process+0x764>)
 80188fc:	6013      	str	r3, [r2, #0]
 80188fe:	e013      	b.n	8018928 <tcp_process+0x63c>
 8018900:	4b53      	ldr	r3, [pc, #332]	@ (8018a50 <tcp_process+0x764>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	613b      	str	r3, [r7, #16]
 8018906:	e00c      	b.n	8018922 <tcp_process+0x636>
 8018908:	693b      	ldr	r3, [r7, #16]
 801890a:	68db      	ldr	r3, [r3, #12]
 801890c:	687a      	ldr	r2, [r7, #4]
 801890e:	429a      	cmp	r2, r3
 8018910:	d104      	bne.n	801891c <tcp_process+0x630>
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	68da      	ldr	r2, [r3, #12]
 8018916:	693b      	ldr	r3, [r7, #16]
 8018918:	60da      	str	r2, [r3, #12]
 801891a:	e005      	b.n	8018928 <tcp_process+0x63c>
 801891c:	693b      	ldr	r3, [r7, #16]
 801891e:	68db      	ldr	r3, [r3, #12]
 8018920:	613b      	str	r3, [r7, #16]
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d1ef      	bne.n	8018908 <tcp_process+0x61c>
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	2200      	movs	r2, #0
 801892c:	60da      	str	r2, [r3, #12]
 801892e:	4b43      	ldr	r3, [pc, #268]	@ (8018a3c <tcp_process+0x750>)
 8018930:	2201      	movs	r2, #1
 8018932:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	220a      	movs	r2, #10
 8018938:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801893a:	4b41      	ldr	r3, [pc, #260]	@ (8018a40 <tcp_process+0x754>)
 801893c:	681a      	ldr	r2, [r3, #0]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	60da      	str	r2, [r3, #12]
 8018942:	4a3f      	ldr	r2, [pc, #252]	@ (8018a40 <tcp_process+0x754>)
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6013      	str	r3, [r2, #0]
 8018948:	f002 fdb6 	bl	801b4b8 <tcp_timer_needed>
    }
    break;
 801894c:	e06c      	b.n	8018a28 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f000 f8f6 	bl	8018b40 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018954:	4b3b      	ldr	r3, [pc, #236]	@ (8018a44 <tcp_process+0x758>)
 8018956:	781b      	ldrb	r3, [r3, #0]
 8018958:	f003 0310 	and.w	r3, r3, #16
 801895c:	2b00      	cmp	r3, #0
 801895e:	d065      	beq.n	8018a2c <tcp_process+0x740>
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018964:	4b38      	ldr	r3, [pc, #224]	@ (8018a48 <tcp_process+0x75c>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	429a      	cmp	r2, r3
 801896a:	d15f      	bne.n	8018a2c <tcp_process+0x740>
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018970:	2b00      	cmp	r3, #0
 8018972:	d15b      	bne.n	8018a2c <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f7fe fda1 	bl	80174bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801897a:	4b35      	ldr	r3, [pc, #212]	@ (8018a50 <tcp_process+0x764>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	429a      	cmp	r2, r3
 8018982:	d105      	bne.n	8018990 <tcp_process+0x6a4>
 8018984:	4b32      	ldr	r3, [pc, #200]	@ (8018a50 <tcp_process+0x764>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	68db      	ldr	r3, [r3, #12]
 801898a:	4a31      	ldr	r2, [pc, #196]	@ (8018a50 <tcp_process+0x764>)
 801898c:	6013      	str	r3, [r2, #0]
 801898e:	e013      	b.n	80189b8 <tcp_process+0x6cc>
 8018990:	4b2f      	ldr	r3, [pc, #188]	@ (8018a50 <tcp_process+0x764>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	60fb      	str	r3, [r7, #12]
 8018996:	e00c      	b.n	80189b2 <tcp_process+0x6c6>
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	68db      	ldr	r3, [r3, #12]
 801899c:	687a      	ldr	r2, [r7, #4]
 801899e:	429a      	cmp	r2, r3
 80189a0:	d104      	bne.n	80189ac <tcp_process+0x6c0>
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	68da      	ldr	r2, [r3, #12]
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	60da      	str	r2, [r3, #12]
 80189aa:	e005      	b.n	80189b8 <tcp_process+0x6cc>
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	68db      	ldr	r3, [r3, #12]
 80189b0:	60fb      	str	r3, [r7, #12]
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d1ef      	bne.n	8018998 <tcp_process+0x6ac>
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	2200      	movs	r2, #0
 80189bc:	60da      	str	r2, [r3, #12]
 80189be:	4b1f      	ldr	r3, [pc, #124]	@ (8018a3c <tcp_process+0x750>)
 80189c0:	2201      	movs	r2, #1
 80189c2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	220a      	movs	r2, #10
 80189c8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80189ca:	4b1d      	ldr	r3, [pc, #116]	@ (8018a40 <tcp_process+0x754>)
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	60da      	str	r2, [r3, #12]
 80189d2:	4a1b      	ldr	r2, [pc, #108]	@ (8018a40 <tcp_process+0x754>)
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6013      	str	r3, [r2, #0]
 80189d8:	f002 fd6e 	bl	801b4b8 <tcp_timer_needed>
    }
    break;
 80189dc:	e026      	b.n	8018a2c <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f000 f8ae 	bl	8018b40 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80189e4:	4b17      	ldr	r3, [pc, #92]	@ (8018a44 <tcp_process+0x758>)
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	f003 0310 	and.w	r3, r3, #16
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d01f      	beq.n	8018a30 <tcp_process+0x744>
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80189f4:	4b14      	ldr	r3, [pc, #80]	@ (8018a48 <tcp_process+0x75c>)
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	429a      	cmp	r2, r3
 80189fa:	d119      	bne.n	8018a30 <tcp_process+0x744>
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d115      	bne.n	8018a30 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8018a04:	4b11      	ldr	r3, [pc, #68]	@ (8018a4c <tcp_process+0x760>)
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	f043 0310 	orr.w	r3, r3, #16
 8018a0c:	b2da      	uxtb	r2, r3
 8018a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8018a4c <tcp_process+0x760>)
 8018a10:	701a      	strb	r2, [r3, #0]
    }
    break;
 8018a12:	e00d      	b.n	8018a30 <tcp_process+0x744>
  default:
    break;
 8018a14:	bf00      	nop
 8018a16:	e00c      	b.n	8018a32 <tcp_process+0x746>
    break;
 8018a18:	bf00      	nop
 8018a1a:	e00a      	b.n	8018a32 <tcp_process+0x746>
    break;
 8018a1c:	bf00      	nop
 8018a1e:	e008      	b.n	8018a32 <tcp_process+0x746>
    break;
 8018a20:	bf00      	nop
 8018a22:	e006      	b.n	8018a32 <tcp_process+0x746>
    break;
 8018a24:	bf00      	nop
 8018a26:	e004      	b.n	8018a32 <tcp_process+0x746>
    break;
 8018a28:	bf00      	nop
 8018a2a:	e002      	b.n	8018a32 <tcp_process+0x746>
    break;
 8018a2c:	bf00      	nop
 8018a2e:	e000      	b.n	8018a32 <tcp_process+0x746>
    break;
 8018a30:	bf00      	nop
  }
  return ERR_OK;
 8018a32:	2300      	movs	r3, #0
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	3720      	adds	r7, #32
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}
 8018a3c:	2000bdd0 	.word	0x2000bdd0
 8018a40:	2000bdcc 	.word	0x2000bdcc
 8018a44:	2000be00 	.word	0x2000be00
 8018a48:	2000bdf8 	.word	0x2000bdf8
 8018a4c:	2000be01 	.word	0x2000be01
 8018a50:	2000bdc8 	.word	0x2000bdc8

08018a54 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018a54:	b590      	push	{r4, r7, lr}
 8018a56:	b085      	sub	sp, #20
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	68db      	ldr	r3, [r3, #12]
 8018a62:	899b      	ldrh	r3, [r3, #12]
 8018a64:	b29b      	uxth	r3, r3
 8018a66:	4618      	mov	r0, r3
 8018a68:	f7fb fc14 	bl	8014294 <lwip_htons>
 8018a6c:	4603      	mov	r3, r0
 8018a6e:	f003 0301 	and.w	r3, r3, #1
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d027      	beq.n	8018ac6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018a76:	6838      	ldr	r0, [r7, #0]
 8018a78:	f7fe fa83 	bl	8016f82 <tcp_segs_free>
    next = NULL;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	603b      	str	r3, [r7, #0]
 8018a80:	e055      	b.n	8018b2e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018a82:	683b      	ldr	r3, [r7, #0]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	899b      	ldrh	r3, [r3, #12]
 8018a88:	b29b      	uxth	r3, r3
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	f7fb fc02 	bl	8014294 <lwip_htons>
 8018a90:	4603      	mov	r3, r0
 8018a92:	f003 0301 	and.w	r3, r3, #1
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d00d      	beq.n	8018ab6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	68db      	ldr	r3, [r3, #12]
 8018a9e:	899b      	ldrh	r3, [r3, #12]
 8018aa0:	b29c      	uxth	r4, r3
 8018aa2:	2001      	movs	r0, #1
 8018aa4:	f7fb fbf6 	bl	8014294 <lwip_htons>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	461a      	mov	r2, r3
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	68db      	ldr	r3, [r3, #12]
 8018ab0:	4322      	orrs	r2, r4
 8018ab2:	b292      	uxth	r2, r2
 8018ab4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018ab6:	683b      	ldr	r3, [r7, #0]
 8018ab8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018aba:	683b      	ldr	r3, [r7, #0]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018ac0:	68f8      	ldr	r0, [r7, #12]
 8018ac2:	f7fe fa73 	bl	8016fac <tcp_seg_free>
    while (next &&
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d00e      	beq.n	8018aea <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	891b      	ldrh	r3, [r3, #8]
 8018ad0:	461a      	mov	r2, r3
 8018ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8018b3c <tcp_oos_insert_segment+0xe8>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	441a      	add	r2, r3
 8018ad8:	683b      	ldr	r3, [r7, #0]
 8018ada:	68db      	ldr	r3, [r3, #12]
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	6839      	ldr	r1, [r7, #0]
 8018ae0:	8909      	ldrh	r1, [r1, #8]
 8018ae2:	440b      	add	r3, r1
 8018ae4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	dacb      	bge.n	8018a82 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d01e      	beq.n	8018b2e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	891b      	ldrh	r3, [r3, #8]
 8018af4:	461a      	mov	r2, r3
 8018af6:	4b11      	ldr	r3, [pc, #68]	@ (8018b3c <tcp_oos_insert_segment+0xe8>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	441a      	add	r2, r3
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	685b      	ldr	r3, [r3, #4]
 8018b02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	dd12      	ble.n	8018b2e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018b08:	683b      	ldr	r3, [r7, #0]
 8018b0a:	68db      	ldr	r3, [r3, #12]
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	b29a      	uxth	r2, r3
 8018b10:	4b0a      	ldr	r3, [pc, #40]	@ (8018b3c <tcp_oos_insert_segment+0xe8>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	b29b      	uxth	r3, r3
 8018b16:	1ad3      	subs	r3, r2, r3
 8018b18:	b29a      	uxth	r2, r3
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	685a      	ldr	r2, [r3, #4]
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	891b      	ldrh	r3, [r3, #8]
 8018b26:	4619      	mov	r1, r3
 8018b28:	4610      	mov	r0, r2
 8018b2a:	f7fc fc97 	bl	801545c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	683a      	ldr	r2, [r7, #0]
 8018b32:	601a      	str	r2, [r3, #0]
}
 8018b34:	bf00      	nop
 8018b36:	3714      	adds	r7, #20
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd90      	pop	{r4, r7, pc}
 8018b3c:	2000bdf4 	.word	0x2000bdf4

08018b40 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b42:	b08d      	sub	sp, #52	@ 0x34
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	7d1b      	ldrb	r3, [r3, #20]
 8018b50:	2b03      	cmp	r3, #3
 8018b52:	d806      	bhi.n	8018b62 <tcp_receive+0x22>
 8018b54:	4b98      	ldr	r3, [pc, #608]	@ (8018db8 <tcp_receive+0x278>)
 8018b56:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8018b5a:	4998      	ldr	r1, [pc, #608]	@ (8018dbc <tcp_receive+0x27c>)
 8018b5c:	4898      	ldr	r0, [pc, #608]	@ (8018dc0 <tcp_receive+0x280>)
 8018b5e:	f008 fde1 	bl	8021724 <iprintf>

  if (flags & TCP_ACK) {
 8018b62:	4b98      	ldr	r3, [pc, #608]	@ (8018dc4 <tcp_receive+0x284>)
 8018b64:	781b      	ldrb	r3, [r3, #0]
 8018b66:	f003 0310 	and.w	r3, r3, #16
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	f000 82c1 	beq.w	80190f2 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018b76:	461a      	mov	r2, r3
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b7c:	4413      	add	r3, r2
 8018b7e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018b84:	4b90      	ldr	r3, [pc, #576]	@ (8018dc8 <tcp_receive+0x288>)
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	1ad3      	subs	r3, r2, r3
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	db1b      	blt.n	8018bc6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018b92:	4b8d      	ldr	r3, [pc, #564]	@ (8018dc8 <tcp_receive+0x288>)
 8018b94:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b96:	429a      	cmp	r2, r3
 8018b98:	d106      	bne.n	8018ba8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8018dcc <tcp_receive+0x28c>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	1ad3      	subs	r3, r2, r3
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	db0e      	blt.n	8018bc6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018bac:	4b87      	ldr	r3, [pc, #540]	@ (8018dcc <tcp_receive+0x28c>)
 8018bae:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	d141      	bne.n	8018c38 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018bb4:	4b86      	ldr	r3, [pc, #536]	@ (8018dd0 <tcp_receive+0x290>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	89db      	ldrh	r3, [r3, #14]
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d938      	bls.n	8018c38 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018bc6:	4b82      	ldr	r3, [pc, #520]	@ (8018dd0 <tcp_receive+0x290>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	89db      	ldrh	r3, [r3, #14]
 8018bcc:	b29a      	uxth	r2, r3
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018be0:	429a      	cmp	r2, r3
 8018be2:	d205      	bcs.n	8018bf0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 8018bf0:	4b75      	ldr	r3, [pc, #468]	@ (8018dc8 <tcp_receive+0x288>)
 8018bf2:	681a      	ldr	r2, [r3, #0]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 8018bf8:	4b74      	ldr	r3, [pc, #464]	@ (8018dcc <tcp_receive+0x28c>)
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d10d      	bne.n	8018c26 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d111      	bne.n	8018c38 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2200      	movs	r2, #0
 8018c18:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2201      	movs	r2, #1
 8018c20:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8018c24:	e008      	b.n	8018c38 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d003      	beq.n	8018c38 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2200      	movs	r2, #0
 8018c34:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018c38:	4b64      	ldr	r3, [pc, #400]	@ (8018dcc <tcp_receive+0x28c>)
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c40:	1ad3      	subs	r3, r2, r3
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	dc53      	bgt.n	8018cee <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8018c46:	4b63      	ldr	r3, [pc, #396]	@ (8018dd4 <tcp_receive+0x294>)
 8018c48:	881b      	ldrh	r3, [r3, #0]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d146      	bne.n	8018cdc <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c52:	687a      	ldr	r2, [r7, #4]
 8018c54:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8018c58:	4413      	add	r3, r2
 8018c5a:	697a      	ldr	r2, [r7, #20]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d13d      	bne.n	8018cdc <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	db38      	blt.n	8018cdc <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018c6e:	4b57      	ldr	r3, [pc, #348]	@ (8018dcc <tcp_receive+0x28c>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d132      	bne.n	8018cdc <tcp_receive+0x19c>
              found_dupack = 1;
 8018c76:	2301      	movs	r3, #1
 8018c78:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c80:	2bff      	cmp	r3, #255	@ 0xff
 8018c82:	d007      	beq.n	8018c94 <tcp_receive+0x154>
                ++pcb->dupacks;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c8a:	3301      	adds	r3, #1
 8018c8c:	b2da      	uxtb	r2, r3
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c9a:	2b03      	cmp	r3, #3
 8018c9c:	d916      	bls.n	8018ccc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018ca8:	4413      	add	r3, r2
 8018caa:	b29a      	uxth	r2, r3
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018cb2:	429a      	cmp	r2, r3
 8018cb4:	d912      	bls.n	8018cdc <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018cc0:	4413      	add	r3, r2
 8018cc2:	b29a      	uxth	r2, r3
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018cca:	e007      	b.n	8018cdc <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018cd2:	2b03      	cmp	r3, #3
 8018cd4:	d102      	bne.n	8018cdc <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f002 fa8e 	bl	801b1f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018cdc:	69fb      	ldr	r3, [r7, #28]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	f040 816a 	bne.w	8018fb8 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2200      	movs	r2, #0
 8018ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018cec:	e164      	b.n	8018fb8 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8018cee:	4b37      	ldr	r3, [pc, #220]	@ (8018dcc <tcp_receive+0x28c>)
 8018cf0:	681a      	ldr	r2, [r3, #0]
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018cf6:	1ad3      	subs	r3, r2, r3
 8018cf8:	3b01      	subs	r3, #1
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	f2c0 8108 	blt.w	8018f10 <tcp_receive+0x3d0>
 8018d00:	4b32      	ldr	r3, [pc, #200]	@ (8018dcc <tcp_receive+0x28c>)
 8018d02:	681a      	ldr	r2, [r3, #0]
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018d08:	1ad3      	subs	r3, r2, r3
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	f300 8100 	bgt.w	8018f10 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	7e9b      	ldrb	r3, [r3, #26]
 8018d14:	f003 0304 	and.w	r3, r3, #4
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d00c      	beq.n	8018d36 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	7e9b      	ldrb	r3, [r3, #26]
 8018d20:	f023 0304 	bic.w	r3, r3, #4
 8018d24:	b2da      	uxtb	r2, r3
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	2200      	movs	r2, #0
 8018d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018d44:	10db      	asrs	r3, r3, #3
 8018d46:	b21b      	sxth	r3, r3
 8018d48:	b29a      	uxth	r2, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018d50:	b29b      	uxth	r3, r3
 8018d52:	4413      	add	r3, r2
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	b21a      	sxth	r2, r3
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	2200      	movs	r2, #0
 8018d62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8018d66:	4b19      	ldr	r3, [pc, #100]	@ (8018dcc <tcp_receive+0x28c>)
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	7d1b      	ldrb	r3, [r3, #20]
 8018d72:	2b03      	cmp	r3, #3
 8018d74:	f240 8095 	bls.w	8018ea2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018d84:	429a      	cmp	r2, r3
 8018d86:	d227      	bcs.n	8018dd8 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018d92:	4413      	add	r3, r2
 8018d94:	b29a      	uxth	r2, r3
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	f240 8080 	bls.w	8018ea2 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018dac:	4413      	add	r3, r2
 8018dae:	b29a      	uxth	r2, r3
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018db6:	e074      	b.n	8018ea2 <tcp_receive+0x362>
 8018db8:	08025e40 	.word	0x08025e40
 8018dbc:	08026064 	.word	0x08026064
 8018dc0:	08025e84 	.word	0x08025e84
 8018dc4:	2000be00 	.word	0x2000be00
 8018dc8:	2000bdf4 	.word	0x2000bdf4
 8018dcc:	2000bdf8 	.word	0x2000bdf8
 8018dd0:	2000bde4 	.word	0x2000bde4
 8018dd4:	2000bdfe 	.word	0x2000bdfe
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018de2:	4619      	mov	r1, r3
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018de8:	fb01 f303 	mul.w	r3, r1, r3
 8018dec:	6879      	ldr	r1, [r7, #4]
 8018dee:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 8018df2:	fb93 f3f1 	sdiv	r3, r3, r1
 8018df6:	b29b      	uxth	r3, r3
 8018df8:	4413      	add	r3, r2
 8018dfa:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018e02:	8a7a      	ldrh	r2, [r7, #18]
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d94c      	bls.n	8018ea2 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	8a7a      	ldrh	r2, [r7, #18]
 8018e0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8018e10:	e047      	b.n	8018ea2 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e1c:	681a      	ldr	r2, [r3, #0]
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8018e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e2a:	685b      	ldr	r3, [r3, #4]
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7fc fd1d 	bl	801586c <pbuf_clen>
 8018e32:	4603      	mov	r3, r0
 8018e34:	429c      	cmp	r4, r3
 8018e36:	d206      	bcs.n	8018e46 <tcp_receive+0x306>
 8018e38:	4b70      	ldr	r3, [pc, #448]	@ (8018ffc <tcp_receive+0x4bc>)
 8018e3a:	f240 429e 	movw	r2, #1182	@ 0x49e
 8018e3e:	4970      	ldr	r1, [pc, #448]	@ (8019000 <tcp_receive+0x4c0>)
 8018e40:	4870      	ldr	r0, [pc, #448]	@ (8019004 <tcp_receive+0x4c4>)
 8018e42:	f008 fc6f 	bl	8021724 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8018e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e48:	685b      	ldr	r3, [r3, #4]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7fc fd0e 	bl	801586c <pbuf_clen>
 8018e50:	4603      	mov	r3, r0
 8018e52:	461a      	mov	r2, r3
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018e5a:	1a9b      	subs	r3, r3, r2
 8018e5c:	b29a      	uxth	r2, r3
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8018e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e66:	891a      	ldrh	r2, [r3, #8]
 8018e68:	4b67      	ldr	r3, [pc, #412]	@ (8019008 <tcp_receive+0x4c8>)
 8018e6a:	881b      	ldrh	r3, [r3, #0]
 8018e6c:	4413      	add	r3, r2
 8018e6e:	b29a      	uxth	r2, r3
 8018e70:	4b65      	ldr	r3, [pc, #404]	@ (8019008 <tcp_receive+0x4c8>)
 8018e72:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8018e74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018e76:	f7fe f899 	bl	8016fac <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d00e      	beq.n	8018ea2 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d10a      	bne.n	8018ea2 <tcp_receive+0x362>
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d106      	bne.n	8018ea2 <tcp_receive+0x362>
 8018e94:	4b59      	ldr	r3, [pc, #356]	@ (8018ffc <tcp_receive+0x4bc>)
 8018e96:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8018e9a:	495c      	ldr	r1, [pc, #368]	@ (801900c <tcp_receive+0x4cc>)
 8018e9c:	4859      	ldr	r0, [pc, #356]	@ (8019004 <tcp_receive+0x4c4>)
 8018e9e:	f008 fc41 	bl	8021724 <iprintf>
      while (pcb->unacked != NULL &&
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d022      	beq.n	8018ef0 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018eae:	68db      	ldr	r3, [r3, #12]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f7fb f9fb 	bl	80142ae <lwip_htonl>
 8018eb8:	4604      	mov	r4, r0
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ebe:	891b      	ldrh	r3, [r3, #8]
 8018ec0:	461d      	mov	r5, r3
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ec6:	68db      	ldr	r3, [r3, #12]
 8018ec8:	899b      	ldrh	r3, [r3, #12]
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7fb f9e1 	bl	8014294 <lwip_htons>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	f003 0303 	and.w	r3, r3, #3
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d001      	beq.n	8018ee0 <tcp_receive+0x3a0>
 8018edc:	2301      	movs	r3, #1
 8018ede:	e000      	b.n	8018ee2 <tcp_receive+0x3a2>
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	442b      	add	r3, r5
 8018ee4:	18e2      	adds	r2, r4, r3
 8018ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8019010 <tcp_receive+0x4d0>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	dd90      	ble.n	8018e12 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d104      	bne.n	8018f02 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018efe:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018f00:	e002      	b.n	8018f08 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	2200      	movs	r2, #0
 8018f06:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	76da      	strb	r2, [r3, #27]
 8018f0e:	e002      	b.n	8018f16 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	f001 fd65 	bl	801a9e0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8018f16:	e04f      	b.n	8018fb8 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018f22:	681a      	ldr	r2, [r3, #0]
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d103      	bne.n	8018f38 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	2200      	movs	r2, #0
 8018f34:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8018f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f40:	685b      	ldr	r3, [r3, #4]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fc fc92 	bl	801586c <pbuf_clen>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	429c      	cmp	r4, r3
 8018f4c:	d206      	bcs.n	8018f5c <tcp_receive+0x41c>
 8018f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8018ffc <tcp_receive+0x4bc>)
 8018f50:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8018f54:	492a      	ldr	r1, [pc, #168]	@ (8019000 <tcp_receive+0x4c0>)
 8018f56:	482b      	ldr	r0, [pc, #172]	@ (8019004 <tcp_receive+0x4c4>)
 8018f58:	f008 fbe4 	bl	8021724 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8018f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f5e:	685b      	ldr	r3, [r3, #4]
 8018f60:	4618      	mov	r0, r3
 8018f62:	f7fc fc83 	bl	801586c <pbuf_clen>
 8018f66:	4603      	mov	r3, r0
 8018f68:	461a      	mov	r2, r3
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018f70:	1a9b      	subs	r3, r3, r2
 8018f72:	b29a      	uxth	r2, r3
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 8018f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f7c:	891a      	ldrh	r2, [r3, #8]
 8018f7e:	4b22      	ldr	r3, [pc, #136]	@ (8019008 <tcp_receive+0x4c8>)
 8018f80:	881b      	ldrh	r3, [r3, #0]
 8018f82:	4413      	add	r3, r2
 8018f84:	b29a      	uxth	r2, r3
 8018f86:	4b20      	ldr	r3, [pc, #128]	@ (8019008 <tcp_receive+0x4c8>)
 8018f88:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8018f8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018f8c:	f7fe f80e 	bl	8016fac <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d00e      	beq.n	8018fb8 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d10a      	bne.n	8018fb8 <tcp_receive+0x478>
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d106      	bne.n	8018fb8 <tcp_receive+0x478>
 8018faa:	4b14      	ldr	r3, [pc, #80]	@ (8018ffc <tcp_receive+0x4bc>)
 8018fac:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8018fb0:	4916      	ldr	r1, [pc, #88]	@ (801900c <tcp_receive+0x4cc>)
 8018fb2:	4814      	ldr	r0, [pc, #80]	@ (8019004 <tcp_receive+0x4c4>)
 8018fb4:	f008 fbb6 	bl	8021724 <iprintf>
    while (pcb->unsent != NULL &&
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d037      	beq.n	8019030 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8018fc0:	4b13      	ldr	r3, [pc, #76]	@ (8019010 <tcp_receive+0x4d0>)
 8018fc2:	681c      	ldr	r4, [r3, #0]
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018fc8:	68db      	ldr	r3, [r3, #12]
 8018fca:	685b      	ldr	r3, [r3, #4]
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7fb f96e 	bl	80142ae <lwip_htonl>
 8018fd2:	4605      	mov	r5, r0
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018fd8:	891b      	ldrh	r3, [r3, #8]
 8018fda:	461e      	mov	r6, r3
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	899b      	ldrh	r3, [r3, #12]
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7fb f954 	bl	8014294 <lwip_htons>
 8018fec:	4603      	mov	r3, r0
 8018fee:	f003 0303 	and.w	r3, r3, #3
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d00e      	beq.n	8019014 <tcp_receive+0x4d4>
 8018ff6:	2301      	movs	r3, #1
 8018ff8:	e00d      	b.n	8019016 <tcp_receive+0x4d6>
 8018ffa:	bf00      	nop
 8018ffc:	08025e40 	.word	0x08025e40
 8019000:	08026080 	.word	0x08026080
 8019004:	08025e84 	.word	0x08025e84
 8019008:	2000bdfc 	.word	0x2000bdfc
 801900c:	080260a8 	.word	0x080260a8
 8019010:	2000bdf8 	.word	0x2000bdf8
 8019014:	2300      	movs	r3, #0
 8019016:	4433      	add	r3, r6
 8019018:	442b      	add	r3, r5
 801901a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 801901c:	2b00      	cmp	r3, #0
 801901e:	db07      	blt.n	8019030 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019020:	4b8d      	ldr	r3, [pc, #564]	@ (8019258 <tcp_receive+0x718>)
 8019022:	681a      	ldr	r2, [r3, #0]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019028:	1ad3      	subs	r3, r2, r3
 801902a:	2b00      	cmp	r3, #0
 801902c:	f77f af74 	ble.w	8018f18 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019036:	4b89      	ldr	r3, [pc, #548]	@ (801925c <tcp_receive+0x71c>)
 8019038:	881b      	ldrh	r3, [r3, #0]
 801903a:	4413      	add	r3, r2
 801903c:	b29a      	uxth	r2, r3
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019048:	2b00      	cmp	r3, #0
 801904a:	d052      	beq.n	80190f2 <tcp_receive+0x5b2>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019050:	4b81      	ldr	r3, [pc, #516]	@ (8019258 <tcp_receive+0x718>)
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	1ad3      	subs	r3, r2, r3
 8019056:	2b00      	cmp	r3, #0
 8019058:	da4b      	bge.n	80190f2 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801905a:	4b81      	ldr	r3, [pc, #516]	@ (8019260 <tcp_receive+0x720>)
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	b29a      	uxth	r2, r3
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019064:	b29b      	uxth	r3, r3
 8019066:	1ad3      	subs	r3, r2, r3
 8019068:	b29b      	uxth	r3, r3
 801906a:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 801906c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019074:	10db      	asrs	r3, r3, #3
 8019076:	b21b      	sxth	r3, r3
 8019078:	b29b      	uxth	r3, r3
 801907a:	1ad3      	subs	r3, r2, r3
 801907c:	b29b      	uxth	r3, r3
 801907e:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019086:	b29a      	uxth	r2, r3
 8019088:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801908a:	4413      	add	r3, r2
 801908c:	b29b      	uxth	r3, r3
 801908e:	b21a      	sxth	r2, r3
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8019094:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019098:	2b00      	cmp	r3, #0
 801909a:	da03      	bge.n	80190a4 <tcp_receive+0x564>
        m = -m;
 801909c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801909e:	425b      	negs	r3, r3
 80190a0:	b29b      	uxth	r3, r3
 80190a2:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 80190a4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80190ac:	109b      	asrs	r3, r3, #2
 80190ae:	b21b      	sxth	r3, r3
 80190b0:	b29b      	uxth	r3, r3
 80190b2:	1ad3      	subs	r3, r2, r3
 80190b4:	b29b      	uxth	r3, r3
 80190b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80190be:	b29a      	uxth	r2, r3
 80190c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80190c2:	4413      	add	r3, r2
 80190c4:	b29b      	uxth	r3, r3
 80190c6:	b21a      	sxth	r2, r3
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80190d2:	10db      	asrs	r3, r3, #3
 80190d4:	b21b      	sxth	r3, r3
 80190d6:	b29a      	uxth	r2, r3
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80190de:	b29b      	uxth	r3, r3
 80190e0:	4413      	add	r3, r2
 80190e2:	b29b      	uxth	r3, r3
 80190e4:	b21a      	sxth	r2, r3
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	2200      	movs	r2, #0
 80190f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80190f2:	4b5c      	ldr	r3, [pc, #368]	@ (8019264 <tcp_receive+0x724>)
 80190f4:	881b      	ldrh	r3, [r3, #0]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	f000 84f1 	beq.w	8019ade <tcp_receive+0xf9e>
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	7d1b      	ldrb	r3, [r3, #20]
 8019100:	2b06      	cmp	r3, #6
 8019102:	f200 84ec 	bhi.w	8019ade <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801910a:	4b57      	ldr	r3, [pc, #348]	@ (8019268 <tcp_receive+0x728>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	1ad3      	subs	r3, r2, r3
 8019110:	3b01      	subs	r3, #1
 8019112:	2b00      	cmp	r3, #0
 8019114:	f2c0 80b8 	blt.w	8019288 <tcp_receive+0x748>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801911c:	4b51      	ldr	r3, [pc, #324]	@ (8019264 <tcp_receive+0x724>)
 801911e:	881b      	ldrh	r3, [r3, #0]
 8019120:	4619      	mov	r1, r3
 8019122:	4b51      	ldr	r3, [pc, #324]	@ (8019268 <tcp_receive+0x728>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	440b      	add	r3, r1
 8019128:	1ad3      	subs	r3, r2, r3
 801912a:	3301      	adds	r3, #1
 801912c:	2b00      	cmp	r3, #0
 801912e:	f300 80ab 	bgt.w	8019288 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019132:	4b4e      	ldr	r3, [pc, #312]	@ (801926c <tcp_receive+0x72c>)
 8019134:	685b      	ldr	r3, [r3, #4]
 8019136:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801913c:	4b4a      	ldr	r3, [pc, #296]	@ (8019268 <tcp_receive+0x728>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	1ad3      	subs	r3, r2, r3
 8019142:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019144:	4b49      	ldr	r3, [pc, #292]	@ (801926c <tcp_receive+0x72c>)
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d106      	bne.n	801915a <tcp_receive+0x61a>
 801914c:	4b48      	ldr	r3, [pc, #288]	@ (8019270 <tcp_receive+0x730>)
 801914e:	f240 523c 	movw	r2, #1340	@ 0x53c
 8019152:	4948      	ldr	r1, [pc, #288]	@ (8019274 <tcp_receive+0x734>)
 8019154:	4848      	ldr	r0, [pc, #288]	@ (8019278 <tcp_receive+0x738>)
 8019156:	f008 fae5 	bl	8021724 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801915c:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8019160:	4293      	cmp	r3, r2
 8019162:	dd06      	ble.n	8019172 <tcp_receive+0x632>
 8019164:	4b42      	ldr	r3, [pc, #264]	@ (8019270 <tcp_receive+0x730>)
 8019166:	f240 523d 	movw	r2, #1341	@ 0x53d
 801916a:	4944      	ldr	r1, [pc, #272]	@ (801927c <tcp_receive+0x73c>)
 801916c:	4842      	ldr	r0, [pc, #264]	@ (8019278 <tcp_receive+0x738>)
 801916e:	f008 fad9 	bl	8021724 <iprintf>
      if (inseg.p->len < off) {
 8019172:	4b3e      	ldr	r3, [pc, #248]	@ (801926c <tcp_receive+0x72c>)
 8019174:	685b      	ldr	r3, [r3, #4]
 8019176:	895b      	ldrh	r3, [r3, #10]
 8019178:	461a      	mov	r2, r3
 801917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801917c:	4293      	cmp	r3, r2
 801917e:	dd3e      	ble.n	80191fe <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019180:	4b3a      	ldr	r3, [pc, #232]	@ (801926c <tcp_receive+0x72c>)
 8019182:	685b      	ldr	r3, [r3, #4]
 8019184:	891b      	ldrh	r3, [r3, #8]
 8019186:	461a      	mov	r2, r3
 8019188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801918a:	4293      	cmp	r3, r2
 801918c:	dd06      	ble.n	801919c <tcp_receive+0x65c>
 801918e:	4b38      	ldr	r3, [pc, #224]	@ (8019270 <tcp_receive+0x730>)
 8019190:	f240 523f 	movw	r2, #1343	@ 0x53f
 8019194:	493a      	ldr	r1, [pc, #232]	@ (8019280 <tcp_receive+0x740>)
 8019196:	4838      	ldr	r0, [pc, #224]	@ (8019278 <tcp_receive+0x738>)
 8019198:	f008 fac4 	bl	8021724 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801919c:	4b33      	ldr	r3, [pc, #204]	@ (801926c <tcp_receive+0x72c>)
 801919e:	685b      	ldr	r3, [r3, #4]
 80191a0:	891a      	ldrh	r2, [r3, #8]
 80191a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	1ad3      	subs	r3, r2, r3
 80191a8:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80191aa:	e00e      	b.n	80191ca <tcp_receive+0x68a>
          off -= p->len;
 80191ac:	69bb      	ldr	r3, [r7, #24]
 80191ae:	895b      	ldrh	r3, [r3, #10]
 80191b0:	461a      	mov	r2, r3
 80191b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191b4:	1a9b      	subs	r3, r3, r2
 80191b6:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80191b8:	69bb      	ldr	r3, [r7, #24]
 80191ba:	8a3a      	ldrh	r2, [r7, #16]
 80191bc:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80191be:	69bb      	ldr	r3, [r7, #24]
 80191c0:	2200      	movs	r2, #0
 80191c2:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80191c4:	69bb      	ldr	r3, [r7, #24]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80191ca:	69bb      	ldr	r3, [r7, #24]
 80191cc:	895b      	ldrh	r3, [r3, #10]
 80191ce:	461a      	mov	r2, r3
 80191d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191d2:	4293      	cmp	r3, r2
 80191d4:	dcea      	bgt.n	80191ac <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80191d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191d8:	b29b      	uxth	r3, r3
 80191da:	425b      	negs	r3, r3
 80191dc:	b29b      	uxth	r3, r3
 80191de:	b21b      	sxth	r3, r3
 80191e0:	4619      	mov	r1, r3
 80191e2:	69b8      	ldr	r0, [r7, #24]
 80191e4:	f7fc fa8a 	bl	80156fc <pbuf_header>
 80191e8:	4603      	mov	r3, r0
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d01c      	beq.n	8019228 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80191ee:	4b20      	ldr	r3, [pc, #128]	@ (8019270 <tcp_receive+0x730>)
 80191f0:	f240 524c 	movw	r2, #1356	@ 0x54c
 80191f4:	4923      	ldr	r1, [pc, #140]	@ (8019284 <tcp_receive+0x744>)
 80191f6:	4820      	ldr	r0, [pc, #128]	@ (8019278 <tcp_receive+0x738>)
 80191f8:	f008 fa94 	bl	8021724 <iprintf>
 80191fc:	e014      	b.n	8019228 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80191fe:	4b1b      	ldr	r3, [pc, #108]	@ (801926c <tcp_receive+0x72c>)
 8019200:	685b      	ldr	r3, [r3, #4]
 8019202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019204:	b292      	uxth	r2, r2
 8019206:	4252      	negs	r2, r2
 8019208:	b292      	uxth	r2, r2
 801920a:	b212      	sxth	r2, r2
 801920c:	4611      	mov	r1, r2
 801920e:	4618      	mov	r0, r3
 8019210:	f7fc fa74 	bl	80156fc <pbuf_header>
 8019214:	4603      	mov	r3, r0
 8019216:	2b00      	cmp	r3, #0
 8019218:	d006      	beq.n	8019228 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801921a:	4b15      	ldr	r3, [pc, #84]	@ (8019270 <tcp_receive+0x730>)
 801921c:	f240 5251 	movw	r2, #1361	@ 0x551
 8019220:	4918      	ldr	r1, [pc, #96]	@ (8019284 <tcp_receive+0x744>)
 8019222:	4815      	ldr	r0, [pc, #84]	@ (8019278 <tcp_receive+0x738>)
 8019224:	f008 fa7e 	bl	8021724 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8019228:	4b10      	ldr	r3, [pc, #64]	@ (801926c <tcp_receive+0x72c>)
 801922a:	891a      	ldrh	r2, [r3, #8]
 801922c:	4b0e      	ldr	r3, [pc, #56]	@ (8019268 <tcp_receive+0x728>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	b299      	uxth	r1, r3
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019236:	b29b      	uxth	r3, r3
 8019238:	1acb      	subs	r3, r1, r3
 801923a:	b29b      	uxth	r3, r3
 801923c:	4413      	add	r3, r2
 801923e:	b29a      	uxth	r2, r3
 8019240:	4b0a      	ldr	r3, [pc, #40]	@ (801926c <tcp_receive+0x72c>)
 8019242:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019248:	4a07      	ldr	r2, [pc, #28]	@ (8019268 <tcp_receive+0x728>)
 801924a:	6013      	str	r3, [r2, #0]
 801924c:	4b07      	ldr	r3, [pc, #28]	@ (801926c <tcp_receive+0x72c>)
 801924e:	68db      	ldr	r3, [r3, #12]
 8019250:	4a05      	ldr	r2, [pc, #20]	@ (8019268 <tcp_receive+0x728>)
 8019252:	6812      	ldr	r2, [r2, #0]
 8019254:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019256:	e025      	b.n	80192a4 <tcp_receive+0x764>
 8019258:	2000bdf8 	.word	0x2000bdf8
 801925c:	2000bdfc 	.word	0x2000bdfc
 8019260:	2000bdbc 	.word	0x2000bdbc
 8019264:	2000bdfe 	.word	0x2000bdfe
 8019268:	2000bdf4 	.word	0x2000bdf4
 801926c:	2000bdd4 	.word	0x2000bdd4
 8019270:	08025e40 	.word	0x08025e40
 8019274:	080260c8 	.word	0x080260c8
 8019278:	08025e84 	.word	0x08025e84
 801927c:	080260d8 	.word	0x080260d8
 8019280:	080260e8 	.word	0x080260e8
 8019284:	080260f8 	.word	0x080260f8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019288:	4b87      	ldr	r3, [pc, #540]	@ (80194a8 <tcp_receive+0x968>)
 801928a:	681a      	ldr	r2, [r3, #0]
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019290:	1ad3      	subs	r3, r2, r3
 8019292:	2b00      	cmp	r3, #0
 8019294:	da06      	bge.n	80192a4 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	7e9b      	ldrb	r3, [r3, #26]
 801929a:	f043 0302 	orr.w	r3, r3, #2
 801929e:	b2da      	uxtb	r2, r3
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80192a4:	4b80      	ldr	r3, [pc, #512]	@ (80194a8 <tcp_receive+0x968>)
 80192a6:	681a      	ldr	r2, [r3, #0]
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192ac:	1ad3      	subs	r3, r2, r3
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	f2c0 8410 	blt.w	8019ad4 <tcp_receive+0xf94>
 80192b4:	4b7c      	ldr	r3, [pc, #496]	@ (80194a8 <tcp_receive+0x968>)
 80192b6:	681a      	ldr	r2, [r3, #0]
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192bc:	6879      	ldr	r1, [r7, #4]
 80192be:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80192c0:	440b      	add	r3, r1
 80192c2:	1ad3      	subs	r3, r2, r3
 80192c4:	3301      	adds	r3, #1
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	f300 8404 	bgt.w	8019ad4 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80192d0:	4b75      	ldr	r3, [pc, #468]	@ (80194a8 <tcp_receive+0x968>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	429a      	cmp	r2, r3
 80192d6:	f040 8287 	bne.w	80197e8 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80192da:	4b74      	ldr	r3, [pc, #464]	@ (80194ac <tcp_receive+0x96c>)
 80192dc:	891c      	ldrh	r4, [r3, #8]
 80192de:	4b73      	ldr	r3, [pc, #460]	@ (80194ac <tcp_receive+0x96c>)
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	899b      	ldrh	r3, [r3, #12]
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	4618      	mov	r0, r3
 80192e8:	f7fa ffd4 	bl	8014294 <lwip_htons>
 80192ec:	4603      	mov	r3, r0
 80192ee:	f003 0303 	and.w	r3, r3, #3
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d001      	beq.n	80192fa <tcp_receive+0x7ba>
 80192f6:	2301      	movs	r3, #1
 80192f8:	e000      	b.n	80192fc <tcp_receive+0x7bc>
 80192fa:	2300      	movs	r3, #0
 80192fc:	4423      	add	r3, r4
 80192fe:	b29a      	uxth	r2, r3
 8019300:	4b6b      	ldr	r3, [pc, #428]	@ (80194b0 <tcp_receive+0x970>)
 8019302:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019308:	4b69      	ldr	r3, [pc, #420]	@ (80194b0 <tcp_receive+0x970>)
 801930a:	881b      	ldrh	r3, [r3, #0]
 801930c:	429a      	cmp	r2, r3
 801930e:	d26e      	bcs.n	80193ee <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019310:	4b66      	ldr	r3, [pc, #408]	@ (80194ac <tcp_receive+0x96c>)
 8019312:	68db      	ldr	r3, [r3, #12]
 8019314:	899b      	ldrh	r3, [r3, #12]
 8019316:	b29b      	uxth	r3, r3
 8019318:	4618      	mov	r0, r3
 801931a:	f7fa ffbb 	bl	8014294 <lwip_htons>
 801931e:	4603      	mov	r3, r0
 8019320:	f003 0301 	and.w	r3, r3, #1
 8019324:	2b00      	cmp	r3, #0
 8019326:	d01b      	beq.n	8019360 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019328:	4b60      	ldr	r3, [pc, #384]	@ (80194ac <tcp_receive+0x96c>)
 801932a:	68db      	ldr	r3, [r3, #12]
 801932c:	899b      	ldrh	r3, [r3, #12]
 801932e:	b29b      	uxth	r3, r3
 8019330:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019334:	b29c      	uxth	r4, r3
 8019336:	4b5d      	ldr	r3, [pc, #372]	@ (80194ac <tcp_receive+0x96c>)
 8019338:	68db      	ldr	r3, [r3, #12]
 801933a:	899b      	ldrh	r3, [r3, #12]
 801933c:	b29b      	uxth	r3, r3
 801933e:	4618      	mov	r0, r3
 8019340:	f7fa ffa8 	bl	8014294 <lwip_htons>
 8019344:	4603      	mov	r3, r0
 8019346:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801934a:	b29b      	uxth	r3, r3
 801934c:	4618      	mov	r0, r3
 801934e:	f7fa ffa1 	bl	8014294 <lwip_htons>
 8019352:	4603      	mov	r3, r0
 8019354:	461a      	mov	r2, r3
 8019356:	4b55      	ldr	r3, [pc, #340]	@ (80194ac <tcp_receive+0x96c>)
 8019358:	68db      	ldr	r3, [r3, #12]
 801935a:	4322      	orrs	r2, r4
 801935c:	b292      	uxth	r2, r2
 801935e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019364:	4b51      	ldr	r3, [pc, #324]	@ (80194ac <tcp_receive+0x96c>)
 8019366:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019368:	4b50      	ldr	r3, [pc, #320]	@ (80194ac <tcp_receive+0x96c>)
 801936a:	68db      	ldr	r3, [r3, #12]
 801936c:	899b      	ldrh	r3, [r3, #12]
 801936e:	b29b      	uxth	r3, r3
 8019370:	4618      	mov	r0, r3
 8019372:	f7fa ff8f 	bl	8014294 <lwip_htons>
 8019376:	4603      	mov	r3, r0
 8019378:	f003 0302 	and.w	r3, r3, #2
 801937c:	2b00      	cmp	r3, #0
 801937e:	d005      	beq.n	801938c <tcp_receive+0x84c>
            inseg.len -= 1;
 8019380:	4b4a      	ldr	r3, [pc, #296]	@ (80194ac <tcp_receive+0x96c>)
 8019382:	891b      	ldrh	r3, [r3, #8]
 8019384:	3b01      	subs	r3, #1
 8019386:	b29a      	uxth	r2, r3
 8019388:	4b48      	ldr	r3, [pc, #288]	@ (80194ac <tcp_receive+0x96c>)
 801938a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801938c:	4b47      	ldr	r3, [pc, #284]	@ (80194ac <tcp_receive+0x96c>)
 801938e:	685b      	ldr	r3, [r3, #4]
 8019390:	4a46      	ldr	r2, [pc, #280]	@ (80194ac <tcp_receive+0x96c>)
 8019392:	8912      	ldrh	r2, [r2, #8]
 8019394:	4611      	mov	r1, r2
 8019396:	4618      	mov	r0, r3
 8019398:	f7fc f860 	bl	801545c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801939c:	4b43      	ldr	r3, [pc, #268]	@ (80194ac <tcp_receive+0x96c>)
 801939e:	891c      	ldrh	r4, [r3, #8]
 80193a0:	4b42      	ldr	r3, [pc, #264]	@ (80194ac <tcp_receive+0x96c>)
 80193a2:	68db      	ldr	r3, [r3, #12]
 80193a4:	899b      	ldrh	r3, [r3, #12]
 80193a6:	b29b      	uxth	r3, r3
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7fa ff73 	bl	8014294 <lwip_htons>
 80193ae:	4603      	mov	r3, r0
 80193b0:	f003 0303 	and.w	r3, r3, #3
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d001      	beq.n	80193bc <tcp_receive+0x87c>
 80193b8:	2301      	movs	r3, #1
 80193ba:	e000      	b.n	80193be <tcp_receive+0x87e>
 80193bc:	2300      	movs	r3, #0
 80193be:	4423      	add	r3, r4
 80193c0:	b29a      	uxth	r2, r3
 80193c2:	4b3b      	ldr	r3, [pc, #236]	@ (80194b0 <tcp_receive+0x970>)
 80193c4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80193c6:	4b3a      	ldr	r3, [pc, #232]	@ (80194b0 <tcp_receive+0x970>)
 80193c8:	881b      	ldrh	r3, [r3, #0]
 80193ca:	461a      	mov	r2, r3
 80193cc:	4b36      	ldr	r3, [pc, #216]	@ (80194a8 <tcp_receive+0x968>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	441a      	add	r2, r3
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193d6:	6879      	ldr	r1, [r7, #4]
 80193d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80193da:	440b      	add	r3, r1
 80193dc:	429a      	cmp	r2, r3
 80193de:	d006      	beq.n	80193ee <tcp_receive+0x8ae>
 80193e0:	4b34      	ldr	r3, [pc, #208]	@ (80194b4 <tcp_receive+0x974>)
 80193e2:	f240 527e 	movw	r2, #1406	@ 0x57e
 80193e6:	4934      	ldr	r1, [pc, #208]	@ (80194b8 <tcp_receive+0x978>)
 80193e8:	4834      	ldr	r0, [pc, #208]	@ (80194bc <tcp_receive+0x97c>)
 80193ea:	f008 f99b 	bl	8021724 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	f000 80e1 	beq.w	80195ba <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80193f8:	4b2c      	ldr	r3, [pc, #176]	@ (80194ac <tcp_receive+0x96c>)
 80193fa:	68db      	ldr	r3, [r3, #12]
 80193fc:	899b      	ldrh	r3, [r3, #12]
 80193fe:	b29b      	uxth	r3, r3
 8019400:	4618      	mov	r0, r3
 8019402:	f7fa ff47 	bl	8014294 <lwip_htons>
 8019406:	4603      	mov	r3, r0
 8019408:	f003 0301 	and.w	r3, r3, #1
 801940c:	2b00      	cmp	r3, #0
 801940e:	d010      	beq.n	8019432 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019410:	e00a      	b.n	8019428 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019416:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801941c:	681a      	ldr	r2, [r3, #0]
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 8019422:	68b8      	ldr	r0, [r7, #8]
 8019424:	f7fd fdc2 	bl	8016fac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801942c:	2b00      	cmp	r3, #0
 801942e:	d1f0      	bne.n	8019412 <tcp_receive+0x8d2>
 8019430:	e0c3      	b.n	80195ba <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019436:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019438:	e04f      	b.n	80194da <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801943a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801943c:	68db      	ldr	r3, [r3, #12]
 801943e:	899b      	ldrh	r3, [r3, #12]
 8019440:	b29b      	uxth	r3, r3
 8019442:	4618      	mov	r0, r3
 8019444:	f7fa ff26 	bl	8014294 <lwip_htons>
 8019448:	4603      	mov	r3, r0
 801944a:	f003 0301 	and.w	r3, r3, #1
 801944e:	2b00      	cmp	r3, #0
 8019450:	d03b      	beq.n	80194ca <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019452:	4b16      	ldr	r3, [pc, #88]	@ (80194ac <tcp_receive+0x96c>)
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	899b      	ldrh	r3, [r3, #12]
 8019458:	b29b      	uxth	r3, r3
 801945a:	4618      	mov	r0, r3
 801945c:	f7fa ff1a 	bl	8014294 <lwip_htons>
 8019460:	4603      	mov	r3, r0
 8019462:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019466:	2b00      	cmp	r3, #0
 8019468:	d12f      	bne.n	80194ca <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801946a:	4b10      	ldr	r3, [pc, #64]	@ (80194ac <tcp_receive+0x96c>)
 801946c:	68db      	ldr	r3, [r3, #12]
 801946e:	899b      	ldrh	r3, [r3, #12]
 8019470:	b29c      	uxth	r4, r3
 8019472:	2001      	movs	r0, #1
 8019474:	f7fa ff0e 	bl	8014294 <lwip_htons>
 8019478:	4603      	mov	r3, r0
 801947a:	461a      	mov	r2, r3
 801947c:	4b0b      	ldr	r3, [pc, #44]	@ (80194ac <tcp_receive+0x96c>)
 801947e:	68db      	ldr	r3, [r3, #12]
 8019480:	4322      	orrs	r2, r4
 8019482:	b292      	uxth	r2, r2
 8019484:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019486:	4b09      	ldr	r3, [pc, #36]	@ (80194ac <tcp_receive+0x96c>)
 8019488:	891c      	ldrh	r4, [r3, #8]
 801948a:	4b08      	ldr	r3, [pc, #32]	@ (80194ac <tcp_receive+0x96c>)
 801948c:	68db      	ldr	r3, [r3, #12]
 801948e:	899b      	ldrh	r3, [r3, #12]
 8019490:	b29b      	uxth	r3, r3
 8019492:	4618      	mov	r0, r3
 8019494:	f7fa fefe 	bl	8014294 <lwip_htons>
 8019498:	4603      	mov	r3, r0
 801949a:	f003 0303 	and.w	r3, r3, #3
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d00e      	beq.n	80194c0 <tcp_receive+0x980>
 80194a2:	2301      	movs	r3, #1
 80194a4:	e00d      	b.n	80194c2 <tcp_receive+0x982>
 80194a6:	bf00      	nop
 80194a8:	2000bdf4 	.word	0x2000bdf4
 80194ac:	2000bdd4 	.word	0x2000bdd4
 80194b0:	2000bdfe 	.word	0x2000bdfe
 80194b4:	08025e40 	.word	0x08025e40
 80194b8:	0802610c 	.word	0x0802610c
 80194bc:	08025e84 	.word	0x08025e84
 80194c0:	2300      	movs	r3, #0
 80194c2:	4423      	add	r3, r4
 80194c4:	b29a      	uxth	r2, r3
 80194c6:	4b95      	ldr	r3, [pc, #596]	@ (801971c <tcp_receive+0xbdc>)
 80194c8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80194ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194cc:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 80194ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 80194d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80194d6:	f7fd fd69 	bl	8016fac <tcp_seg_free>
            while (next &&
 80194da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d00e      	beq.n	80194fe <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80194e0:	4b8e      	ldr	r3, [pc, #568]	@ (801971c <tcp_receive+0xbdc>)
 80194e2:	881b      	ldrh	r3, [r3, #0]
 80194e4:	461a      	mov	r2, r3
 80194e6:	4b8e      	ldr	r3, [pc, #568]	@ (8019720 <tcp_receive+0xbe0>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	441a      	add	r2, r3
 80194ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194ee:	68db      	ldr	r3, [r3, #12]
 80194f0:	685b      	ldr	r3, [r3, #4]
 80194f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80194f4:	8909      	ldrh	r1, [r1, #8]
 80194f6:	440b      	add	r3, r1
 80194f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	da9d      	bge.n	801943a <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80194fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019500:	2b00      	cmp	r3, #0
 8019502:	d057      	beq.n	80195b4 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8019504:	4b85      	ldr	r3, [pc, #532]	@ (801971c <tcp_receive+0xbdc>)
 8019506:	881b      	ldrh	r3, [r3, #0]
 8019508:	461a      	mov	r2, r3
 801950a:	4b85      	ldr	r3, [pc, #532]	@ (8019720 <tcp_receive+0xbe0>)
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	441a      	add	r2, r3
 8019510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019512:	68db      	ldr	r3, [r3, #12]
 8019514:	685b      	ldr	r3, [r3, #4]
 8019516:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019518:	2b00      	cmp	r3, #0
 801951a:	dd4b      	ble.n	80195b4 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801951c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801951e:	68db      	ldr	r3, [r3, #12]
 8019520:	685b      	ldr	r3, [r3, #4]
 8019522:	b29a      	uxth	r2, r3
 8019524:	4b7e      	ldr	r3, [pc, #504]	@ (8019720 <tcp_receive+0xbe0>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	b29b      	uxth	r3, r3
 801952a:	1ad3      	subs	r3, r2, r3
 801952c:	b29a      	uxth	r2, r3
 801952e:	4b7d      	ldr	r3, [pc, #500]	@ (8019724 <tcp_receive+0xbe4>)
 8019530:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019532:	4b7c      	ldr	r3, [pc, #496]	@ (8019724 <tcp_receive+0xbe4>)
 8019534:	68db      	ldr	r3, [r3, #12]
 8019536:	899b      	ldrh	r3, [r3, #12]
 8019538:	b29b      	uxth	r3, r3
 801953a:	4618      	mov	r0, r3
 801953c:	f7fa feaa 	bl	8014294 <lwip_htons>
 8019540:	4603      	mov	r3, r0
 8019542:	f003 0302 	and.w	r3, r3, #2
 8019546:	2b00      	cmp	r3, #0
 8019548:	d005      	beq.n	8019556 <tcp_receive+0xa16>
                inseg.len -= 1;
 801954a:	4b76      	ldr	r3, [pc, #472]	@ (8019724 <tcp_receive+0xbe4>)
 801954c:	891b      	ldrh	r3, [r3, #8]
 801954e:	3b01      	subs	r3, #1
 8019550:	b29a      	uxth	r2, r3
 8019552:	4b74      	ldr	r3, [pc, #464]	@ (8019724 <tcp_receive+0xbe4>)
 8019554:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019556:	4b73      	ldr	r3, [pc, #460]	@ (8019724 <tcp_receive+0xbe4>)
 8019558:	685b      	ldr	r3, [r3, #4]
 801955a:	4a72      	ldr	r2, [pc, #456]	@ (8019724 <tcp_receive+0xbe4>)
 801955c:	8912      	ldrh	r2, [r2, #8]
 801955e:	4611      	mov	r1, r2
 8019560:	4618      	mov	r0, r3
 8019562:	f7fb ff7b 	bl	801545c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019566:	4b6f      	ldr	r3, [pc, #444]	@ (8019724 <tcp_receive+0xbe4>)
 8019568:	891c      	ldrh	r4, [r3, #8]
 801956a:	4b6e      	ldr	r3, [pc, #440]	@ (8019724 <tcp_receive+0xbe4>)
 801956c:	68db      	ldr	r3, [r3, #12]
 801956e:	899b      	ldrh	r3, [r3, #12]
 8019570:	b29b      	uxth	r3, r3
 8019572:	4618      	mov	r0, r3
 8019574:	f7fa fe8e 	bl	8014294 <lwip_htons>
 8019578:	4603      	mov	r3, r0
 801957a:	f003 0303 	and.w	r3, r3, #3
 801957e:	2b00      	cmp	r3, #0
 8019580:	d001      	beq.n	8019586 <tcp_receive+0xa46>
 8019582:	2301      	movs	r3, #1
 8019584:	e000      	b.n	8019588 <tcp_receive+0xa48>
 8019586:	2300      	movs	r3, #0
 8019588:	4423      	add	r3, r4
 801958a:	b29a      	uxth	r2, r3
 801958c:	4b63      	ldr	r3, [pc, #396]	@ (801971c <tcp_receive+0xbdc>)
 801958e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019590:	4b62      	ldr	r3, [pc, #392]	@ (801971c <tcp_receive+0xbdc>)
 8019592:	881b      	ldrh	r3, [r3, #0]
 8019594:	461a      	mov	r2, r3
 8019596:	4b62      	ldr	r3, [pc, #392]	@ (8019720 <tcp_receive+0xbe0>)
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	441a      	add	r2, r3
 801959c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801959e:	68db      	ldr	r3, [r3, #12]
 80195a0:	685b      	ldr	r3, [r3, #4]
 80195a2:	429a      	cmp	r2, r3
 80195a4:	d006      	beq.n	80195b4 <tcp_receive+0xa74>
 80195a6:	4b60      	ldr	r3, [pc, #384]	@ (8019728 <tcp_receive+0xbe8>)
 80195a8:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80195ac:	495f      	ldr	r1, [pc, #380]	@ (801972c <tcp_receive+0xbec>)
 80195ae:	4860      	ldr	r0, [pc, #384]	@ (8019730 <tcp_receive+0xbf0>)
 80195b0:	f008 f8b8 	bl	8021724 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195b8:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80195ba:	4b58      	ldr	r3, [pc, #352]	@ (801971c <tcp_receive+0xbdc>)
 80195bc:	881b      	ldrh	r3, [r3, #0]
 80195be:	461a      	mov	r2, r3
 80195c0:	4b57      	ldr	r3, [pc, #348]	@ (8019720 <tcp_receive+0xbe0>)
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	441a      	add	r2, r3
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80195ce:	4b53      	ldr	r3, [pc, #332]	@ (801971c <tcp_receive+0xbdc>)
 80195d0:	881b      	ldrh	r3, [r3, #0]
 80195d2:	429a      	cmp	r2, r3
 80195d4:	d206      	bcs.n	80195e4 <tcp_receive+0xaa4>
 80195d6:	4b54      	ldr	r3, [pc, #336]	@ (8019728 <tcp_receive+0xbe8>)
 80195d8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80195dc:	4955      	ldr	r1, [pc, #340]	@ (8019734 <tcp_receive+0xbf4>)
 80195de:	4854      	ldr	r0, [pc, #336]	@ (8019730 <tcp_receive+0xbf0>)
 80195e0:	f008 f8a0 	bl	8021724 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80195e8:	4b4c      	ldr	r3, [pc, #304]	@ (801971c <tcp_receive+0xbdc>)
 80195ea:	881b      	ldrh	r3, [r3, #0]
 80195ec:	1ad3      	subs	r3, r2, r3
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80195f4:	6878      	ldr	r0, [r7, #4]
 80195f6:	f7fd f847 	bl	8016688 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80195fa:	4b4a      	ldr	r3, [pc, #296]	@ (8019724 <tcp_receive+0xbe4>)
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	891b      	ldrh	r3, [r3, #8]
 8019600:	2b00      	cmp	r3, #0
 8019602:	d006      	beq.n	8019612 <tcp_receive+0xad2>
          recv_data = inseg.p;
 8019604:	4b47      	ldr	r3, [pc, #284]	@ (8019724 <tcp_receive+0xbe4>)
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	4a4b      	ldr	r2, [pc, #300]	@ (8019738 <tcp_receive+0xbf8>)
 801960a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801960c:	4b45      	ldr	r3, [pc, #276]	@ (8019724 <tcp_receive+0xbe4>)
 801960e:	2200      	movs	r2, #0
 8019610:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019612:	4b44      	ldr	r3, [pc, #272]	@ (8019724 <tcp_receive+0xbe4>)
 8019614:	68db      	ldr	r3, [r3, #12]
 8019616:	899b      	ldrh	r3, [r3, #12]
 8019618:	b29b      	uxth	r3, r3
 801961a:	4618      	mov	r0, r3
 801961c:	f7fa fe3a 	bl	8014294 <lwip_htons>
 8019620:	4603      	mov	r3, r0
 8019622:	f003 0301 	and.w	r3, r3, #1
 8019626:	2b00      	cmp	r3, #0
 8019628:	f000 80b4 	beq.w	8019794 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801962c:	4b43      	ldr	r3, [pc, #268]	@ (801973c <tcp_receive+0xbfc>)
 801962e:	781b      	ldrb	r3, [r3, #0]
 8019630:	f043 0320 	orr.w	r3, r3, #32
 8019634:	b2da      	uxtb	r2, r3
 8019636:	4b41      	ldr	r3, [pc, #260]	@ (801973c <tcp_receive+0xbfc>)
 8019638:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801963a:	e0ab      	b.n	8019794 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019640:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019646:	68db      	ldr	r3, [r3, #12]
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	4a35      	ldr	r2, [pc, #212]	@ (8019720 <tcp_receive+0xbe0>)
 801964c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	891b      	ldrh	r3, [r3, #8]
 8019652:	461c      	mov	r4, r3
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	68db      	ldr	r3, [r3, #12]
 8019658:	899b      	ldrh	r3, [r3, #12]
 801965a:	b29b      	uxth	r3, r3
 801965c:	4618      	mov	r0, r3
 801965e:	f7fa fe19 	bl	8014294 <lwip_htons>
 8019662:	4603      	mov	r3, r0
 8019664:	f003 0303 	and.w	r3, r3, #3
 8019668:	2b00      	cmp	r3, #0
 801966a:	d001      	beq.n	8019670 <tcp_receive+0xb30>
 801966c:	2301      	movs	r3, #1
 801966e:	e000      	b.n	8019672 <tcp_receive+0xb32>
 8019670:	2300      	movs	r3, #0
 8019672:	191a      	adds	r2, r3, r4
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019678:	441a      	add	r2, r3
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019682:	461c      	mov	r4, r3
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	891b      	ldrh	r3, [r3, #8]
 8019688:	461d      	mov	r5, r3
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	68db      	ldr	r3, [r3, #12]
 801968e:	899b      	ldrh	r3, [r3, #12]
 8019690:	b29b      	uxth	r3, r3
 8019692:	4618      	mov	r0, r3
 8019694:	f7fa fdfe 	bl	8014294 <lwip_htons>
 8019698:	4603      	mov	r3, r0
 801969a:	f003 0303 	and.w	r3, r3, #3
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d001      	beq.n	80196a6 <tcp_receive+0xb66>
 80196a2:	2301      	movs	r3, #1
 80196a4:	e000      	b.n	80196a8 <tcp_receive+0xb68>
 80196a6:	2300      	movs	r3, #0
 80196a8:	442b      	add	r3, r5
 80196aa:	429c      	cmp	r4, r3
 80196ac:	d206      	bcs.n	80196bc <tcp_receive+0xb7c>
 80196ae:	4b1e      	ldr	r3, [pc, #120]	@ (8019728 <tcp_receive+0xbe8>)
 80196b0:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 80196b4:	4922      	ldr	r1, [pc, #136]	@ (8019740 <tcp_receive+0xc00>)
 80196b6:	481e      	ldr	r0, [pc, #120]	@ (8019730 <tcp_receive+0xbf0>)
 80196b8:	f008 f834 	bl	8021724 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	891b      	ldrh	r3, [r3, #8]
 80196c0:	461c      	mov	r4, r3
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	68db      	ldr	r3, [r3, #12]
 80196c6:	899b      	ldrh	r3, [r3, #12]
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	4618      	mov	r0, r3
 80196cc:	f7fa fde2 	bl	8014294 <lwip_htons>
 80196d0:	4603      	mov	r3, r0
 80196d2:	f003 0303 	and.w	r3, r3, #3
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d001      	beq.n	80196de <tcp_receive+0xb9e>
 80196da:	2301      	movs	r3, #1
 80196dc:	e000      	b.n	80196e0 <tcp_receive+0xba0>
 80196de:	2300      	movs	r3, #0
 80196e0:	1919      	adds	r1, r3, r4
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80196e6:	b28b      	uxth	r3, r1
 80196e8:	1ad3      	subs	r3, r2, r3
 80196ea:	b29a      	uxth	r2, r3
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80196f0:	6878      	ldr	r0, [r7, #4]
 80196f2:	f7fc ffc9 	bl	8016688 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	685b      	ldr	r3, [r3, #4]
 80196fa:	891b      	ldrh	r3, [r3, #8]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d028      	beq.n	8019752 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019700:	4b0d      	ldr	r3, [pc, #52]	@ (8019738 <tcp_receive+0xbf8>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d01d      	beq.n	8019744 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8019708:	4b0b      	ldr	r3, [pc, #44]	@ (8019738 <tcp_receive+0xbf8>)
 801970a:	681a      	ldr	r2, [r3, #0]
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	685b      	ldr	r3, [r3, #4]
 8019710:	4619      	mov	r1, r3
 8019712:	4610      	mov	r0, r2
 8019714:	f7fc f8e2 	bl	80158dc <pbuf_cat>
 8019718:	e018      	b.n	801974c <tcp_receive+0xc0c>
 801971a:	bf00      	nop
 801971c:	2000bdfe 	.word	0x2000bdfe
 8019720:	2000bdf4 	.word	0x2000bdf4
 8019724:	2000bdd4 	.word	0x2000bdd4
 8019728:	08025e40 	.word	0x08025e40
 801972c:	08026144 	.word	0x08026144
 8019730:	08025e84 	.word	0x08025e84
 8019734:	08026180 	.word	0x08026180
 8019738:	2000be04 	.word	0x2000be04
 801973c:	2000be01 	.word	0x2000be01
 8019740:	080261a0 	.word	0x080261a0
            } else {
              recv_data = cseg->p;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	685b      	ldr	r3, [r3, #4]
 8019748:	4a71      	ldr	r2, [pc, #452]	@ (8019910 <tcp_receive+0xdd0>)
 801974a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	2200      	movs	r2, #0
 8019750:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	68db      	ldr	r3, [r3, #12]
 8019756:	899b      	ldrh	r3, [r3, #12]
 8019758:	b29b      	uxth	r3, r3
 801975a:	4618      	mov	r0, r3
 801975c:	f7fa fd9a 	bl	8014294 <lwip_htons>
 8019760:	4603      	mov	r3, r0
 8019762:	f003 0301 	and.w	r3, r3, #1
 8019766:	2b00      	cmp	r3, #0
 8019768:	d00d      	beq.n	8019786 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801976a:	4b6a      	ldr	r3, [pc, #424]	@ (8019914 <tcp_receive+0xdd4>)
 801976c:	781b      	ldrb	r3, [r3, #0]
 801976e:	f043 0320 	orr.w	r3, r3, #32
 8019772:	b2da      	uxtb	r2, r3
 8019774:	4b67      	ldr	r3, [pc, #412]	@ (8019914 <tcp_receive+0xdd4>)
 8019776:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	7d1b      	ldrb	r3, [r3, #20]
 801977c:	2b04      	cmp	r3, #4
 801977e:	d102      	bne.n	8019786 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2207      	movs	r2, #7
 8019784:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	681a      	ldr	r2, [r3, #0]
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 801978e:	68f8      	ldr	r0, [r7, #12]
 8019790:	f7fd fc0c 	bl	8016fac <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019798:	2b00      	cmp	r3, #0
 801979a:	d008      	beq.n	80197ae <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80197a0:	68db      	ldr	r3, [r3, #12]
 80197a2:	685a      	ldr	r2, [r3, #4]
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80197a8:	429a      	cmp	r2, r3
 80197aa:	f43f af47 	beq.w	801963c <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	7e9b      	ldrb	r3, [r3, #26]
 80197b2:	f003 0301 	and.w	r3, r3, #1
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d00e      	beq.n	80197d8 <tcp_receive+0xc98>
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	7e9b      	ldrb	r3, [r3, #26]
 80197be:	f023 0301 	bic.w	r3, r3, #1
 80197c2:	b2da      	uxtb	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	769a      	strb	r2, [r3, #26]
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	7e9b      	ldrb	r3, [r3, #26]
 80197cc:	f043 0302 	orr.w	r3, r3, #2
 80197d0:	b2da      	uxtb	r2, r3
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80197d6:	e181      	b.n	8019adc <tcp_receive+0xf9c>
        tcp_ack(pcb);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	7e9b      	ldrb	r3, [r3, #26]
 80197dc:	f043 0301 	orr.w	r3, r3, #1
 80197e0:	b2da      	uxtb	r2, r3
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80197e6:	e179      	b.n	8019adc <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80197e8:	6878      	ldr	r0, [r7, #4]
 80197ea:	f001 f8f9 	bl	801a9e0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d106      	bne.n	8019804 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80197f6:	4848      	ldr	r0, [pc, #288]	@ (8019918 <tcp_receive+0xdd8>)
 80197f8:	f7fd fbfe 	bl	8016ff8 <tcp_seg_copy>
 80197fc:	4602      	mov	r2, r0
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 8019802:	e16b      	b.n	8019adc <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8019804:	2300      	movs	r3, #0
 8019806:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801980c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801980e:	e150      	b.n	8019ab2 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8019810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019812:	68db      	ldr	r3, [r3, #12]
 8019814:	685a      	ldr	r2, [r3, #4]
 8019816:	4b41      	ldr	r3, [pc, #260]	@ (801991c <tcp_receive+0xddc>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	429a      	cmp	r2, r3
 801981c:	d11d      	bne.n	801985a <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801981e:	4b3e      	ldr	r3, [pc, #248]	@ (8019918 <tcp_receive+0xdd8>)
 8019820:	891a      	ldrh	r2, [r3, #8]
 8019822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019824:	891b      	ldrh	r3, [r3, #8]
 8019826:	429a      	cmp	r2, r3
 8019828:	f240 8148 	bls.w	8019abc <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801982c:	483a      	ldr	r0, [pc, #232]	@ (8019918 <tcp_receive+0xdd8>)
 801982e:	f7fd fbe3 	bl	8016ff8 <tcp_seg_copy>
 8019832:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	2b00      	cmp	r3, #0
 8019838:	f000 8142 	beq.w	8019ac0 <tcp_receive+0xf80>
                  if (prev != NULL) {
 801983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801983e:	2b00      	cmp	r3, #0
 8019840:	d003      	beq.n	801984a <tcp_receive+0xd0a>
                    prev->next = cseg;
 8019842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019844:	68fa      	ldr	r2, [r7, #12]
 8019846:	601a      	str	r2, [r3, #0]
 8019848:	e002      	b.n	8019850 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	68fa      	ldr	r2, [r7, #12]
 801984e:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019852:	68f8      	ldr	r0, [r7, #12]
 8019854:	f7ff f8fe 	bl	8018a54 <tcp_oos_insert_segment>
                }
                break;
 8019858:	e132      	b.n	8019ac0 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801985c:	2b00      	cmp	r3, #0
 801985e:	d117      	bne.n	8019890 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019860:	4b2e      	ldr	r3, [pc, #184]	@ (801991c <tcp_receive+0xddc>)
 8019862:	681a      	ldr	r2, [r3, #0]
 8019864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019866:	68db      	ldr	r3, [r3, #12]
 8019868:	685b      	ldr	r3, [r3, #4]
 801986a:	1ad3      	subs	r3, r2, r3
 801986c:	2b00      	cmp	r3, #0
 801986e:	da57      	bge.n	8019920 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8019870:	4829      	ldr	r0, [pc, #164]	@ (8019918 <tcp_receive+0xdd8>)
 8019872:	f7fd fbc1 	bl	8016ff8 <tcp_seg_copy>
 8019876:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2b00      	cmp	r3, #0
 801987c:	f000 8122 	beq.w	8019ac4 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	68fa      	ldr	r2, [r7, #12]
 8019884:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8019886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019888:	68f8      	ldr	r0, [r7, #12]
 801988a:	f7ff f8e3 	bl	8018a54 <tcp_oos_insert_segment>
                  }
                  break;
 801988e:	e119      	b.n	8019ac4 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8019890:	4b22      	ldr	r3, [pc, #136]	@ (801991c <tcp_receive+0xddc>)
 8019892:	681a      	ldr	r2, [r3, #0]
 8019894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019896:	68db      	ldr	r3, [r3, #12]
 8019898:	685b      	ldr	r3, [r3, #4]
 801989a:	1ad3      	subs	r3, r2, r3
 801989c:	3b01      	subs	r3, #1
 801989e:	2b00      	cmp	r3, #0
 80198a0:	db3e      	blt.n	8019920 <tcp_receive+0xde0>
 80198a2:	4b1e      	ldr	r3, [pc, #120]	@ (801991c <tcp_receive+0xddc>)
 80198a4:	681a      	ldr	r2, [r3, #0]
 80198a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198a8:	68db      	ldr	r3, [r3, #12]
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	1ad3      	subs	r3, r2, r3
 80198ae:	3301      	adds	r3, #1
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	dc35      	bgt.n	8019920 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80198b4:	4818      	ldr	r0, [pc, #96]	@ (8019918 <tcp_receive+0xdd8>)
 80198b6:	f7fd fb9f 	bl	8016ff8 <tcp_seg_copy>
 80198ba:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	f000 8102 	beq.w	8019ac8 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80198c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198c6:	68db      	ldr	r3, [r3, #12]
 80198c8:	685b      	ldr	r3, [r3, #4]
 80198ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80198cc:	8912      	ldrh	r2, [r2, #8]
 80198ce:	441a      	add	r2, r3
 80198d0:	4b12      	ldr	r3, [pc, #72]	@ (801991c <tcp_receive+0xddc>)
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	1ad3      	subs	r3, r2, r3
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	dd12      	ble.n	8019900 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80198da:	4b10      	ldr	r3, [pc, #64]	@ (801991c <tcp_receive+0xddc>)
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	b29a      	uxth	r2, r3
 80198e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198e2:	68db      	ldr	r3, [r3, #12]
 80198e4:	685b      	ldr	r3, [r3, #4]
 80198e6:	b29b      	uxth	r3, r3
 80198e8:	1ad3      	subs	r3, r2, r3
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80198f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198f2:	685a      	ldr	r2, [r3, #4]
 80198f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198f6:	891b      	ldrh	r3, [r3, #8]
 80198f8:	4619      	mov	r1, r3
 80198fa:	4610      	mov	r0, r2
 80198fc:	f7fb fdae 	bl	801545c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019902:	68fa      	ldr	r2, [r7, #12]
 8019904:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019908:	68f8      	ldr	r0, [r7, #12]
 801990a:	f7ff f8a3 	bl	8018a54 <tcp_oos_insert_segment>
                  }
                  break;
 801990e:	e0db      	b.n	8019ac8 <tcp_receive+0xf88>
 8019910:	2000be04 	.word	0x2000be04
 8019914:	2000be01 	.word	0x2000be01
 8019918:	2000bdd4 	.word	0x2000bdd4
 801991c:	2000bdf4 	.word	0x2000bdf4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	2b00      	cmp	r3, #0
 8019926:	f040 80bf 	bne.w	8019aa8 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801992a:	4b7c      	ldr	r3, [pc, #496]	@ (8019b1c <tcp_receive+0xfdc>)
 801992c:	681a      	ldr	r2, [r3, #0]
 801992e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019930:	68db      	ldr	r3, [r3, #12]
 8019932:	685b      	ldr	r3, [r3, #4]
 8019934:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019936:	2b00      	cmp	r3, #0
 8019938:	f340 80b6 	ble.w	8019aa8 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801993c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801993e:	68db      	ldr	r3, [r3, #12]
 8019940:	899b      	ldrh	r3, [r3, #12]
 8019942:	b29b      	uxth	r3, r3
 8019944:	4618      	mov	r0, r3
 8019946:	f7fa fca5 	bl	8014294 <lwip_htons>
 801994a:	4603      	mov	r3, r0
 801994c:	f003 0301 	and.w	r3, r3, #1
 8019950:	2b00      	cmp	r3, #0
 8019952:	f040 80bb 	bne.w	8019acc <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019956:	4872      	ldr	r0, [pc, #456]	@ (8019b20 <tcp_receive+0xfe0>)
 8019958:	f7fd fb4e 	bl	8016ff8 <tcp_seg_copy>
 801995c:	4602      	mov	r2, r0
 801995e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019960:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	2b00      	cmp	r3, #0
 8019968:	f000 80b2 	beq.w	8019ad0 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801996c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801996e:	68db      	ldr	r3, [r3, #12]
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019974:	8912      	ldrh	r2, [r2, #8]
 8019976:	441a      	add	r2, r3
 8019978:	4b68      	ldr	r3, [pc, #416]	@ (8019b1c <tcp_receive+0xfdc>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	1ad3      	subs	r3, r2, r3
 801997e:	2b00      	cmp	r3, #0
 8019980:	dd12      	ble.n	80199a8 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019982:	4b66      	ldr	r3, [pc, #408]	@ (8019b1c <tcp_receive+0xfdc>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	b29a      	uxth	r2, r3
 8019988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801998a:	68db      	ldr	r3, [r3, #12]
 801998c:	685b      	ldr	r3, [r3, #4]
 801998e:	b29b      	uxth	r3, r3
 8019990:	1ad3      	subs	r3, r2, r3
 8019992:	b29a      	uxth	r2, r3
 8019994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019996:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801999a:	685a      	ldr	r2, [r3, #4]
 801999c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801999e:	891b      	ldrh	r3, [r3, #8]
 80199a0:	4619      	mov	r1, r3
 80199a2:	4610      	mov	r0, r2
 80199a4:	f7fb fd5a 	bl	801545c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80199a8:	4b5e      	ldr	r3, [pc, #376]	@ (8019b24 <tcp_receive+0xfe4>)
 80199aa:	881b      	ldrh	r3, [r3, #0]
 80199ac:	461a      	mov	r2, r3
 80199ae:	4b5b      	ldr	r3, [pc, #364]	@ (8019b1c <tcp_receive+0xfdc>)
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	441a      	add	r2, r3
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199b8:	6879      	ldr	r1, [r7, #4]
 80199ba:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80199bc:	440b      	add	r3, r1
 80199be:	1ad3      	subs	r3, r2, r3
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	f340 8085 	ble.w	8019ad0 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80199c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	68db      	ldr	r3, [r3, #12]
 80199cc:	899b      	ldrh	r3, [r3, #12]
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	4618      	mov	r0, r3
 80199d2:	f7fa fc5f 	bl	8014294 <lwip_htons>
 80199d6:	4603      	mov	r3, r0
 80199d8:	f003 0301 	and.w	r3, r3, #1
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d01e      	beq.n	8019a1e <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80199e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	68db      	ldr	r3, [r3, #12]
 80199e6:	899b      	ldrh	r3, [r3, #12]
 80199e8:	b29b      	uxth	r3, r3
 80199ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80199ee:	b29c      	uxth	r4, r3
 80199f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	68db      	ldr	r3, [r3, #12]
 80199f6:	899b      	ldrh	r3, [r3, #12]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	4618      	mov	r0, r3
 80199fc:	f7fa fc4a 	bl	8014294 <lwip_htons>
 8019a00:	4603      	mov	r3, r0
 8019a02:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019a06:	b29b      	uxth	r3, r3
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f7fa fc43 	bl	8014294 <lwip_htons>
 8019a0e:	4603      	mov	r3, r0
 8019a10:	461a      	mov	r2, r3
 8019a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	68db      	ldr	r3, [r3, #12]
 8019a18:	4322      	orrs	r2, r4
 8019a1a:	b292      	uxth	r2, r2
 8019a1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a22:	b29a      	uxth	r2, r3
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019a28:	4413      	add	r3, r2
 8019a2a:	b299      	uxth	r1, r3
 8019a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8019b1c <tcp_receive+0xfdc>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	b29a      	uxth	r2, r3
 8019a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	1a8a      	subs	r2, r1, r2
 8019a38:	b292      	uxth	r2, r2
 8019a3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	685a      	ldr	r2, [r3, #4]
 8019a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	891b      	ldrh	r3, [r3, #8]
 8019a48:	4619      	mov	r1, r3
 8019a4a:	4610      	mov	r0, r2
 8019a4c:	f7fb fd06 	bl	801545c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	891c      	ldrh	r4, [r3, #8]
 8019a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	68db      	ldr	r3, [r3, #12]
 8019a5c:	899b      	ldrh	r3, [r3, #12]
 8019a5e:	b29b      	uxth	r3, r3
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7fa fc17 	bl	8014294 <lwip_htons>
 8019a66:	4603      	mov	r3, r0
 8019a68:	f003 0303 	and.w	r3, r3, #3
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d001      	beq.n	8019a74 <tcp_receive+0xf34>
 8019a70:	2301      	movs	r3, #1
 8019a72:	e000      	b.n	8019a76 <tcp_receive+0xf36>
 8019a74:	2300      	movs	r3, #0
 8019a76:	4423      	add	r3, r4
 8019a78:	b29a      	uxth	r2, r3
 8019a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8019b24 <tcp_receive+0xfe4>)
 8019a7c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019a7e:	4b29      	ldr	r3, [pc, #164]	@ (8019b24 <tcp_receive+0xfe4>)
 8019a80:	881b      	ldrh	r3, [r3, #0]
 8019a82:	461a      	mov	r2, r3
 8019a84:	4b25      	ldr	r3, [pc, #148]	@ (8019b1c <tcp_receive+0xfdc>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	441a      	add	r2, r3
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a8e:	6879      	ldr	r1, [r7, #4]
 8019a90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019a92:	440b      	add	r3, r1
 8019a94:	429a      	cmp	r2, r3
 8019a96:	d01b      	beq.n	8019ad0 <tcp_receive+0xf90>
 8019a98:	4b23      	ldr	r3, [pc, #140]	@ (8019b28 <tcp_receive+0xfe8>)
 8019a9a:	f240 627a 	movw	r2, #1658	@ 0x67a
 8019a9e:	4923      	ldr	r1, [pc, #140]	@ (8019b2c <tcp_receive+0xfec>)
 8019aa0:	4823      	ldr	r0, [pc, #140]	@ (8019b30 <tcp_receive+0xff0>)
 8019aa2:	f007 fe3f 	bl	8021724 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019aa6:	e013      	b.n	8019ad0 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8019aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	f47f aeab 	bne.w	8019810 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8019aba:	e00f      	b.n	8019adc <tcp_receive+0xf9c>
                break;
 8019abc:	bf00      	nop
 8019abe:	e00d      	b.n	8019adc <tcp_receive+0xf9c>
                break;
 8019ac0:	bf00      	nop
 8019ac2:	e00b      	b.n	8019adc <tcp_receive+0xf9c>
                  break;
 8019ac4:	bf00      	nop
 8019ac6:	e009      	b.n	8019adc <tcp_receive+0xf9c>
                  break;
 8019ac8:	bf00      	nop
 8019aca:	e007      	b.n	8019adc <tcp_receive+0xf9c>
                  break;
 8019acc:	bf00      	nop
 8019ace:	e005      	b.n	8019adc <tcp_receive+0xf9c>
                break;
 8019ad0:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8019ad2:	e003      	b.n	8019adc <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019ad4:	6878      	ldr	r0, [r7, #4]
 8019ad6:	f000 ff83 	bl	801a9e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019ada:	e01a      	b.n	8019b12 <tcp_receive+0xfd2>
 8019adc:	e019      	b.n	8019b12 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019ade:	4b0f      	ldr	r3, [pc, #60]	@ (8019b1c <tcp_receive+0xfdc>)
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ae6:	1ad3      	subs	r3, r2, r3
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	db0a      	blt.n	8019b02 <tcp_receive+0xfc2>
 8019aec:	4b0b      	ldr	r3, [pc, #44]	@ (8019b1c <tcp_receive+0xfdc>)
 8019aee:	681a      	ldr	r2, [r3, #0]
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019af4:	6879      	ldr	r1, [r7, #4]
 8019af6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019af8:	440b      	add	r3, r1
 8019afa:	1ad3      	subs	r3, r2, r3
 8019afc:	3301      	adds	r3, #1
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	dd07      	ble.n	8019b12 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	7e9b      	ldrb	r3, [r3, #26]
 8019b06:	f043 0302 	orr.w	r3, r3, #2
 8019b0a:	b2da      	uxtb	r2, r3
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8019b10:	e7ff      	b.n	8019b12 <tcp_receive+0xfd2>
 8019b12:	bf00      	nop
 8019b14:	3734      	adds	r7, #52	@ 0x34
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b1a:	bf00      	nop
 8019b1c:	2000bdf4 	.word	0x2000bdf4
 8019b20:	2000bdd4 	.word	0x2000bdd4
 8019b24:	2000bdfe 	.word	0x2000bdfe
 8019b28:	08025e40 	.word	0x08025e40
 8019b2c:	0802610c 	.word	0x0802610c
 8019b30:	08025e84 	.word	0x08025e84

08019b34 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8019b34:	b480      	push	{r7}
 8019b36:	b083      	sub	sp, #12
 8019b38:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8019b3a:	4b17      	ldr	r3, [pc, #92]	@ (8019b98 <tcp_getoptbyte+0x64>)
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d005      	beq.n	8019b4e <tcp_getoptbyte+0x1a>
 8019b42:	4b16      	ldr	r3, [pc, #88]	@ (8019b9c <tcp_getoptbyte+0x68>)
 8019b44:	881a      	ldrh	r2, [r3, #0]
 8019b46:	4b16      	ldr	r3, [pc, #88]	@ (8019ba0 <tcp_getoptbyte+0x6c>)
 8019b48:	881b      	ldrh	r3, [r3, #0]
 8019b4a:	429a      	cmp	r2, r3
 8019b4c:	d20e      	bcs.n	8019b6c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8019b4e:	4b15      	ldr	r3, [pc, #84]	@ (8019ba4 <tcp_getoptbyte+0x70>)
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	3314      	adds	r3, #20
 8019b54:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8019b56:	4b11      	ldr	r3, [pc, #68]	@ (8019b9c <tcp_getoptbyte+0x68>)
 8019b58:	881b      	ldrh	r3, [r3, #0]
 8019b5a:	1c5a      	adds	r2, r3, #1
 8019b5c:	b291      	uxth	r1, r2
 8019b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8019b9c <tcp_getoptbyte+0x68>)
 8019b60:	8011      	strh	r1, [r2, #0]
 8019b62:	461a      	mov	r2, r3
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	4413      	add	r3, r2
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	e010      	b.n	8019b8e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8019b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8019b9c <tcp_getoptbyte+0x68>)
 8019b6e:	881b      	ldrh	r3, [r3, #0]
 8019b70:	1c5a      	adds	r2, r3, #1
 8019b72:	b291      	uxth	r1, r2
 8019b74:	4a09      	ldr	r2, [pc, #36]	@ (8019b9c <tcp_getoptbyte+0x68>)
 8019b76:	8011      	strh	r1, [r2, #0]
 8019b78:	b2da      	uxtb	r2, r3
 8019b7a:	4b09      	ldr	r3, [pc, #36]	@ (8019ba0 <tcp_getoptbyte+0x6c>)
 8019b7c:	881b      	ldrh	r3, [r3, #0]
 8019b7e:	b2db      	uxtb	r3, r3
 8019b80:	1ad3      	subs	r3, r2, r3
 8019b82:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8019b84:	4b04      	ldr	r3, [pc, #16]	@ (8019b98 <tcp_getoptbyte+0x64>)
 8019b86:	681a      	ldr	r2, [r3, #0]
 8019b88:	79fb      	ldrb	r3, [r7, #7]
 8019b8a:	4413      	add	r3, r2
 8019b8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019b8e:	4618      	mov	r0, r3
 8019b90:	370c      	adds	r7, #12
 8019b92:	46bd      	mov	sp, r7
 8019b94:	bc80      	pop	{r7}
 8019b96:	4770      	bx	lr
 8019b98:	2000bdec 	.word	0x2000bdec
 8019b9c:	2000bdf0 	.word	0x2000bdf0
 8019ba0:	2000bdea 	.word	0x2000bdea
 8019ba4:	2000bde4 	.word	0x2000bde4

08019ba8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b084      	sub	sp, #16
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8019c6c <tcp_parseopt+0xc4>)
 8019bb2:	881b      	ldrh	r3, [r3, #0]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d056      	beq.n	8019c66 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8019c70 <tcp_parseopt+0xc8>)
 8019bba:	2200      	movs	r2, #0
 8019bbc:	801a      	strh	r2, [r3, #0]
 8019bbe:	e046      	b.n	8019c4e <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 8019bc0:	f7ff ffb8 	bl	8019b34 <tcp_getoptbyte>
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019bc8:	7bfb      	ldrb	r3, [r7, #15]
 8019bca:	2b02      	cmp	r3, #2
 8019bcc:	d006      	beq.n	8019bdc <tcp_parseopt+0x34>
 8019bce:	2b02      	cmp	r3, #2
 8019bd0:	dc2a      	bgt.n	8019c28 <tcp_parseopt+0x80>
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d042      	beq.n	8019c5c <tcp_parseopt+0xb4>
 8019bd6:	2b01      	cmp	r3, #1
 8019bd8:	d038      	beq.n	8019c4c <tcp_parseopt+0xa4>
 8019bda:	e025      	b.n	8019c28 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019bdc:	f7ff ffaa 	bl	8019b34 <tcp_getoptbyte>
 8019be0:	4603      	mov	r3, r0
 8019be2:	2b04      	cmp	r3, #4
 8019be4:	d13c      	bne.n	8019c60 <tcp_parseopt+0xb8>
 8019be6:	4b22      	ldr	r3, [pc, #136]	@ (8019c70 <tcp_parseopt+0xc8>)
 8019be8:	881b      	ldrh	r3, [r3, #0]
 8019bea:	3301      	adds	r3, #1
 8019bec:	4a1f      	ldr	r2, [pc, #124]	@ (8019c6c <tcp_parseopt+0xc4>)
 8019bee:	8812      	ldrh	r2, [r2, #0]
 8019bf0:	4293      	cmp	r3, r2
 8019bf2:	da35      	bge.n	8019c60 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8019bf4:	f7ff ff9e 	bl	8019b34 <tcp_getoptbyte>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	021b      	lsls	r3, r3, #8
 8019bfc:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8019bfe:	f7ff ff99 	bl	8019b34 <tcp_getoptbyte>
 8019c02:	4603      	mov	r3, r0
 8019c04:	461a      	mov	r2, r3
 8019c06:	89bb      	ldrh	r3, [r7, #12]
 8019c08:	4313      	orrs	r3, r2
 8019c0a:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019c0c:	89bb      	ldrh	r3, [r7, #12]
 8019c0e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8019c12:	d804      	bhi.n	8019c1e <tcp_parseopt+0x76>
 8019c14:	89bb      	ldrh	r3, [r7, #12]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d001      	beq.n	8019c1e <tcp_parseopt+0x76>
 8019c1a:	89ba      	ldrh	r2, [r7, #12]
 8019c1c:	e001      	b.n	8019c22 <tcp_parseopt+0x7a>
 8019c1e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 8019c26:	e012      	b.n	8019c4e <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8019c28:	f7ff ff84 	bl	8019b34 <tcp_getoptbyte>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8019c30:	7afb      	ldrb	r3, [r7, #11]
 8019c32:	2b01      	cmp	r3, #1
 8019c34:	d916      	bls.n	8019c64 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8019c36:	7afb      	ldrb	r3, [r7, #11]
 8019c38:	b29a      	uxth	r2, r3
 8019c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8019c70 <tcp_parseopt+0xc8>)
 8019c3c:	881b      	ldrh	r3, [r3, #0]
 8019c3e:	4413      	add	r3, r2
 8019c40:	b29b      	uxth	r3, r3
 8019c42:	3b02      	subs	r3, #2
 8019c44:	b29a      	uxth	r2, r3
 8019c46:	4b0a      	ldr	r3, [pc, #40]	@ (8019c70 <tcp_parseopt+0xc8>)
 8019c48:	801a      	strh	r2, [r3, #0]
 8019c4a:	e000      	b.n	8019c4e <tcp_parseopt+0xa6>
        break;
 8019c4c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019c4e:	4b08      	ldr	r3, [pc, #32]	@ (8019c70 <tcp_parseopt+0xc8>)
 8019c50:	881a      	ldrh	r2, [r3, #0]
 8019c52:	4b06      	ldr	r3, [pc, #24]	@ (8019c6c <tcp_parseopt+0xc4>)
 8019c54:	881b      	ldrh	r3, [r3, #0]
 8019c56:	429a      	cmp	r2, r3
 8019c58:	d3b2      	bcc.n	8019bc0 <tcp_parseopt+0x18>
 8019c5a:	e004      	b.n	8019c66 <tcp_parseopt+0xbe>
        return;
 8019c5c:	bf00      	nop
 8019c5e:	e002      	b.n	8019c66 <tcp_parseopt+0xbe>
          return;
 8019c60:	bf00      	nop
 8019c62:	e000      	b.n	8019c66 <tcp_parseopt+0xbe>
          return;
 8019c64:	bf00      	nop
      }
    }
  }
}
 8019c66:	3710      	adds	r7, #16
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	2000bde8 	.word	0x2000bde8
 8019c70:	2000bdf0 	.word	0x2000bdf0

08019c74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019c74:	b480      	push	{r7}
 8019c76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019c78:	4b05      	ldr	r3, [pc, #20]	@ (8019c90 <tcp_trigger_input_pcb_close+0x1c>)
 8019c7a:	781b      	ldrb	r3, [r3, #0]
 8019c7c:	f043 0310 	orr.w	r3, r3, #16
 8019c80:	b2da      	uxtb	r2, r3
 8019c82:	4b03      	ldr	r3, [pc, #12]	@ (8019c90 <tcp_trigger_input_pcb_close+0x1c>)
 8019c84:	701a      	strb	r2, [r3, #0]
}
 8019c86:	bf00      	nop
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bc80      	pop	{r7}
 8019c8c:	4770      	bx	lr
 8019c8e:	bf00      	nop
 8019c90:	2000be01 	.word	0x2000be01

08019c94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b086      	sub	sp, #24
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	60f8      	str	r0, [r7, #12]
 8019c9c:	607b      	str	r3, [r7, #4]
 8019c9e:	460b      	mov	r3, r1
 8019ca0:	817b      	strh	r3, [r7, #10]
 8019ca2:	4613      	mov	r3, r2
 8019ca4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019ca6:	897a      	ldrh	r2, [r7, #10]
 8019ca8:	893b      	ldrh	r3, [r7, #8]
 8019caa:	4413      	add	r3, r2
 8019cac:	b29b      	uxth	r3, r3
 8019cae:	3314      	adds	r3, #20
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	4619      	mov	r1, r3
 8019cb6:	2001      	movs	r0, #1
 8019cb8:	f7fb f9cc 	bl	8015054 <pbuf_alloc>
 8019cbc:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019cbe:	697b      	ldr	r3, [r7, #20]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d056      	beq.n	8019d72 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019cc4:	897b      	ldrh	r3, [r7, #10]
 8019cc6:	3313      	adds	r3, #19
 8019cc8:	697a      	ldr	r2, [r7, #20]
 8019cca:	8952      	ldrh	r2, [r2, #10]
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	db05      	blt.n	8019cdc <tcp_output_alloc_header+0x48>
 8019cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8019d7c <tcp_output_alloc_header+0xe8>)
 8019cd2:	2272      	movs	r2, #114	@ 0x72
 8019cd4:	492a      	ldr	r1, [pc, #168]	@ (8019d80 <tcp_output_alloc_header+0xec>)
 8019cd6:	482b      	ldr	r0, [pc, #172]	@ (8019d84 <tcp_output_alloc_header+0xf0>)
 8019cd8:	f007 fd24 	bl	8021724 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019cdc:	697b      	ldr	r3, [r7, #20]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	8adb      	ldrh	r3, [r3, #22]
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7fa fad4 	bl	8014294 <lwip_htons>
 8019cec:	4603      	mov	r3, r0
 8019cee:	461a      	mov	r2, r3
 8019cf0:	693b      	ldr	r3, [r7, #16]
 8019cf2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	8b1b      	ldrh	r3, [r3, #24]
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	f7fa facb 	bl	8014294 <lwip_htons>
 8019cfe:	4603      	mov	r3, r0
 8019d00:	461a      	mov	r2, r3
 8019d02:	693b      	ldr	r3, [r7, #16]
 8019d04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019d06:	693b      	ldr	r3, [r7, #16]
 8019d08:	687a      	ldr	r2, [r7, #4]
 8019d0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d10:	4618      	mov	r0, r3
 8019d12:	f7fa facc 	bl	80142ae <lwip_htonl>
 8019d16:	4602      	mov	r2, r0
 8019d18:	693b      	ldr	r3, [r7, #16]
 8019d1a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8019d1c:	897b      	ldrh	r3, [r7, #10]
 8019d1e:	089b      	lsrs	r3, r3, #2
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	3305      	adds	r3, #5
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	031b      	lsls	r3, r3, #12
 8019d28:	b29b      	uxth	r3, r3
 8019d2a:	f043 0310 	orr.w	r3, r3, #16
 8019d2e:	b29b      	uxth	r3, r3
 8019d30:	4618      	mov	r0, r3
 8019d32:	f7fa faaf 	bl	8014294 <lwip_htons>
 8019d36:	4603      	mov	r3, r0
 8019d38:	461a      	mov	r2, r3
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8019d42:	4618      	mov	r0, r3
 8019d44:	f7fa faa6 	bl	8014294 <lwip_htons>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	461a      	mov	r2, r3
 8019d4c:	693b      	ldr	r3, [r7, #16]
 8019d4e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019d50:	693b      	ldr	r3, [r7, #16]
 8019d52:	2200      	movs	r2, #0
 8019d54:	741a      	strb	r2, [r3, #16]
 8019d56:	2200      	movs	r2, #0
 8019d58:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019d5a:	693b      	ldr	r3, [r7, #16]
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	749a      	strb	r2, [r3, #18]
 8019d60:	2200      	movs	r2, #0
 8019d62:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d68:	68fa      	ldr	r2, [r7, #12]
 8019d6a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019d6c:	441a      	add	r2, r3
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019d72:	697b      	ldr	r3, [r7, #20]
}
 8019d74:	4618      	mov	r0, r3
 8019d76:	3718      	adds	r7, #24
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}
 8019d7c:	080261c8 	.word	0x080261c8
 8019d80:	080261fc 	.word	0x080261fc
 8019d84:	0802622c 	.word	0x0802622c

08019d88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019d88:	b590      	push	{r4, r7, lr}
 8019d8a:	b085      	sub	sp, #20
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d02d      	beq.n	8019df4 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019d9c:	60fb      	str	r3, [r7, #12]
 8019d9e:	e002      	b.n	8019da6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d1f8      	bne.n	8019da0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	68db      	ldr	r3, [r3, #12]
 8019db2:	899b      	ldrh	r3, [r3, #12]
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7fa fa6c 	bl	8014294 <lwip_htons>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	f003 0307 	and.w	r3, r3, #7
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d116      	bne.n	8019df4 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	68db      	ldr	r3, [r3, #12]
 8019dca:	899b      	ldrh	r3, [r3, #12]
 8019dcc:	b29c      	uxth	r4, r3
 8019dce:	2001      	movs	r0, #1
 8019dd0:	f7fa fa60 	bl	8014294 <lwip_htons>
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	461a      	mov	r2, r3
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	68db      	ldr	r3, [r3, #12]
 8019ddc:	4322      	orrs	r2, r4
 8019dde:	b292      	uxth	r2, r2
 8019de0:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	7e9b      	ldrb	r3, [r3, #26]
 8019de6:	f043 0320 	orr.w	r3, r3, #32
 8019dea:	b2da      	uxtb	r2, r3
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8019df0:	2300      	movs	r3, #0
 8019df2:	e004      	b.n	8019dfe <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019df4:	2101      	movs	r1, #1
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	f000 fcdc 	bl	801a7b4 <tcp_enqueue_flags>
 8019dfc:	4603      	mov	r3, r0
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	3714      	adds	r7, #20
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd90      	pop	{r4, r7, pc}
	...

08019e08 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8019e08:	b590      	push	{r4, r7, lr}
 8019e0a:	b087      	sub	sp, #28
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	60f8      	str	r0, [r7, #12]
 8019e10:	60b9      	str	r1, [r7, #8]
 8019e12:	603b      	str	r3, [r7, #0]
 8019e14:	4613      	mov	r3, r2
 8019e16:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019e18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019e1c:	009b      	lsls	r3, r3, #2
 8019e1e:	b2db      	uxtb	r3, r3
 8019e20:	f003 0304 	and.w	r3, r3, #4
 8019e24:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019e26:	2003      	movs	r0, #3
 8019e28:	f7fa fede 	bl	8014be8 <memp_malloc>
 8019e2c:	6138      	str	r0, [r7, #16]
 8019e2e:	693b      	ldr	r3, [r7, #16]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d104      	bne.n	8019e3e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019e34:	68b8      	ldr	r0, [r7, #8]
 8019e36:	f7fb fc85 	bl	8015744 <pbuf_free>
    return NULL;
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	e068      	b.n	8019f10 <tcp_create_segment+0x108>
  }
  seg->flags = optflags;
 8019e3e:	693b      	ldr	r3, [r7, #16]
 8019e40:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019e44:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019e46:	693b      	ldr	r3, [r7, #16]
 8019e48:	2200      	movs	r2, #0
 8019e4a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019e4c:	693b      	ldr	r3, [r7, #16]
 8019e4e:	68ba      	ldr	r2, [r7, #8]
 8019e50:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019e52:	68bb      	ldr	r3, [r7, #8]
 8019e54:	891a      	ldrh	r2, [r3, #8]
 8019e56:	7dfb      	ldrb	r3, [r7, #23]
 8019e58:	b29b      	uxth	r3, r3
 8019e5a:	429a      	cmp	r2, r3
 8019e5c:	d205      	bcs.n	8019e6a <tcp_create_segment+0x62>
 8019e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8019f18 <tcp_create_segment+0x110>)
 8019e60:	22ba      	movs	r2, #186	@ 0xba
 8019e62:	492e      	ldr	r1, [pc, #184]	@ (8019f1c <tcp_create_segment+0x114>)
 8019e64:	482e      	ldr	r0, [pc, #184]	@ (8019f20 <tcp_create_segment+0x118>)
 8019e66:	f007 fc5d 	bl	8021724 <iprintf>
  seg->len = p->tot_len - optlen;
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	891a      	ldrh	r2, [r3, #8]
 8019e6e:	7dfb      	ldrb	r3, [r7, #23]
 8019e70:	b29b      	uxth	r3, r3
 8019e72:	1ad3      	subs	r3, r2, r3
 8019e74:	b29a      	uxth	r2, r3
 8019e76:	693b      	ldr	r3, [r7, #16]
 8019e78:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8019e7a:	2114      	movs	r1, #20
 8019e7c:	68b8      	ldr	r0, [r7, #8]
 8019e7e:	f7fb fc3d 	bl	80156fc <pbuf_header>
 8019e82:	4603      	mov	r3, r0
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d00c      	beq.n	8019ea2 <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8019e88:	4b26      	ldr	r3, [pc, #152]	@ (8019f24 <tcp_create_segment+0x11c>)
 8019e8a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019e8e:	3301      	adds	r3, #1
 8019e90:	b29a      	uxth	r2, r3
 8019e92:	4b24      	ldr	r3, [pc, #144]	@ (8019f24 <tcp_create_segment+0x11c>)
 8019e94:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8019e98:	6938      	ldr	r0, [r7, #16]
 8019e9a:	f7fd f887 	bl	8016fac <tcp_seg_free>
    return NULL;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	e036      	b.n	8019f10 <tcp_create_segment+0x108>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019ea2:	693b      	ldr	r3, [r7, #16]
 8019ea4:	685b      	ldr	r3, [r3, #4]
 8019ea6:	685a      	ldr	r2, [r3, #4]
 8019ea8:	693b      	ldr	r3, [r7, #16]
 8019eaa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	8ada      	ldrh	r2, [r3, #22]
 8019eb0:	693b      	ldr	r3, [r7, #16]
 8019eb2:	68dc      	ldr	r4, [r3, #12]
 8019eb4:	4610      	mov	r0, r2
 8019eb6:	f7fa f9ed 	bl	8014294 <lwip_htons>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	8b1a      	ldrh	r2, [r3, #24]
 8019ec2:	693b      	ldr	r3, [r7, #16]
 8019ec4:	68dc      	ldr	r4, [r3, #12]
 8019ec6:	4610      	mov	r0, r2
 8019ec8:	f7fa f9e4 	bl	8014294 <lwip_htons>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019ed0:	693b      	ldr	r3, [r7, #16]
 8019ed2:	68dc      	ldr	r4, [r3, #12]
 8019ed4:	6838      	ldr	r0, [r7, #0]
 8019ed6:	f7fa f9ea 	bl	80142ae <lwip_htonl>
 8019eda:	4603      	mov	r3, r0
 8019edc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8019ede:	7dfb      	ldrb	r3, [r7, #23]
 8019ee0:	089b      	lsrs	r3, r3, #2
 8019ee2:	b2db      	uxtb	r3, r3
 8019ee4:	3305      	adds	r3, #5
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	031b      	lsls	r3, r3, #12
 8019eea:	b29a      	uxth	r2, r3
 8019eec:	79fb      	ldrb	r3, [r7, #7]
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	4313      	orrs	r3, r2
 8019ef2:	b29a      	uxth	r2, r3
 8019ef4:	693b      	ldr	r3, [r7, #16]
 8019ef6:	68dc      	ldr	r4, [r3, #12]
 8019ef8:	4610      	mov	r0, r2
 8019efa:	f7fa f9cb 	bl	8014294 <lwip_htons>
 8019efe:	4603      	mov	r3, r0
 8019f00:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019f02:	693b      	ldr	r3, [r7, #16]
 8019f04:	68db      	ldr	r3, [r3, #12]
 8019f06:	2200      	movs	r2, #0
 8019f08:	749a      	strb	r2, [r3, #18]
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	74da      	strb	r2, [r3, #19]
  return seg;
 8019f0e:	693b      	ldr	r3, [r7, #16]
}
 8019f10:	4618      	mov	r0, r3
 8019f12:	371c      	adds	r7, #28
 8019f14:	46bd      	mov	sp, r7
 8019f16:	bd90      	pop	{r4, r7, pc}
 8019f18:	080261c8 	.word	0x080261c8
 8019f1c:	08026254 	.word	0x08026254
 8019f20:	0802622c 	.word	0x0802622c
 8019f24:	2000bc24 	.word	0x2000bc24

08019f28 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b086      	sub	sp, #24
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	607b      	str	r3, [r7, #4]
 8019f30:	4603      	mov	r3, r0
 8019f32:	73fb      	strb	r3, [r7, #15]
 8019f34:	460b      	mov	r3, r1
 8019f36:	81bb      	strh	r3, [r7, #12]
 8019f38:	4613      	mov	r3, r2
 8019f3a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019f3c:	89bb      	ldrh	r3, [r7, #12]
 8019f3e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019f40:	89ba      	ldrh	r2, [r7, #12]
 8019f42:	897b      	ldrh	r3, [r7, #10]
 8019f44:	429a      	cmp	r2, r3
 8019f46:	d221      	bcs.n	8019f8c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019f48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019f4c:	f003 0302 	and.w	r3, r3, #2
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d111      	bne.n	8019f78 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8019f54:	6a3b      	ldr	r3, [r7, #32]
 8019f56:	7e9b      	ldrb	r3, [r3, #26]
 8019f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d115      	bne.n	8019f8c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8019f60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d007      	beq.n	8019f78 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019f68:	6a3b      	ldr	r3, [r7, #32]
 8019f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d103      	bne.n	8019f78 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8019f70:	6a3b      	ldr	r3, [r7, #32]
 8019f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d009      	beq.n	8019f8c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019f78:	89bb      	ldrh	r3, [r7, #12]
 8019f7a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019f7e:	f023 0203 	bic.w	r2, r3, #3
 8019f82:	897b      	ldrh	r3, [r7, #10]
 8019f84:	4293      	cmp	r3, r2
 8019f86:	bf28      	it	cs
 8019f88:	4613      	movcs	r3, r2
 8019f8a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019f8c:	8af9      	ldrh	r1, [r7, #22]
 8019f8e:	7bfb      	ldrb	r3, [r7, #15]
 8019f90:	2200      	movs	r2, #0
 8019f92:	4618      	mov	r0, r3
 8019f94:	f7fb f85e 	bl	8015054 <pbuf_alloc>
 8019f98:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019f9a:	693b      	ldr	r3, [r7, #16]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d101      	bne.n	8019fa4 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	e019      	b.n	8019fd8 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019fa4:	693b      	ldr	r3, [r7, #16]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d006      	beq.n	8019fba <tcp_pbuf_prealloc+0x92>
 8019fac:	4b0c      	ldr	r3, [pc, #48]	@ (8019fe0 <tcp_pbuf_prealloc+0xb8>)
 8019fae:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8019fb2:	490c      	ldr	r1, [pc, #48]	@ (8019fe4 <tcp_pbuf_prealloc+0xbc>)
 8019fb4:	480c      	ldr	r0, [pc, #48]	@ (8019fe8 <tcp_pbuf_prealloc+0xc0>)
 8019fb6:	f007 fbb5 	bl	8021724 <iprintf>
  *oversize = p->len - length;
 8019fba:	693b      	ldr	r3, [r7, #16]
 8019fbc:	895a      	ldrh	r2, [r3, #10]
 8019fbe:	89bb      	ldrh	r3, [r7, #12]
 8019fc0:	1ad3      	subs	r3, r2, r3
 8019fc2:	b29a      	uxth	r2, r3
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019fc8:	693b      	ldr	r3, [r7, #16]
 8019fca:	89ba      	ldrh	r2, [r7, #12]
 8019fcc:	811a      	strh	r2, [r3, #8]
 8019fce:	693b      	ldr	r3, [r7, #16]
 8019fd0:	891a      	ldrh	r2, [r3, #8]
 8019fd2:	693b      	ldr	r3, [r7, #16]
 8019fd4:	815a      	strh	r2, [r3, #10]
  return p;
 8019fd6:	693b      	ldr	r3, [r7, #16]
}
 8019fd8:	4618      	mov	r0, r3
 8019fda:	3718      	adds	r7, #24
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	bd80      	pop	{r7, pc}
 8019fe0:	080261c8 	.word	0x080261c8
 8019fe4:	0802626c 	.word	0x0802626c
 8019fe8:	0802622c 	.word	0x0802622c

08019fec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b082      	sub	sp, #8
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	7d1b      	ldrb	r3, [r3, #20]
 8019ffc:	2b04      	cmp	r3, #4
 8019ffe:	d00e      	beq.n	801a01e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a004:	2b07      	cmp	r3, #7
 801a006:	d00a      	beq.n	801a01e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a00c:	2b02      	cmp	r3, #2
 801a00e:	d006      	beq.n	801a01e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a014:	2b03      	cmp	r3, #3
 801a016:	d002      	beq.n	801a01e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a018:	f06f 030a 	mvn.w	r3, #10
 801a01c:	e057      	b.n	801a0ce <tcp_write_checks+0xe2>
  } else if (len == 0) {
 801a01e:	887b      	ldrh	r3, [r7, #2]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d101      	bne.n	801a028 <tcp_write_checks+0x3c>
    return ERR_OK;
 801a024:	2300      	movs	r3, #0
 801a026:	e052      	b.n	801a0ce <tcp_write_checks+0xe2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a02e:	887a      	ldrh	r2, [r7, #2]
 801a030:	429a      	cmp	r2, r3
 801a032:	d909      	bls.n	801a048 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	7e9b      	ldrb	r3, [r3, #26]
 801a038:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a03c:	b2da      	uxtb	r2, r3
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801a042:	f04f 33ff 	mov.w	r3, #4294967295
 801a046:	e042      	b.n	801a0ce <tcp_write_checks+0xe2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a04e:	2b03      	cmp	r3, #3
 801a050:	d806      	bhi.n	801a060 <tcp_write_checks+0x74>
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a058:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a05c:	4293      	cmp	r3, r2
 801a05e:	d911      	bls.n	801a084 <tcp_write_checks+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801a060:	4b1d      	ldr	r3, [pc, #116]	@ (801a0d8 <tcp_write_checks+0xec>)
 801a062:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a066:	3301      	adds	r3, #1
 801a068:	b29a      	uxth	r2, r3
 801a06a:	4b1b      	ldr	r3, [pc, #108]	@ (801a0d8 <tcp_write_checks+0xec>)
 801a06c:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	7e9b      	ldrb	r3, [r3, #26]
 801a074:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a078:	b2da      	uxtb	r2, r3
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801a07e:	f04f 33ff 	mov.w	r3, #4294967295
 801a082:	e024      	b.n	801a0ce <tcp_write_checks+0xe2>
  }
  if (pcb->snd_queuelen != 0) {
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d00f      	beq.n	801a0ae <tcp_write_checks+0xc2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a092:	2b00      	cmp	r3, #0
 801a094:	d11a      	bne.n	801a0cc <tcp_write_checks+0xe0>
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d116      	bne.n	801a0cc <tcp_write_checks+0xe0>
 801a09e:	4b0f      	ldr	r3, [pc, #60]	@ (801a0dc <tcp_write_checks+0xf0>)
 801a0a0:	f240 1255 	movw	r2, #341	@ 0x155
 801a0a4:	490e      	ldr	r1, [pc, #56]	@ (801a0e0 <tcp_write_checks+0xf4>)
 801a0a6:	480f      	ldr	r0, [pc, #60]	@ (801a0e4 <tcp_write_checks+0xf8>)
 801a0a8:	f007 fb3c 	bl	8021724 <iprintf>
 801a0ac:	e00e      	b.n	801a0cc <tcp_write_checks+0xe0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d103      	bne.n	801a0be <tcp_write_checks+0xd2>
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d006      	beq.n	801a0cc <tcp_write_checks+0xe0>
 801a0be:	4b07      	ldr	r3, [pc, #28]	@ (801a0dc <tcp_write_checks+0xf0>)
 801a0c0:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801a0c4:	4908      	ldr	r1, [pc, #32]	@ (801a0e8 <tcp_write_checks+0xfc>)
 801a0c6:	4807      	ldr	r0, [pc, #28]	@ (801a0e4 <tcp_write_checks+0xf8>)
 801a0c8:	f007 fb2c 	bl	8021724 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a0cc:	2300      	movs	r3, #0
}
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	3708      	adds	r7, #8
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	2000bc24 	.word	0x2000bc24
 801a0dc:	080261c8 	.word	0x080261c8
 801a0e0:	08026280 	.word	0x08026280
 801a0e4:	0802622c 	.word	0x0802622c
 801a0e8:	080262bc 	.word	0x080262bc

0801a0ec <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a0ec:	b590      	push	{r4, r7, lr}
 801a0ee:	b09b      	sub	sp, #108	@ 0x6c
 801a0f0:	af04      	add	r7, sp, #16
 801a0f2:	60f8      	str	r0, [r7, #12]
 801a0f4:	60b9      	str	r1, [r7, #8]
 801a0f6:	4611      	mov	r1, r2
 801a0f8:	461a      	mov	r2, r3
 801a0fa:	460b      	mov	r3, r1
 801a0fc:	80fb      	strh	r3, [r7, #6]
 801a0fe:	4613      	mov	r3, r2
 801a100:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a102:	2300      	movs	r3, #0
 801a104:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a106:	2300      	movs	r3, #0
 801a108:	653b      	str	r3, [r7, #80]	@ 0x50
 801a10a:	2300      	movs	r3, #0
 801a10c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a10e:	2300      	movs	r3, #0
 801a110:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a112:	2300      	movs	r3, #0
 801a114:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a116:	2300      	movs	r3, #0
 801a118:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 801a11c:	2300      	movs	r3, #0
 801a11e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 801a122:	2300      	movs	r3, #0
 801a124:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a128:	2300      	movs	r3, #0
 801a12a:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a12c:	2300      	movs	r3, #0
 801a12e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a130:	2300      	movs	r3, #0
 801a132:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a13a:	085b      	lsrs	r3, r3, #1
 801a13c:	b29a      	uxth	r2, r3
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a142:	4293      	cmp	r3, r2
 801a144:	bf28      	it	cs
 801a146:	4613      	movcs	r3, r2
 801a148:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a14a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d102      	bne.n	801a156 <tcp_write+0x6a>
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a154:	e000      	b.n	801a158 <tcp_write+0x6c>
 801a156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a158:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a15a:	68bb      	ldr	r3, [r7, #8]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d109      	bne.n	801a174 <tcp_write+0x88>
 801a160:	4b92      	ldr	r3, [pc, #584]	@ (801a3ac <tcp_write+0x2c0>)
 801a162:	f240 1291 	movw	r2, #401	@ 0x191
 801a166:	4992      	ldr	r1, [pc, #584]	@ (801a3b0 <tcp_write+0x2c4>)
 801a168:	4892      	ldr	r0, [pc, #584]	@ (801a3b4 <tcp_write+0x2c8>)
 801a16a:	f007 fadb 	bl	8021724 <iprintf>
 801a16e:	f06f 030f 	mvn.w	r3, #15
 801a172:	e312      	b.n	801a79a <tcp_write+0x6ae>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a174:	88fb      	ldrh	r3, [r7, #6]
 801a176:	4619      	mov	r1, r3
 801a178:	68f8      	ldr	r0, [r7, #12]
 801a17a:	f7ff ff37 	bl	8019fec <tcp_write_checks>
 801a17e:	4603      	mov	r3, r0
 801a180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801a184:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d002      	beq.n	801a192 <tcp_write+0xa6>
    return err;
 801a18c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801a190:	e303      	b.n	801a79a <tcp_write+0x6ae>
  }
  queuelen = pcb->snd_queuelen;
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a198:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	f000 80f4 	beq.w	801a38e <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a1aa:	653b      	str	r3, [r7, #80]	@ 0x50
 801a1ac:	e002      	b.n	801a1b4 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801a1ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d1f8      	bne.n	801a1ae <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801a1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1be:	7a9b      	ldrb	r3, [r3, #10]
 801a1c0:	009b      	lsls	r3, r3, #2
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	f003 0304 	and.w	r3, r3, #4
 801a1c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a1ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1ce:	891b      	ldrh	r3, [r3, #8]
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	8c3b      	ldrh	r3, [r7, #32]
 801a1d4:	440b      	add	r3, r1
 801a1d6:	429a      	cmp	r2, r3
 801a1d8:	da06      	bge.n	801a1e8 <tcp_write+0xfc>
 801a1da:	4b74      	ldr	r3, [pc, #464]	@ (801a3ac <tcp_write+0x2c0>)
 801a1dc:	f240 12c7 	movw	r2, #455	@ 0x1c7
 801a1e0:	4975      	ldr	r1, [pc, #468]	@ (801a3b8 <tcp_write+0x2cc>)
 801a1e2:	4874      	ldr	r0, [pc, #464]	@ (801a3b4 <tcp_write+0x2c8>)
 801a1e4:	f007 fa9e 	bl	8021724 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a1e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1ea:	891a      	ldrh	r2, [r3, #8]
 801a1ec:	8c3b      	ldrh	r3, [r7, #32]
 801a1ee:	4413      	add	r3, r2
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a1f4:	1ad3      	subs	r3, r2, r3
 801a1f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a1fe:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a200:	8a7b      	ldrh	r3, [r7, #18]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d026      	beq.n	801a254 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a206:	8a7b      	ldrh	r3, [r7, #18]
 801a208:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d206      	bcs.n	801a21c <tcp_write+0x130>
 801a20e:	4b67      	ldr	r3, [pc, #412]	@ (801a3ac <tcp_write+0x2c0>)
 801a210:	f240 12d9 	movw	r2, #473	@ 0x1d9
 801a214:	4969      	ldr	r1, [pc, #420]	@ (801a3bc <tcp_write+0x2d0>)
 801a216:	4867      	ldr	r0, [pc, #412]	@ (801a3b4 <tcp_write+0x2c8>)
 801a218:	f007 fa84 	bl	8021724 <iprintf>
      seg = last_unsent;
 801a21c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a21e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a220:	8a7b      	ldrh	r3, [r7, #18]
 801a222:	88fa      	ldrh	r2, [r7, #6]
 801a224:	4293      	cmp	r3, r2
 801a226:	bf28      	it	cs
 801a228:	4613      	movcs	r3, r2
 801a22a:	b29b      	uxth	r3, r3
 801a22c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a22e:	4293      	cmp	r3, r2
 801a230:	bf28      	it	cs
 801a232:	4613      	movcs	r3, r2
 801a234:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801a236:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a23a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a23c:	4413      	add	r3, r2
 801a23e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801a242:	8a7a      	ldrh	r2, [r7, #18]
 801a244:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a246:	1ad3      	subs	r3, r2, r3
 801a248:	b29b      	uxth	r3, r3
 801a24a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a24c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a24e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a250:	1ad3      	subs	r3, r2, r3
 801a252:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a254:	8a7b      	ldrh	r3, [r7, #18]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d00b      	beq.n	801a272 <tcp_write+0x186>
 801a25a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a25e:	88fb      	ldrh	r3, [r7, #6]
 801a260:	429a      	cmp	r2, r3
 801a262:	d006      	beq.n	801a272 <tcp_write+0x186>
 801a264:	4b51      	ldr	r3, [pc, #324]	@ (801a3ac <tcp_write+0x2c0>)
 801a266:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801a26a:	4955      	ldr	r1, [pc, #340]	@ (801a3c0 <tcp_write+0x2d4>)
 801a26c:	4851      	ldr	r0, [pc, #324]	@ (801a3b4 <tcp_write+0x2c8>)
 801a26e:	f007 fa59 	bl	8021724 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a272:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a276:	88fb      	ldrh	r3, [r7, #6]
 801a278:	429a      	cmp	r2, r3
 801a27a:	f080 8169 	bcs.w	801a550 <tcp_write+0x464>
 801a27e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a280:	2b00      	cmp	r3, #0
 801a282:	f000 8165 	beq.w	801a550 <tcp_write+0x464>
 801a286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a288:	891b      	ldrh	r3, [r3, #8]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	f000 8160 	beq.w	801a550 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a290:	88fa      	ldrh	r2, [r7, #6]
 801a292:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a296:	1ad2      	subs	r2, r2, r3
 801a298:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a29a:	4293      	cmp	r3, r2
 801a29c:	bfa8      	it	ge
 801a29e:	4613      	movge	r3, r2
 801a2a0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a2a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a2a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a2a6:	797b      	ldrb	r3, [r7, #5]
 801a2a8:	f003 0301 	and.w	r3, r3, #1
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d027      	beq.n	801a300 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a2b0:	f107 0012 	add.w	r0, r7, #18
 801a2b4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a2b6:	8bf9      	ldrh	r1, [r7, #30]
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	9302      	str	r3, [sp, #8]
 801a2bc:	797b      	ldrb	r3, [r7, #5]
 801a2be:	9301      	str	r3, [sp, #4]
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	9300      	str	r3, [sp, #0]
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	2004      	movs	r0, #4
 801a2c8:	f7ff fe2e 	bl	8019f28 <tcp_pbuf_prealloc>
 801a2cc:	6578      	str	r0, [r7, #84]	@ 0x54
 801a2ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	f000 8228 	beq.w	801a726 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2d8:	6858      	ldr	r0, [r3, #4]
 801a2da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a2de:	68ba      	ldr	r2, [r7, #8]
 801a2e0:	4413      	add	r3, r2
 801a2e2:	8bfa      	ldrh	r2, [r7, #30]
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	f007 fcc8 	bl	8021c7a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a2ea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a2ec:	f7fb fabe 	bl	801586c <pbuf_clen>
 801a2f0:	4603      	mov	r3, r0
 801a2f2:	461a      	mov	r2, r3
 801a2f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a2f8:	4413      	add	r3, r2
 801a2fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801a2fe:	e03f      	b.n	801a380 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a302:	685b      	ldr	r3, [r3, #4]
 801a304:	637b      	str	r3, [r7, #52]	@ 0x34
 801a306:	e002      	b.n	801a30e <tcp_write+0x222>
 801a308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	2b00      	cmp	r3, #0
 801a314:	d1f8      	bne.n	801a308 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a318:	7b1b      	ldrb	r3, [r3, #12]
 801a31a:	2b01      	cmp	r3, #1
 801a31c:	d115      	bne.n	801a34a <tcp_write+0x25e>
 801a31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a320:	685b      	ldr	r3, [r3, #4]
 801a322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a324:	8952      	ldrh	r2, [r2, #10]
 801a326:	4413      	add	r3, r2
 801a328:	68ba      	ldr	r2, [r7, #8]
 801a32a:	429a      	cmp	r2, r3
 801a32c:	d10d      	bne.n	801a34a <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a32e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a332:	2b00      	cmp	r3, #0
 801a334:	d006      	beq.n	801a344 <tcp_write+0x258>
 801a336:	4b1d      	ldr	r3, [pc, #116]	@ (801a3ac <tcp_write+0x2c0>)
 801a338:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 801a33c:	4921      	ldr	r1, [pc, #132]	@ (801a3c4 <tcp_write+0x2d8>)
 801a33e:	481d      	ldr	r0, [pc, #116]	@ (801a3b4 <tcp_write+0x2c8>)
 801a340:	f007 f9f0 	bl	8021724 <iprintf>
          extendlen = seglen;
 801a344:	8bfb      	ldrh	r3, [r7, #30]
 801a346:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801a348:	e01a      	b.n	801a380 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a34a:	8bfb      	ldrh	r3, [r7, #30]
 801a34c:	2201      	movs	r2, #1
 801a34e:	4619      	mov	r1, r3
 801a350:	2004      	movs	r0, #4
 801a352:	f7fa fe7f 	bl	8015054 <pbuf_alloc>
 801a356:	6578      	str	r0, [r7, #84]	@ 0x54
 801a358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f000 81e5 	beq.w	801a72a <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801a360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a364:	68ba      	ldr	r2, [r7, #8]
 801a366:	441a      	add	r2, r3
 801a368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a36a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a36c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a36e:	f7fb fa7d 	bl	801586c <pbuf_clen>
 801a372:	4603      	mov	r3, r0
 801a374:	461a      	mov	r2, r3
 801a376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a37a:	4413      	add	r3, r2
 801a37c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a380:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a384:	8bfb      	ldrh	r3, [r7, #30]
 801a386:	4413      	add	r3, r2
 801a388:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801a38c:	e0e0      	b.n	801a550 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a394:	2b00      	cmp	r3, #0
 801a396:	f000 80db 	beq.w	801a550 <tcp_write+0x464>
 801a39a:	4b04      	ldr	r3, [pc, #16]	@ (801a3ac <tcp_write+0x2c0>)
 801a39c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801a3a0:	4909      	ldr	r1, [pc, #36]	@ (801a3c8 <tcp_write+0x2dc>)
 801a3a2:	4804      	ldr	r0, [pc, #16]	@ (801a3b4 <tcp_write+0x2c8>)
 801a3a4:	f007 f9be 	bl	8021724 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a3a8:	e0d2      	b.n	801a550 <tcp_write+0x464>
 801a3aa:	bf00      	nop
 801a3ac:	080261c8 	.word	0x080261c8
 801a3b0:	080262f0 	.word	0x080262f0
 801a3b4:	0802622c 	.word	0x0802622c
 801a3b8:	08026324 	.word	0x08026324
 801a3bc:	0802633c 	.word	0x0802633c
 801a3c0:	0802635c 	.word	0x0802635c
 801a3c4:	0802637c 	.word	0x0802637c
 801a3c8:	080263a8 	.word	0x080263a8
    struct pbuf *p;
    u16_t left = len - pos;
 801a3cc:	88fa      	ldrh	r2, [r7, #6]
 801a3ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a3d2:	1ad3      	subs	r3, r2, r3
 801a3d4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a3d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a3de:	1ad3      	subs	r3, r2, r3
 801a3e0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a3e2:	8b7a      	ldrh	r2, [r7, #26]
 801a3e4:	8bbb      	ldrh	r3, [r7, #28]
 801a3e6:	4293      	cmp	r3, r2
 801a3e8:	bf28      	it	cs
 801a3ea:	4613      	movcs	r3, r2
 801a3ec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a3ee:	797b      	ldrb	r3, [r7, #5]
 801a3f0:	f003 0301 	and.w	r3, r3, #1
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d036      	beq.n	801a466 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3fc:	b29a      	uxth	r2, r3
 801a3fe:	8b3b      	ldrh	r3, [r7, #24]
 801a400:	4413      	add	r3, r2
 801a402:	b299      	uxth	r1, r3
 801a404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a406:	2b00      	cmp	r3, #0
 801a408:	bf0c      	ite	eq
 801a40a:	2301      	moveq	r3, #1
 801a40c:	2300      	movne	r3, #0
 801a40e:	b2db      	uxtb	r3, r3
 801a410:	f107 0012 	add.w	r0, r7, #18
 801a414:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a416:	9302      	str	r3, [sp, #8]
 801a418:	797b      	ldrb	r3, [r7, #5]
 801a41a:	9301      	str	r3, [sp, #4]
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	9300      	str	r3, [sp, #0]
 801a420:	4603      	mov	r3, r0
 801a422:	2000      	movs	r0, #0
 801a424:	f7ff fd80 	bl	8019f28 <tcp_pbuf_prealloc>
 801a428:	6338      	str	r0, [r7, #48]	@ 0x30
 801a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	f000 817e 	beq.w	801a72e <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a434:	895b      	ldrh	r3, [r3, #10]
 801a436:	8b3a      	ldrh	r2, [r7, #24]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d906      	bls.n	801a44a <tcp_write+0x35e>
 801a43c:	4b8f      	ldr	r3, [pc, #572]	@ (801a67c <tcp_write+0x590>)
 801a43e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801a442:	498f      	ldr	r1, [pc, #572]	@ (801a680 <tcp_write+0x594>)
 801a444:	488f      	ldr	r0, [pc, #572]	@ (801a684 <tcp_write+0x598>)
 801a446:	f007 f96d 	bl	8021724 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a44c:	685a      	ldr	r2, [r3, #4]
 801a44e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a452:	18d0      	adds	r0, r2, r3
 801a454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a458:	68ba      	ldr	r2, [r7, #8]
 801a45a:	4413      	add	r3, r2
 801a45c:	8b3a      	ldrh	r2, [r7, #24]
 801a45e:	4619      	mov	r1, r3
 801a460:	f007 fc0b 	bl	8021c7a <memcpy>
 801a464:	e02e      	b.n	801a4c4 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a466:	8a7b      	ldrh	r3, [r7, #18]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d006      	beq.n	801a47a <tcp_write+0x38e>
 801a46c:	4b83      	ldr	r3, [pc, #524]	@ (801a67c <tcp_write+0x590>)
 801a46e:	f240 224b 	movw	r2, #587	@ 0x24b
 801a472:	4985      	ldr	r1, [pc, #532]	@ (801a688 <tcp_write+0x59c>)
 801a474:	4883      	ldr	r0, [pc, #524]	@ (801a684 <tcp_write+0x598>)
 801a476:	f007 f955 	bl	8021724 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a47a:	8b3b      	ldrh	r3, [r7, #24]
 801a47c:	2201      	movs	r2, #1
 801a47e:	4619      	mov	r1, r3
 801a480:	2000      	movs	r0, #0
 801a482:	f7fa fde7 	bl	8015054 <pbuf_alloc>
 801a486:	6178      	str	r0, [r7, #20]
 801a488:	697b      	ldr	r3, [r7, #20]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	f000 8151 	beq.w	801a732 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801a490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a494:	68ba      	ldr	r2, [r7, #8]
 801a496:	441a      	add	r2, r3
 801a498:	697b      	ldr	r3, [r7, #20]
 801a49a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a4a0:	b29b      	uxth	r3, r3
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	4619      	mov	r1, r3
 801a4a6:	2000      	movs	r0, #0
 801a4a8:	f7fa fdd4 	bl	8015054 <pbuf_alloc>
 801a4ac:	6338      	str	r0, [r7, #48]	@ 0x30
 801a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d103      	bne.n	801a4bc <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a4b4:	6978      	ldr	r0, [r7, #20]
 801a4b6:	f7fb f945 	bl	8015744 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a4ba:	e13d      	b.n	801a738 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a4bc:	6979      	ldr	r1, [r7, #20]
 801a4be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4c0:	f7fb fa0c 	bl	80158dc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a4c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4c6:	f7fb f9d1 	bl	801586c <pbuf_clen>
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	461a      	mov	r2, r3
 801a4ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a4d2:	4413      	add	r3, r2
 801a4d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801a4d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a4dc:	2b04      	cmp	r3, #4
 801a4de:	d805      	bhi.n	801a4ec <tcp_write+0x400>
 801a4e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a4e4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a4e8:	4293      	cmp	r3, r2
 801a4ea:	d903      	bls.n	801a4f4 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a4ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4ee:	f7fb f929 	bl	8015744 <pbuf_free>
      goto memerr;
 801a4f2:	e121      	b.n	801a738 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801a4f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a4fc:	441a      	add	r2, r3
 801a4fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a502:	9300      	str	r3, [sp, #0]
 801a504:	4613      	mov	r3, r2
 801a506:	2200      	movs	r2, #0
 801a508:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a50a:	68f8      	ldr	r0, [r7, #12]
 801a50c:	f7ff fc7c 	bl	8019e08 <tcp_create_segment>
 801a510:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801a512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a514:	2b00      	cmp	r3, #0
 801a516:	f000 810e 	beq.w	801a736 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a51a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d102      	bne.n	801a526 <tcp_write+0x43a>
      queue = seg;
 801a520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a522:	647b      	str	r3, [r7, #68]	@ 0x44
 801a524:	e00c      	b.n	801a540 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d106      	bne.n	801a53a <tcp_write+0x44e>
 801a52c:	4b53      	ldr	r3, [pc, #332]	@ (801a67c <tcp_write+0x590>)
 801a52e:	f240 2285 	movw	r2, #645	@ 0x285
 801a532:	4956      	ldr	r1, [pc, #344]	@ (801a68c <tcp_write+0x5a0>)
 801a534:	4853      	ldr	r0, [pc, #332]	@ (801a684 <tcp_write+0x598>)
 801a536:	f007 f8f5 	bl	8021724 <iprintf>
      prev_seg->next = seg;
 801a53a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a53c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a53e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a542:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a544:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a548:	8b3b      	ldrh	r3, [r7, #24]
 801a54a:	4413      	add	r3, r2
 801a54c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801a550:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a554:	88fb      	ldrh	r3, [r7, #6]
 801a556:	429a      	cmp	r2, r3
 801a558:	f4ff af38 	bcc.w	801a3cc <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a55c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d02c      	beq.n	801a5bc <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a564:	685b      	ldr	r3, [r3, #4]
 801a566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a568:	e01e      	b.n	801a5a8 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 801a56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a56c:	891a      	ldrh	r2, [r3, #8]
 801a56e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a570:	4413      	add	r3, r2
 801a572:	b29a      	uxth	r2, r3
 801a574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a576:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d110      	bne.n	801a5a2 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a582:	685b      	ldr	r3, [r3, #4]
 801a584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a586:	8952      	ldrh	r2, [r2, #10]
 801a588:	4413      	add	r3, r2
 801a58a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a58c:	68b9      	ldr	r1, [r7, #8]
 801a58e:	4618      	mov	r0, r3
 801a590:	f007 fb73 	bl	8021c7a <memcpy>
        p->len += oversize_used;
 801a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a596:	895a      	ldrh	r2, [r3, #10]
 801a598:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a59a:	4413      	add	r3, r2
 801a59c:	b29a      	uxth	r2, r3
 801a59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5a0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d1dd      	bne.n	801a56a <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 801a5ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5b0:	891a      	ldrh	r2, [r3, #8]
 801a5b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a5b4:	4413      	add	r3, r2
 801a5b6:	b29a      	uxth	r2, r3
 801a5b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5ba:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a5bc:	8a7a      	ldrh	r2, [r7, #18]
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a5c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d018      	beq.n	801a5fc <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a5ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d106      	bne.n	801a5de <tcp_write+0x4f2>
 801a5d0:	4b2a      	ldr	r3, [pc, #168]	@ (801a67c <tcp_write+0x590>)
 801a5d2:	f240 22ba 	movw	r2, #698	@ 0x2ba
 801a5d6:	492e      	ldr	r1, [pc, #184]	@ (801a690 <tcp_write+0x5a4>)
 801a5d8:	482a      	ldr	r0, [pc, #168]	@ (801a684 <tcp_write+0x598>)
 801a5da:	f007 f8a3 	bl	8021724 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a5de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f7fb f979 	bl	80158dc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a5ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5ec:	891a      	ldrh	r2, [r3, #8]
 801a5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5f0:	891b      	ldrh	r3, [r3, #8]
 801a5f2:	4413      	add	r3, r2
 801a5f4:	b29a      	uxth	r2, r3
 801a5f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5f8:	811a      	strh	r2, [r3, #8]
 801a5fa:	e037      	b.n	801a66c <tcp_write+0x580>
  } else if (extendlen > 0) {
 801a5fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d034      	beq.n	801a66c <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a604:	2b00      	cmp	r3, #0
 801a606:	d003      	beq.n	801a610 <tcp_write+0x524>
 801a608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a60a:	685b      	ldr	r3, [r3, #4]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d106      	bne.n	801a61e <tcp_write+0x532>
 801a610:	4b1a      	ldr	r3, [pc, #104]	@ (801a67c <tcp_write+0x590>)
 801a612:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 801a616:	491f      	ldr	r1, [pc, #124]	@ (801a694 <tcp_write+0x5a8>)
 801a618:	481a      	ldr	r0, [pc, #104]	@ (801a684 <tcp_write+0x598>)
 801a61a:	f007 f883 	bl	8021724 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a61e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a620:	685b      	ldr	r3, [r3, #4]
 801a622:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a624:	e009      	b.n	801a63a <tcp_write+0x54e>
      p->tot_len += extendlen;
 801a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a628:	891a      	ldrh	r2, [r3, #8]
 801a62a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a62c:	4413      	add	r3, r2
 801a62e:	b29a      	uxth	r2, r3
 801a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a632:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d1f1      	bne.n	801a626 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801a642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a644:	891a      	ldrh	r2, [r3, #8]
 801a646:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a648:	4413      	add	r3, r2
 801a64a:	b29a      	uxth	r2, r3
 801a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a64e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a652:	895a      	ldrh	r2, [r3, #10]
 801a654:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a656:	4413      	add	r3, r2
 801a658:	b29a      	uxth	r2, r3
 801a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a65c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a65e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a660:	891a      	ldrh	r2, [r3, #8]
 801a662:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a664:	4413      	add	r3, r2
 801a666:	b29a      	uxth	r2, r3
 801a668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a66a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a66c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d112      	bne.n	801a698 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a676:	669a      	str	r2, [r3, #104]	@ 0x68
 801a678:	e011      	b.n	801a69e <tcp_write+0x5b2>
 801a67a:	bf00      	nop
 801a67c:	080261c8 	.word	0x080261c8
 801a680:	080263d8 	.word	0x080263d8
 801a684:	0802622c 	.word	0x0802622c
 801a688:	08026418 	.word	0x08026418
 801a68c:	08026428 	.word	0x08026428
 801a690:	0802643c 	.word	0x0802643c
 801a694:	08026474 	.word	0x08026474
  } else {
    last_unsent->next = queue;
 801a698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a69a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a69c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801a6a2:	88fb      	ldrh	r3, [r7, #6]
 801a6a4:	441a      	add	r2, r3
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801a6b0:	88fb      	ldrh	r3, [r7, #6]
 801a6b2:	1ad3      	subs	r3, r2, r3
 801a6b4:	b29a      	uxth	r2, r3
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801a6c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d00e      	beq.n	801a6ee <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d10a      	bne.n	801a6ee <tcp_write+0x602>
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d106      	bne.n	801a6ee <tcp_write+0x602>
 801a6e0:	4b30      	ldr	r3, [pc, #192]	@ (801a7a4 <tcp_write+0x6b8>)
 801a6e2:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801a6e6:	4930      	ldr	r1, [pc, #192]	@ (801a7a8 <tcp_write+0x6bc>)
 801a6e8:	4830      	ldr	r0, [pc, #192]	@ (801a7ac <tcp_write+0x6c0>)
 801a6ea:	f007 f81b 	bl	8021724 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801a6ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d016      	beq.n	801a722 <tcp_write+0x636>
 801a6f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6f6:	68db      	ldr	r3, [r3, #12]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d012      	beq.n	801a722 <tcp_write+0x636>
 801a6fc:	797b      	ldrb	r3, [r7, #5]
 801a6fe:	f003 0302 	and.w	r3, r3, #2
 801a702:	2b00      	cmp	r3, #0
 801a704:	d10d      	bne.n	801a722 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a708:	68db      	ldr	r3, [r3, #12]
 801a70a:	899b      	ldrh	r3, [r3, #12]
 801a70c:	b29c      	uxth	r4, r3
 801a70e:	2008      	movs	r0, #8
 801a710:	f7f9 fdc0 	bl	8014294 <lwip_htons>
 801a714:	4603      	mov	r3, r0
 801a716:	461a      	mov	r2, r3
 801a718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a71a:	68db      	ldr	r3, [r3, #12]
 801a71c:	4322      	orrs	r2, r4
 801a71e:	b292      	uxth	r2, r2
 801a720:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a722:	2300      	movs	r3, #0
 801a724:	e039      	b.n	801a79a <tcp_write+0x6ae>
          goto memerr;
 801a726:	bf00      	nop
 801a728:	e006      	b.n	801a738 <tcp_write+0x64c>
            goto memerr;
 801a72a:	bf00      	nop
 801a72c:	e004      	b.n	801a738 <tcp_write+0x64c>
        goto memerr;
 801a72e:	bf00      	nop
 801a730:	e002      	b.n	801a738 <tcp_write+0x64c>
        goto memerr;
 801a732:	bf00      	nop
 801a734:	e000      	b.n	801a738 <tcp_write+0x64c>
      goto memerr;
 801a736:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	7e9b      	ldrb	r3, [r3, #26]
 801a73c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a740:	b2da      	uxtb	r2, r3
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801a746:	4b1a      	ldr	r3, [pc, #104]	@ (801a7b0 <tcp_write+0x6c4>)
 801a748:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a74c:	3301      	adds	r3, #1
 801a74e:	b29a      	uxth	r2, r3
 801a750:	4b17      	ldr	r3, [pc, #92]	@ (801a7b0 <tcp_write+0x6c4>)
 801a752:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 801a756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d002      	beq.n	801a762 <tcp_write+0x676>
    pbuf_free(concat_p);
 801a75c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a75e:	f7fa fff1 	bl	8015744 <pbuf_free>
  }
  if (queue != NULL) {
 801a762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a764:	2b00      	cmp	r3, #0
 801a766:	d002      	beq.n	801a76e <tcp_write+0x682>
    tcp_segs_free(queue);
 801a768:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801a76a:	f7fc fc0a 	bl	8016f82 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a774:	2b00      	cmp	r3, #0
 801a776:	d00e      	beq.n	801a796 <tcp_write+0x6aa>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d10a      	bne.n	801a796 <tcp_write+0x6aa>
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a784:	2b00      	cmp	r3, #0
 801a786:	d106      	bne.n	801a796 <tcp_write+0x6aa>
 801a788:	4b06      	ldr	r3, [pc, #24]	@ (801a7a4 <tcp_write+0x6b8>)
 801a78a:	f240 3201 	movw	r2, #769	@ 0x301
 801a78e:	4906      	ldr	r1, [pc, #24]	@ (801a7a8 <tcp_write+0x6bc>)
 801a790:	4806      	ldr	r0, [pc, #24]	@ (801a7ac <tcp_write+0x6c0>)
 801a792:	f006 ffc7 	bl	8021724 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a796:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	375c      	adds	r7, #92	@ 0x5c
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd90      	pop	{r4, r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	080261c8 	.word	0x080261c8
 801a7a8:	080264ac 	.word	0x080264ac
 801a7ac:	0802622c 	.word	0x0802622c
 801a7b0:	2000bc24 	.word	0x2000bc24

0801a7b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b08a      	sub	sp, #40	@ 0x28
 801a7b8:	af02      	add	r7, sp, #8
 801a7ba:	6078      	str	r0, [r7, #4]
 801a7bc:	460b      	mov	r3, r1
 801a7be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a7c8:	78fb      	ldrb	r3, [r7, #3]
 801a7ca:	f003 0303 	and.w	r3, r3, #3
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d106      	bne.n	801a7e0 <tcp_enqueue_flags+0x2c>
 801a7d2:	4b7b      	ldr	r3, [pc, #492]	@ (801a9c0 <tcp_enqueue_flags+0x20c>)
 801a7d4:	f240 321a 	movw	r2, #794	@ 0x31a
 801a7d8:	497a      	ldr	r1, [pc, #488]	@ (801a9c4 <tcp_enqueue_flags+0x210>)
 801a7da:	487b      	ldr	r0, [pc, #492]	@ (801a9c8 <tcp_enqueue_flags+0x214>)
 801a7dc:	f006 ffa2 	bl	8021724 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a7e6:	2b03      	cmp	r3, #3
 801a7e8:	d806      	bhi.n	801a7f8 <tcp_enqueue_flags+0x44>
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a7f0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a7f4:	4293      	cmp	r3, r2
 801a7f6:	d916      	bls.n	801a826 <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 801a7f8:	78fb      	ldrb	r3, [r7, #3]
 801a7fa:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d111      	bne.n	801a826 <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801a802:	4b72      	ldr	r3, [pc, #456]	@ (801a9cc <tcp_enqueue_flags+0x218>)
 801a804:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a808:	3301      	adds	r3, #1
 801a80a:	b29a      	uxth	r2, r3
 801a80c:	4b6f      	ldr	r3, [pc, #444]	@ (801a9cc <tcp_enqueue_flags+0x218>)
 801a80e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	7e9b      	ldrb	r3, [r3, #26]
 801a816:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a81a:	b2da      	uxtb	r2, r3
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801a820:	f04f 33ff 	mov.w	r3, #4294967295
 801a824:	e0c7      	b.n	801a9b6 <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 801a826:	78fb      	ldrb	r3, [r7, #3]
 801a828:	f003 0302 	and.w	r3, r3, #2
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d001      	beq.n	801a834 <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 801a830:	2301      	movs	r3, #1
 801a832:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a834:	7ffb      	ldrb	r3, [r7, #31]
 801a836:	009b      	lsls	r3, r3, #2
 801a838:	b2db      	uxtb	r3, r3
 801a83a:	f003 0304 	and.w	r3, r3, #4
 801a83e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a840:	7dfb      	ldrb	r3, [r7, #23]
 801a842:	b29b      	uxth	r3, r3
 801a844:	2200      	movs	r2, #0
 801a846:	4619      	mov	r1, r3
 801a848:	2000      	movs	r0, #0
 801a84a:	f7fa fc03 	bl	8015054 <pbuf_alloc>
 801a84e:	6138      	str	r0, [r7, #16]
 801a850:	693b      	ldr	r3, [r7, #16]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d111      	bne.n	801a87a <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	7e9b      	ldrb	r3, [r3, #26]
 801a85a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a85e:	b2da      	uxtb	r2, r3
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a864:	4b59      	ldr	r3, [pc, #356]	@ (801a9cc <tcp_enqueue_flags+0x218>)
 801a866:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a86a:	3301      	adds	r3, #1
 801a86c:	b29a      	uxth	r2, r3
 801a86e:	4b57      	ldr	r3, [pc, #348]	@ (801a9cc <tcp_enqueue_flags+0x218>)
 801a870:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a874:	f04f 33ff 	mov.w	r3, #4294967295
 801a878:	e09d      	b.n	801a9b6 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a87a:	693b      	ldr	r3, [r7, #16]
 801a87c:	895a      	ldrh	r2, [r3, #10]
 801a87e:	7dfb      	ldrb	r3, [r7, #23]
 801a880:	b29b      	uxth	r3, r3
 801a882:	429a      	cmp	r2, r3
 801a884:	d206      	bcs.n	801a894 <tcp_enqueue_flags+0xe0>
 801a886:	4b4e      	ldr	r3, [pc, #312]	@ (801a9c0 <tcp_enqueue_flags+0x20c>)
 801a888:	f44f 7250 	mov.w	r2, #832	@ 0x340
 801a88c:	4950      	ldr	r1, [pc, #320]	@ (801a9d0 <tcp_enqueue_flags+0x21c>)
 801a88e:	484e      	ldr	r0, [pc, #312]	@ (801a9c8 <tcp_enqueue_flags+0x214>)
 801a890:	f006 ff48 	bl	8021724 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801a898:	78fa      	ldrb	r2, [r7, #3]
 801a89a:	7ffb      	ldrb	r3, [r7, #31]
 801a89c:	9300      	str	r3, [sp, #0]
 801a89e:	460b      	mov	r3, r1
 801a8a0:	6939      	ldr	r1, [r7, #16]
 801a8a2:	6878      	ldr	r0, [r7, #4]
 801a8a4:	f7ff fab0 	bl	8019e08 <tcp_create_segment>
 801a8a8:	60f8      	str	r0, [r7, #12]
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d111      	bne.n	801a8d4 <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	7e9b      	ldrb	r3, [r3, #26]
 801a8b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a8b8:	b2da      	uxtb	r2, r3
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a8be:	4b43      	ldr	r3, [pc, #268]	@ (801a9cc <tcp_enqueue_flags+0x218>)
 801a8c0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a8c4:	3301      	adds	r3, #1
 801a8c6:	b29a      	uxth	r2, r3
 801a8c8:	4b40      	ldr	r3, [pc, #256]	@ (801a9cc <tcp_enqueue_flags+0x218>)
 801a8ca:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a8ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a8d2:	e070      	b.n	801a9b6 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	68db      	ldr	r3, [r3, #12]
 801a8d8:	f003 0303 	and.w	r3, r3, #3
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d006      	beq.n	801a8ee <tcp_enqueue_flags+0x13a>
 801a8e0:	4b37      	ldr	r3, [pc, #220]	@ (801a9c0 <tcp_enqueue_flags+0x20c>)
 801a8e2:	f240 3249 	movw	r2, #841	@ 0x349
 801a8e6:	493b      	ldr	r1, [pc, #236]	@ (801a9d4 <tcp_enqueue_flags+0x220>)
 801a8e8:	4837      	ldr	r0, [pc, #220]	@ (801a9c8 <tcp_enqueue_flags+0x214>)
 801a8ea:	f006 ff1b 	bl	8021724 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	891b      	ldrh	r3, [r3, #8]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d006      	beq.n	801a904 <tcp_enqueue_flags+0x150>
 801a8f6:	4b32      	ldr	r3, [pc, #200]	@ (801a9c0 <tcp_enqueue_flags+0x20c>)
 801a8f8:	f240 324a 	movw	r2, #842	@ 0x34a
 801a8fc:	4936      	ldr	r1, [pc, #216]	@ (801a9d8 <tcp_enqueue_flags+0x224>)
 801a8fe:	4832      	ldr	r0, [pc, #200]	@ (801a9c8 <tcp_enqueue_flags+0x214>)
 801a900:	f006 ff10 	bl	8021724 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d103      	bne.n	801a914 <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	68fa      	ldr	r2, [r7, #12]
 801a910:	669a      	str	r2, [r3, #104]	@ 0x68
 801a912:	e00d      	b.n	801a930 <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a918:	61bb      	str	r3, [r7, #24]
 801a91a:	e002      	b.n	801a922 <tcp_enqueue_flags+0x16e>
 801a91c:	69bb      	ldr	r3, [r7, #24]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	61bb      	str	r3, [r7, #24]
 801a922:	69bb      	ldr	r3, [r7, #24]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d1f8      	bne.n	801a91c <tcp_enqueue_flags+0x168>
    useg->next = seg;
 801a92a:	69bb      	ldr	r3, [r7, #24]
 801a92c:	68fa      	ldr	r2, [r7, #12]
 801a92e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	2200      	movs	r2, #0
 801a934:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a938:	78fb      	ldrb	r3, [r7, #3]
 801a93a:	f003 0302 	and.w	r3, r3, #2
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d104      	bne.n	801a94c <tcp_enqueue_flags+0x198>
 801a942:	78fb      	ldrb	r3, [r7, #3]
 801a944:	f003 0301 	and.w	r3, r3, #1
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d004      	beq.n	801a956 <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a950:	1c5a      	adds	r2, r3, #1
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a956:	78fb      	ldrb	r3, [r7, #3]
 801a958:	f003 0301 	and.w	r3, r3, #1
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d006      	beq.n	801a96e <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	7e9b      	ldrb	r3, [r3, #26]
 801a964:	f043 0320 	orr.w	r3, r3, #32
 801a968:	b2da      	uxtb	r2, r3
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	685b      	ldr	r3, [r3, #4]
 801a972:	4618      	mov	r0, r3
 801a974:	f7fa ff7a 	bl	801586c <pbuf_clen>
 801a978:	4603      	mov	r3, r0
 801a97a:	461a      	mov	r2, r3
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a982:	4413      	add	r3, r2
 801a984:	b29a      	uxth	r2, r3
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a992:	2b00      	cmp	r3, #0
 801a994:	d00e      	beq.n	801a9b4 <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d10a      	bne.n	801a9b4 <tcp_enqueue_flags+0x200>
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d106      	bne.n	801a9b4 <tcp_enqueue_flags+0x200>
 801a9a6:	4b06      	ldr	r3, [pc, #24]	@ (801a9c0 <tcp_enqueue_flags+0x20c>)
 801a9a8:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801a9ac:	490b      	ldr	r1, [pc, #44]	@ (801a9dc <tcp_enqueue_flags+0x228>)
 801a9ae:	4806      	ldr	r0, [pc, #24]	@ (801a9c8 <tcp_enqueue_flags+0x214>)
 801a9b0:	f006 feb8 	bl	8021724 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a9b4:	2300      	movs	r3, #0
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	3720      	adds	r7, #32
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	080261c8 	.word	0x080261c8
 801a9c4:	080264cc 	.word	0x080264cc
 801a9c8:	0802622c 	.word	0x0802622c
 801a9cc:	2000bc24 	.word	0x2000bc24
 801a9d0:	08026524 	.word	0x08026524
 801a9d4:	08026560 	.word	0x08026560
 801a9d8:	08026578 	.word	0x08026578
 801a9dc:	080265a4 	.word	0x080265a4

0801a9e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a9e0:	b590      	push	{r4, r7, lr}
 801a9e2:	b08b      	sub	sp, #44	@ 0x2c
 801a9e4:	af04      	add	r7, sp, #16
 801a9e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a9ec:	7dbb      	ldrb	r3, [r7, #22]
 801a9ee:	b29c      	uxth	r4, r3
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	f7f9 fc5a 	bl	80142ae <lwip_htonl>
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	4621      	mov	r1, r4
 801aa00:	6878      	ldr	r0, [r7, #4]
 801aa02:	f7ff f947 	bl	8019c94 <tcp_output_alloc_header>
 801aa06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa08:	693b      	ldr	r3, [r7, #16]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d109      	bne.n	801aa22 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	7e9b      	ldrb	r3, [r3, #26]
 801aa12:	f043 0303 	orr.w	r3, r3, #3
 801aa16:	b2da      	uxtb	r2, r3
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801aa1c:	f06f 0301 	mvn.w	r3, #1
 801aa20:	e036      	b.n	801aa90 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	3304      	adds	r3, #4
 801aa26:	4618      	mov	r0, r3
 801aa28:	f004 fbce 	bl	801f1c8 <ip4_route>
 801aa2c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d102      	bne.n	801aa3a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 801aa34:	23fc      	movs	r3, #252	@ 0xfc
 801aa36:	75fb      	strb	r3, [r7, #23]
 801aa38:	e012      	b.n	801aa60 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801aa3a:	6879      	ldr	r1, [r7, #4]
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	1d18      	adds	r0, r3, #4
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	7a9c      	ldrb	r4, [r3, #10]
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	7a5b      	ldrb	r3, [r3, #9]
 801aa48:	68fa      	ldr	r2, [r7, #12]
 801aa4a:	9202      	str	r2, [sp, #8]
 801aa4c:	2206      	movs	r2, #6
 801aa4e:	9201      	str	r2, [sp, #4]
 801aa50:	9300      	str	r3, [sp, #0]
 801aa52:	4623      	mov	r3, r4
 801aa54:	4602      	mov	r2, r0
 801aa56:	6938      	ldr	r0, [r7, #16]
 801aa58:	f004 fe28 	bl	801f6ac <ip4_output_if>
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801aa60:	6938      	ldr	r0, [r7, #16]
 801aa62:	f7fa fe6f 	bl	8015744 <pbuf_free>

  if (err != ERR_OK) {
 801aa66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d007      	beq.n	801aa7e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	7e9b      	ldrb	r3, [r3, #26]
 801aa72:	f043 0303 	orr.w	r3, r3, #3
 801aa76:	b2da      	uxtb	r2, r3
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	769a      	strb	r2, [r3, #26]
 801aa7c:	e006      	b.n	801aa8c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	7e9b      	ldrb	r3, [r3, #26]
 801aa82:	f023 0303 	bic.w	r3, r3, #3
 801aa86:	b2da      	uxtb	r2, r3
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801aa8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aa90:	4618      	mov	r0, r3
 801aa92:	371c      	adds	r7, #28
 801aa94:	46bd      	mov	sp, r7
 801aa96:	bd90      	pop	{r4, r7, pc}

0801aa98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801aa98:	b5b0      	push	{r4, r5, r7, lr}
 801aa9a:	b08a      	sub	sp, #40	@ 0x28
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	7d1b      	ldrb	r3, [r3, #20]
 801aaa4:	2b01      	cmp	r3, #1
 801aaa6:	d106      	bne.n	801aab6 <tcp_output+0x1e>
 801aaa8:	4b99      	ldr	r3, [pc, #612]	@ (801ad10 <tcp_output+0x278>)
 801aaaa:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801aaae:	4999      	ldr	r1, [pc, #612]	@ (801ad14 <tcp_output+0x27c>)
 801aab0:	4899      	ldr	r0, [pc, #612]	@ (801ad18 <tcp_output+0x280>)
 801aab2:	f006 fe37 	bl	8021724 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801aab6:	4b99      	ldr	r3, [pc, #612]	@ (801ad1c <tcp_output+0x284>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	687a      	ldr	r2, [r7, #4]
 801aabc:	429a      	cmp	r2, r3
 801aabe:	d101      	bne.n	801aac4 <tcp_output+0x2c>
    return ERR_OK;
 801aac0:	2300      	movs	r3, #0
 801aac2:	e1cb      	b.n	801ae5c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aad0:	4293      	cmp	r3, r2
 801aad2:	bf28      	it	cs
 801aad4:	4613      	movcs	r3, r2
 801aad6:	b29b      	uxth	r3, r3
 801aad8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801aade:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	7e9b      	ldrb	r3, [r3, #26]
 801aae4:	f003 0302 	and.w	r3, r3, #2
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d017      	beq.n	801ab1c <tcp_output+0x84>
 801aaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d00f      	beq.n	801ab12 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaf4:	68db      	ldr	r3, [r3, #12]
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f7f9 fbd8 	bl	80142ae <lwip_htonl>
 801aafe:	4602      	mov	r2, r0
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab04:	1ad3      	subs	r3, r2, r3
 801ab06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ab08:	8912      	ldrh	r2, [r2, #8]
 801ab0a:	4413      	add	r3, r2
     (seg == NULL ||
 801ab0c:	69ba      	ldr	r2, [r7, #24]
 801ab0e:	429a      	cmp	r2, r3
 801ab10:	d204      	bcs.n	801ab1c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 801ab12:	6878      	ldr	r0, [r7, #4]
 801ab14:	f7ff ff64 	bl	801a9e0 <tcp_send_empty_ack>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	e19f      	b.n	801ae5c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab20:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ab22:	6a3b      	ldr	r3, [r7, #32]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d007      	beq.n	801ab38 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801ab28:	e002      	b.n	801ab30 <tcp_output+0x98>
 801ab2a:	6a3b      	ldr	r3, [r7, #32]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	623b      	str	r3, [r7, #32]
 801ab30:	6a3b      	ldr	r3, [r7, #32]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d1f8      	bne.n	801ab2a <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	3304      	adds	r3, #4
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	f004 fb43 	bl	801f1c8 <ip4_route>
 801ab42:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d102      	bne.n	801ab50 <tcp_output+0xb8>
    return ERR_RTE;
 801ab4a:	f06f 0303 	mvn.w	r3, #3
 801ab4e:	e185      	b.n	801ae5c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d003      	beq.n	801ab5e <tcp_output+0xc6>
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d111      	bne.n	801ab82 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ab5e:	697b      	ldr	r3, [r7, #20]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d002      	beq.n	801ab6a <tcp_output+0xd2>
 801ab64:	697b      	ldr	r3, [r7, #20]
 801ab66:	3304      	adds	r3, #4
 801ab68:	e000      	b.n	801ab6c <tcp_output+0xd4>
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ab6e:	693b      	ldr	r3, [r7, #16]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d102      	bne.n	801ab7a <tcp_output+0xe2>
      return ERR_RTE;
 801ab74:	f06f 0303 	mvn.w	r3, #3
 801ab78:	e170      	b.n	801ae5c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ab7a:	693b      	ldr	r3, [r7, #16]
 801ab7c:	681a      	ldr	r2, [r3, #0]
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	f000 813f 	beq.w	801ae08 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab8c:	68db      	ldr	r3, [r3, #12]
 801ab8e:	685b      	ldr	r3, [r3, #4]
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7f9 fb8c 	bl	80142ae <lwip_htonl>
 801ab96:	4602      	mov	r2, r0
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab9c:	1ad3      	subs	r3, r2, r3
 801ab9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aba0:	8912      	ldrh	r2, [r2, #8]
 801aba2:	4413      	add	r3, r2
  if (seg != NULL &&
 801aba4:	69ba      	ldr	r2, [r7, #24]
 801aba6:	429a      	cmp	r2, r3
 801aba8:	f080 812e 	bcs.w	801ae08 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801abac:	69bb      	ldr	r3, [r7, #24]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	f000 812a 	beq.w	801ae08 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801abba:	461a      	mov	r2, r3
 801abbc:	69bb      	ldr	r3, [r7, #24]
 801abbe:	4293      	cmp	r3, r2
 801abc0:	f040 8122 	bne.w	801ae08 <tcp_output+0x370>
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801abc8:	2b00      	cmp	r3, #0
 801abca:	f040 811d 	bne.w	801ae08 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	f040 812c 	bne.w	801ae32 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	2200      	movs	r2, #0
 801abde:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	2201      	movs	r2, #1
 801abe6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 801abea:	e122      	b.n	801ae32 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abee:	68db      	ldr	r3, [r3, #12]
 801abf0:	899b      	ldrh	r3, [r3, #12]
 801abf2:	b29b      	uxth	r3, r3
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7f9 fb4d 	bl	8014294 <lwip_htons>
 801abfa:	4603      	mov	r3, r0
 801abfc:	f003 0304 	and.w	r3, r3, #4
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d006      	beq.n	801ac12 <tcp_output+0x17a>
 801ac04:	4b42      	ldr	r3, [pc, #264]	@ (801ad10 <tcp_output+0x278>)
 801ac06:	f240 4245 	movw	r2, #1093	@ 0x445
 801ac0a:	4945      	ldr	r1, [pc, #276]	@ (801ad20 <tcp_output+0x288>)
 801ac0c:	4842      	ldr	r0, [pc, #264]	@ (801ad18 <tcp_output+0x280>)
 801ac0e:	f006 fd89 	bl	8021724 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d01f      	beq.n	801ac5a <tcp_output+0x1c2>
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	7e9b      	ldrb	r3, [r3, #26]
 801ac1e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d119      	bne.n	801ac5a <tcp_output+0x1c2>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d00b      	beq.n	801ac46 <tcp_output+0x1ae>
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d110      	bne.n	801ac5a <tcp_output+0x1c2>
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac3c:	891a      	ldrh	r2, [r3, #8]
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d209      	bcs.n	801ac5a <tcp_output+0x1c2>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d004      	beq.n	801ac5a <tcp_output+0x1c2>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ac56:	2b03      	cmp	r3, #3
 801ac58:	d901      	bls.n	801ac5e <tcp_output+0x1c6>
 801ac5a:	2301      	movs	r3, #1
 801ac5c:	e000      	b.n	801ac60 <tcp_output+0x1c8>
 801ac5e:	2300      	movs	r3, #0
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d106      	bne.n	801ac72 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	7e9b      	ldrb	r3, [r3, #26]
 801ac68:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	f000 80e2 	beq.w	801ae36 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	7d1b      	ldrb	r3, [r3, #20]
 801ac76:	2b02      	cmp	r3, #2
 801ac78:	d00d      	beq.n	801ac96 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac7c:	68db      	ldr	r3, [r3, #12]
 801ac7e:	899b      	ldrh	r3, [r3, #12]
 801ac80:	b29c      	uxth	r4, r3
 801ac82:	2010      	movs	r0, #16
 801ac84:	f7f9 fb06 	bl	8014294 <lwip_htons>
 801ac88:	4603      	mov	r3, r0
 801ac8a:	461a      	mov	r2, r3
 801ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac8e:	68db      	ldr	r3, [r3, #12]
 801ac90:	4322      	orrs	r2, r4
 801ac92:	b292      	uxth	r2, r2
 801ac94:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801ac96:	697a      	ldr	r2, [r7, #20]
 801ac98:	6879      	ldr	r1, [r7, #4]
 801ac9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac9c:	f000 f8e2 	bl	801ae64 <tcp_output_segment>
 801aca0:	4603      	mov	r3, r0
 801aca2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801aca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d009      	beq.n	801acc0 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	7e9b      	ldrb	r3, [r3, #26]
 801acb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801acb4:	b2da      	uxtb	r2, r3
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	769a      	strb	r2, [r3, #26]
      return err;
 801acba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acbe:	e0cd      	b.n	801ae5c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 801acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acc2:	681a      	ldr	r2, [r3, #0]
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	7d1b      	ldrb	r3, [r3, #20]
 801accc:	2b02      	cmp	r3, #2
 801acce:	d006      	beq.n	801acde <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	7e9b      	ldrb	r3, [r3, #26]
 801acd4:	f023 0303 	bic.w	r3, r3, #3
 801acd8:	b2da      	uxtb	r2, r3
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ace0:	68db      	ldr	r3, [r3, #12]
 801ace2:	685b      	ldr	r3, [r3, #4]
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7f9 fae2 	bl	80142ae <lwip_htonl>
 801acea:	4604      	mov	r4, r0
 801acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acee:	891b      	ldrh	r3, [r3, #8]
 801acf0:	461d      	mov	r5, r3
 801acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acf4:	68db      	ldr	r3, [r3, #12]
 801acf6:	899b      	ldrh	r3, [r3, #12]
 801acf8:	b29b      	uxth	r3, r3
 801acfa:	4618      	mov	r0, r3
 801acfc:	f7f9 faca 	bl	8014294 <lwip_htons>
 801ad00:	4603      	mov	r3, r0
 801ad02:	f003 0303 	and.w	r3, r3, #3
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d00c      	beq.n	801ad24 <tcp_output+0x28c>
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	e00b      	b.n	801ad26 <tcp_output+0x28e>
 801ad0e:	bf00      	nop
 801ad10:	080261c8 	.word	0x080261c8
 801ad14:	080265cc 	.word	0x080265cc
 801ad18:	0802622c 	.word	0x0802622c
 801ad1c:	2000be08 	.word	0x2000be08
 801ad20:	080265f4 	.word	0x080265f4
 801ad24:	2300      	movs	r3, #0
 801ad26:	442b      	add	r3, r5
 801ad28:	4423      	add	r3, r4
 801ad2a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ad30:	68bb      	ldr	r3, [r7, #8]
 801ad32:	1ad3      	subs	r3, r2, r3
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	da02      	bge.n	801ad3e <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	68ba      	ldr	r2, [r7, #8]
 801ad3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ad3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad40:	891b      	ldrh	r3, [r3, #8]
 801ad42:	461c      	mov	r4, r3
 801ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad46:	68db      	ldr	r3, [r3, #12]
 801ad48:	899b      	ldrh	r3, [r3, #12]
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7f9 faa1 	bl	8014294 <lwip_htons>
 801ad52:	4603      	mov	r3, r0
 801ad54:	f003 0303 	and.w	r3, r3, #3
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d001      	beq.n	801ad60 <tcp_output+0x2c8>
 801ad5c:	2301      	movs	r3, #1
 801ad5e:	e000      	b.n	801ad62 <tcp_output+0x2ca>
 801ad60:	2300      	movs	r3, #0
 801ad62:	4423      	add	r3, r4
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d049      	beq.n	801adfc <tcp_output+0x364>
      seg->next = NULL;
 801ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad6a:	2200      	movs	r2, #0
 801ad6c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d105      	bne.n	801ad82 <tcp_output+0x2ea>
        pcb->unacked = seg;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad7a:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 801ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad7e:	623b      	str	r3, [r7, #32]
 801ad80:	e03f      	b.n	801ae02 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad84:	68db      	ldr	r3, [r3, #12]
 801ad86:	685b      	ldr	r3, [r3, #4]
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f7f9 fa90 	bl	80142ae <lwip_htonl>
 801ad8e:	4604      	mov	r4, r0
 801ad90:	6a3b      	ldr	r3, [r7, #32]
 801ad92:	68db      	ldr	r3, [r3, #12]
 801ad94:	685b      	ldr	r3, [r3, #4]
 801ad96:	4618      	mov	r0, r3
 801ad98:	f7f9 fa89 	bl	80142ae <lwip_htonl>
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	1ae3      	subs	r3, r4, r3
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	da24      	bge.n	801adee <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	336c      	adds	r3, #108	@ 0x6c
 801ada8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801adaa:	e002      	b.n	801adb2 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 801adac:	69fb      	ldr	r3, [r7, #28]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801adb2:	69fb      	ldr	r3, [r7, #28]
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d011      	beq.n	801adde <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801adba:	69fb      	ldr	r3, [r7, #28]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	68db      	ldr	r3, [r3, #12]
 801adc0:	685b      	ldr	r3, [r3, #4]
 801adc2:	4618      	mov	r0, r3
 801adc4:	f7f9 fa73 	bl	80142ae <lwip_htonl>
 801adc8:	4604      	mov	r4, r0
 801adca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adcc:	68db      	ldr	r3, [r3, #12]
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	4618      	mov	r0, r3
 801add2:	f7f9 fa6c 	bl	80142ae <lwip_htonl>
 801add6:	4603      	mov	r3, r0
 801add8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801adda:	2b00      	cmp	r3, #0
 801addc:	dbe6      	blt.n	801adac <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 801adde:	69fb      	ldr	r3, [r7, #28]
 801ade0:	681a      	ldr	r2, [r3, #0]
 801ade2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ade4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ade6:	69fb      	ldr	r3, [r7, #28]
 801ade8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801adea:	601a      	str	r2, [r3, #0]
 801adec:	e009      	b.n	801ae02 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801adee:	6a3b      	ldr	r3, [r7, #32]
 801adf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801adf2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801adf4:	6a3b      	ldr	r3, [r7, #32]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	623b      	str	r3, [r7, #32]
 801adfa:	e002      	b.n	801ae02 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801adfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801adfe:	f7fc f8d5 	bl	8016fac <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801ae08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d015      	beq.n	801ae3a <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ae0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae10:	68db      	ldr	r3, [r3, #12]
 801ae12:	685b      	ldr	r3, [r3, #4]
 801ae14:	4618      	mov	r0, r3
 801ae16:	f7f9 fa4a 	bl	80142ae <lwip_htonl>
 801ae1a:	4602      	mov	r2, r0
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ae20:	1ad3      	subs	r3, r2, r3
 801ae22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae24:	8912      	ldrh	r2, [r2, #8]
 801ae26:	4413      	add	r3, r2
  while (seg != NULL &&
 801ae28:	69ba      	ldr	r2, [r7, #24]
 801ae2a:	429a      	cmp	r2, r3
 801ae2c:	f4bf aede 	bcs.w	801abec <tcp_output+0x154>
  }
output_done:
 801ae30:	e003      	b.n	801ae3a <tcp_output+0x3a2>
    goto output_done;
 801ae32:	bf00      	nop
 801ae34:	e002      	b.n	801ae3c <tcp_output+0x3a4>
      break;
 801ae36:	bf00      	nop
 801ae38:	e000      	b.n	801ae3c <tcp_output+0x3a4>
output_done:
 801ae3a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d103      	bne.n	801ae4c <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	2200      	movs	r2, #0
 801ae48:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	7e9b      	ldrb	r3, [r3, #26]
 801ae50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ae54:	b2da      	uxtb	r2, r3
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801ae5a:	2300      	movs	r3, #0
}
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	3728      	adds	r7, #40	@ 0x28
 801ae60:	46bd      	mov	sp, r7
 801ae62:	bdb0      	pop	{r4, r5, r7, pc}

0801ae64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ae64:	b5b0      	push	{r4, r5, r7, lr}
 801ae66:	b08c      	sub	sp, #48	@ 0x30
 801ae68:	af04      	add	r7, sp, #16
 801ae6a:	60f8      	str	r0, [r7, #12]
 801ae6c:	60b9      	str	r1, [r7, #8]
 801ae6e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	685b      	ldr	r3, [r3, #4]
 801ae74:	89db      	ldrh	r3, [r3, #14]
 801ae76:	2b01      	cmp	r3, #1
 801ae78:	d001      	beq.n	801ae7e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801ae7a:	2300      	movs	r3, #0
 801ae7c:	e09c      	b.n	801afb8 <tcp_output_segment+0x154>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ae7e:	68bb      	ldr	r3, [r7, #8]
 801ae80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	68dc      	ldr	r4, [r3, #12]
 801ae86:	4610      	mov	r0, r2
 801ae88:	f7f9 fa11 	bl	80142ae <lwip_htonl>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ae90:	68bb      	ldr	r3, [r7, #8]
 801ae92:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	68dc      	ldr	r4, [r3, #12]
 801ae98:	4610      	mov	r0, r2
 801ae9a:	f7f9 f9fb 	bl	8014294 <lwip_htons>
 801ae9e:	4603      	mov	r3, r0
 801aea0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801aea2:	68bb      	ldr	r3, [r7, #8]
 801aea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aea6:	68ba      	ldr	r2, [r7, #8]
 801aea8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801aeaa:	441a      	add	r2, r3
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	68db      	ldr	r3, [r3, #12]
 801aeb4:	3314      	adds	r3, #20
 801aeb6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	7a9b      	ldrb	r3, [r3, #10]
 801aebc:	f003 0301 	and.w	r3, r3, #1
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d014      	beq.n	801aeee <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801aec4:	68bb      	ldr	r3, [r7, #8]
 801aec6:	3304      	adds	r3, #4
 801aec8:	4619      	mov	r1, r3
 801aeca:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801aece:	f7fc fbc9 	bl	8017664 <tcp_eff_send_mss_impl>
 801aed2:	4603      	mov	r3, r0
 801aed4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801aed6:	8b7b      	ldrh	r3, [r7, #26]
 801aed8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801aedc:	4618      	mov	r0, r3
 801aede:	f7f9 f9e6 	bl	80142ae <lwip_htonl>
 801aee2:	4602      	mov	r2, r0
 801aee4:	69fb      	ldr	r3, [r7, #28]
 801aee6:	601a      	str	r2, [r3, #0]
    opts += 1;
 801aee8:	69fb      	ldr	r3, [r7, #28]
 801aeea:	3304      	adds	r3, #4
 801aeec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801aeee:	68bb      	ldr	r3, [r7, #8]
 801aef0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	da02      	bge.n	801aefe <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 801aef8:	68bb      	ldr	r3, [r7, #8]
 801aefa:	2200      	movs	r2, #0
 801aefc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801aefe:	68bb      	ldr	r3, [r7, #8]
 801af00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af02:	2b00      	cmp	r3, #0
 801af04:	d10c      	bne.n	801af20 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801af06:	4b2e      	ldr	r3, [pc, #184]	@ (801afc0 <tcp_output_segment+0x15c>)
 801af08:	681a      	ldr	r2, [r3, #0]
 801af0a:	68bb      	ldr	r3, [r7, #8]
 801af0c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	68db      	ldr	r3, [r3, #12]
 801af12:	685b      	ldr	r3, [r3, #4]
 801af14:	4618      	mov	r0, r3
 801af16:	f7f9 f9ca 	bl	80142ae <lwip_htonl>
 801af1a:	4602      	mov	r2, r0
 801af1c:	68bb      	ldr	r3, [r7, #8]
 801af1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	68da      	ldr	r2, [r3, #12]
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	685b      	ldr	r3, [r3, #4]
 801af28:	685b      	ldr	r3, [r3, #4]
 801af2a:	1ad3      	subs	r3, r2, r3
 801af2c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
 801af2e:	8b3b      	ldrh	r3, [r7, #24]
 801af30:	2b00      	cmp	r3, #0
 801af32:	d106      	bne.n	801af42 <tcp_output_segment+0xde>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
 801af34:	4b23      	ldr	r3, [pc, #140]	@ (801afc4 <tcp_output_segment+0x160>)
 801af36:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801af3a:	3301      	adds	r3, #1
 801af3c:	4a21      	ldr	r2, [pc, #132]	@ (801afc4 <tcp_output_segment+0x160>)
 801af3e:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
  }

  seg->p->len -= len;
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	685b      	ldr	r3, [r3, #4]
 801af46:	8959      	ldrh	r1, [r3, #10]
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	685b      	ldr	r3, [r3, #4]
 801af4c:	8b3a      	ldrh	r2, [r7, #24]
 801af4e:	1a8a      	subs	r2, r1, r2
 801af50:	b292      	uxth	r2, r2
 801af52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	685b      	ldr	r3, [r3, #4]
 801af58:	8919      	ldrh	r1, [r3, #8]
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	685b      	ldr	r3, [r3, #4]
 801af5e:	8b3a      	ldrh	r2, [r7, #24]
 801af60:	1a8a      	subs	r2, r1, r2
 801af62:	b292      	uxth	r2, r2
 801af64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	68fa      	ldr	r2, [r7, #12]
 801af6c:	68d2      	ldr	r2, [r2, #12]
 801af6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	68db      	ldr	r3, [r3, #12]
 801af74:	2200      	movs	r2, #0
 801af76:	741a      	strb	r2, [r3, #16]
 801af78:	2200      	movs	r2, #0
 801af7a:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801af7c:	4b11      	ldr	r3, [pc, #68]	@ (801afc4 <tcp_output_segment+0x160>)
 801af7e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801af82:	3301      	adds	r3, #1
 801af84:	b29a      	uxth	r2, r3
 801af86:	4b0f      	ldr	r3, [pc, #60]	@ (801afc4 <tcp_output_segment+0x160>)
 801af88:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	6858      	ldr	r0, [r3, #4]
 801af90:	68b9      	ldr	r1, [r7, #8]
 801af92:	68bb      	ldr	r3, [r7, #8]
 801af94:	1d1c      	adds	r4, r3, #4
 801af96:	68bb      	ldr	r3, [r7, #8]
 801af98:	7a9d      	ldrb	r5, [r3, #10]
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	7a5b      	ldrb	r3, [r3, #9]
 801af9e:	687a      	ldr	r2, [r7, #4]
 801afa0:	9202      	str	r2, [sp, #8]
 801afa2:	2206      	movs	r2, #6
 801afa4:	9201      	str	r2, [sp, #4]
 801afa6:	9300      	str	r3, [sp, #0]
 801afa8:	462b      	mov	r3, r5
 801afaa:	4622      	mov	r2, r4
 801afac:	f004 fb7e 	bl	801f6ac <ip4_output_if>
 801afb0:	4603      	mov	r3, r0
 801afb2:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801afb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801afb8:	4618      	mov	r0, r3
 801afba:	3720      	adds	r7, #32
 801afbc:	46bd      	mov	sp, r7
 801afbe:	bdb0      	pop	{r4, r5, r7, pc}
 801afc0:	2000bdbc 	.word	0x2000bdbc
 801afc4:	2000bc24 	.word	0x2000bc24

0801afc8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b08c      	sub	sp, #48	@ 0x30
 801afcc:	af04      	add	r7, sp, #16
 801afce:	60f8      	str	r0, [r7, #12]
 801afd0:	60b9      	str	r1, [r7, #8]
 801afd2:	607a      	str	r2, [r7, #4]
 801afd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801afd6:	2200      	movs	r2, #0
 801afd8:	2114      	movs	r1, #20
 801afda:	2001      	movs	r0, #1
 801afdc:	f7fa f83a 	bl	8015054 <pbuf_alloc>
 801afe0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801afe2:	69fb      	ldr	r3, [r7, #28]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d06a      	beq.n	801b0be <tcp_rst+0xf6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801afe8:	69fb      	ldr	r3, [r7, #28]
 801afea:	895b      	ldrh	r3, [r3, #10]
 801afec:	2b13      	cmp	r3, #19
 801afee:	d806      	bhi.n	801affe <tcp_rst+0x36>
 801aff0:	4b35      	ldr	r3, [pc, #212]	@ (801b0c8 <tcp_rst+0x100>)
 801aff2:	f240 524c 	movw	r2, #1356	@ 0x54c
 801aff6:	4935      	ldr	r1, [pc, #212]	@ (801b0cc <tcp_rst+0x104>)
 801aff8:	4835      	ldr	r0, [pc, #212]	@ (801b0d0 <tcp_rst+0x108>)
 801affa:	f006 fb93 	bl	8021724 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801affe:	69fb      	ldr	r3, [r7, #28]
 801b000:	685b      	ldr	r3, [r3, #4]
 801b002:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 801b004:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b006:	4618      	mov	r0, r3
 801b008:	f7f9 f944 	bl	8014294 <lwip_htons>
 801b00c:	4603      	mov	r3, r0
 801b00e:	461a      	mov	r2, r3
 801b010:	69bb      	ldr	r3, [r7, #24]
 801b012:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801b014:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b016:	4618      	mov	r0, r3
 801b018:	f7f9 f93c 	bl	8014294 <lwip_htons>
 801b01c:	4603      	mov	r3, r0
 801b01e:	461a      	mov	r2, r3
 801b020:	69bb      	ldr	r3, [r7, #24]
 801b022:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801b024:	68f8      	ldr	r0, [r7, #12]
 801b026:	f7f9 f942 	bl	80142ae <lwip_htonl>
 801b02a:	4602      	mov	r2, r0
 801b02c:	69bb      	ldr	r3, [r7, #24]
 801b02e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801b030:	68b8      	ldr	r0, [r7, #8]
 801b032:	f7f9 f93c 	bl	80142ae <lwip_htonl>
 801b036:	4602      	mov	r2, r0
 801b038:	69bb      	ldr	r3, [r7, #24]
 801b03a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801b03c:	f245 0014 	movw	r0, #20500	@ 0x5014
 801b040:	f7f9 f928 	bl	8014294 <lwip_htons>
 801b044:	4603      	mov	r3, r0
 801b046:	461a      	mov	r2, r3
 801b048:	69bb      	ldr	r3, [r7, #24]
 801b04a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801b04c:	69bb      	ldr	r3, [r7, #24]
 801b04e:	2200      	movs	r2, #0
 801b050:	f042 0208 	orr.w	r2, r2, #8
 801b054:	739a      	strb	r2, [r3, #14]
 801b056:	2200      	movs	r2, #0
 801b058:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801b05c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801b05e:	69bb      	ldr	r3, [r7, #24]
 801b060:	2200      	movs	r2, #0
 801b062:	741a      	strb	r2, [r3, #16]
 801b064:	2200      	movs	r2, #0
 801b066:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801b068:	69bb      	ldr	r3, [r7, #24]
 801b06a:	2200      	movs	r2, #0
 801b06c:	749a      	strb	r2, [r3, #18]
 801b06e:	2200      	movs	r2, #0
 801b070:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 801b072:	4b18      	ldr	r3, [pc, #96]	@ (801b0d4 <tcp_rst+0x10c>)
 801b074:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b078:	3301      	adds	r3, #1
 801b07a:	b29a      	uxth	r2, r3
 801b07c:	4b15      	ldr	r3, [pc, #84]	@ (801b0d4 <tcp_rst+0x10c>)
 801b07e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);
 801b082:	4b14      	ldr	r3, [pc, #80]	@ (801b0d4 <tcp_rst+0x10c>)
 801b084:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 801b088:	3301      	adds	r3, #1
 801b08a:	4a12      	ldr	r2, [pc, #72]	@ (801b0d4 <tcp_rst+0x10c>)
 801b08c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138

  netif = ip_route(local_ip, remote_ip);
 801b090:	6838      	ldr	r0, [r7, #0]
 801b092:	f004 f899 	bl	801f1c8 <ip4_route>
 801b096:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801b098:	697b      	ldr	r3, [r7, #20]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d00b      	beq.n	801b0b6 <tcp_rst+0xee>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801b09e:	697b      	ldr	r3, [r7, #20]
 801b0a0:	9302      	str	r3, [sp, #8]
 801b0a2:	2306      	movs	r3, #6
 801b0a4:	9301      	str	r3, [sp, #4]
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	9300      	str	r3, [sp, #0]
 801b0aa:	23ff      	movs	r3, #255	@ 0xff
 801b0ac:	683a      	ldr	r2, [r7, #0]
 801b0ae:	6879      	ldr	r1, [r7, #4]
 801b0b0:	69f8      	ldr	r0, [r7, #28]
 801b0b2:	f004 fafb 	bl	801f6ac <ip4_output_if>
  }
  pbuf_free(p);
 801b0b6:	69f8      	ldr	r0, [r7, #28]
 801b0b8:	f7fa fb44 	bl	8015744 <pbuf_free>
 801b0bc:	e000      	b.n	801b0c0 <tcp_rst+0xf8>
    return;
 801b0be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b0c0:	3720      	adds	r7, #32
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	bd80      	pop	{r7, pc}
 801b0c6:	bf00      	nop
 801b0c8:	080261c8 	.word	0x080261c8
 801b0cc:	080261fc 	.word	0x080261fc
 801b0d0:	0802622c 	.word	0x0802622c
 801b0d4:	2000bc24 	.word	0x2000bc24

0801b0d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b084      	sub	sp, #16
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d029      	beq.n	801b13c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0ec:	60fb      	str	r3, [r7, #12]
 801b0ee:	e002      	b.n	801b0f6 <tcp_rexmit_rto+0x1e>
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	60fb      	str	r3, [r7, #12]
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d1f8      	bne.n	801b0f0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801b102:	68fb      	ldr	r3, [r7, #12]
 801b104:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	2200      	movs	r2, #0
 801b112:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b11a:	2bff      	cmp	r3, #255	@ 0xff
 801b11c:	d007      	beq.n	801b12e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b124:	3301      	adds	r3, #1
 801b126:	b2da      	uxtb	r2, r3
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	2200      	movs	r2, #0
 801b132:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801b134:	6878      	ldr	r0, [r7, #4]
 801b136:	f7ff fcaf 	bl	801aa98 <tcp_output>
 801b13a:	e000      	b.n	801b13e <tcp_rexmit_rto+0x66>
    return;
 801b13c:	bf00      	nop
}
 801b13e:	3710      	adds	r7, #16
 801b140:	46bd      	mov	sp, r7
 801b142:	bd80      	pop	{r7, pc}

0801b144 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b144:	b590      	push	{r4, r7, lr}
 801b146:	b085      	sub	sp, #20
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b150:	2b00      	cmp	r3, #0
 801b152:	d04a      	beq.n	801b1ea <tcp_rexmit+0xa6>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b158:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	681a      	ldr	r2, [r3, #0]
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	3368      	adds	r3, #104	@ 0x68
 801b166:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b168:	e002      	b.n	801b170 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d011      	beq.n	801b19c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	68db      	ldr	r3, [r3, #12]
 801b17e:	685b      	ldr	r3, [r3, #4]
 801b180:	4618      	mov	r0, r3
 801b182:	f7f9 f894 	bl	80142ae <lwip_htonl>
 801b186:	4604      	mov	r4, r0
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	68db      	ldr	r3, [r3, #12]
 801b18c:	685b      	ldr	r3, [r3, #4]
 801b18e:	4618      	mov	r0, r3
 801b190:	f7f9 f88d 	bl	80142ae <lwip_htonl>
 801b194:	4603      	mov	r3, r0
 801b196:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b198:	2b00      	cmp	r3, #0
 801b19a:	dbe6      	blt.n	801b16a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	681a      	ldr	r2, [r3, #0]
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	68ba      	ldr	r2, [r7, #8]
 801b1a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b1aa:	68bb      	ldr	r3, [r7, #8]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d103      	bne.n	801b1ba <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b1c0:	2bff      	cmp	r3, #255	@ 0xff
 801b1c2:	d007      	beq.n	801b1d4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b1ca:	3301      	adds	r3, #1
 801b1cc:	b2da      	uxtb	r2, r3
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	2200      	movs	r2, #0
 801b1d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
 801b1da:	4b06      	ldr	r3, [pc, #24]	@ (801b1f4 <tcp_rexmit+0xb0>)
 801b1dc:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801b1e0:	3301      	adds	r3, #1
 801b1e2:	4a04      	ldr	r2, [pc, #16]	@ (801b1f4 <tcp_rexmit+0xb0>)
 801b1e4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
 801b1e8:	e000      	b.n	801b1ec <tcp_rexmit+0xa8>
    return;
 801b1ea:	bf00      	nop
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801b1ec:	3714      	adds	r7, #20
 801b1ee:	46bd      	mov	sp, r7
 801b1f0:	bd90      	pop	{r4, r7, pc}
 801b1f2:	bf00      	nop
 801b1f4:	2000bc24 	.word	0x2000bc24

0801b1f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b082      	sub	sp, #8
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b204:	2b00      	cmp	r3, #0
 801b206:	d041      	beq.n	801b28c <tcp_rexmit_fast+0x94>
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	7e9b      	ldrb	r3, [r3, #26]
 801b20c:	f003 0304 	and.w	r3, r3, #4
 801b210:	2b00      	cmp	r3, #0
 801b212:	d13b      	bne.n	801b28c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f7ff ff95 	bl	801b144 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b226:	4293      	cmp	r3, r2
 801b228:	bf28      	it	cs
 801b22a:	4613      	movcs	r3, r2
 801b22c:	b29b      	uxth	r3, r3
 801b22e:	0fda      	lsrs	r2, r3, #31
 801b230:	4413      	add	r3, r2
 801b232:	105b      	asrs	r3, r3, #1
 801b234:	b29a      	uxth	r2, r3
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801b242:	461a      	mov	r2, r3
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b248:	005b      	lsls	r3, r3, #1
 801b24a:	429a      	cmp	r2, r3
 801b24c:	d206      	bcs.n	801b25c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b252:	005b      	lsls	r3, r3, #1
 801b254:	b29a      	uxth	r2, r3
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b266:	4619      	mov	r1, r3
 801b268:	0049      	lsls	r1, r1, #1
 801b26a:	440b      	add	r3, r1
 801b26c:	b29b      	uxth	r3, r3
 801b26e:	4413      	add	r3, r2
 801b270:	b29a      	uxth	r2, r3
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	7e9b      	ldrb	r3, [r3, #26]
 801b27c:	f043 0304 	orr.w	r3, r3, #4
 801b280:	b2da      	uxtb	r2, r3
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	2200      	movs	r2, #0
 801b28a:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 801b28c:	bf00      	nop
 801b28e:	3708      	adds	r7, #8
 801b290:	46bd      	mov	sp, r7
 801b292:	bd80      	pop	{r7, pc}

0801b294 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b294:	b580      	push	{r7, lr}
 801b296:	b08a      	sub	sp, #40	@ 0x28
 801b298:	af04      	add	r7, sp, #16
 801b29a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b2a0:	3b01      	subs	r3, #1
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f7f9 f803 	bl	80142ae <lwip_htonl>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	2100      	movs	r1, #0
 801b2ae:	6878      	ldr	r0, [r7, #4]
 801b2b0:	f7fe fcf0 	bl	8019c94 <tcp_output_alloc_header>
 801b2b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b2b6:	693b      	ldr	r3, [r7, #16]
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d102      	bne.n	801b2c2 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b2bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b2c0:	e029      	b.n	801b316 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	3304      	adds	r3, #4
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f003 ff7e 	bl	801f1c8 <ip4_route>
 801b2cc:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d102      	bne.n	801b2da <tcp_keepalive+0x46>
    err = ERR_RTE;
 801b2d4:	23fc      	movs	r3, #252	@ 0xfc
 801b2d6:	75fb      	strb	r3, [r7, #23]
 801b2d8:	e018      	b.n	801b30c <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 801b2da:	4b11      	ldr	r3, [pc, #68]	@ (801b320 <tcp_keepalive+0x8c>)
 801b2dc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b2e0:	3301      	adds	r3, #1
 801b2e2:	b29a      	uxth	r2, r3
 801b2e4:	4b0e      	ldr	r3, [pc, #56]	@ (801b320 <tcp_keepalive+0x8c>)
 801b2e6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801b2ea:	6879      	ldr	r1, [r7, #4]
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	1d1a      	adds	r2, r3, #4
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	7a98      	ldrb	r0, [r3, #10]
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	9302      	str	r3, [sp, #8]
 801b2f8:	2306      	movs	r3, #6
 801b2fa:	9301      	str	r3, [sp, #4]
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	9300      	str	r3, [sp, #0]
 801b300:	4603      	mov	r3, r0
 801b302:	6938      	ldr	r0, [r7, #16]
 801b304:	f004 f9d2 	bl	801f6ac <ip4_output_if>
 801b308:	4603      	mov	r3, r0
 801b30a:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801b30c:	6938      	ldr	r0, [r7, #16]
 801b30e:	f7fa fa19 	bl	8015744 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b316:	4618      	mov	r0, r3
 801b318:	3718      	adds	r7, #24
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bd80      	pop	{r7, pc}
 801b31e:	bf00      	nop
 801b320:	2000bc24 	.word	0x2000bc24

0801b324 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b324:	b590      	push	{r4, r7, lr}
 801b326:	b08f      	sub	sp, #60	@ 0x3c
 801b328:	af04      	add	r7, sp, #16
 801b32a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b330:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801b332:	6a3b      	ldr	r3, [r7, #32]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d102      	bne.n	801b33e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b33c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801b33e:	6a3b      	ldr	r3, [r7, #32]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d101      	bne.n	801b348 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801b344:	2300      	movs	r3, #0
 801b346:	e08d      	b.n	801b464 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b348:	6a3b      	ldr	r3, [r7, #32]
 801b34a:	68db      	ldr	r3, [r3, #12]
 801b34c:	899b      	ldrh	r3, [r3, #12]
 801b34e:	b29b      	uxth	r3, r3
 801b350:	4618      	mov	r0, r3
 801b352:	f7f8 ff9f 	bl	8014294 <lwip_htons>
 801b356:	4603      	mov	r3, r0
 801b358:	f003 0301 	and.w	r3, r3, #1
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d005      	beq.n	801b36c <tcp_zero_window_probe+0x48>
 801b360:	6a3b      	ldr	r3, [r7, #32]
 801b362:	891b      	ldrh	r3, [r3, #8]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d101      	bne.n	801b36c <tcp_zero_window_probe+0x48>
 801b368:	2301      	movs	r3, #1
 801b36a:	e000      	b.n	801b36e <tcp_zero_window_probe+0x4a>
 801b36c:	2300      	movs	r3, #0
 801b36e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b370:	7ffb      	ldrb	r3, [r7, #31]
 801b372:	2b00      	cmp	r3, #0
 801b374:	bf0c      	ite	eq
 801b376:	2301      	moveq	r3, #1
 801b378:	2300      	movne	r3, #0
 801b37a:	b2db      	uxtb	r3, r3
 801b37c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801b37e:	6a3b      	ldr	r3, [r7, #32]
 801b380:	68db      	ldr	r3, [r3, #12]
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	8bba      	ldrh	r2, [r7, #28]
 801b386:	2100      	movs	r1, #0
 801b388:	6878      	ldr	r0, [r7, #4]
 801b38a:	f7fe fc83 	bl	8019c94 <tcp_output_alloc_header>
 801b38e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b390:	69bb      	ldr	r3, [r7, #24]
 801b392:	2b00      	cmp	r3, #0
 801b394:	d102      	bne.n	801b39c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b396:	f04f 33ff 	mov.w	r3, #4294967295
 801b39a:	e063      	b.n	801b464 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b39c:	69bb      	ldr	r3, [r7, #24]
 801b39e:	685b      	ldr	r3, [r3, #4]
 801b3a0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b3a2:	7ffb      	ldrb	r3, [r7, #31]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d00e      	beq.n	801b3c6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b3a8:	697b      	ldr	r3, [r7, #20]
 801b3aa:	899b      	ldrh	r3, [r3, #12]
 801b3ac:	b29b      	uxth	r3, r3
 801b3ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b3b2:	b29c      	uxth	r4, r3
 801b3b4:	2011      	movs	r0, #17
 801b3b6:	f7f8 ff6d 	bl	8014294 <lwip_htons>
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	4323      	orrs	r3, r4
 801b3be:	b29a      	uxth	r2, r3
 801b3c0:	697b      	ldr	r3, [r7, #20]
 801b3c2:	819a      	strh	r2, [r3, #12]
 801b3c4:	e010      	b.n	801b3e8 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b3c6:	69bb      	ldr	r3, [r7, #24]
 801b3c8:	685b      	ldr	r3, [r3, #4]
 801b3ca:	3314      	adds	r3, #20
 801b3cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b3ce:	6a3b      	ldr	r3, [r7, #32]
 801b3d0:	6858      	ldr	r0, [r3, #4]
 801b3d2:	6a3b      	ldr	r3, [r7, #32]
 801b3d4:	685b      	ldr	r3, [r3, #4]
 801b3d6:	891a      	ldrh	r2, [r3, #8]
 801b3d8:	6a3b      	ldr	r3, [r7, #32]
 801b3da:	891b      	ldrh	r3, [r3, #8]
 801b3dc:	1ad3      	subs	r3, r2, r3
 801b3de:	b29b      	uxth	r3, r3
 801b3e0:	2201      	movs	r2, #1
 801b3e2:	6939      	ldr	r1, [r7, #16]
 801b3e4:	f7fa fbac 	bl	8015b40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b3e8:	6a3b      	ldr	r3, [r7, #32]
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	685b      	ldr	r3, [r3, #4]
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7f8 ff5d 	bl	80142ae <lwip_htonl>
 801b3f4:	4603      	mov	r3, r0
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	1ad3      	subs	r3, r2, r3
 801b402:	2b00      	cmp	r3, #0
 801b404:	da02      	bge.n	801b40c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	68fa      	ldr	r2, [r7, #12]
 801b40a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	3304      	adds	r3, #4
 801b410:	4618      	mov	r0, r3
 801b412:	f003 fed9 	bl	801f1c8 <ip4_route>
 801b416:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 801b418:	68bb      	ldr	r3, [r7, #8]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d103      	bne.n	801b426 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801b41e:	23fc      	movs	r3, #252	@ 0xfc
 801b420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b424:	e019      	b.n	801b45a <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 801b426:	4b11      	ldr	r3, [pc, #68]	@ (801b46c <tcp_zero_window_probe+0x148>)
 801b428:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b42c:	3301      	adds	r3, #1
 801b42e:	b29a      	uxth	r2, r3
 801b430:	4b0e      	ldr	r3, [pc, #56]	@ (801b46c <tcp_zero_window_probe+0x148>)
 801b432:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b436:	6879      	ldr	r1, [r7, #4]
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	1d1a      	adds	r2, r3, #4
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	7a98      	ldrb	r0, [r3, #10]
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	9302      	str	r3, [sp, #8]
 801b444:	2306      	movs	r3, #6
 801b446:	9301      	str	r3, [sp, #4]
 801b448:	2300      	movs	r3, #0
 801b44a:	9300      	str	r3, [sp, #0]
 801b44c:	4603      	mov	r3, r0
 801b44e:	69b8      	ldr	r0, [r7, #24]
 801b450:	f004 f92c 	bl	801f6ac <ip4_output_if>
 801b454:	4603      	mov	r3, r0
 801b456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801b45a:	69b8      	ldr	r0, [r7, #24]
 801b45c:	f7fa f972 	bl	8015744 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b460:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b464:	4618      	mov	r0, r3
 801b466:	372c      	adds	r7, #44	@ 0x2c
 801b468:	46bd      	mov	sp, r7
 801b46a:	bd90      	pop	{r4, r7, pc}
 801b46c:	2000bc24 	.word	0x2000bc24

0801b470 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b470:	b580      	push	{r7, lr}
 801b472:	b082      	sub	sp, #8
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b478:	f7fa fd08 	bl	8015e8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b47c:	4b0a      	ldr	r3, [pc, #40]	@ (801b4a8 <tcpip_tcp_timer+0x38>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d103      	bne.n	801b48c <tcpip_tcp_timer+0x1c>
 801b484:	4b09      	ldr	r3, [pc, #36]	@ (801b4ac <tcpip_tcp_timer+0x3c>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d005      	beq.n	801b498 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b48c:	2200      	movs	r2, #0
 801b48e:	4908      	ldr	r1, [pc, #32]	@ (801b4b0 <tcpip_tcp_timer+0x40>)
 801b490:	20fa      	movs	r0, #250	@ 0xfa
 801b492:	f000 f86f 	bl	801b574 <sys_timeout>
 801b496:	e003      	b.n	801b4a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b498:	4b06      	ldr	r3, [pc, #24]	@ (801b4b4 <tcpip_tcp_timer+0x44>)
 801b49a:	2200      	movs	r2, #0
 801b49c:	601a      	str	r2, [r3, #0]
  }
}
 801b49e:	bf00      	nop
 801b4a0:	bf00      	nop
 801b4a2:	3708      	adds	r7, #8
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	2000bdc8 	.word	0x2000bdc8
 801b4ac:	2000bdcc 	.word	0x2000bdcc
 801b4b0:	0801b471 	.word	0x0801b471
 801b4b4:	2000be14 	.word	0x2000be14

0801b4b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b4bc:	4b0a      	ldr	r3, [pc, #40]	@ (801b4e8 <tcp_timer_needed+0x30>)
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d10f      	bne.n	801b4e4 <tcp_timer_needed+0x2c>
 801b4c4:	4b09      	ldr	r3, [pc, #36]	@ (801b4ec <tcp_timer_needed+0x34>)
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d103      	bne.n	801b4d4 <tcp_timer_needed+0x1c>
 801b4cc:	4b08      	ldr	r3, [pc, #32]	@ (801b4f0 <tcp_timer_needed+0x38>)
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d007      	beq.n	801b4e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b4d4:	4b04      	ldr	r3, [pc, #16]	@ (801b4e8 <tcp_timer_needed+0x30>)
 801b4d6:	2201      	movs	r2, #1
 801b4d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b4da:	2200      	movs	r2, #0
 801b4dc:	4905      	ldr	r1, [pc, #20]	@ (801b4f4 <tcp_timer_needed+0x3c>)
 801b4de:	20fa      	movs	r0, #250	@ 0xfa
 801b4e0:	f000 f848 	bl	801b574 <sys_timeout>
  }
}
 801b4e4:	bf00      	nop
 801b4e6:	bd80      	pop	{r7, pc}
 801b4e8:	2000be14 	.word	0x2000be14
 801b4ec:	2000bdc8 	.word	0x2000bdc8
 801b4f0:	2000bdcc 	.word	0x2000bdcc
 801b4f4:	0801b471 	.word	0x0801b471

0801b4f8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b084      	sub	sp, #16
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	685b      	ldr	r3, [r3, #4]
 801b508:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	687a      	ldr	r2, [r7, #4]
 801b510:	4903      	ldr	r1, [pc, #12]	@ (801b520 <cyclic_timer+0x28>)
 801b512:	4618      	mov	r0, r3
 801b514:	f000 f82e 	bl	801b574 <sys_timeout>
}
 801b518:	bf00      	nop
 801b51a:	3710      	adds	r7, #16
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	0801b4f9 	.word	0x0801b4f9

0801b524 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b082      	sub	sp, #8
 801b528:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b52a:	2301      	movs	r3, #1
 801b52c:	607b      	str	r3, [r7, #4]
 801b52e:	e00e      	b.n	801b54e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801b530:	4a0d      	ldr	r2, [pc, #52]	@ (801b568 <sys_timeouts_init+0x44>)
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	00db      	lsls	r3, r3, #3
 801b53c:	4a0a      	ldr	r2, [pc, #40]	@ (801b568 <sys_timeouts_init+0x44>)
 801b53e:	4413      	add	r3, r2
 801b540:	461a      	mov	r2, r3
 801b542:	490a      	ldr	r1, [pc, #40]	@ (801b56c <sys_timeouts_init+0x48>)
 801b544:	f000 f816 	bl	801b574 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	3301      	adds	r3, #1
 801b54c:	607b      	str	r3, [r7, #4]
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	2b04      	cmp	r3, #4
 801b552:	d9ed      	bls.n	801b530 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801b554:	f7f0 f85c 	bl	800b610 <sys_now>
 801b558:	4603      	mov	r3, r0
 801b55a:	4a05      	ldr	r2, [pc, #20]	@ (801b570 <sys_timeouts_init+0x4c>)
 801b55c:	6013      	str	r3, [r2, #0]
}
 801b55e:	bf00      	nop
 801b560:	3708      	adds	r7, #8
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
 801b566:	bf00      	nop
 801b568:	08030624 	.word	0x08030624
 801b56c:	0801b4f9 	.word	0x0801b4f9
 801b570:	2000be10 	.word	0x2000be10

0801b574 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b574:	b580      	push	{r7, lr}
 801b576:	b088      	sub	sp, #32
 801b578:	af00      	add	r7, sp, #0
 801b57a:	60f8      	str	r0, [r7, #12]
 801b57c:	60b9      	str	r1, [r7, #8]
 801b57e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b580:	2006      	movs	r0, #6
 801b582:	f7f9 fb31 	bl	8014be8 <memp_malloc>
 801b586:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 801b588:	697b      	ldr	r3, [r7, #20]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d10a      	bne.n	801b5a4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b58e:	697b      	ldr	r3, [r7, #20]
 801b590:	2b00      	cmp	r3, #0
 801b592:	f040 8084 	bne.w	801b69e <sys_timeout+0x12a>
 801b596:	4b44      	ldr	r3, [pc, #272]	@ (801b6a8 <sys_timeout+0x134>)
 801b598:	22d4      	movs	r2, #212	@ 0xd4
 801b59a:	4944      	ldr	r1, [pc, #272]	@ (801b6ac <sys_timeout+0x138>)
 801b59c:	4844      	ldr	r0, [pc, #272]	@ (801b6b0 <sys_timeout+0x13c>)
 801b59e:	f006 f8c1 	bl	8021724 <iprintf>
    return;
 801b5a2:	e07c      	b.n	801b69e <sys_timeout+0x12a>
  }

  now = sys_now();
 801b5a4:	f7f0 f834 	bl	800b610 <sys_now>
 801b5a8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801b5aa:	4b42      	ldr	r3, [pc, #264]	@ (801b6b4 <sys_timeout+0x140>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d105      	bne.n	801b5be <sys_timeout+0x4a>
    diff = 0;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801b5b6:	4a40      	ldr	r2, [pc, #256]	@ (801b6b8 <sys_timeout+0x144>)
 801b5b8:	693b      	ldr	r3, [r7, #16]
 801b5ba:	6013      	str	r3, [r2, #0]
 801b5bc:	e004      	b.n	801b5c8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801b5be:	4b3e      	ldr	r3, [pc, #248]	@ (801b6b8 <sys_timeout+0x144>)
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	693a      	ldr	r2, [r7, #16]
 801b5c4:	1ad3      	subs	r3, r2, r3
 801b5c6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801b5c8:	697b      	ldr	r3, [r7, #20]
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	68ba      	ldr	r2, [r7, #8]
 801b5d2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b5d4:	697b      	ldr	r3, [r7, #20]
 801b5d6:	687a      	ldr	r2, [r7, #4]
 801b5d8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801b5da:	68fa      	ldr	r2, [r7, #12]
 801b5dc:	69bb      	ldr	r3, [r7, #24]
 801b5de:	441a      	add	r2, r3
 801b5e0:	697b      	ldr	r3, [r7, #20]
 801b5e2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b5e4:	4b33      	ldr	r3, [pc, #204]	@ (801b6b4 <sys_timeout+0x140>)
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d103      	bne.n	801b5f4 <sys_timeout+0x80>
    next_timeout = timeout;
 801b5ec:	4a31      	ldr	r2, [pc, #196]	@ (801b6b4 <sys_timeout+0x140>)
 801b5ee:	697b      	ldr	r3, [r7, #20]
 801b5f0:	6013      	str	r3, [r2, #0]
    return;
 801b5f2:	e055      	b.n	801b6a0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801b5f4:	4b2f      	ldr	r3, [pc, #188]	@ (801b6b4 <sys_timeout+0x140>)
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	68fa      	ldr	r2, [r7, #12]
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d20f      	bcs.n	801b620 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801b600:	4b2c      	ldr	r3, [pc, #176]	@ (801b6b4 <sys_timeout+0x140>)
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	6859      	ldr	r1, [r3, #4]
 801b606:	4b2b      	ldr	r3, [pc, #172]	@ (801b6b4 <sys_timeout+0x140>)
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	68fa      	ldr	r2, [r7, #12]
 801b60c:	1a8a      	subs	r2, r1, r2
 801b60e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801b610:	4b28      	ldr	r3, [pc, #160]	@ (801b6b4 <sys_timeout+0x140>)
 801b612:	681a      	ldr	r2, [r3, #0]
 801b614:	697b      	ldr	r3, [r7, #20]
 801b616:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b618:	4a26      	ldr	r2, [pc, #152]	@ (801b6b4 <sys_timeout+0x140>)
 801b61a:	697b      	ldr	r3, [r7, #20]
 801b61c:	6013      	str	r3, [r2, #0]
 801b61e:	e03f      	b.n	801b6a0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b620:	4b24      	ldr	r3, [pc, #144]	@ (801b6b4 <sys_timeout+0x140>)
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	61fb      	str	r3, [r7, #28]
 801b626:	e036      	b.n	801b696 <sys_timeout+0x122>
      timeout->time -= t->time;
 801b628:	697b      	ldr	r3, [r7, #20]
 801b62a:	685a      	ldr	r2, [r3, #4]
 801b62c:	69fb      	ldr	r3, [r7, #28]
 801b62e:	685b      	ldr	r3, [r3, #4]
 801b630:	1ad2      	subs	r2, r2, r3
 801b632:	697b      	ldr	r3, [r7, #20]
 801b634:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801b636:	69fb      	ldr	r3, [r7, #28]
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d006      	beq.n	801b64c <sys_timeout+0xd8>
 801b63e:	69fb      	ldr	r3, [r7, #28]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	685a      	ldr	r2, [r3, #4]
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	685b      	ldr	r3, [r3, #4]
 801b648:	429a      	cmp	r2, r3
 801b64a:	d921      	bls.n	801b690 <sys_timeout+0x11c>
        if (t->next != NULL) {
 801b64c:	69fb      	ldr	r3, [r7, #28]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d009      	beq.n	801b668 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 801b654:	69fb      	ldr	r3, [r7, #28]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	6859      	ldr	r1, [r3, #4]
 801b65a:	697b      	ldr	r3, [r7, #20]
 801b65c:	685a      	ldr	r2, [r3, #4]
 801b65e:	69fb      	ldr	r3, [r7, #28]
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	1a8a      	subs	r2, r1, r2
 801b664:	605a      	str	r2, [r3, #4]
 801b666:	e00b      	b.n	801b680 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 801b668:	697b      	ldr	r3, [r7, #20]
 801b66a:	685b      	ldr	r3, [r3, #4]
 801b66c:	68fa      	ldr	r2, [r7, #12]
 801b66e:	429a      	cmp	r2, r3
 801b670:	d206      	bcs.n	801b680 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801b672:	4b10      	ldr	r3, [pc, #64]	@ (801b6b4 <sys_timeout+0x140>)
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	685a      	ldr	r2, [r3, #4]
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	441a      	add	r2, r3
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 801b680:	69fb      	ldr	r3, [r7, #28]
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	697b      	ldr	r3, [r7, #20]
 801b686:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b688:	69fb      	ldr	r3, [r7, #28]
 801b68a:	697a      	ldr	r2, [r7, #20]
 801b68c:	601a      	str	r2, [r3, #0]
        break;
 801b68e:	e007      	b.n	801b6a0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b690:	69fb      	ldr	r3, [r7, #28]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	61fb      	str	r3, [r7, #28]
 801b696:	69fb      	ldr	r3, [r7, #28]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d1c5      	bne.n	801b628 <sys_timeout+0xb4>
 801b69c:	e000      	b.n	801b6a0 <sys_timeout+0x12c>
    return;
 801b69e:	bf00      	nop
      }
    }
  }
}
 801b6a0:	3720      	adds	r7, #32
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	bd80      	pop	{r7, pc}
 801b6a6:	bf00      	nop
 801b6a8:	0802660c 	.word	0x0802660c
 801b6ac:	08026640 	.word	0x08026640
 801b6b0:	08026680 	.word	0x08026680
 801b6b4:	2000be0c 	.word	0x2000be0c
 801b6b8:	2000be10 	.word	0x2000be10

0801b6bc <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b086      	sub	sp, #24
 801b6c0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801b6c2:	4b24      	ldr	r3, [pc, #144]	@ (801b754 <sys_check_timeouts+0x98>)
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d040      	beq.n	801b74c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801b6ca:	f7ef ffa1 	bl	800b610 <sys_now>
 801b6ce:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801b6d0:	4b21      	ldr	r3, [pc, #132]	@ (801b758 <sys_check_timeouts+0x9c>)
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	68fa      	ldr	r2, [r7, #12]
 801b6d6:	1ad3      	subs	r3, r2, r3
 801b6d8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 801b6da:	4b20      	ldr	r3, [pc, #128]	@ (801b75c <sys_check_timeouts+0xa0>)
 801b6dc:	781b      	ldrb	r3, [r3, #0]
 801b6de:	b2db      	uxtb	r3, r3
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d001      	beq.n	801b6e8 <sys_check_timeouts+0x2c>
 801b6e4:	f7f9 fc86 	bl	8014ff4 <pbuf_free_ooseq>
      had_one = 0;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801b6ec:	4b19      	ldr	r3, [pc, #100]	@ (801b754 <sys_check_timeouts+0x98>)
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d026      	beq.n	801b746 <sys_check_timeouts+0x8a>
 801b6f8:	68bb      	ldr	r3, [r7, #8]
 801b6fa:	685b      	ldr	r3, [r3, #4]
 801b6fc:	697a      	ldr	r2, [r7, #20]
 801b6fe:	429a      	cmp	r2, r3
 801b700:	d321      	bcc.n	801b746 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 801b702:	2301      	movs	r3, #1
 801b704:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801b706:	68bb      	ldr	r3, [r7, #8]
 801b708:	685a      	ldr	r2, [r3, #4]
 801b70a:	4b13      	ldr	r3, [pc, #76]	@ (801b758 <sys_check_timeouts+0x9c>)
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	4413      	add	r3, r2
 801b710:	4a11      	ldr	r2, [pc, #68]	@ (801b758 <sys_check_timeouts+0x9c>)
 801b712:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	685b      	ldr	r3, [r3, #4]
 801b718:	697a      	ldr	r2, [r7, #20]
 801b71a:	1ad3      	subs	r3, r2, r3
 801b71c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	4a0c      	ldr	r2, [pc, #48]	@ (801b754 <sys_check_timeouts+0x98>)
 801b724:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801b726:	68bb      	ldr	r3, [r7, #8]
 801b728:	689b      	ldr	r3, [r3, #8]
 801b72a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	68db      	ldr	r3, [r3, #12]
 801b730:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b732:	68b9      	ldr	r1, [r7, #8]
 801b734:	2006      	movs	r0, #6
 801b736:	f7f9 faa9 	bl	8014c8c <memp_free>
        if (handler != NULL) {
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d002      	beq.n	801b746 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	6838      	ldr	r0, [r7, #0]
 801b744:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 801b746:	7cfb      	ldrb	r3, [r7, #19]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d1c6      	bne.n	801b6da <sys_check_timeouts+0x1e>
  }
}
 801b74c:	bf00      	nop
 801b74e:	3718      	adds	r7, #24
 801b750:	46bd      	mov	sp, r7
 801b752:	bd80      	pop	{r7, pc}
 801b754:	2000be0c 	.word	0x2000be0c
 801b758:	2000be10 	.word	0x2000be10
 801b75c:	2000bc21 	.word	0x2000bc21

0801b760 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b760:	b480      	push	{r7}
 801b762:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801b764:	bf00      	nop
 801b766:	46bd      	mov	sp, r7
 801b768:	bc80      	pop	{r7}
 801b76a:	4770      	bx	lr

0801b76c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b76c:	b480      	push	{r7}
 801b76e:	b083      	sub	sp, #12
 801b770:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b772:	2300      	movs	r3, #0
 801b774:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b776:	4b17      	ldr	r3, [pc, #92]	@ (801b7d4 <udp_new_port+0x68>)
 801b778:	881b      	ldrh	r3, [r3, #0]
 801b77a:	1c5a      	adds	r2, r3, #1
 801b77c:	b291      	uxth	r1, r2
 801b77e:	4a15      	ldr	r2, [pc, #84]	@ (801b7d4 <udp_new_port+0x68>)
 801b780:	8011      	strh	r1, [r2, #0]
 801b782:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b786:	4293      	cmp	r3, r2
 801b788:	d103      	bne.n	801b792 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b78a:	4b12      	ldr	r3, [pc, #72]	@ (801b7d4 <udp_new_port+0x68>)
 801b78c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b790:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b792:	4b11      	ldr	r3, [pc, #68]	@ (801b7d8 <udp_new_port+0x6c>)
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	603b      	str	r3, [r7, #0]
 801b798:	e011      	b.n	801b7be <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b79a:	683b      	ldr	r3, [r7, #0]
 801b79c:	8a5a      	ldrh	r2, [r3, #18]
 801b79e:	4b0d      	ldr	r3, [pc, #52]	@ (801b7d4 <udp_new_port+0x68>)
 801b7a0:	881b      	ldrh	r3, [r3, #0]
 801b7a2:	429a      	cmp	r2, r3
 801b7a4:	d108      	bne.n	801b7b8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b7a6:	88fb      	ldrh	r3, [r7, #6]
 801b7a8:	3301      	adds	r3, #1
 801b7aa:	80fb      	strh	r3, [r7, #6]
 801b7ac:	88fb      	ldrh	r3, [r7, #6]
 801b7ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b7b2:	d3e0      	bcc.n	801b776 <udp_new_port+0xa>
        return 0;
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	e007      	b.n	801b7c8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7b8:	683b      	ldr	r3, [r7, #0]
 801b7ba:	68db      	ldr	r3, [r3, #12]
 801b7bc:	603b      	str	r3, [r7, #0]
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d1ea      	bne.n	801b79a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b7c4:	4b03      	ldr	r3, [pc, #12]	@ (801b7d4 <udp_new_port+0x68>)
 801b7c6:	881b      	ldrh	r3, [r3, #0]
}
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	370c      	adds	r7, #12
 801b7cc:	46bd      	mov	sp, r7
 801b7ce:	bc80      	pop	{r7}
 801b7d0:	4770      	bx	lr
 801b7d2:	bf00      	nop
 801b7d4:	20000118 	.word	0x20000118
 801b7d8:	2000be18 	.word	0x2000be18

0801b7dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b7dc:	b480      	push	{r7}
 801b7de:	b085      	sub	sp, #20
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	60f8      	str	r0, [r7, #12]
 801b7e4:	60b9      	str	r1, [r7, #8]
 801b7e6:	4613      	mov	r3, r2
 801b7e8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b7ea:	79fb      	ldrb	r3, [r7, #7]
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d018      	beq.n	801b822 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d013      	beq.n	801b81e <udp_input_local_match+0x42>
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d00f      	beq.n	801b81e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b7fe:	4b13      	ldr	r3, [pc, #76]	@ (801b84c <udp_input_local_match+0x70>)
 801b800:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b802:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b806:	d00a      	beq.n	801b81e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	681a      	ldr	r2, [r3, #0]
 801b80c:	4b0f      	ldr	r3, [pc, #60]	@ (801b84c <udp_input_local_match+0x70>)
 801b80e:	695b      	ldr	r3, [r3, #20]
 801b810:	405a      	eors	r2, r3
 801b812:	68bb      	ldr	r3, [r7, #8]
 801b814:	3308      	adds	r3, #8
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d110      	bne.n	801b840 <udp_input_local_match+0x64>
          return 1;
 801b81e:	2301      	movs	r3, #1
 801b820:	e00f      	b.n	801b842 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d009      	beq.n	801b83c <udp_input_local_match+0x60>
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d005      	beq.n	801b83c <udp_input_local_match+0x60>
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	681a      	ldr	r2, [r3, #0]
 801b834:	4b05      	ldr	r3, [pc, #20]	@ (801b84c <udp_input_local_match+0x70>)
 801b836:	695b      	ldr	r3, [r3, #20]
 801b838:	429a      	cmp	r2, r3
 801b83a:	d101      	bne.n	801b840 <udp_input_local_match+0x64>
      return 1;
 801b83c:	2301      	movs	r3, #1
 801b83e:	e000      	b.n	801b842 <udp_input_local_match+0x66>
    }
  }

  return 0;
 801b840:	2300      	movs	r3, #0
}
 801b842:	4618      	mov	r0, r3
 801b844:	3714      	adds	r7, #20
 801b846:	46bd      	mov	sp, r7
 801b848:	bc80      	pop	{r7}
 801b84a:	4770      	bx	lr
 801b84c:	2000863c 	.word	0x2000863c

0801b850 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b850:	b590      	push	{r4, r7, lr}
 801b852:	b08d      	sub	sp, #52	@ 0x34
 801b854:	af02      	add	r7, sp, #8
 801b856:	6078      	str	r0, [r7, #4]
 801b858:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b85a:	2300      	movs	r3, #0
 801b85c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b85e:	4b93      	ldr	r3, [pc, #588]	@ (801baac <udp_input+0x25c>)
 801b860:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801b864:	3301      	adds	r3, #1
 801b866:	b29a      	uxth	r2, r3
 801b868:	4b90      	ldr	r3, [pc, #576]	@ (801baac <udp_input+0x25c>)
 801b86a:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	895b      	ldrh	r3, [r3, #10]
 801b872:	2b07      	cmp	r3, #7
 801b874:	d81a      	bhi.n	801b8ac <udp_input+0x5c>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801b876:	4b8d      	ldr	r3, [pc, #564]	@ (801baac <udp_input+0x25c>)
 801b878:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801b87c:	3301      	adds	r3, #1
 801b87e:	b29a      	uxth	r2, r3
 801b880:	4b8a      	ldr	r3, [pc, #552]	@ (801baac <udp_input+0x25c>)
 801b882:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801b886:	4b89      	ldr	r3, [pc, #548]	@ (801baac <udp_input+0x25c>)
 801b888:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b88c:	3301      	adds	r3, #1
 801b88e:	b29a      	uxth	r2, r3
 801b890:	4b86      	ldr	r3, [pc, #536]	@ (801baac <udp_input+0x25c>)
 801b892:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 801b896:	4b85      	ldr	r3, [pc, #532]	@ (801baac <udp_input+0x25c>)
 801b898:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801b89c:	3301      	adds	r3, #1
 801b89e:	4a83      	ldr	r2, [pc, #524]	@ (801baac <udp_input+0x25c>)
 801b8a0:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
    pbuf_free(p);
 801b8a4:	6878      	ldr	r0, [r7, #4]
 801b8a6:	f7f9 ff4d 	bl	8015744 <pbuf_free>
    goto end;
 801b8aa:	e0fa      	b.n	801baa2 <udp_input+0x252>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	685b      	ldr	r3, [r3, #4]
 801b8b0:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b8b2:	4b7f      	ldr	r3, [pc, #508]	@ (801bab0 <udp_input+0x260>)
 801b8b4:	695b      	ldr	r3, [r3, #20]
 801b8b6:	4a7e      	ldr	r2, [pc, #504]	@ (801bab0 <udp_input+0x260>)
 801b8b8:	6812      	ldr	r2, [r2, #0]
 801b8ba:	4611      	mov	r1, r2
 801b8bc:	4618      	mov	r0, r3
 801b8be:	f003 ffe7 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801b8c2:	4603      	mov	r3, r0
 801b8c4:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b8c6:	697b      	ldr	r3, [r7, #20]
 801b8c8:	881b      	ldrh	r3, [r3, #0]
 801b8ca:	b29b      	uxth	r3, r3
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f7f8 fce1 	bl	8014294 <lwip_htons>
 801b8d2:	4603      	mov	r3, r0
 801b8d4:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b8d6:	697b      	ldr	r3, [r7, #20]
 801b8d8:	885b      	ldrh	r3, [r3, #2]
 801b8da:	b29b      	uxth	r3, r3
 801b8dc:	4618      	mov	r0, r3
 801b8de:	f7f8 fcd9 	bl	8014294 <lwip_htons>
 801b8e2:	4603      	mov	r3, r0
 801b8e4:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b8f2:	4b70      	ldr	r3, [pc, #448]	@ (801bab4 <udp_input+0x264>)
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b8f8:	e044      	b.n	801b984 <udp_input+0x134>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8fc:	8a5b      	ldrh	r3, [r3, #18]
 801b8fe:	89fa      	ldrh	r2, [r7, #14]
 801b900:	429a      	cmp	r2, r3
 801b902:	d13a      	bne.n	801b97a <udp_input+0x12a>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b904:	7cfb      	ldrb	r3, [r7, #19]
 801b906:	461a      	mov	r2, r3
 801b908:	6839      	ldr	r1, [r7, #0]
 801b90a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b90c:	f7ff ff66 	bl	801b7dc <udp_input_local_match>
 801b910:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b912:	2b00      	cmp	r3, #0
 801b914:	d031      	beq.n	801b97a <udp_input+0x12a>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b918:	7c1b      	ldrb	r3, [r3, #16]
 801b91a:	f003 0304 	and.w	r3, r3, #4
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d104      	bne.n	801b92c <udp_input+0xdc>
 801b922:	69fb      	ldr	r3, [r7, #28]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d101      	bne.n	801b92c <udp_input+0xdc>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801b928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b92a:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b92e:	8a9b      	ldrh	r3, [r3, #20]
 801b930:	8a3a      	ldrh	r2, [r7, #16]
 801b932:	429a      	cmp	r2, r3
 801b934:	d121      	bne.n	801b97a <udp_input+0x12a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b938:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d005      	beq.n	801b94a <udp_input+0xfa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b940:	685a      	ldr	r2, [r3, #4]
 801b942:	4b5b      	ldr	r3, [pc, #364]	@ (801bab0 <udp_input+0x260>)
 801b944:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b946:	429a      	cmp	r2, r3
 801b948:	d117      	bne.n	801b97a <udp_input+0x12a>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b94a:	6a3b      	ldr	r3, [r7, #32]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d00b      	beq.n	801b968 <udp_input+0x118>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b952:	68da      	ldr	r2, [r3, #12]
 801b954:	6a3b      	ldr	r3, [r7, #32]
 801b956:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b958:	4b56      	ldr	r3, [pc, #344]	@ (801bab4 <udp_input+0x264>)
 801b95a:	681a      	ldr	r2, [r3, #0]
 801b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b960:	4a54      	ldr	r2, [pc, #336]	@ (801bab4 <udp_input+0x264>)
 801b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b964:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b966:	e010      	b.n	801b98a <udp_input+0x13a>
          UDP_STATS_INC(udp.cachehit);
 801b968:	4b50      	ldr	r3, [pc, #320]	@ (801baac <udp_input+0x25c>)
 801b96a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801b96e:	3301      	adds	r3, #1
 801b970:	b29a      	uxth	r2, r3
 801b972:	4b4e      	ldr	r3, [pc, #312]	@ (801baac <udp_input+0x25c>)
 801b974:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801b978:	e007      	b.n	801b98a <udp_input+0x13a>
      }
    }

    prev = pcb;
 801b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b97c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b980:	68db      	ldr	r3, [r3, #12]
 801b982:	627b      	str	r3, [r7, #36]	@ 0x24
 801b984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b986:	2b00      	cmp	r3, #0
 801b988:	d1b7      	bne.n	801b8fa <udp_input+0xaa>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d101      	bne.n	801b994 <udp_input+0x144>
    pcb = uncon_pcb;
 801b990:	69fb      	ldr	r3, [r7, #28]
 801b992:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b996:	2b00      	cmp	r3, #0
 801b998:	d002      	beq.n	801b9a0 <udp_input+0x150>
    for_us = 1;
 801b99a:	2301      	movs	r3, #1
 801b99c:	76fb      	strb	r3, [r7, #27]
 801b99e:	e00a      	b.n	801b9b6 <udp_input+0x166>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b9a0:	683b      	ldr	r3, [r7, #0]
 801b9a2:	3304      	adds	r3, #4
 801b9a4:	681a      	ldr	r2, [r3, #0]
 801b9a6:	4b42      	ldr	r3, [pc, #264]	@ (801bab0 <udp_input+0x260>)
 801b9a8:	695b      	ldr	r3, [r3, #20]
 801b9aa:	429a      	cmp	r2, r3
 801b9ac:	bf0c      	ite	eq
 801b9ae:	2301      	moveq	r3, #1
 801b9b0:	2300      	movne	r3, #0
 801b9b2:	b2db      	uxtb	r3, r3
 801b9b4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b9b6:	7efb      	ldrb	r3, [r7, #27]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d06f      	beq.n	801ba9c <udp_input+0x24c>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801b9bc:	f06f 0107 	mvn.w	r1, #7
 801b9c0:	6878      	ldr	r0, [r7, #4]
 801b9c2:	f7f9 fe9b 	bl	80156fc <pbuf_header>
 801b9c6:	4603      	mov	r3, r0
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d019      	beq.n	801ba00 <udp_input+0x1b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801b9cc:	4b3a      	ldr	r3, [pc, #232]	@ (801bab8 <udp_input+0x268>)
 801b9ce:	f240 1255 	movw	r2, #341	@ 0x155
 801b9d2:	493a      	ldr	r1, [pc, #232]	@ (801babc <udp_input+0x26c>)
 801b9d4:	483a      	ldr	r0, [pc, #232]	@ (801bac0 <udp_input+0x270>)
 801b9d6:	f005 fea5 	bl	8021724 <iprintf>
      UDP_STATS_INC(udp.drop);
 801b9da:	4b34      	ldr	r3, [pc, #208]	@ (801baac <udp_input+0x25c>)
 801b9dc:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b9e0:	3301      	adds	r3, #1
 801b9e2:	b29a      	uxth	r2, r3
 801b9e4:	4b31      	ldr	r3, [pc, #196]	@ (801baac <udp_input+0x25c>)
 801b9e6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 801b9ea:	4b30      	ldr	r3, [pc, #192]	@ (801baac <udp_input+0x25c>)
 801b9ec:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801b9f0:	3301      	adds	r3, #1
 801b9f2:	4a2e      	ldr	r2, [pc, #184]	@ (801baac <udp_input+0x25c>)
 801b9f4:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
      pbuf_free(p);
 801b9f8:	6878      	ldr	r0, [r7, #4]
 801b9fa:	f7f9 fea3 	bl	8015744 <pbuf_free>
      goto end;
 801b9fe:	e050      	b.n	801baa2 <udp_input+0x252>
    }

    if (pcb != NULL) {
 801ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d019      	beq.n	801ba3a <udp_input+0x1ea>
      MIB2_STATS_INC(mib2.udpindatagrams);
 801ba06:	4b29      	ldr	r3, [pc, #164]	@ (801baac <udp_input+0x25c>)
 801ba08:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801ba0c:	3301      	adds	r3, #1
 801ba0e:	4a27      	ldr	r2, [pc, #156]	@ (801baac <udp_input+0x25c>)
 801ba10:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ba14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba16:	699b      	ldr	r3, [r3, #24]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d00a      	beq.n	801ba32 <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba1e:	699c      	ldr	r4, [r3, #24]
 801ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba22:	69d8      	ldr	r0, [r3, #28]
 801ba24:	8a3b      	ldrh	r3, [r7, #16]
 801ba26:	9300      	str	r3, [sp, #0]
 801ba28:	4b26      	ldr	r3, [pc, #152]	@ (801bac4 <udp_input+0x274>)
 801ba2a:	687a      	ldr	r2, [r7, #4]
 801ba2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ba2e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ba30:	e038      	b.n	801baa4 <udp_input+0x254>
        pbuf_free(p);
 801ba32:	6878      	ldr	r0, [r7, #4]
 801ba34:	f7f9 fe86 	bl	8015744 <pbuf_free>
        goto end;
 801ba38:	e033      	b.n	801baa2 <udp_input+0x252>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ba3a:	7cfb      	ldrb	r3, [r7, #19]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d112      	bne.n	801ba66 <udp_input+0x216>
 801ba40:	4b1b      	ldr	r3, [pc, #108]	@ (801bab0 <udp_input+0x260>)
 801ba42:	695b      	ldr	r3, [r3, #20]
 801ba44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba48:	2be0      	cmp	r3, #224	@ 0xe0
 801ba4a:	d00c      	beq.n	801ba66 <udp_input+0x216>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ba4c:	4b18      	ldr	r3, [pc, #96]	@ (801bab0 <udp_input+0x260>)
 801ba4e:	899b      	ldrh	r3, [r3, #12]
 801ba50:	3308      	adds	r3, #8
 801ba52:	b29b      	uxth	r3, r3
 801ba54:	b21b      	sxth	r3, r3
 801ba56:	4619      	mov	r1, r3
 801ba58:	6878      	ldr	r0, [r7, #4]
 801ba5a:	f7f9 fe61 	bl	8015720 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ba5e:	2103      	movs	r1, #3
 801ba60:	6878      	ldr	r0, [r7, #4]
 801ba62:	f003 fafd 	bl	801f060 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801ba66:	4b11      	ldr	r3, [pc, #68]	@ (801baac <udp_input+0x25c>)
 801ba68:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801ba6c:	3301      	adds	r3, #1
 801ba6e:	b29a      	uxth	r2, r3
 801ba70:	4b0e      	ldr	r3, [pc, #56]	@ (801baac <udp_input+0x25c>)
 801ba72:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801ba76:	4b0d      	ldr	r3, [pc, #52]	@ (801baac <udp_input+0x25c>)
 801ba78:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801ba7c:	3301      	adds	r3, #1
 801ba7e:	b29a      	uxth	r2, r3
 801ba80:	4b0a      	ldr	r3, [pc, #40]	@ (801baac <udp_input+0x25c>)
 801ba82:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 801ba86:	4b09      	ldr	r3, [pc, #36]	@ (801baac <udp_input+0x25c>)
 801ba88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801ba8c:	3301      	adds	r3, #1
 801ba8e:	4a07      	ldr	r2, [pc, #28]	@ (801baac <udp_input+0x25c>)
 801ba90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      pbuf_free(p);
 801ba94:	6878      	ldr	r0, [r7, #4]
 801ba96:	f7f9 fe55 	bl	8015744 <pbuf_free>
  return;
 801ba9a:	e003      	b.n	801baa4 <udp_input+0x254>
    pbuf_free(p);
 801ba9c:	6878      	ldr	r0, [r7, #4]
 801ba9e:	f7f9 fe51 	bl	8015744 <pbuf_free>
  return;
 801baa2:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801baa4:	372c      	adds	r7, #44	@ 0x2c
 801baa6:	46bd      	mov	sp, r7
 801baa8:	bd90      	pop	{r4, r7, pc}
 801baaa:	bf00      	nop
 801baac:	2000bc24 	.word	0x2000bc24
 801bab0:	2000863c 	.word	0x2000863c
 801bab4:	2000be18 	.word	0x2000be18
 801bab8:	080266a8 	.word	0x080266a8
 801babc:	080266d8 	.word	0x080266d8
 801bac0:	080266ec 	.word	0x080266ec
 801bac4:	2000864c 	.word	0x2000864c

0801bac8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 801bac8:	b580      	push	{r7, lr}
 801baca:	b088      	sub	sp, #32
 801bacc:	af02      	add	r7, sp, #8
 801bace:	60f8      	str	r0, [r7, #12]
 801bad0:	60b9      	str	r1, [r7, #8]
 801bad2:	607a      	str	r2, [r7, #4]
 801bad4:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d002      	beq.n	801bae6 <udp_sendto+0x1e>
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d102      	bne.n	801baec <udp_sendto+0x24>
    return ERR_VAL;
 801bae6:	f06f 0305 	mvn.w	r3, #5
 801baea:	e01b      	b.n	801bb24 <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801baec:	6978      	ldr	r0, [r7, #20]
 801baee:	f003 fb6b 	bl	801f1c8 <ip4_route>
 801baf2:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801baf4:	693b      	ldr	r3, [r7, #16]
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d10a      	bne.n	801bb10 <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801bafa:	4b0c      	ldr	r3, [pc, #48]	@ (801bb2c <udp_sendto+0x64>)
 801bafc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801bb00:	3301      	adds	r3, #1
 801bb02:	b29a      	uxth	r2, r3
 801bb04:	4b09      	ldr	r3, [pc, #36]	@ (801bb2c <udp_sendto+0x64>)
 801bb06:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801bb0a:	f06f 0303 	mvn.w	r3, #3
 801bb0e:	e009      	b.n	801bb24 <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bb10:	887a      	ldrh	r2, [r7, #2]
 801bb12:	693b      	ldr	r3, [r7, #16]
 801bb14:	9300      	str	r3, [sp, #0]
 801bb16:	4613      	mov	r3, r2
 801bb18:	687a      	ldr	r2, [r7, #4]
 801bb1a:	68b9      	ldr	r1, [r7, #8]
 801bb1c:	68f8      	ldr	r0, [r7, #12]
 801bb1e:	f000 f807 	bl	801bb30 <udp_sendto_if>
 801bb22:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	3718      	adds	r7, #24
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	2000bc24 	.word	0x2000bc24

0801bb30 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bb30:	b580      	push	{r7, lr}
 801bb32:	b088      	sub	sp, #32
 801bb34:	af02      	add	r7, sp, #8
 801bb36:	60f8      	str	r0, [r7, #12]
 801bb38:	60b9      	str	r1, [r7, #8]
 801bb3a:	607a      	str	r2, [r7, #4]
 801bb3c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d002      	beq.n	801bb4a <udp_sendto_if+0x1a>
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d102      	bne.n	801bb50 <udp_sendto_if+0x20>
    return ERR_VAL;
 801bb4a:	f06f 0305 	mvn.w	r3, #5
 801bb4e:	e028      	b.n	801bba2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d009      	beq.n	801bb6a <udp_sendto_if+0x3a>
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d005      	beq.n	801bb6a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb66:	2be0      	cmp	r3, #224	@ 0xe0
 801bb68:	d103      	bne.n	801bb72 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801bb6a:	6a3b      	ldr	r3, [r7, #32]
 801bb6c:	3304      	adds	r3, #4
 801bb6e:	617b      	str	r3, [r7, #20]
 801bb70:	e00b      	b.n	801bb8a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	681a      	ldr	r2, [r3, #0]
 801bb76:	6a3b      	ldr	r3, [r7, #32]
 801bb78:	3304      	adds	r3, #4
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	429a      	cmp	r2, r3
 801bb7e:	d002      	beq.n	801bb86 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 801bb80:	f06f 0303 	mvn.w	r3, #3
 801bb84:	e00d      	b.n	801bba2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bb8a:	887a      	ldrh	r2, [r7, #2]
 801bb8c:	697b      	ldr	r3, [r7, #20]
 801bb8e:	9301      	str	r3, [sp, #4]
 801bb90:	6a3b      	ldr	r3, [r7, #32]
 801bb92:	9300      	str	r3, [sp, #0]
 801bb94:	4613      	mov	r3, r2
 801bb96:	687a      	ldr	r2, [r7, #4]
 801bb98:	68b9      	ldr	r1, [r7, #8]
 801bb9a:	68f8      	ldr	r0, [r7, #12]
 801bb9c:	f000 f806 	bl	801bbac <udp_sendto_if_src>
 801bba0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bba2:	4618      	mov	r0, r3
 801bba4:	3718      	adds	r7, #24
 801bba6:	46bd      	mov	sp, r7
 801bba8:	bd80      	pop	{r7, pc}
	...

0801bbac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bbac:	b580      	push	{r7, lr}
 801bbae:	b08c      	sub	sp, #48	@ 0x30
 801bbb0:	af04      	add	r7, sp, #16
 801bbb2:	60f8      	str	r0, [r7, #12]
 801bbb4:	60b9      	str	r1, [r7, #8]
 801bbb6:	607a      	str	r2, [r7, #4]
 801bbb8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d002      	beq.n	801bbc6 <udp_sendto_if_src+0x1a>
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d102      	bne.n	801bbcc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801bbc6:	f06f 0305 	mvn.w	r3, #5
 801bbca:	e08d      	b.n	801bce8 <udp_sendto_if_src+0x13c>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	8a5b      	ldrh	r3, [r3, #18]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d10f      	bne.n	801bbf4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bbd4:	68f9      	ldr	r1, [r7, #12]
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	8a5b      	ldrh	r3, [r3, #18]
 801bbda:	461a      	mov	r2, r3
 801bbdc:	68f8      	ldr	r0, [r7, #12]
 801bbde:	f000 f88f 	bl	801bd00 <udp_bind>
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bbe6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d002      	beq.n	801bbf4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bbee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bbf2:	e079      	b.n	801bce8 <udp_sendto_if_src+0x13c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 801bbf4:	2108      	movs	r1, #8
 801bbf6:	68b8      	ldr	r0, [r7, #8]
 801bbf8:	f7f9 fd80 	bl	80156fc <pbuf_header>
 801bbfc:	4603      	mov	r3, r0
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d014      	beq.n	801bc2c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bc02:	2200      	movs	r2, #0
 801bc04:	2108      	movs	r1, #8
 801bc06:	2001      	movs	r0, #1
 801bc08:	f7f9 fa24 	bl	8015054 <pbuf_alloc>
 801bc0c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bc0e:	69fb      	ldr	r3, [r7, #28]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d102      	bne.n	801bc1a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801bc14:	f04f 33ff 	mov.w	r3, #4294967295
 801bc18:	e066      	b.n	801bce8 <udp_sendto_if_src+0x13c>
    }
    if (p->tot_len != 0) {
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	891b      	ldrh	r3, [r3, #8]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d006      	beq.n	801bc30 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bc22:	68b9      	ldr	r1, [r7, #8]
 801bc24:	69f8      	ldr	r0, [r7, #28]
 801bc26:	f7f9 feaf 	bl	8015988 <pbuf_chain>
 801bc2a:	e001      	b.n	801bc30 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bc2c:	68bb      	ldr	r3, [r7, #8]
 801bc2e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bc30:	69fb      	ldr	r3, [r7, #28]
 801bc32:	895b      	ldrh	r3, [r3, #10]
 801bc34:	2b07      	cmp	r3, #7
 801bc36:	d806      	bhi.n	801bc46 <udp_sendto_if_src+0x9a>
 801bc38:	4b2d      	ldr	r3, [pc, #180]	@ (801bcf0 <udp_sendto_if_src+0x144>)
 801bc3a:	f240 22db 	movw	r2, #731	@ 0x2db
 801bc3e:	492d      	ldr	r1, [pc, #180]	@ (801bcf4 <udp_sendto_if_src+0x148>)
 801bc40:	482d      	ldr	r0, [pc, #180]	@ (801bcf8 <udp_sendto_if_src+0x14c>)
 801bc42:	f005 fd6f 	bl	8021724 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801bc46:	69fb      	ldr	r3, [r7, #28]
 801bc48:	685b      	ldr	r3, [r3, #4]
 801bc4a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	8a5b      	ldrh	r3, [r3, #18]
 801bc50:	4618      	mov	r0, r3
 801bc52:	f7f8 fb1f 	bl	8014294 <lwip_htons>
 801bc56:	4603      	mov	r3, r0
 801bc58:	461a      	mov	r2, r3
 801bc5a:	697b      	ldr	r3, [r7, #20]
 801bc5c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801bc5e:	887b      	ldrh	r3, [r7, #2]
 801bc60:	4618      	mov	r0, r3
 801bc62:	f7f8 fb17 	bl	8014294 <lwip_htons>
 801bc66:	4603      	mov	r3, r0
 801bc68:	461a      	mov	r2, r3
 801bc6a:	697b      	ldr	r3, [r7, #20]
 801bc6c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801bc6e:	697b      	ldr	r3, [r7, #20]
 801bc70:	2200      	movs	r2, #0
 801bc72:	719a      	strb	r2, [r3, #6]
 801bc74:	2200      	movs	r2, #0
 801bc76:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801bc78:	69fb      	ldr	r3, [r7, #28]
 801bc7a:	891b      	ldrh	r3, [r3, #8]
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	f7f8 fb09 	bl	8014294 <lwip_htons>
 801bc82:	4603      	mov	r3, r0
 801bc84:	461a      	mov	r2, r3
 801bc86:	697b      	ldr	r3, [r7, #20]
 801bc88:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801bc8a:	2311      	movs	r3, #17
 801bc8c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	7a9b      	ldrb	r3, [r3, #10]
 801bc92:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	7a5b      	ldrb	r3, [r3, #9]
 801bc98:	7cb9      	ldrb	r1, [r7, #18]
 801bc9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bc9c:	9202      	str	r2, [sp, #8]
 801bc9e:	7cfa      	ldrb	r2, [r7, #19]
 801bca0:	9201      	str	r2, [sp, #4]
 801bca2:	9300      	str	r3, [sp, #0]
 801bca4:	460b      	mov	r3, r1
 801bca6:	687a      	ldr	r2, [r7, #4]
 801bca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bcaa:	69f8      	ldr	r0, [r7, #28]
 801bcac:	f003 fd28 	bl	801f700 <ip4_output_if_src>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	76fb      	strb	r3, [r7, #27]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 801bcb4:	4b11      	ldr	r3, [pc, #68]	@ (801bcfc <udp_sendto_if_src+0x150>)
 801bcb6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801bcba:	3301      	adds	r3, #1
 801bcbc:	4a0f      	ldr	r2, [pc, #60]	@ (801bcfc <udp_sendto_if_src+0x150>)
 801bcbe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801bcc2:	69fa      	ldr	r2, [r7, #28]
 801bcc4:	68bb      	ldr	r3, [r7, #8]
 801bcc6:	429a      	cmp	r2, r3
 801bcc8:	d004      	beq.n	801bcd4 <udp_sendto_if_src+0x128>
    /* free the header pbuf */
    pbuf_free(q);
 801bcca:	69f8      	ldr	r0, [r7, #28]
 801bccc:	f7f9 fd3a 	bl	8015744 <pbuf_free>
    q = NULL;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801bcd4:	4b09      	ldr	r3, [pc, #36]	@ (801bcfc <udp_sendto_if_src+0x150>)
 801bcd6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801bcda:	3301      	adds	r3, #1
 801bcdc:	b29a      	uxth	r2, r3
 801bcde:	4b07      	ldr	r3, [pc, #28]	@ (801bcfc <udp_sendto_if_src+0x150>)
 801bce0:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801bce4:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801bce8:	4618      	mov	r0, r3
 801bcea:	3720      	adds	r7, #32
 801bcec:	46bd      	mov	sp, r7
 801bcee:	bd80      	pop	{r7, pc}
 801bcf0:	080266a8 	.word	0x080266a8
 801bcf4:	08026714 	.word	0x08026714
 801bcf8:	080266ec 	.word	0x080266ec
 801bcfc:	2000bc24 	.word	0x2000bc24

0801bd00 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b086      	sub	sp, #24
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	60f8      	str	r0, [r7, #12]
 801bd08:	60b9      	str	r1, [r7, #8]
 801bd0a:	4613      	mov	r3, r2
 801bd0c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bd0e:	68bb      	ldr	r3, [r7, #8]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d101      	bne.n	801bd18 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801bd14:	4b30      	ldr	r3, [pc, #192]	@ (801bdd8 <udp_bind+0xd8>)
 801bd16:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d002      	beq.n	801bd24 <udp_bind+0x24>
 801bd1e:	68bb      	ldr	r3, [r7, #8]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d102      	bne.n	801bd2a <udp_bind+0x2a>
    return ERR_VAL;
 801bd24:	f06f 0305 	mvn.w	r3, #5
 801bd28:	e052      	b.n	801bdd0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd2e:	4b2b      	ldr	r3, [pc, #172]	@ (801bddc <udp_bind+0xdc>)
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	617b      	str	r3, [r7, #20]
 801bd34:	e009      	b.n	801bd4a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801bd36:	68fa      	ldr	r2, [r7, #12]
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	429a      	cmp	r2, r3
 801bd3c:	d102      	bne.n	801bd44 <udp_bind+0x44>
      rebind = 1;
 801bd3e:	2301      	movs	r3, #1
 801bd40:	74fb      	strb	r3, [r7, #19]
      break;
 801bd42:	e005      	b.n	801bd50 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd44:	697b      	ldr	r3, [r7, #20]
 801bd46:	68db      	ldr	r3, [r3, #12]
 801bd48:	617b      	str	r3, [r7, #20]
 801bd4a:	697b      	ldr	r3, [r7, #20]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d1f2      	bne.n	801bd36 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801bd50:	88fb      	ldrh	r3, [r7, #6]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d109      	bne.n	801bd6a <udp_bind+0x6a>
    port = udp_new_port();
 801bd56:	f7ff fd09 	bl	801b76c <udp_new_port>
 801bd5a:	4603      	mov	r3, r0
 801bd5c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bd5e:	88fb      	ldrh	r3, [r7, #6]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d11e      	bne.n	801bda2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801bd64:	f06f 0307 	mvn.w	r3, #7
 801bd68:	e032      	b.n	801bdd0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd6a:	4b1c      	ldr	r3, [pc, #112]	@ (801bddc <udp_bind+0xdc>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	617b      	str	r3, [r7, #20]
 801bd70:	e014      	b.n	801bd9c <udp_bind+0x9c>
      if (pcb != ipcb) {
 801bd72:	68fa      	ldr	r2, [r7, #12]
 801bd74:	697b      	ldr	r3, [r7, #20]
 801bd76:	429a      	cmp	r2, r3
 801bd78:	d00d      	beq.n	801bd96 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bd7a:	697b      	ldr	r3, [r7, #20]
 801bd7c:	8a5b      	ldrh	r3, [r3, #18]
 801bd7e:	88fa      	ldrh	r2, [r7, #6]
 801bd80:	429a      	cmp	r2, r3
 801bd82:	d108      	bne.n	801bd96 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801bd84:	697b      	ldr	r3, [r7, #20]
 801bd86:	681a      	ldr	r2, [r3, #0]
 801bd88:	68bb      	ldr	r3, [r7, #8]
 801bd8a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801bd8c:	429a      	cmp	r2, r3
 801bd8e:	d102      	bne.n	801bd96 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801bd90:	f06f 0307 	mvn.w	r3, #7
 801bd94:	e01c      	b.n	801bdd0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	68db      	ldr	r3, [r3, #12]
 801bd9a:	617b      	str	r3, [r7, #20]
 801bd9c:	697b      	ldr	r3, [r7, #20]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d1e7      	bne.n	801bd72 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bda2:	68bb      	ldr	r3, [r7, #8]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d002      	beq.n	801bdae <udp_bind+0xae>
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	e000      	b.n	801bdb0 <udp_bind+0xb0>
 801bdae:	2300      	movs	r3, #0
 801bdb0:	68fa      	ldr	r2, [r7, #12]
 801bdb2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	88fa      	ldrh	r2, [r7, #6]
 801bdb8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801bdba:	7cfb      	ldrb	r3, [r7, #19]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d106      	bne.n	801bdce <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801bdc0:	4b06      	ldr	r3, [pc, #24]	@ (801bddc <udp_bind+0xdc>)
 801bdc2:	681a      	ldr	r2, [r3, #0]
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801bdc8:	4a04      	ldr	r2, [pc, #16]	@ (801bddc <udp_bind+0xdc>)
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801bdce:	2300      	movs	r3, #0
}
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	3718      	adds	r7, #24
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	bd80      	pop	{r7, pc}
 801bdd8:	0803064c 	.word	0x0803064c
 801bddc:	2000be18 	.word	0x2000be18

0801bde0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b086      	sub	sp, #24
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	60f8      	str	r0, [r7, #12]
 801bde8:	60b9      	str	r1, [r7, #8]
 801bdea:	4613      	mov	r3, r2
 801bdec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d002      	beq.n	801bdfa <udp_connect+0x1a>
 801bdf4:	68bb      	ldr	r3, [r7, #8]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d102      	bne.n	801be00 <udp_connect+0x20>
    return ERR_VAL;
 801bdfa:	f06f 0305 	mvn.w	r3, #5
 801bdfe:	e03e      	b.n	801be7e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	8a5b      	ldrh	r3, [r3, #18]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d10f      	bne.n	801be28 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801be08:	68f9      	ldr	r1, [r7, #12]
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	8a5b      	ldrh	r3, [r3, #18]
 801be0e:	461a      	mov	r2, r3
 801be10:	68f8      	ldr	r0, [r7, #12]
 801be12:	f7ff ff75 	bl	801bd00 <udp_bind>
 801be16:	4603      	mov	r3, r0
 801be18:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801be1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d002      	beq.n	801be28 <udp_connect+0x48>
      return err;
 801be22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801be26:	e02a      	b.n	801be7e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801be28:	68bb      	ldr	r3, [r7, #8]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d002      	beq.n	801be34 <udp_connect+0x54>
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	e000      	b.n	801be36 <udp_connect+0x56>
 801be34:	2300      	movs	r3, #0
 801be36:	68fa      	ldr	r2, [r7, #12]
 801be38:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	88fa      	ldrh	r2, [r7, #6]
 801be3e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	7c1b      	ldrb	r3, [r3, #16]
 801be44:	f043 0304 	orr.w	r3, r3, #4
 801be48:	b2da      	uxtb	r2, r3
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801be4e:	4b0e      	ldr	r3, [pc, #56]	@ (801be88 <udp_connect+0xa8>)
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	617b      	str	r3, [r7, #20]
 801be54:	e008      	b.n	801be68 <udp_connect+0x88>
    if (pcb == ipcb) {
 801be56:	68fa      	ldr	r2, [r7, #12]
 801be58:	697b      	ldr	r3, [r7, #20]
 801be5a:	429a      	cmp	r2, r3
 801be5c:	d101      	bne.n	801be62 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801be5e:	2300      	movs	r3, #0
 801be60:	e00d      	b.n	801be7e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	68db      	ldr	r3, [r3, #12]
 801be66:	617b      	str	r3, [r7, #20]
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d1f3      	bne.n	801be56 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801be6e:	4b06      	ldr	r3, [pc, #24]	@ (801be88 <udp_connect+0xa8>)
 801be70:	681a      	ldr	r2, [r3, #0]
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801be76:	4a04      	ldr	r2, [pc, #16]	@ (801be88 <udp_connect+0xa8>)
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801be7c:	2300      	movs	r3, #0
}
 801be7e:	4618      	mov	r0, r3
 801be80:	3718      	adds	r7, #24
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}
 801be86:	bf00      	nop
 801be88:	2000be18 	.word	0x2000be18

0801be8c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801be8c:	b480      	push	{r7}
 801be8e:	b085      	sub	sp, #20
 801be90:	af00      	add	r7, sp, #0
 801be92:	60f8      	str	r0, [r7, #12]
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	68ba      	ldr	r2, [r7, #8]
 801be9c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	687a      	ldr	r2, [r7, #4]
 801bea2:	61da      	str	r2, [r3, #28]
}
 801bea4:	bf00      	nop
 801bea6:	3714      	adds	r7, #20
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bc80      	pop	{r7}
 801beac:	4770      	bx	lr
	...

0801beb0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b084      	sub	sp, #16
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801beb8:	4b15      	ldr	r3, [pc, #84]	@ (801bf10 <udp_remove+0x60>)
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	687a      	ldr	r2, [r7, #4]
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d105      	bne.n	801bece <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801bec2:	4b13      	ldr	r3, [pc, #76]	@ (801bf10 <udp_remove+0x60>)
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	68db      	ldr	r3, [r3, #12]
 801bec8:	4a11      	ldr	r2, [pc, #68]	@ (801bf10 <udp_remove+0x60>)
 801beca:	6013      	str	r3, [r2, #0]
 801becc:	e017      	b.n	801befe <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bece:	4b10      	ldr	r3, [pc, #64]	@ (801bf10 <udp_remove+0x60>)
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	60fb      	str	r3, [r7, #12]
 801bed4:	e010      	b.n	801bef8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	68db      	ldr	r3, [r3, #12]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d009      	beq.n	801bef2 <udp_remove+0x42>
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	68db      	ldr	r3, [r3, #12]
 801bee2:	687a      	ldr	r2, [r7, #4]
 801bee4:	429a      	cmp	r2, r3
 801bee6:	d104      	bne.n	801bef2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	68da      	ldr	r2, [r3, #12]
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	60da      	str	r2, [r3, #12]
        break;
 801bef0:	e005      	b.n	801befe <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	68db      	ldr	r3, [r3, #12]
 801bef6:	60fb      	str	r3, [r7, #12]
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d1eb      	bne.n	801bed6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801befe:	6879      	ldr	r1, [r7, #4]
 801bf00:	2000      	movs	r0, #0
 801bf02:	f7f8 fec3 	bl	8014c8c <memp_free>
}
 801bf06:	bf00      	nop
 801bf08:	3710      	adds	r7, #16
 801bf0a:	46bd      	mov	sp, r7
 801bf0c:	bd80      	pop	{r7, pc}
 801bf0e:	bf00      	nop
 801bf10:	2000be18 	.word	0x2000be18

0801bf14 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b082      	sub	sp, #8
 801bf18:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801bf1a:	2000      	movs	r0, #0
 801bf1c:	f7f8 fe64 	bl	8014be8 <memp_malloc>
 801bf20:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d007      	beq.n	801bf38 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801bf28:	2220      	movs	r2, #32
 801bf2a:	2100      	movs	r1, #0
 801bf2c:	6878      	ldr	r0, [r7, #4]
 801bf2e:	f005 fdcf 	bl	8021ad0 <memset>
    pcb->ttl = UDP_TTL;
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	22ff      	movs	r2, #255	@ 0xff
 801bf36:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801bf38:	687b      	ldr	r3, [r7, #4]
}
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	3708      	adds	r7, #8
 801bf3e:	46bd      	mov	sp, r7
 801bf40:	bd80      	pop	{r7, pc}

0801bf42 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801bf42:	b580      	push	{r7, lr}
 801bf44:	b084      	sub	sp, #16
 801bf46:	af00      	add	r7, sp, #0
 801bf48:	4603      	mov	r3, r0
 801bf4a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 801bf4c:	f7ff ffe2 	bl	801bf14 <udp_new>
 801bf50:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bf52:	68fb      	ldr	r3, [r7, #12]
}
 801bf54:	4618      	mov	r0, r3
 801bf56:	3710      	adds	r7, #16
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd80      	pop	{r7, pc}

0801bf5c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801bf5c:	b480      	push	{r7}
 801bf5e:	b085      	sub	sp, #20
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
 801bf64:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d01e      	beq.n	801bfaa <udp_netif_ip_addr_changed+0x4e>
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d01a      	beq.n	801bfaa <udp_netif_ip_addr_changed+0x4e>
 801bf74:	683b      	ldr	r3, [r7, #0]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d017      	beq.n	801bfaa <udp_netif_ip_addr_changed+0x4e>
 801bf7a:	683b      	ldr	r3, [r7, #0]
 801bf7c:	681b      	ldr	r3, [r3, #0]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d013      	beq.n	801bfaa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bf82:	4b0c      	ldr	r3, [pc, #48]	@ (801bfb4 <udp_netif_ip_addr_changed+0x58>)
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	60fb      	str	r3, [r7, #12]
 801bf88:	e00c      	b.n	801bfa4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	681a      	ldr	r2, [r3, #0]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	429a      	cmp	r2, r3
 801bf94:	d103      	bne.n	801bf9e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801bf96:	683b      	ldr	r3, [r7, #0]
 801bf98:	681a      	ldr	r2, [r3, #0]
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	68db      	ldr	r3, [r3, #12]
 801bfa2:	60fb      	str	r3, [r7, #12]
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d1ef      	bne.n	801bf8a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801bfaa:	bf00      	nop
 801bfac:	3714      	adds	r7, #20
 801bfae:	46bd      	mov	sp, r7
 801bfb0:	bc80      	pop	{r7}
 801bfb2:	4770      	bx	lr
 801bfb4:	2000be18 	.word	0x2000be18

0801bfb8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801bfbc:	4b20      	ldr	r3, [pc, #128]	@ (801c040 <dhcp_inc_pcb_refcount+0x88>)
 801bfbe:	781b      	ldrb	r3, [r3, #0]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d133      	bne.n	801c02c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801bfc4:	4b1f      	ldr	r3, [pc, #124]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d005      	beq.n	801bfd8 <dhcp_inc_pcb_refcount+0x20>
 801bfcc:	4b1e      	ldr	r3, [pc, #120]	@ (801c048 <dhcp_inc_pcb_refcount+0x90>)
 801bfce:	22d9      	movs	r2, #217	@ 0xd9
 801bfd0:	491e      	ldr	r1, [pc, #120]	@ (801c04c <dhcp_inc_pcb_refcount+0x94>)
 801bfd2:	481f      	ldr	r0, [pc, #124]	@ (801c050 <dhcp_inc_pcb_refcount+0x98>)
 801bfd4:	f005 fba6 	bl	8021724 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801bfd8:	f7ff ff9c 	bl	801bf14 <udp_new>
 801bfdc:	4603      	mov	r3, r0
 801bfde:	4a19      	ldr	r2, [pc, #100]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801bfe0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801bfe2:	4b18      	ldr	r3, [pc, #96]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d102      	bne.n	801bff0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801bfea:	f04f 33ff 	mov.w	r3, #4294967295
 801bfee:	e024      	b.n	801c03a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801bff0:	4b14      	ldr	r3, [pc, #80]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	7a1a      	ldrb	r2, [r3, #8]
 801bff6:	4b13      	ldr	r3, [pc, #76]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	f042 0220 	orr.w	r2, r2, #32
 801bffe:	b2d2      	uxtb	r2, r2
 801c000:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 801c002:	4b10      	ldr	r3, [pc, #64]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	2244      	movs	r2, #68	@ 0x44
 801c008:	4912      	ldr	r1, [pc, #72]	@ (801c054 <dhcp_inc_pcb_refcount+0x9c>)
 801c00a:	4618      	mov	r0, r3
 801c00c:	f7ff fe78 	bl	801bd00 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 801c010:	4b0c      	ldr	r3, [pc, #48]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	2243      	movs	r2, #67	@ 0x43
 801c016:	490f      	ldr	r1, [pc, #60]	@ (801c054 <dhcp_inc_pcb_refcount+0x9c>)
 801c018:	4618      	mov	r0, r3
 801c01a:	f7ff fee1 	bl	801bde0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c01e:	4b09      	ldr	r3, [pc, #36]	@ (801c044 <dhcp_inc_pcb_refcount+0x8c>)
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	2200      	movs	r2, #0
 801c024:	490c      	ldr	r1, [pc, #48]	@ (801c058 <dhcp_inc_pcb_refcount+0xa0>)
 801c026:	4618      	mov	r0, r3
 801c028:	f7ff ff30 	bl	801be8c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c02c:	4b04      	ldr	r3, [pc, #16]	@ (801c040 <dhcp_inc_pcb_refcount+0x88>)
 801c02e:	781b      	ldrb	r3, [r3, #0]
 801c030:	3301      	adds	r3, #1
 801c032:	b2da      	uxtb	r2, r3
 801c034:	4b02      	ldr	r3, [pc, #8]	@ (801c040 <dhcp_inc_pcb_refcount+0x88>)
 801c036:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c038:	2300      	movs	r3, #0
}
 801c03a:	4618      	mov	r0, r3
 801c03c:	bd80      	pop	{r7, pc}
 801c03e:	bf00      	nop
 801c040:	2000be48 	.word	0x2000be48
 801c044:	2000be44 	.word	0x2000be44
 801c048:	08026744 	.word	0x08026744
 801c04c:	0802677c 	.word	0x0802677c
 801c050:	080267a4 	.word	0x080267a4
 801c054:	0803064c 	.word	0x0803064c
 801c058:	0801d715 	.word	0x0801d715

0801c05c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c060:	4b0e      	ldr	r3, [pc, #56]	@ (801c09c <dhcp_dec_pcb_refcount+0x40>)
 801c062:	781b      	ldrb	r3, [r3, #0]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d105      	bne.n	801c074 <dhcp_dec_pcb_refcount+0x18>
 801c068:	4b0d      	ldr	r3, [pc, #52]	@ (801c0a0 <dhcp_dec_pcb_refcount+0x44>)
 801c06a:	22f3      	movs	r2, #243	@ 0xf3
 801c06c:	490d      	ldr	r1, [pc, #52]	@ (801c0a4 <dhcp_dec_pcb_refcount+0x48>)
 801c06e:	480e      	ldr	r0, [pc, #56]	@ (801c0a8 <dhcp_dec_pcb_refcount+0x4c>)
 801c070:	f005 fb58 	bl	8021724 <iprintf>
  dhcp_pcb_refcount--;
 801c074:	4b09      	ldr	r3, [pc, #36]	@ (801c09c <dhcp_dec_pcb_refcount+0x40>)
 801c076:	781b      	ldrb	r3, [r3, #0]
 801c078:	3b01      	subs	r3, #1
 801c07a:	b2da      	uxtb	r2, r3
 801c07c:	4b07      	ldr	r3, [pc, #28]	@ (801c09c <dhcp_dec_pcb_refcount+0x40>)
 801c07e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c080:	4b06      	ldr	r3, [pc, #24]	@ (801c09c <dhcp_dec_pcb_refcount+0x40>)
 801c082:	781b      	ldrb	r3, [r3, #0]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d107      	bne.n	801c098 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c088:	4b08      	ldr	r3, [pc, #32]	@ (801c0ac <dhcp_dec_pcb_refcount+0x50>)
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	4618      	mov	r0, r3
 801c08e:	f7ff ff0f 	bl	801beb0 <udp_remove>
    dhcp_pcb = NULL;
 801c092:	4b06      	ldr	r3, [pc, #24]	@ (801c0ac <dhcp_dec_pcb_refcount+0x50>)
 801c094:	2200      	movs	r2, #0
 801c096:	601a      	str	r2, [r3, #0]
  }
}
 801c098:	bf00      	nop
 801c09a:	bd80      	pop	{r7, pc}
 801c09c:	2000be48 	.word	0x2000be48
 801c0a0:	08026744 	.word	0x08026744
 801c0a4:	080267cc 	.word	0x080267cc
 801c0a8:	080267a4 	.word	0x080267a4
 801c0ac:	2000be44 	.word	0x2000be44

0801c0b0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b084      	sub	sp, #16
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c0bc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c0be:	210c      	movs	r1, #12
 801c0c0:	68f8      	ldr	r0, [r7, #12]
 801c0c2:	f000 ff85 	bl	801cfd0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c0c6:	4b06      	ldr	r3, [pc, #24]	@ (801c0e0 <dhcp_handle_nak+0x30>)
 801c0c8:	4a05      	ldr	r2, [pc, #20]	@ (801c0e0 <dhcp_handle_nak+0x30>)
 801c0ca:	4905      	ldr	r1, [pc, #20]	@ (801c0e0 <dhcp_handle_nak+0x30>)
 801c0cc:	6878      	ldr	r0, [r7, #4]
 801c0ce:	f7f8 fe6b 	bl	8014da8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c0d2:	6878      	ldr	r0, [r7, #4]
 801c0d4:	f000 fbb6 	bl	801c844 <dhcp_discover>
}
 801c0d8:	bf00      	nop
 801c0da:	3710      	adds	r7, #16
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	bd80      	pop	{r7, pc}
 801c0e0:	0803064c 	.word	0x0803064c

0801c0e4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b084      	sub	sp, #16
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c0f0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c0f2:	2108      	movs	r1, #8
 801c0f4:	68f8      	ldr	r0, [r7, #12]
 801c0f6:	f000 ff6b 	bl	801cfd0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	3328      	adds	r3, #40	@ 0x28
 801c0fe:	2200      	movs	r2, #0
 801c100:	4619      	mov	r1, r3
 801c102:	6878      	ldr	r0, [r7, #4]
 801c104:	f002 fbae 	bl	801e864 <etharp_query>
 801c108:	4603      	mov	r3, r0
 801c10a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	7a9b      	ldrb	r3, [r3, #10]
 801c110:	2bff      	cmp	r3, #255	@ 0xff
 801c112:	d005      	beq.n	801c120 <dhcp_check+0x3c>
    dhcp->tries++;
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	7a9b      	ldrb	r3, [r3, #10]
 801c118:	3301      	adds	r3, #1
 801c11a:	b2da      	uxtb	r2, r3
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 801c120:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801c124:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801c126:	893b      	ldrh	r3, [r7, #8]
 801c128:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c12c:	4a06      	ldr	r2, [pc, #24]	@ (801c148 <dhcp_check+0x64>)
 801c12e:	fb82 1203 	smull	r1, r2, r2, r3
 801c132:	1152      	asrs	r2, r2, #5
 801c134:	17db      	asrs	r3, r3, #31
 801c136:	1ad3      	subs	r3, r2, r3
 801c138:	b29a      	uxth	r2, r3
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c13e:	bf00      	nop
 801c140:	3710      	adds	r7, #16
 801c142:	46bd      	mov	sp, r7
 801c144:	bd80      	pop	{r7, pc}
 801c146:	bf00      	nop
 801c148:	10624dd3 	.word	0x10624dd3

0801c14c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b084      	sub	sp, #16
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c158:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c15a:	4b0c      	ldr	r3, [pc, #48]	@ (801c18c <dhcp_handle_offer+0x40>)
 801c15c:	789b      	ldrb	r3, [r3, #2]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d00f      	beq.n	801c182 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c162:	4b0b      	ldr	r3, [pc, #44]	@ (801c190 <dhcp_handle_offer+0x44>)
 801c164:	689b      	ldr	r3, [r3, #8]
 801c166:	4618      	mov	r0, r3
 801c168:	f7f8 f8a1 	bl	80142ae <lwip_htonl>
 801c16c:	4602      	mov	r2, r0
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	625a      	str	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801c172:	68fb      	ldr	r3, [r7, #12]
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	691a      	ldr	r2, [r3, #16]
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	629a      	str	r2, [r3, #40]	@ 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c17c:	6878      	ldr	r0, [r7, #4]
 801c17e:	f000 f809 	bl	801c194 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801c182:	bf00      	nop
 801c184:	3710      	adds	r7, #16
 801c186:	46bd      	mov	sp, r7
 801c188:	bd80      	pop	{r7, pc}
 801c18a:	bf00      	nop
 801c18c:	2000be3c 	.word	0x2000be3c
 801c190:	2000be1c 	.word	0x2000be1c

0801c194 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	b088      	sub	sp, #32
 801c198:	af02      	add	r7, sp, #8
 801c19a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1a0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c1a2:	2101      	movs	r1, #1
 801c1a4:	6938      	ldr	r0, [r7, #16]
 801c1a6:	f000 ff13 	bl	801cfd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801c1aa:	2203      	movs	r2, #3
 801c1ac:	6939      	ldr	r1, [r7, #16]
 801c1ae:	6878      	ldr	r0, [r7, #4]
 801c1b0:	f001 fb96 	bl	801d8e0 <dhcp_create_msg>
 801c1b4:	4603      	mov	r3, r0
 801c1b6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801c1b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d159      	bne.n	801c274 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c1c0:	2202      	movs	r2, #2
 801c1c2:	2139      	movs	r1, #57	@ 0x39
 801c1c4:	6938      	ldr	r0, [r7, #16]
 801c1c6:	f000 ff1d 	bl	801d004 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c1ce:	4619      	mov	r1, r3
 801c1d0:	6938      	ldr	r0, [r7, #16]
 801c1d2:	f000 ff79 	bl	801d0c8 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801c1d6:	2204      	movs	r2, #4
 801c1d8:	2132      	movs	r1, #50	@ 0x32
 801c1da:	6938      	ldr	r0, [r7, #16]
 801c1dc:	f000 ff12 	bl	801d004 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c1e0:	693b      	ldr	r3, [r7, #16]
 801c1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f7f8 f862 	bl	80142ae <lwip_htonl>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	4619      	mov	r1, r3
 801c1ee:	6938      	ldr	r0, [r7, #16]
 801c1f0:	f000 ffa4 	bl	801d13c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801c1f4:	2204      	movs	r2, #4
 801c1f6:	2136      	movs	r1, #54	@ 0x36
 801c1f8:	6938      	ldr	r0, [r7, #16]
 801c1fa:	f000 ff03 	bl	801d004 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c1fe:	693b      	ldr	r3, [r7, #16]
 801c200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c202:	4618      	mov	r0, r3
 801c204:	f7f8 f853 	bl	80142ae <lwip_htonl>
 801c208:	4603      	mov	r3, r0
 801c20a:	4619      	mov	r1, r3
 801c20c:	6938      	ldr	r0, [r7, #16]
 801c20e:	f000 ff95 	bl	801d13c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c212:	2203      	movs	r2, #3
 801c214:	2137      	movs	r1, #55	@ 0x37
 801c216:	6938      	ldr	r0, [r7, #16]
 801c218:	f000 fef4 	bl	801d004 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c21c:	2300      	movs	r3, #0
 801c21e:	75fb      	strb	r3, [r7, #23]
 801c220:	e009      	b.n	801c236 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801c222:	7dfb      	ldrb	r3, [r7, #23]
 801c224:	4a29      	ldr	r2, [pc, #164]	@ (801c2cc <dhcp_select+0x138>)
 801c226:	5cd3      	ldrb	r3, [r2, r3]
 801c228:	4619      	mov	r1, r3
 801c22a:	6938      	ldr	r0, [r7, #16]
 801c22c:	f000 ff24 	bl	801d078 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c230:	7dfb      	ldrb	r3, [r7, #23]
 801c232:	3301      	adds	r3, #1
 801c234:	75fb      	strb	r3, [r7, #23]
 801c236:	7dfb      	ldrb	r3, [r7, #23]
 801c238:	2b02      	cmp	r3, #2
 801c23a:	d9f2      	bls.n	801c222 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801c23c:	6938      	ldr	r0, [r7, #16]
 801c23e:	f001 fcf3 	bl	801dc28 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801c242:	693b      	ldr	r3, [r7, #16]
 801c244:	68da      	ldr	r2, [r3, #12]
 801c246:	693b      	ldr	r3, [r7, #16]
 801c248:	8a9b      	ldrh	r3, [r3, #20]
 801c24a:	33f0      	adds	r3, #240	@ 0xf0
 801c24c:	b29b      	uxth	r3, r3
 801c24e:	4619      	mov	r1, r3
 801c250:	4610      	mov	r0, r2
 801c252:	f7f9 f903 	bl	801545c <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801c256:	4b1e      	ldr	r3, [pc, #120]	@ (801c2d0 <dhcp_select+0x13c>)
 801c258:	6818      	ldr	r0, [r3, #0]
 801c25a:	693b      	ldr	r3, [r7, #16]
 801c25c:	68d9      	ldr	r1, [r3, #12]
 801c25e:	4b1d      	ldr	r3, [pc, #116]	@ (801c2d4 <dhcp_select+0x140>)
 801c260:	9301      	str	r3, [sp, #4]
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	9300      	str	r3, [sp, #0]
 801c266:	2343      	movs	r3, #67	@ 0x43
 801c268:	4a1b      	ldr	r2, [pc, #108]	@ (801c2d8 <dhcp_select+0x144>)
 801c26a:	f7ff fc9f 	bl	801bbac <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801c26e:	6938      	ldr	r0, [r7, #16]
 801c270:	f001 fc98 	bl	801dba4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801c274:	693b      	ldr	r3, [r7, #16]
 801c276:	7a9b      	ldrb	r3, [r3, #10]
 801c278:	2bff      	cmp	r3, #255	@ 0xff
 801c27a:	d005      	beq.n	801c288 <dhcp_select+0xf4>
    dhcp->tries++;
 801c27c:	693b      	ldr	r3, [r7, #16]
 801c27e:	7a9b      	ldrb	r3, [r3, #10]
 801c280:	3301      	adds	r3, #1
 801c282:	b2da      	uxtb	r2, r3
 801c284:	693b      	ldr	r3, [r7, #16]
 801c286:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801c288:	693b      	ldr	r3, [r7, #16]
 801c28a:	7a9b      	ldrb	r3, [r3, #10]
 801c28c:	2b05      	cmp	r3, #5
 801c28e:	d807      	bhi.n	801c2a0 <dhcp_select+0x10c>
 801c290:	693b      	ldr	r3, [r7, #16]
 801c292:	7a9b      	ldrb	r3, [r3, #10]
 801c294:	461a      	mov	r2, r3
 801c296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c29a:	4093      	lsls	r3, r2
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	e001      	b.n	801c2a4 <dhcp_select+0x110>
 801c2a0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801c2a4:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801c2a6:	89bb      	ldrh	r3, [r7, #12]
 801c2a8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c2ac:	4a0b      	ldr	r2, [pc, #44]	@ (801c2dc <dhcp_select+0x148>)
 801c2ae:	fb82 1203 	smull	r1, r2, r2, r3
 801c2b2:	1152      	asrs	r2, r2, #5
 801c2b4:	17db      	asrs	r3, r3, #31
 801c2b6:	1ad3      	subs	r3, r2, r3
 801c2b8:	b29a      	uxth	r2, r3
 801c2ba:	693b      	ldr	r3, [r7, #16]
 801c2bc:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c2c2:	4618      	mov	r0, r3
 801c2c4:	3718      	adds	r7, #24
 801c2c6:	46bd      	mov	sp, r7
 801c2c8:	bd80      	pop	{r7, pc}
 801c2ca:	bf00      	nop
 801c2cc:	2000011c 	.word	0x2000011c
 801c2d0:	2000be44 	.word	0x2000be44
 801c2d4:	0803064c 	.word	0x0803064c
 801c2d8:	08030650 	.word	0x08030650
 801c2dc:	10624dd3 	.word	0x10624dd3

0801c2e0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801c2e6:	4b27      	ldr	r3, [pc, #156]	@ (801c384 <dhcp_coarse_tmr+0xa4>)
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 801c2ec:	e042      	b.n	801c374 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2f2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801c2f4:	683b      	ldr	r3, [r7, #0]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d039      	beq.n	801c36e <dhcp_coarse_tmr+0x8e>
 801c2fa:	683b      	ldr	r3, [r7, #0]
 801c2fc:	7a5b      	ldrb	r3, [r3, #9]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d035      	beq.n	801c36e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801c302:	683b      	ldr	r3, [r7, #0]
 801c304:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801c306:	2b00      	cmp	r3, #0
 801c308:	d012      	beq.n	801c330 <dhcp_coarse_tmr+0x50>
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	8c1b      	ldrh	r3, [r3, #32]
 801c30e:	3301      	adds	r3, #1
 801c310:	b29a      	uxth	r2, r3
 801c312:	683b      	ldr	r3, [r7, #0]
 801c314:	841a      	strh	r2, [r3, #32]
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	8c1a      	ldrh	r2, [r3, #32]
 801c31a:	683b      	ldr	r3, [r7, #0]
 801c31c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801c31e:	429a      	cmp	r2, r3
 801c320:	d106      	bne.n	801c330 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 801c322:	6878      	ldr	r0, [r7, #4]
 801c324:	f000 fd94 	bl	801ce50 <dhcp_release>
        dhcp_discover(netif);
 801c328:	6878      	ldr	r0, [r7, #4]
 801c32a:	f000 fa8b 	bl	801c844 <dhcp_discover>
 801c32e:	e01e      	b.n	801c36e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801c330:	683b      	ldr	r3, [r7, #0]
 801c332:	8bdb      	ldrh	r3, [r3, #30]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d00b      	beq.n	801c350 <dhcp_coarse_tmr+0x70>
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	8bdb      	ldrh	r3, [r3, #30]
 801c33c:	1e5a      	subs	r2, r3, #1
 801c33e:	b291      	uxth	r1, r2
 801c340:	683a      	ldr	r2, [r7, #0]
 801c342:	83d1      	strh	r1, [r2, #30]
 801c344:	2b01      	cmp	r3, #1
 801c346:	d103      	bne.n	801c350 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801c348:	6878      	ldr	r0, [r7, #4]
 801c34a:	f000 f8c6 	bl	801c4da <dhcp_t2_timeout>
 801c34e:	e00e      	b.n	801c36e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801c350:	683b      	ldr	r3, [r7, #0]
 801c352:	8b9b      	ldrh	r3, [r3, #28]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d00a      	beq.n	801c36e <dhcp_coarse_tmr+0x8e>
 801c358:	683b      	ldr	r3, [r7, #0]
 801c35a:	8b9b      	ldrh	r3, [r3, #28]
 801c35c:	1e5a      	subs	r2, r3, #1
 801c35e:	b291      	uxth	r1, r2
 801c360:	683a      	ldr	r2, [r7, #0]
 801c362:	8391      	strh	r1, [r2, #28]
 801c364:	2b01      	cmp	r3, #1
 801c366:	d102      	bne.n	801c36e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801c368:	6878      	ldr	r0, [r7, #4]
 801c36a:	f000 f888 	bl	801c47e <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d1b9      	bne.n	801c2ee <dhcp_coarse_tmr+0xe>
  }
}
 801c37a:	bf00      	nop
 801c37c:	bf00      	nop
 801c37e:	3708      	adds	r7, #8
 801c380:	46bd      	mov	sp, r7
 801c382:	bd80      	pop	{r7, pc}
 801c384:	2000bc18 	.word	0x2000bc18

0801c388 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801c388:	b580      	push	{r7, lr}
 801c38a:	b082      	sub	sp, #8
 801c38c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801c38e:	4b16      	ldr	r3, [pc, #88]	@ (801c3e8 <dhcp_fine_tmr+0x60>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801c394:	e020      	b.n	801c3d8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c39a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801c39c:	683b      	ldr	r3, [r7, #0]
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d017      	beq.n	801c3d2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	8adb      	ldrh	r3, [r3, #22]
 801c3a6:	2b01      	cmp	r3, #1
 801c3a8:	d906      	bls.n	801c3b8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801c3aa:	683b      	ldr	r3, [r7, #0]
 801c3ac:	8adb      	ldrh	r3, [r3, #22]
 801c3ae:	3b01      	subs	r3, #1
 801c3b0:	b29a      	uxth	r2, r3
 801c3b2:	683b      	ldr	r3, [r7, #0]
 801c3b4:	82da      	strh	r2, [r3, #22]
 801c3b6:	e00c      	b.n	801c3d2 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801c3b8:	683b      	ldr	r3, [r7, #0]
 801c3ba:	8adb      	ldrh	r3, [r3, #22]
 801c3bc:	2b01      	cmp	r3, #1
 801c3be:	d108      	bne.n	801c3d2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	8adb      	ldrh	r3, [r3, #22]
 801c3c4:	3b01      	subs	r3, #1
 801c3c6:	b29a      	uxth	r2, r3
 801c3c8:	683b      	ldr	r3, [r7, #0]
 801c3ca:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801c3cc:	6878      	ldr	r0, [r7, #4]
 801c3ce:	f000 f80d 	bl	801c3ec <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d1db      	bne.n	801c396 <dhcp_fine_tmr+0xe>
  }
}
 801c3de:	bf00      	nop
 801c3e0:	bf00      	nop
 801c3e2:	3708      	adds	r7, #8
 801c3e4:	46bd      	mov	sp, r7
 801c3e6:	bd80      	pop	{r7, pc}
 801c3e8:	2000bc18 	.word	0x2000bc18

0801c3ec <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b084      	sub	sp, #16
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c3f8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	7a5b      	ldrb	r3, [r3, #9]
 801c3fe:	2b0c      	cmp	r3, #12
 801c400:	d003      	beq.n	801c40a <dhcp_timeout+0x1e>
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	7a5b      	ldrb	r3, [r3, #9]
 801c406:	2b06      	cmp	r3, #6
 801c408:	d103      	bne.n	801c412 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801c40a:	6878      	ldr	r0, [r7, #4]
 801c40c:	f000 fa1a 	bl	801c844 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801c410:	e031      	b.n	801c476 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	7a5b      	ldrb	r3, [r3, #9]
 801c416:	2b01      	cmp	r3, #1
 801c418:	d10e      	bne.n	801c438 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	7a9b      	ldrb	r3, [r3, #10]
 801c41e:	2b05      	cmp	r3, #5
 801c420:	d803      	bhi.n	801c42a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801c422:	6878      	ldr	r0, [r7, #4]
 801c424:	f7ff feb6 	bl	801c194 <dhcp_select>
}
 801c428:	e025      	b.n	801c476 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 801c42a:	6878      	ldr	r0, [r7, #4]
 801c42c:	f000 fd10 	bl	801ce50 <dhcp_release>
      dhcp_discover(netif);
 801c430:	6878      	ldr	r0, [r7, #4]
 801c432:	f000 fa07 	bl	801c844 <dhcp_discover>
}
 801c436:	e01e      	b.n	801c476 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	7a5b      	ldrb	r3, [r3, #9]
 801c43c:	2b08      	cmp	r3, #8
 801c43e:	d10b      	bne.n	801c458 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	7a9b      	ldrb	r3, [r3, #10]
 801c444:	2b01      	cmp	r3, #1
 801c446:	d803      	bhi.n	801c450 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801c448:	6878      	ldr	r0, [r7, #4]
 801c44a:	f7ff fe4b 	bl	801c0e4 <dhcp_check>
}
 801c44e:	e012      	b.n	801c476 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801c450:	6878      	ldr	r0, [r7, #4]
 801c452:	f000 fa83 	bl	801c95c <dhcp_bind>
}
 801c456:	e00e      	b.n	801c476 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	7a5b      	ldrb	r3, [r3, #9]
 801c45c:	2b03      	cmp	r3, #3
 801c45e:	d10a      	bne.n	801c476 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	7a9b      	ldrb	r3, [r3, #10]
 801c464:	2b01      	cmp	r3, #1
 801c466:	d803      	bhi.n	801c470 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801c468:	6878      	ldr	r0, [r7, #4]
 801c46a:	f000 fc5d 	bl	801cd28 <dhcp_reboot>
}
 801c46e:	e002      	b.n	801c476 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801c470:	6878      	ldr	r0, [r7, #4]
 801c472:	f000 f9e7 	bl	801c844 <dhcp_discover>
}
 801c476:	bf00      	nop
 801c478:	3710      	adds	r7, #16
 801c47a:	46bd      	mov	sp, r7
 801c47c:	bd80      	pop	{r7, pc}

0801c47e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801c47e:	b580      	push	{r7, lr}
 801c480:	b084      	sub	sp, #16
 801c482:	af00      	add	r7, sp, #0
 801c484:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c48a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	7a5b      	ldrb	r3, [r3, #9]
 801c490:	2b01      	cmp	r3, #1
 801c492:	d007      	beq.n	801c4a4 <dhcp_t1_timeout+0x26>
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	7a5b      	ldrb	r3, [r3, #9]
 801c498:	2b0a      	cmp	r3, #10
 801c49a:	d003      	beq.n	801c4a4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c4a0:	2b05      	cmp	r3, #5
 801c4a2:	d116      	bne.n	801c4d2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801c4a4:	6878      	ldr	r0, [r7, #4]
 801c4a6:	f000 fb33 	bl	801cb10 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	8b5b      	ldrh	r3, [r3, #26]
 801c4ae:	461a      	mov	r2, r3
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	8c1b      	ldrh	r3, [r3, #32]
 801c4b4:	1ad3      	subs	r3, r2, r3
 801c4b6:	2b01      	cmp	r3, #1
 801c4b8:	dd0b      	ble.n	801c4d2 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	8b5b      	ldrh	r3, [r3, #26]
 801c4be:	461a      	mov	r2, r3
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	8c1b      	ldrh	r3, [r3, #32]
 801c4c4:	1ad3      	subs	r3, r2, r3
 801c4c6:	0fda      	lsrs	r2, r3, #31
 801c4c8:	4413      	add	r3, r2
 801c4ca:	105b      	asrs	r3, r3, #1
 801c4cc:	b29a      	uxth	r2, r3
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801c4d2:	bf00      	nop
 801c4d4:	3710      	adds	r7, #16
 801c4d6:	46bd      	mov	sp, r7
 801c4d8:	bd80      	pop	{r7, pc}

0801c4da <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801c4da:	b580      	push	{r7, lr}
 801c4dc:	b084      	sub	sp, #16
 801c4de:	af00      	add	r7, sp, #0
 801c4e0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c4e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	7a5b      	ldrb	r3, [r3, #9]
 801c4ec:	2b01      	cmp	r3, #1
 801c4ee:	d00b      	beq.n	801c508 <dhcp_t2_timeout+0x2e>
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	7a5b      	ldrb	r3, [r3, #9]
 801c4f4:	2b0a      	cmp	r3, #10
 801c4f6:	d007      	beq.n	801c508 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c4fc:	2b05      	cmp	r3, #5
 801c4fe:	d003      	beq.n	801c508 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	7a5b      	ldrb	r3, [r3, #9]
 801c504:	2b04      	cmp	r3, #4
 801c506:	d116      	bne.n	801c536 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801c508:	6878      	ldr	r0, [r7, #4]
 801c50a:	f000 fb87 	bl	801cc1c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801c512:	461a      	mov	r2, r3
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	8c1b      	ldrh	r3, [r3, #32]
 801c518:	1ad3      	subs	r3, r2, r3
 801c51a:	2b01      	cmp	r3, #1
 801c51c:	dd0b      	ble.n	801c536 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801c522:	461a      	mov	r2, r3
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	8c1b      	ldrh	r3, [r3, #32]
 801c528:	1ad3      	subs	r3, r2, r3
 801c52a:	0fda      	lsrs	r2, r3, #31
 801c52c:	4413      	add	r3, r2
 801c52e:	105b      	asrs	r3, r3, #1
 801c530:	b29a      	uxth	r2, r3
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	83da      	strh	r2, [r3, #30]
    }
  }
}
 801c536:	bf00      	nop
 801c538:	3710      	adds	r7, #16
 801c53a:	46bd      	mov	sp, r7
 801c53c:	bd80      	pop	{r7, pc}
	...

0801c540 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 801c540:	b580      	push	{r7, lr}
 801c542:	b084      	sub	sp, #16
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c54c:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	2200      	movs	r2, #0
 801c552:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	2200      	movs	r2, #0
 801c558:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c55a:	4b27      	ldr	r3, [pc, #156]	@ (801c5f8 <dhcp_handle_ack+0xb8>)
 801c55c:	78db      	ldrb	r3, [r3, #3]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d003      	beq.n	801c56a <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801c562:	4b26      	ldr	r3, [pc, #152]	@ (801c5fc <dhcp_handle_ack+0xbc>)
 801c564:	68da      	ldr	r2, [r3, #12]
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801c56a:	4b23      	ldr	r3, [pc, #140]	@ (801c5f8 <dhcp_handle_ack+0xb8>)
 801c56c:	791b      	ldrb	r3, [r3, #4]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d004      	beq.n	801c57c <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801c572:	4b22      	ldr	r3, [pc, #136]	@ (801c5fc <dhcp_handle_ack+0xbc>)
 801c574:	691a      	ldr	r2, [r3, #16]
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	639a      	str	r2, [r3, #56]	@ 0x38
 801c57a:	e004      	b.n	801c586 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c580:	085a      	lsrs	r2, r3, #1
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801c586:	4b1c      	ldr	r3, [pc, #112]	@ (801c5f8 <dhcp_handle_ack+0xb8>)
 801c588:	795b      	ldrb	r3, [r3, #5]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d004      	beq.n	801c598 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801c58e:	4b1b      	ldr	r3, [pc, #108]	@ (801c5fc <dhcp_handle_ack+0xbc>)
 801c590:	695a      	ldr	r2, [r3, #20]
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	63da      	str	r2, [r3, #60]	@ 0x3c
 801c596:	e007      	b.n	801c5a8 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c59c:	4613      	mov	r3, r2
 801c59e:	00db      	lsls	r3, r3, #3
 801c5a0:	1a9b      	subs	r3, r3, r2
 801c5a2:	08da      	lsrs	r2, r3, #3
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	685b      	ldr	r3, [r3, #4]
 801c5ac:	691a      	ldr	r2, [r3, #16]
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	629a      	str	r2, [r3, #40]	@ 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c5b2:	4b11      	ldr	r3, [pc, #68]	@ (801c5f8 <dhcp_handle_ack+0xb8>)
 801c5b4:	799b      	ldrb	r3, [r3, #6]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d00b      	beq.n	801c5d2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c5ba:	4b10      	ldr	r3, [pc, #64]	@ (801c5fc <dhcp_handle_ack+0xbc>)
 801c5bc:	699b      	ldr	r3, [r3, #24]
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f7f7 fe75 	bl	80142ae <lwip_htonl>
 801c5c4:	4602      	mov	r2, r0
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    dhcp->subnet_mask_given = 1;
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	2201      	movs	r2, #1
 801c5ce:	72da      	strb	r2, [r3, #11]
 801c5d0:	e002      	b.n	801c5d8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	2200      	movs	r2, #0
 801c5d6:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801c5d8:	4b07      	ldr	r3, [pc, #28]	@ (801c5f8 <dhcp_handle_ack+0xb8>)
 801c5da:	79db      	ldrb	r3, [r3, #7]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d007      	beq.n	801c5f0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801c5e0:	4b06      	ldr	r3, [pc, #24]	@ (801c5fc <dhcp_handle_ack+0xbc>)
 801c5e2:	69db      	ldr	r3, [r3, #28]
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	f7f7 fe62 	bl	80142ae <lwip_htonl>
 801c5ea:	4602      	mov	r2, r0
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	631a      	str	r2, [r3, #48]	@ 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801c5f0:	bf00      	nop
 801c5f2:	3710      	adds	r7, #16
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd80      	pop	{r7, pc}
 801c5f8:	2000be3c 	.word	0x2000be3c
 801c5fc:	2000be1c 	.word	0x2000be1c

0801c600 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b084      	sub	sp, #16
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d109      	bne.n	801c622 <dhcp_start+0x22>
 801c60e:	4b3c      	ldr	r3, [pc, #240]	@ (801c700 <dhcp_start+0x100>)
 801c610:	f240 22d6 	movw	r2, #726	@ 0x2d6
 801c614:	493b      	ldr	r1, [pc, #236]	@ (801c704 <dhcp_start+0x104>)
 801c616:	483c      	ldr	r0, [pc, #240]	@ (801c708 <dhcp_start+0x108>)
 801c618:	f005 f884 	bl	8021724 <iprintf>
 801c61c:	f06f 030f 	mvn.w	r3, #15
 801c620:	e069      	b.n	801c6f6 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801c628:	f003 0301 	and.w	r3, r3, #1
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d109      	bne.n	801c644 <dhcp_start+0x44>
 801c630:	4b33      	ldr	r3, [pc, #204]	@ (801c700 <dhcp_start+0x100>)
 801c632:	f240 22d7 	movw	r2, #727	@ 0x2d7
 801c636:	4935      	ldr	r1, [pc, #212]	@ (801c70c <dhcp_start+0x10c>)
 801c638:	4833      	ldr	r0, [pc, #204]	@ (801c708 <dhcp_start+0x108>)
 801c63a:	f005 f873 	bl	8021724 <iprintf>
 801c63e:	f06f 030f 	mvn.w	r3, #15
 801c642:	e058      	b.n	801c6f6 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c648:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c64e:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801c652:	d202      	bcs.n	801c65a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801c654:	f04f 33ff 	mov.w	r3, #4294967295
 801c658:	e04d      	b.n	801c6f6 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d10d      	bne.n	801c67c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801c660:	2040      	movs	r0, #64	@ 0x40
 801c662:	f7f8 f913 	bl	801488c <mem_malloc>
 801c666:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d102      	bne.n	801c674 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801c66e:	f04f 33ff 	mov.w	r3, #4294967295
 801c672:	e040      	b.n	801c6f6 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	68fa      	ldr	r2, [r7, #12]
 801c678:	625a      	str	r2, [r3, #36]	@ 0x24
 801c67a:	e01b      	b.n	801c6b4 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	68db      	ldr	r3, [r3, #12]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d006      	beq.n	801c692 <dhcp_start+0x92>
 801c684:	4b1e      	ldr	r3, [pc, #120]	@ (801c700 <dhcp_start+0x100>)
 801c686:	f44f 723c 	mov.w	r2, #752	@ 0x2f0
 801c68a:	4921      	ldr	r1, [pc, #132]	@ (801c710 <dhcp_start+0x110>)
 801c68c:	481e      	ldr	r0, [pc, #120]	@ (801c708 <dhcp_start+0x108>)
 801c68e:	f005 f849 	bl	8021724 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	685b      	ldr	r3, [r3, #4]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d006      	beq.n	801c6a8 <dhcp_start+0xa8>
 801c69a:	4b19      	ldr	r3, [pc, #100]	@ (801c700 <dhcp_start+0x100>)
 801c69c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801c6a0:	491c      	ldr	r1, [pc, #112]	@ (801c714 <dhcp_start+0x114>)
 801c6a2:	4819      	ldr	r0, [pc, #100]	@ (801c708 <dhcp_start+0x108>)
 801c6a4:	f005 f83e 	bl	8021724 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	7a1b      	ldrb	r3, [r3, #8]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d001      	beq.n	801c6b4 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801c6b0:	f7ff fcd4 	bl	801c05c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801c6b4:	2240      	movs	r2, #64	@ 0x40
 801c6b6:	2100      	movs	r1, #0
 801c6b8:	68f8      	ldr	r0, [r7, #12]
 801c6ba:	f005 fa09 	bl	8021ad0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801c6be:	f7ff fc7b 	bl	801bfb8 <dhcp_inc_pcb_refcount>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d002      	beq.n	801c6ce <dhcp_start+0xce>
    return ERR_MEM;
 801c6c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6cc:	e013      	b.n	801c6f6 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	2201      	movs	r2, #1
 801c6d2:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801c6d4:	6878      	ldr	r0, [r7, #4]
 801c6d6:	f000 f8b5 	bl	801c844 <dhcp_discover>
 801c6da:	4603      	mov	r3, r0
 801c6dc:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801c6de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d005      	beq.n	801c6f2 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 801c6e6:	6878      	ldr	r0, [r7, #4]
 801c6e8:	f000 fc3a 	bl	801cf60 <dhcp_stop>
    return ERR_MEM;
 801c6ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f0:	e001      	b.n	801c6f6 <dhcp_start+0xf6>
  }
  return result;
 801c6f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c6f6:	4618      	mov	r0, r3
 801c6f8:	3710      	adds	r7, #16
 801c6fa:	46bd      	mov	sp, r7
 801c6fc:	bd80      	pop	{r7, pc}
 801c6fe:	bf00      	nop
 801c700:	08026744 	.word	0x08026744
 801c704:	080267f0 	.word	0x080267f0
 801c708:	080267a4 	.word	0x080267a4
 801c70c:	08026834 	.word	0x08026834
 801c710:	08026858 	.word	0x08026858
 801c714:	08026870 	.word	0x08026870

0801c718 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b084      	sub	sp, #16
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	6078      	str	r0, [r7, #4]
 801c720:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d107      	bne.n	801c738 <dhcp_arp_reply+0x20>
 801c728:	4b0e      	ldr	r3, [pc, #56]	@ (801c764 <dhcp_arp_reply+0x4c>)
 801c72a:	f240 327b 	movw	r2, #891	@ 0x37b
 801c72e:	490e      	ldr	r1, [pc, #56]	@ (801c768 <dhcp_arp_reply+0x50>)
 801c730:	480e      	ldr	r0, [pc, #56]	@ (801c76c <dhcp_arp_reply+0x54>)
 801c732:	f004 fff7 	bl	8021724 <iprintf>
 801c736:	e012      	b.n	801c75e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c73c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	2b00      	cmp	r3, #0
 801c742:	d00c      	beq.n	801c75e <dhcp_arp_reply+0x46>
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	7a5b      	ldrb	r3, [r3, #9]
 801c748:	2b08      	cmp	r3, #8
 801c74a:	d108      	bne.n	801c75e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	681a      	ldr	r2, [r3, #0]
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c754:	429a      	cmp	r2, r3
 801c756:	d102      	bne.n	801c75e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801c758:	6878      	ldr	r0, [r7, #4]
 801c75a:	f000 f809 	bl	801c770 <dhcp_decline>
    }
  }
}
 801c75e:	3710      	adds	r7, #16
 801c760:	46bd      	mov	sp, r7
 801c762:	bd80      	pop	{r7, pc}
 801c764:	08026744 	.word	0x08026744
 801c768:	080267f0 	.word	0x080267f0
 801c76c:	080267a4 	.word	0x080267a4

0801c770 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b086      	sub	sp, #24
 801c774:	af02      	add	r7, sp, #8
 801c776:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c77c:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 801c77e:	2300      	movs	r3, #0
 801c780:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c782:	210c      	movs	r1, #12
 801c784:	68f8      	ldr	r0, [r7, #12]
 801c786:	f000 fc23 	bl	801cfd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801c78a:	2204      	movs	r2, #4
 801c78c:	68f9      	ldr	r1, [r7, #12]
 801c78e:	6878      	ldr	r0, [r7, #4]
 801c790:	f001 f8a6 	bl	801d8e0 <dhcp_create_msg>
 801c794:	4603      	mov	r3, r0
 801c796:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 801c798:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d12a      	bne.n	801c7f6 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801c7a0:	2204      	movs	r2, #4
 801c7a2:	2132      	movs	r1, #50	@ 0x32
 801c7a4:	68f8      	ldr	r0, [r7, #12]
 801c7a6:	f000 fc2d 	bl	801d004 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f7f7 fd7d 	bl	80142ae <lwip_htonl>
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	4619      	mov	r1, r3
 801c7b8:	68f8      	ldr	r0, [r7, #12]
 801c7ba:	f000 fcbf 	bl	801d13c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801c7be:	68f8      	ldr	r0, [r7, #12]
 801c7c0:	f001 fa32 	bl	801dc28 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	68da      	ldr	r2, [r3, #12]
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	8a9b      	ldrh	r3, [r3, #20]
 801c7cc:	33f0      	adds	r3, #240	@ 0xf0
 801c7ce:	b29b      	uxth	r3, r3
 801c7d0:	4619      	mov	r1, r3
 801c7d2:	4610      	mov	r0, r2
 801c7d4:	f7f8 fe42 	bl	801545c <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801c7d8:	4b16      	ldr	r3, [pc, #88]	@ (801c834 <dhcp_decline+0xc4>)
 801c7da:	6818      	ldr	r0, [r3, #0]
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	68d9      	ldr	r1, [r3, #12]
 801c7e0:	4b15      	ldr	r3, [pc, #84]	@ (801c838 <dhcp_decline+0xc8>)
 801c7e2:	9301      	str	r3, [sp, #4]
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	9300      	str	r3, [sp, #0]
 801c7e8:	2343      	movs	r3, #67	@ 0x43
 801c7ea:	4a14      	ldr	r2, [pc, #80]	@ (801c83c <dhcp_decline+0xcc>)
 801c7ec:	f7ff f9de 	bl	801bbac <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801c7f0:	68f8      	ldr	r0, [r7, #12]
 801c7f2:	f001 f9d7 	bl	801dba4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	7a9b      	ldrb	r3, [r3, #10]
 801c7fa:	2bff      	cmp	r3, #255	@ 0xff
 801c7fc:	d005      	beq.n	801c80a <dhcp_decline+0x9a>
    dhcp->tries++;
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	7a9b      	ldrb	r3, [r3, #10]
 801c802:	3301      	adds	r3, #1
 801c804:	b2da      	uxtb	r2, r3
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 801c80a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801c80e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801c810:	893b      	ldrh	r3, [r7, #8]
 801c812:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c816:	4a0a      	ldr	r2, [pc, #40]	@ (801c840 <dhcp_decline+0xd0>)
 801c818:	fb82 1203 	smull	r1, r2, r2, r3
 801c81c:	1152      	asrs	r2, r2, #5
 801c81e:	17db      	asrs	r3, r3, #31
 801c820:	1ad3      	subs	r3, r2, r3
 801c822:	b29a      	uxth	r2, r3
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c828:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c82c:	4618      	mov	r0, r3
 801c82e:	3710      	adds	r7, #16
 801c830:	46bd      	mov	sp, r7
 801c832:	bd80      	pop	{r7, pc}
 801c834:	2000be44 	.word	0x2000be44
 801c838:	0803064c 	.word	0x0803064c
 801c83c:	08030650 	.word	0x08030650
 801c840:	10624dd3 	.word	0x10624dd3

0801c844 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b088      	sub	sp, #32
 801c848:	af02      	add	r7, sp, #8
 801c84a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c850:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 801c852:	2300      	movs	r3, #0
 801c854:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801c856:	693b      	ldr	r3, [r7, #16]
 801c858:	2200      	movs	r2, #0
 801c85a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801c85c:	2106      	movs	r1, #6
 801c85e:	6938      	ldr	r0, [r7, #16]
 801c860:	f000 fbb6 	bl	801cfd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 801c864:	2201      	movs	r2, #1
 801c866:	6939      	ldr	r1, [r7, #16]
 801c868:	6878      	ldr	r0, [r7, #4]
 801c86a:	f001 f839 	bl	801d8e0 <dhcp_create_msg>
 801c86e:	4603      	mov	r3, r0
 801c870:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801c872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c876:	2b00      	cmp	r3, #0
 801c878:	d13b      	bne.n	801c8f2 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c87a:	2202      	movs	r2, #2
 801c87c:	2139      	movs	r1, #57	@ 0x39
 801c87e:	6938      	ldr	r0, [r7, #16]
 801c880:	f000 fbc0 	bl	801d004 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c888:	4619      	mov	r1, r3
 801c88a:	6938      	ldr	r0, [r7, #16]
 801c88c:	f000 fc1c 	bl	801d0c8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c890:	2203      	movs	r2, #3
 801c892:	2137      	movs	r1, #55	@ 0x37
 801c894:	6938      	ldr	r0, [r7, #16]
 801c896:	f000 fbb5 	bl	801d004 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c89a:	2300      	movs	r3, #0
 801c89c:	75fb      	strb	r3, [r7, #23]
 801c89e:	e009      	b.n	801c8b4 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801c8a0:	7dfb      	ldrb	r3, [r7, #23]
 801c8a2:	4a29      	ldr	r2, [pc, #164]	@ (801c948 <dhcp_discover+0x104>)
 801c8a4:	5cd3      	ldrb	r3, [r2, r3]
 801c8a6:	4619      	mov	r1, r3
 801c8a8:	6938      	ldr	r0, [r7, #16]
 801c8aa:	f000 fbe5 	bl	801d078 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c8ae:	7dfb      	ldrb	r3, [r7, #23]
 801c8b0:	3301      	adds	r3, #1
 801c8b2:	75fb      	strb	r3, [r7, #23]
 801c8b4:	7dfb      	ldrb	r3, [r7, #23]
 801c8b6:	2b02      	cmp	r3, #2
 801c8b8:	d9f2      	bls.n	801c8a0 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801c8ba:	6938      	ldr	r0, [r7, #16]
 801c8bc:	f001 f9b4 	bl	801dc28 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801c8c0:	693b      	ldr	r3, [r7, #16]
 801c8c2:	68da      	ldr	r2, [r3, #12]
 801c8c4:	693b      	ldr	r3, [r7, #16]
 801c8c6:	8a9b      	ldrh	r3, [r3, #20]
 801c8c8:	33f0      	adds	r3, #240	@ 0xf0
 801c8ca:	b29b      	uxth	r3, r3
 801c8cc:	4619      	mov	r1, r3
 801c8ce:	4610      	mov	r0, r2
 801c8d0:	f7f8 fdc4 	bl	801545c <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801c8d4:	4b1d      	ldr	r3, [pc, #116]	@ (801c94c <dhcp_discover+0x108>)
 801c8d6:	6818      	ldr	r0, [r3, #0]
 801c8d8:	693b      	ldr	r3, [r7, #16]
 801c8da:	68d9      	ldr	r1, [r3, #12]
 801c8dc:	4b1c      	ldr	r3, [pc, #112]	@ (801c950 <dhcp_discover+0x10c>)
 801c8de:	9301      	str	r3, [sp, #4]
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	2343      	movs	r3, #67	@ 0x43
 801c8e6:	4a1b      	ldr	r2, [pc, #108]	@ (801c954 <dhcp_discover+0x110>)
 801c8e8:	f7ff f960 	bl	801bbac <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 801c8ec:	6938      	ldr	r0, [r7, #16]
 801c8ee:	f001 f959 	bl	801dba4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801c8f2:	693b      	ldr	r3, [r7, #16]
 801c8f4:	7a9b      	ldrb	r3, [r3, #10]
 801c8f6:	2bff      	cmp	r3, #255	@ 0xff
 801c8f8:	d005      	beq.n	801c906 <dhcp_discover+0xc2>
    dhcp->tries++;
 801c8fa:	693b      	ldr	r3, [r7, #16]
 801c8fc:	7a9b      	ldrb	r3, [r3, #10]
 801c8fe:	3301      	adds	r3, #1
 801c900:	b2da      	uxtb	r2, r3
 801c902:	693b      	ldr	r3, [r7, #16]
 801c904:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801c906:	693b      	ldr	r3, [r7, #16]
 801c908:	7a9b      	ldrb	r3, [r3, #10]
 801c90a:	2b05      	cmp	r3, #5
 801c90c:	d807      	bhi.n	801c91e <dhcp_discover+0xda>
 801c90e:	693b      	ldr	r3, [r7, #16]
 801c910:	7a9b      	ldrb	r3, [r3, #10]
 801c912:	461a      	mov	r2, r3
 801c914:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c918:	4093      	lsls	r3, r2
 801c91a:	b29b      	uxth	r3, r3
 801c91c:	e001      	b.n	801c922 <dhcp_discover+0xde>
 801c91e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801c922:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801c924:	89bb      	ldrh	r3, [r7, #12]
 801c926:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c92a:	4a0b      	ldr	r2, [pc, #44]	@ (801c958 <dhcp_discover+0x114>)
 801c92c:	fb82 1203 	smull	r1, r2, r2, r3
 801c930:	1152      	asrs	r2, r2, #5
 801c932:	17db      	asrs	r3, r3, #31
 801c934:	1ad3      	subs	r3, r2, r3
 801c936:	b29a      	uxth	r2, r3
 801c938:	693b      	ldr	r3, [r7, #16]
 801c93a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c940:	4618      	mov	r0, r3
 801c942:	3718      	adds	r7, #24
 801c944:	46bd      	mov	sp, r7
 801c946:	bd80      	pop	{r7, pc}
 801c948:	2000011c 	.word	0x2000011c
 801c94c:	2000be44 	.word	0x2000be44
 801c950:	0803064c 	.word	0x0803064c
 801c954:	08030650 	.word	0x08030650
 801c958:	10624dd3 	.word	0x10624dd3

0801c95c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b088      	sub	sp, #32
 801c960:	af00      	add	r7, sp, #0
 801c962:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	2b00      	cmp	r3, #0
 801c968:	d107      	bne.n	801c97a <dhcp_bind+0x1e>
 801c96a:	4b64      	ldr	r3, [pc, #400]	@ (801cafc <dhcp_bind+0x1a0>)
 801c96c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801c970:	4963      	ldr	r1, [pc, #396]	@ (801cb00 <dhcp_bind+0x1a4>)
 801c972:	4864      	ldr	r0, [pc, #400]	@ (801cb04 <dhcp_bind+0x1a8>)
 801c974:	f004 fed6 	bl	8021724 <iprintf>
 801c978:	e0bc      	b.n	801caf4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c97e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c980:	69bb      	ldr	r3, [r7, #24]
 801c982:	2b00      	cmp	r3, #0
 801c984:	d107      	bne.n	801c996 <dhcp_bind+0x3a>
 801c986:	4b5d      	ldr	r3, [pc, #372]	@ (801cafc <dhcp_bind+0x1a0>)
 801c988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c98c:	495e      	ldr	r1, [pc, #376]	@ (801cb08 <dhcp_bind+0x1ac>)
 801c98e:	485d      	ldr	r0, [pc, #372]	@ (801cb04 <dhcp_bind+0x1a8>)
 801c990:	f004 fec8 	bl	8021724 <iprintf>
 801c994:	e0ae      	b.n	801caf4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801c996:	69bb      	ldr	r3, [r7, #24]
 801c998:	2200      	movs	r2, #0
 801c99a:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c99c:	69bb      	ldr	r3, [r7, #24]
 801c99e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9a4:	d019      	beq.n	801c9da <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c9a6:	69bb      	ldr	r3, [r7, #24]
 801c9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9aa:	331e      	adds	r3, #30
 801c9ac:	4a57      	ldr	r2, [pc, #348]	@ (801cb0c <dhcp_bind+0x1b0>)
 801c9ae:	fba2 2303 	umull	r2, r3, r2, r3
 801c9b2:	095b      	lsrs	r3, r3, #5
 801c9b4:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801c9b6:	69fb      	ldr	r3, [r7, #28]
 801c9b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c9bc:	d302      	bcc.n	801c9c4 <dhcp_bind+0x68>
       timeout = 0xffff;
 801c9be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c9c2:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 801c9c4:	69fb      	ldr	r3, [r7, #28]
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	69bb      	ldr	r3, [r7, #24]
 801c9ca:	845a      	strh	r2, [r3, #34]	@ 0x22
     if (dhcp->t0_timeout == 0) {
 801c9cc:	69bb      	ldr	r3, [r7, #24]
 801c9ce:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d102      	bne.n	801c9da <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 801c9d4:	69bb      	ldr	r3, [r7, #24]
 801c9d6:	2201      	movs	r2, #1
 801c9d8:	845a      	strh	r2, [r3, #34]	@ 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c9da:	69bb      	ldr	r3, [r7, #24]
 801c9dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9e2:	d01d      	beq.n	801ca20 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c9e4:	69bb      	ldr	r3, [r7, #24]
 801c9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c9e8:	331e      	adds	r3, #30
 801c9ea:	4a48      	ldr	r2, [pc, #288]	@ (801cb0c <dhcp_bind+0x1b0>)
 801c9ec:	fba2 2303 	umull	r2, r3, r2, r3
 801c9f0:	095b      	lsrs	r3, r3, #5
 801c9f2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c9f4:	69fb      	ldr	r3, [r7, #28]
 801c9f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c9fa:	d302      	bcc.n	801ca02 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801c9fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ca00:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801ca02:	69fb      	ldr	r3, [r7, #28]
 801ca04:	b29a      	uxth	r2, r3
 801ca06:	69bb      	ldr	r3, [r7, #24]
 801ca08:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 801ca0a:	69bb      	ldr	r3, [r7, #24]
 801ca0c:	8b1b      	ldrh	r3, [r3, #24]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d102      	bne.n	801ca18 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801ca12:	69bb      	ldr	r3, [r7, #24]
 801ca14:	2201      	movs	r2, #1
 801ca16:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801ca18:	69bb      	ldr	r3, [r7, #24]
 801ca1a:	8b1a      	ldrh	r2, [r3, #24]
 801ca1c:	69bb      	ldr	r3, [r7, #24]
 801ca1e:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801ca20:	69bb      	ldr	r3, [r7, #24]
 801ca22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ca24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca28:	d01d      	beq.n	801ca66 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ca2a:	69bb      	ldr	r3, [r7, #24]
 801ca2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ca2e:	331e      	adds	r3, #30
 801ca30:	4a36      	ldr	r2, [pc, #216]	@ (801cb0c <dhcp_bind+0x1b0>)
 801ca32:	fba2 2303 	umull	r2, r3, r2, r3
 801ca36:	095b      	lsrs	r3, r3, #5
 801ca38:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ca3a:	69fb      	ldr	r3, [r7, #28]
 801ca3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ca40:	d302      	bcc.n	801ca48 <dhcp_bind+0xec>
      timeout = 0xffff;
 801ca42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ca46:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801ca48:	69fb      	ldr	r3, [r7, #28]
 801ca4a:	b29a      	uxth	r2, r3
 801ca4c:	69bb      	ldr	r3, [r7, #24]
 801ca4e:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 801ca50:	69bb      	ldr	r3, [r7, #24]
 801ca52:	8b5b      	ldrh	r3, [r3, #26]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d102      	bne.n	801ca5e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801ca58:	69bb      	ldr	r3, [r7, #24]
 801ca5a:	2201      	movs	r2, #1
 801ca5c:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801ca5e:	69bb      	ldr	r3, [r7, #24]
 801ca60:	8b5a      	ldrh	r2, [r3, #26]
 801ca62:	69bb      	ldr	r3, [r7, #24]
 801ca64:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801ca66:	69bb      	ldr	r3, [r7, #24]
 801ca68:	8b1a      	ldrh	r2, [r3, #24]
 801ca6a:	69bb      	ldr	r3, [r7, #24]
 801ca6c:	8b5b      	ldrh	r3, [r3, #26]
 801ca6e:	429a      	cmp	r2, r3
 801ca70:	d306      	bcc.n	801ca80 <dhcp_bind+0x124>
 801ca72:	69bb      	ldr	r3, [r7, #24]
 801ca74:	8b5b      	ldrh	r3, [r3, #26]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d002      	beq.n	801ca80 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801ca7a:	69bb      	ldr	r3, [r7, #24]
 801ca7c:	2200      	movs	r2, #0
 801ca7e:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 801ca80:	69bb      	ldr	r3, [r7, #24]
 801ca82:	7adb      	ldrb	r3, [r3, #11]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d003      	beq.n	801ca90 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801ca88:	69bb      	ldr	r3, [r7, #24]
 801ca8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca8c:	613b      	str	r3, [r7, #16]
 801ca8e:	e014      	b.n	801caba <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801ca90:	69bb      	ldr	r3, [r7, #24]
 801ca92:	3328      	adds	r3, #40	@ 0x28
 801ca94:	781b      	ldrb	r3, [r3, #0]
 801ca96:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801ca98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	db02      	blt.n	801caa6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801caa0:	23ff      	movs	r3, #255	@ 0xff
 801caa2:	613b      	str	r3, [r7, #16]
 801caa4:	e009      	b.n	801caba <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801caa6:	7dfb      	ldrb	r3, [r7, #23]
 801caa8:	2bbf      	cmp	r3, #191	@ 0xbf
 801caaa:	d903      	bls.n	801cab4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801caac:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801cab0:	613b      	str	r3, [r7, #16]
 801cab2:	e002      	b.n	801caba <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801cab4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cab8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801caba:	69bb      	ldr	r3, [r7, #24]
 801cabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cabe:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d108      	bne.n	801cad8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801cac6:	69bb      	ldr	r3, [r7, #24]
 801cac8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801caca:	693b      	ldr	r3, [r7, #16]
 801cacc:	4013      	ands	r3, r2
 801cace:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801cad6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801cad8:	210a      	movs	r1, #10
 801cada:	69b8      	ldr	r0, [r7, #24]
 801cadc:	f000 fa78 	bl	801cfd0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801cae0:	69bb      	ldr	r3, [r7, #24]
 801cae2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801cae6:	f107 030c 	add.w	r3, r7, #12
 801caea:	f107 0210 	add.w	r2, r7, #16
 801caee:	6878      	ldr	r0, [r7, #4]
 801caf0:	f7f8 f95a 	bl	8014da8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801caf4:	3720      	adds	r7, #32
 801caf6:	46bd      	mov	sp, r7
 801caf8:	bd80      	pop	{r7, pc}
 801cafa:	bf00      	nop
 801cafc:	08026744 	.word	0x08026744
 801cb00:	08026884 	.word	0x08026884
 801cb04:	080267a4 	.word	0x080267a4
 801cb08:	080268a0 	.word	0x080268a0
 801cb0c:	88888889 	.word	0x88888889

0801cb10 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801cb10:	b580      	push	{r7, lr}
 801cb12:	b088      	sub	sp, #32
 801cb14:	af02      	add	r7, sp, #8
 801cb16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb1c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801cb1e:	2105      	movs	r1, #5
 801cb20:	6938      	ldr	r0, [r7, #16]
 801cb22:	f000 fa55 	bl	801cfd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801cb26:	2203      	movs	r2, #3
 801cb28:	6939      	ldr	r1, [r7, #16]
 801cb2a:	6878      	ldr	r0, [r7, #4]
 801cb2c:	f000 fed8 	bl	801d8e0 <dhcp_create_msg>
 801cb30:	4603      	mov	r3, r0
 801cb32:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801cb34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d13b      	bne.n	801cbb4 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cb3c:	2202      	movs	r2, #2
 801cb3e:	2139      	movs	r1, #57	@ 0x39
 801cb40:	6938      	ldr	r0, [r7, #16]
 801cb42:	f000 fa5f 	bl	801d004 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cb4a:	4619      	mov	r1, r3
 801cb4c:	6938      	ldr	r0, [r7, #16]
 801cb4e:	f000 fabb 	bl	801d0c8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cb52:	2203      	movs	r2, #3
 801cb54:	2137      	movs	r1, #55	@ 0x37
 801cb56:	6938      	ldr	r0, [r7, #16]
 801cb58:	f000 fa54 	bl	801d004 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	75fb      	strb	r3, [r7, #23]
 801cb60:	e009      	b.n	801cb76 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801cb62:	7dfb      	ldrb	r3, [r7, #23]
 801cb64:	4a2a      	ldr	r2, [pc, #168]	@ (801cc10 <dhcp_renew+0x100>)
 801cb66:	5cd3      	ldrb	r3, [r2, r3]
 801cb68:	4619      	mov	r1, r3
 801cb6a:	6938      	ldr	r0, [r7, #16]
 801cb6c:	f000 fa84 	bl	801d078 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cb70:	7dfb      	ldrb	r3, [r7, #23]
 801cb72:	3301      	adds	r3, #1
 801cb74:	75fb      	strb	r3, [r7, #23]
 801cb76:	7dfb      	ldrb	r3, [r7, #23]
 801cb78:	2b02      	cmp	r3, #2
 801cb7a:	d9f2      	bls.n	801cb62 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 801cb7c:	6938      	ldr	r0, [r7, #16]
 801cb7e:	f001 f853 	bl	801dc28 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801cb82:	693b      	ldr	r3, [r7, #16]
 801cb84:	68da      	ldr	r2, [r3, #12]
 801cb86:	693b      	ldr	r3, [r7, #16]
 801cb88:	8a9b      	ldrh	r3, [r3, #20]
 801cb8a:	33f0      	adds	r3, #240	@ 0xf0
 801cb8c:	b29b      	uxth	r3, r3
 801cb8e:	4619      	mov	r1, r3
 801cb90:	4610      	mov	r0, r2
 801cb92:	f7f8 fc63 	bl	801545c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801cb96:	4b1f      	ldr	r3, [pc, #124]	@ (801cc14 <dhcp_renew+0x104>)
 801cb98:	6818      	ldr	r0, [r3, #0]
 801cb9a:	693b      	ldr	r3, [r7, #16]
 801cb9c:	68d9      	ldr	r1, [r3, #12]
 801cb9e:	693b      	ldr	r3, [r7, #16]
 801cba0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	9300      	str	r3, [sp, #0]
 801cba8:	2343      	movs	r3, #67	@ 0x43
 801cbaa:	f7fe ffc1 	bl	801bb30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801cbae:	6938      	ldr	r0, [r7, #16]
 801cbb0:	f000 fff8 	bl	801dba4 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801cbb4:	693b      	ldr	r3, [r7, #16]
 801cbb6:	7a9b      	ldrb	r3, [r3, #10]
 801cbb8:	2bff      	cmp	r3, #255	@ 0xff
 801cbba:	d005      	beq.n	801cbc8 <dhcp_renew+0xb8>
    dhcp->tries++;
 801cbbc:	693b      	ldr	r3, [r7, #16]
 801cbbe:	7a9b      	ldrb	r3, [r3, #10]
 801cbc0:	3301      	adds	r3, #1
 801cbc2:	b2da      	uxtb	r2, r3
 801cbc4:	693b      	ldr	r3, [r7, #16]
 801cbc6:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801cbc8:	693b      	ldr	r3, [r7, #16]
 801cbca:	7a9b      	ldrb	r3, [r3, #10]
 801cbcc:	2b09      	cmp	r3, #9
 801cbce:	d809      	bhi.n	801cbe4 <dhcp_renew+0xd4>
 801cbd0:	693b      	ldr	r3, [r7, #16]
 801cbd2:	7a9b      	ldrb	r3, [r3, #10]
 801cbd4:	461a      	mov	r2, r3
 801cbd6:	0152      	lsls	r2, r2, #5
 801cbd8:	1ad2      	subs	r2, r2, r3
 801cbda:	0092      	lsls	r2, r2, #2
 801cbdc:	4413      	add	r3, r2
 801cbde:	011b      	lsls	r3, r3, #4
 801cbe0:	b29b      	uxth	r3, r3
 801cbe2:	e001      	b.n	801cbe8 <dhcp_renew+0xd8>
 801cbe4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801cbe8:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801cbea:	89bb      	ldrh	r3, [r7, #12]
 801cbec:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801cbf0:	4a09      	ldr	r2, [pc, #36]	@ (801cc18 <dhcp_renew+0x108>)
 801cbf2:	fb82 1203 	smull	r1, r2, r2, r3
 801cbf6:	1152      	asrs	r2, r2, #5
 801cbf8:	17db      	asrs	r3, r3, #31
 801cbfa:	1ad3      	subs	r3, r2, r3
 801cbfc:	b29a      	uxth	r2, r3
 801cbfe:	693b      	ldr	r3, [r7, #16]
 801cc00:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3718      	adds	r7, #24
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	2000011c 	.word	0x2000011c
 801cc14:	2000be44 	.word	0x2000be44
 801cc18:	10624dd3 	.word	0x10624dd3

0801cc1c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801cc1c:	b580      	push	{r7, lr}
 801cc1e:	b088      	sub	sp, #32
 801cc20:	af02      	add	r7, sp, #8
 801cc22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc28:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801cc2a:	2104      	movs	r1, #4
 801cc2c:	6938      	ldr	r0, [r7, #16]
 801cc2e:	f000 f9cf 	bl	801cfd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801cc32:	2203      	movs	r2, #3
 801cc34:	6939      	ldr	r1, [r7, #16]
 801cc36:	6878      	ldr	r0, [r7, #4]
 801cc38:	f000 fe52 	bl	801d8e0 <dhcp_create_msg>
 801cc3c:	4603      	mov	r3, r0
 801cc3e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801cc40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d139      	bne.n	801ccbc <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cc48:	2202      	movs	r2, #2
 801cc4a:	2139      	movs	r1, #57	@ 0x39
 801cc4c:	6938      	ldr	r0, [r7, #16]
 801cc4e:	f000 f9d9 	bl	801d004 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cc56:	4619      	mov	r1, r3
 801cc58:	6938      	ldr	r0, [r7, #16]
 801cc5a:	f000 fa35 	bl	801d0c8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cc5e:	2203      	movs	r2, #3
 801cc60:	2137      	movs	r1, #55	@ 0x37
 801cc62:	6938      	ldr	r0, [r7, #16]
 801cc64:	f000 f9ce 	bl	801d004 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cc68:	2300      	movs	r3, #0
 801cc6a:	75fb      	strb	r3, [r7, #23]
 801cc6c:	e009      	b.n	801cc82 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801cc6e:	7dfb      	ldrb	r3, [r7, #23]
 801cc70:	4a29      	ldr	r2, [pc, #164]	@ (801cd18 <dhcp_rebind+0xfc>)
 801cc72:	5cd3      	ldrb	r3, [r2, r3]
 801cc74:	4619      	mov	r1, r3
 801cc76:	6938      	ldr	r0, [r7, #16]
 801cc78:	f000 f9fe 	bl	801d078 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cc7c:	7dfb      	ldrb	r3, [r7, #23]
 801cc7e:	3301      	adds	r3, #1
 801cc80:	75fb      	strb	r3, [r7, #23]
 801cc82:	7dfb      	ldrb	r3, [r7, #23]
 801cc84:	2b02      	cmp	r3, #2
 801cc86:	d9f2      	bls.n	801cc6e <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801cc88:	6938      	ldr	r0, [r7, #16]
 801cc8a:	f000 ffcd 	bl	801dc28 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801cc8e:	693b      	ldr	r3, [r7, #16]
 801cc90:	68da      	ldr	r2, [r3, #12]
 801cc92:	693b      	ldr	r3, [r7, #16]
 801cc94:	8a9b      	ldrh	r3, [r3, #20]
 801cc96:	33f0      	adds	r3, #240	@ 0xf0
 801cc98:	b29b      	uxth	r3, r3
 801cc9a:	4619      	mov	r1, r3
 801cc9c:	4610      	mov	r0, r2
 801cc9e:	f7f8 fbdd 	bl	801545c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801cca2:	4b1e      	ldr	r3, [pc, #120]	@ (801cd1c <dhcp_rebind+0x100>)
 801cca4:	6818      	ldr	r0, [r3, #0]
 801cca6:	693b      	ldr	r3, [r7, #16]
 801cca8:	68d9      	ldr	r1, [r3, #12]
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	9300      	str	r3, [sp, #0]
 801ccae:	2343      	movs	r3, #67	@ 0x43
 801ccb0:	4a1b      	ldr	r2, [pc, #108]	@ (801cd20 <dhcp_rebind+0x104>)
 801ccb2:	f7fe ff3d 	bl	801bb30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801ccb6:	6938      	ldr	r0, [r7, #16]
 801ccb8:	f000 ff74 	bl	801dba4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ccbc:	693b      	ldr	r3, [r7, #16]
 801ccbe:	7a9b      	ldrb	r3, [r3, #10]
 801ccc0:	2bff      	cmp	r3, #255	@ 0xff
 801ccc2:	d005      	beq.n	801ccd0 <dhcp_rebind+0xb4>
    dhcp->tries++;
 801ccc4:	693b      	ldr	r3, [r7, #16]
 801ccc6:	7a9b      	ldrb	r3, [r3, #10]
 801ccc8:	3301      	adds	r3, #1
 801ccca:	b2da      	uxtb	r2, r3
 801cccc:	693b      	ldr	r3, [r7, #16]
 801ccce:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801ccd0:	693b      	ldr	r3, [r7, #16]
 801ccd2:	7a9b      	ldrb	r3, [r3, #10]
 801ccd4:	2b09      	cmp	r3, #9
 801ccd6:	d809      	bhi.n	801ccec <dhcp_rebind+0xd0>
 801ccd8:	693b      	ldr	r3, [r7, #16]
 801ccda:	7a9b      	ldrb	r3, [r3, #10]
 801ccdc:	461a      	mov	r2, r3
 801ccde:	0152      	lsls	r2, r2, #5
 801cce0:	1ad2      	subs	r2, r2, r3
 801cce2:	0092      	lsls	r2, r2, #2
 801cce4:	4413      	add	r3, r2
 801cce6:	00db      	lsls	r3, r3, #3
 801cce8:	b29b      	uxth	r3, r3
 801ccea:	e001      	b.n	801ccf0 <dhcp_rebind+0xd4>
 801ccec:	f242 7310 	movw	r3, #10000	@ 0x2710
 801ccf0:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801ccf2:	89bb      	ldrh	r3, [r7, #12]
 801ccf4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801ccf8:	4a0a      	ldr	r2, [pc, #40]	@ (801cd24 <dhcp_rebind+0x108>)
 801ccfa:	fb82 1203 	smull	r1, r2, r2, r3
 801ccfe:	1152      	asrs	r2, r2, #5
 801cd00:	17db      	asrs	r3, r3, #31
 801cd02:	1ad3      	subs	r3, r2, r3
 801cd04:	b29a      	uxth	r2, r3
 801cd06:	693b      	ldr	r3, [r7, #16]
 801cd08:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cd0e:	4618      	mov	r0, r3
 801cd10:	3718      	adds	r7, #24
 801cd12:	46bd      	mov	sp, r7
 801cd14:	bd80      	pop	{r7, pc}
 801cd16:	bf00      	nop
 801cd18:	2000011c 	.word	0x2000011c
 801cd1c:	2000be44 	.word	0x2000be44
 801cd20:	08030650 	.word	0x08030650
 801cd24:	10624dd3 	.word	0x10624dd3

0801cd28 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b088      	sub	sp, #32
 801cd2c:	af02      	add	r7, sp, #8
 801cd2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd34:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801cd36:	2103      	movs	r1, #3
 801cd38:	6938      	ldr	r0, [r7, #16]
 801cd3a:	f000 f949 	bl	801cfd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801cd3e:	2203      	movs	r2, #3
 801cd40:	6939      	ldr	r1, [r7, #16]
 801cd42:	6878      	ldr	r0, [r7, #4]
 801cd44:	f000 fdcc 	bl	801d8e0 <dhcp_create_msg>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801cd4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d147      	bne.n	801cde4 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cd54:	2202      	movs	r2, #2
 801cd56:	2139      	movs	r1, #57	@ 0x39
 801cd58:	6938      	ldr	r0, [r7, #16]
 801cd5a:	f000 f953 	bl	801d004 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801cd5e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 801cd62:	6938      	ldr	r0, [r7, #16]
 801cd64:	f000 f9b0 	bl	801d0c8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801cd68:	2204      	movs	r2, #4
 801cd6a:	2132      	movs	r1, #50	@ 0x32
 801cd6c:	6938      	ldr	r0, [r7, #16]
 801cd6e:	f000 f949 	bl	801d004 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd76:	4618      	mov	r0, r3
 801cd78:	f7f7 fa99 	bl	80142ae <lwip_htonl>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	4619      	mov	r1, r3
 801cd80:	6938      	ldr	r0, [r7, #16]
 801cd82:	f000 f9db 	bl	801d13c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cd86:	2203      	movs	r2, #3
 801cd88:	2137      	movs	r1, #55	@ 0x37
 801cd8a:	6938      	ldr	r0, [r7, #16]
 801cd8c:	f000 f93a 	bl	801d004 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cd90:	2300      	movs	r3, #0
 801cd92:	75fb      	strb	r3, [r7, #23]
 801cd94:	e009      	b.n	801cdaa <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801cd96:	7dfb      	ldrb	r3, [r7, #23]
 801cd98:	4a29      	ldr	r2, [pc, #164]	@ (801ce40 <dhcp_reboot+0x118>)
 801cd9a:	5cd3      	ldrb	r3, [r2, r3]
 801cd9c:	4619      	mov	r1, r3
 801cd9e:	6938      	ldr	r0, [r7, #16]
 801cda0:	f000 f96a 	bl	801d078 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cda4:	7dfb      	ldrb	r3, [r7, #23]
 801cda6:	3301      	adds	r3, #1
 801cda8:	75fb      	strb	r3, [r7, #23]
 801cdaa:	7dfb      	ldrb	r3, [r7, #23]
 801cdac:	2b02      	cmp	r3, #2
 801cdae:	d9f2      	bls.n	801cd96 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801cdb0:	6938      	ldr	r0, [r7, #16]
 801cdb2:	f000 ff39 	bl	801dc28 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	68da      	ldr	r2, [r3, #12]
 801cdba:	693b      	ldr	r3, [r7, #16]
 801cdbc:	8a9b      	ldrh	r3, [r3, #20]
 801cdbe:	33f0      	adds	r3, #240	@ 0xf0
 801cdc0:	b29b      	uxth	r3, r3
 801cdc2:	4619      	mov	r1, r3
 801cdc4:	4610      	mov	r0, r2
 801cdc6:	f7f8 fb49 	bl	801545c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801cdca:	4b1e      	ldr	r3, [pc, #120]	@ (801ce44 <dhcp_reboot+0x11c>)
 801cdcc:	6818      	ldr	r0, [r3, #0]
 801cdce:	693b      	ldr	r3, [r7, #16]
 801cdd0:	68d9      	ldr	r1, [r3, #12]
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	9300      	str	r3, [sp, #0]
 801cdd6:	2343      	movs	r3, #67	@ 0x43
 801cdd8:	4a1b      	ldr	r2, [pc, #108]	@ (801ce48 <dhcp_reboot+0x120>)
 801cdda:	f7fe fea9 	bl	801bb30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801cdde:	6938      	ldr	r0, [r7, #16]
 801cde0:	f000 fee0 	bl	801dba4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801cde4:	693b      	ldr	r3, [r7, #16]
 801cde6:	7a9b      	ldrb	r3, [r3, #10]
 801cde8:	2bff      	cmp	r3, #255	@ 0xff
 801cdea:	d005      	beq.n	801cdf8 <dhcp_reboot+0xd0>
    dhcp->tries++;
 801cdec:	693b      	ldr	r3, [r7, #16]
 801cdee:	7a9b      	ldrb	r3, [r3, #10]
 801cdf0:	3301      	adds	r3, #1
 801cdf2:	b2da      	uxtb	r2, r3
 801cdf4:	693b      	ldr	r3, [r7, #16]
 801cdf6:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801cdf8:	693b      	ldr	r3, [r7, #16]
 801cdfa:	7a9b      	ldrb	r3, [r3, #10]
 801cdfc:	2b09      	cmp	r3, #9
 801cdfe:	d809      	bhi.n	801ce14 <dhcp_reboot+0xec>
 801ce00:	693b      	ldr	r3, [r7, #16]
 801ce02:	7a9b      	ldrb	r3, [r3, #10]
 801ce04:	461a      	mov	r2, r3
 801ce06:	0152      	lsls	r2, r2, #5
 801ce08:	1ad2      	subs	r2, r2, r3
 801ce0a:	0092      	lsls	r2, r2, #2
 801ce0c:	4413      	add	r3, r2
 801ce0e:	00db      	lsls	r3, r3, #3
 801ce10:	b29b      	uxth	r3, r3
 801ce12:	e001      	b.n	801ce18 <dhcp_reboot+0xf0>
 801ce14:	f242 7310 	movw	r3, #10000	@ 0x2710
 801ce18:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801ce1a:	89bb      	ldrh	r3, [r7, #12]
 801ce1c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801ce20:	4a0a      	ldr	r2, [pc, #40]	@ (801ce4c <dhcp_reboot+0x124>)
 801ce22:	fb82 1203 	smull	r1, r2, r2, r3
 801ce26:	1152      	asrs	r2, r2, #5
 801ce28:	17db      	asrs	r3, r3, #31
 801ce2a:	1ad3      	subs	r3, r2, r3
 801ce2c:	b29a      	uxth	r2, r3
 801ce2e:	693b      	ldr	r3, [r7, #16]
 801ce30:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ce32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ce36:	4618      	mov	r0, r3
 801ce38:	3718      	adds	r7, #24
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	bd80      	pop	{r7, pc}
 801ce3e:	bf00      	nop
 801ce40:	2000011c 	.word	0x2000011c
 801ce44:	2000be44 	.word	0x2000be44
 801ce48:	08030650 	.word	0x08030650
 801ce4c:	10624dd3 	.word	0x10624dd3

0801ce50 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 801ce50:	b580      	push	{r7, lr}
 801ce52:	b088      	sub	sp, #32
 801ce54:	af02      	add	r7, sp, #8
 801ce56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ce5c:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 801ce5e:	697b      	ldr	r3, [r7, #20]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d102      	bne.n	801ce6a <dhcp_release+0x1a>
    return ERR_ARG;
 801ce64:	f06f 030f 	mvn.w	r3, #15
 801ce68:	e072      	b.n	801cf50 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801ce6a:	697b      	ldr	r3, [r7, #20]
 801ce6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ce6e:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 801ce70:	6878      	ldr	r0, [r7, #4]
 801ce72:	f000 ff33 	bl	801dcdc <dhcp_supplied_address>
 801ce76:	4603      	mov	r3, r0
 801ce78:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801ce7a:	2100      	movs	r1, #0
 801ce7c:	6978      	ldr	r0, [r7, #20]
 801ce7e:	f000 f8a7 	bl	801cfd0 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801ce82:	697b      	ldr	r3, [r7, #20]
 801ce84:	2200      	movs	r2, #0
 801ce86:	625a      	str	r2, [r3, #36]	@ 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801ce88:	697b      	ldr	r3, [r7, #20]
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	629a      	str	r2, [r3, #40]	@ 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801ce8e:	697b      	ldr	r3, [r7, #20]
 801ce90:	2200      	movs	r2, #0
 801ce92:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801ce94:	697b      	ldr	r3, [r7, #20]
 801ce96:	2200      	movs	r2, #0
 801ce98:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801ce9a:	697b      	ldr	r3, [r7, #20]
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 801cea0:	697b      	ldr	r3, [r7, #20]
 801cea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801cea4:	697b      	ldr	r3, [r7, #20]
 801cea6:	639a      	str	r2, [r3, #56]	@ 0x38
 801cea8:	697b      	ldr	r3, [r7, #20]
 801ceaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ceac:	697b      	ldr	r3, [r7, #20]
 801ceae:	635a      	str	r2, [r3, #52]	@ 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801ceb0:	697b      	ldr	r3, [r7, #20]
 801ceb2:	2200      	movs	r2, #0
 801ceb4:	845a      	strh	r2, [r3, #34]	@ 0x22
 801ceb6:	697b      	ldr	r3, [r7, #20]
 801ceb8:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 801ceba:	697b      	ldr	r3, [r7, #20]
 801cebc:	841a      	strh	r2, [r3, #32]
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	8c1a      	ldrh	r2, [r3, #32]
 801cec2:	697b      	ldr	r3, [r7, #20]
 801cec4:	83da      	strh	r2, [r3, #30]
 801cec6:	697b      	ldr	r3, [r7, #20]
 801cec8:	8bda      	ldrh	r2, [r3, #30]
 801ceca:	697b      	ldr	r3, [r7, #20]
 801cecc:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 801cece:	7cfb      	ldrb	r3, [r7, #19]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d101      	bne.n	801ced8 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801ced4:	2300      	movs	r3, #0
 801ced6:	e03b      	b.n	801cf50 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801ced8:	2207      	movs	r2, #7
 801ceda:	6979      	ldr	r1, [r7, #20]
 801cedc:	6878      	ldr	r0, [r7, #4]
 801cede:	f000 fcff 	bl	801d8e0 <dhcp_create_msg>
 801cee2:	4603      	mov	r3, r0
 801cee4:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801cee6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d128      	bne.n	801cf40 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801ceee:	2204      	movs	r2, #4
 801cef0:	2136      	movs	r1, #54	@ 0x36
 801cef2:	6978      	ldr	r0, [r7, #20]
 801cef4:	f000 f886 	bl	801d004 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	4618      	mov	r0, r3
 801cefc:	f7f7 f9d7 	bl	80142ae <lwip_htonl>
 801cf00:	4603      	mov	r3, r0
 801cf02:	4619      	mov	r1, r3
 801cf04:	6978      	ldr	r0, [r7, #20]
 801cf06:	f000 f919 	bl	801d13c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801cf0a:	6978      	ldr	r0, [r7, #20]
 801cf0c:	f000 fe8c 	bl	801dc28 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801cf10:	697b      	ldr	r3, [r7, #20]
 801cf12:	68da      	ldr	r2, [r3, #12]
 801cf14:	697b      	ldr	r3, [r7, #20]
 801cf16:	8a9b      	ldrh	r3, [r3, #20]
 801cf18:	33f0      	adds	r3, #240	@ 0xf0
 801cf1a:	b29b      	uxth	r3, r3
 801cf1c:	4619      	mov	r1, r3
 801cf1e:	4610      	mov	r0, r2
 801cf20:	f7f8 fa9c 	bl	801545c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 801cf24:	4b0c      	ldr	r3, [pc, #48]	@ (801cf58 <dhcp_release+0x108>)
 801cf26:	6818      	ldr	r0, [r3, #0]
 801cf28:	697b      	ldr	r3, [r7, #20]
 801cf2a:	68d9      	ldr	r1, [r3, #12]
 801cf2c:	f107 020c 	add.w	r2, r7, #12
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	9300      	str	r3, [sp, #0]
 801cf34:	2343      	movs	r3, #67	@ 0x43
 801cf36:	f7fe fdfb 	bl	801bb30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801cf3a:	6978      	ldr	r0, [r7, #20]
 801cf3c:	f000 fe32 	bl	801dba4 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801cf40:	4b06      	ldr	r3, [pc, #24]	@ (801cf5c <dhcp_release+0x10c>)
 801cf42:	4a06      	ldr	r2, [pc, #24]	@ (801cf5c <dhcp_release+0x10c>)
 801cf44:	4905      	ldr	r1, [pc, #20]	@ (801cf5c <dhcp_release+0x10c>)
 801cf46:	6878      	ldr	r0, [r7, #4]
 801cf48:	f7f7 ff2e 	bl	8014da8 <netif_set_addr>

  return result;
 801cf4c:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801cf50:	4618      	mov	r0, r3
 801cf52:	3718      	adds	r7, #24
 801cf54:	46bd      	mov	sp, r7
 801cf56:	bd80      	pop	{r7, pc}
 801cf58:	2000be44 	.word	0x2000be44
 801cf5c:	0803064c 	.word	0x0803064c

0801cf60 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b084      	sub	sp, #16
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d107      	bne.n	801cf7e <dhcp_stop+0x1e>
 801cf6e:	4b14      	ldr	r3, [pc, #80]	@ (801cfc0 <dhcp_stop+0x60>)
 801cf70:	f240 5242 	movw	r2, #1346	@ 0x542
 801cf74:	4913      	ldr	r1, [pc, #76]	@ (801cfc4 <dhcp_stop+0x64>)
 801cf76:	4814      	ldr	r0, [pc, #80]	@ (801cfc8 <dhcp_stop+0x68>)
 801cf78:	f004 fbd4 	bl	8021724 <iprintf>
 801cf7c:	e01d      	b.n	801cfba <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	d017      	beq.n	801cfba <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	685b      	ldr	r3, [r3, #4]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d006      	beq.n	801cfa0 <dhcp_stop+0x40>
 801cf92:	4b0b      	ldr	r3, [pc, #44]	@ (801cfc0 <dhcp_stop+0x60>)
 801cf94:	f240 524f 	movw	r2, #1359	@ 0x54f
 801cf98:	490c      	ldr	r1, [pc, #48]	@ (801cfcc <dhcp_stop+0x6c>)
 801cf9a:	480b      	ldr	r0, [pc, #44]	@ (801cfc8 <dhcp_stop+0x68>)
 801cf9c:	f004 fbc2 	bl	8021724 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801cfa0:	2100      	movs	r1, #0
 801cfa2:	68f8      	ldr	r0, [r7, #12]
 801cfa4:	f000 f814 	bl	801cfd0 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	7a1b      	ldrb	r3, [r3, #8]
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d004      	beq.n	801cfba <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cfb0:	f7ff f854 	bl	801c05c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	2200      	movs	r2, #0
 801cfb8:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801cfba:	3710      	adds	r7, #16
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bd80      	pop	{r7, pc}
 801cfc0:	08026744 	.word	0x08026744
 801cfc4:	080268b8 	.word	0x080268b8
 801cfc8:	080267a4 	.word	0x080267a4
 801cfcc:	08026870 	.word	0x08026870

0801cfd0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801cfd0:	b480      	push	{r7}
 801cfd2:	b083      	sub	sp, #12
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
 801cfd8:	460b      	mov	r3, r1
 801cfda:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	7a5b      	ldrb	r3, [r3, #9]
 801cfe0:	78fa      	ldrb	r2, [r7, #3]
 801cfe2:	429a      	cmp	r2, r3
 801cfe4:	d008      	beq.n	801cff8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	78fa      	ldrb	r2, [r7, #3]
 801cfea:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	2200      	movs	r2, #0
 801cff0:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	2200      	movs	r2, #0
 801cff6:	82da      	strh	r2, [r3, #22]
  }
}
 801cff8:	bf00      	nop
 801cffa:	370c      	adds	r7, #12
 801cffc:	46bd      	mov	sp, r7
 801cffe:	bc80      	pop	{r7}
 801d000:	4770      	bx	lr
	...

0801d004 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 801d004:	b580      	push	{r7, lr}
 801d006:	b082      	sub	sp, #8
 801d008:	af00      	add	r7, sp, #0
 801d00a:	6078      	str	r0, [r7, #4]
 801d00c:	460b      	mov	r3, r1
 801d00e:	70fb      	strb	r3, [r7, #3]
 801d010:	4613      	mov	r3, r2
 801d012:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	8a9b      	ldrh	r3, [r3, #20]
 801d018:	461a      	mov	r2, r3
 801d01a:	78bb      	ldrb	r3, [r7, #2]
 801d01c:	4413      	add	r3, r2
 801d01e:	3302      	adds	r3, #2
 801d020:	2b44      	cmp	r3, #68	@ 0x44
 801d022:	d906      	bls.n	801d032 <dhcp_option+0x2e>
 801d024:	4b11      	ldr	r3, [pc, #68]	@ (801d06c <dhcp_option+0x68>)
 801d026:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 801d02a:	4911      	ldr	r1, [pc, #68]	@ (801d070 <dhcp_option+0x6c>)
 801d02c:	4811      	ldr	r0, [pc, #68]	@ (801d074 <dhcp_option+0x70>)
 801d02e:	f004 fb79 	bl	8021724 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	691a      	ldr	r2, [r3, #16]
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	8a9b      	ldrh	r3, [r3, #20]
 801d03a:	1c59      	adds	r1, r3, #1
 801d03c:	b288      	uxth	r0, r1
 801d03e:	6879      	ldr	r1, [r7, #4]
 801d040:	8288      	strh	r0, [r1, #20]
 801d042:	4413      	add	r3, r2
 801d044:	78fa      	ldrb	r2, [r7, #3]
 801d046:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	691a      	ldr	r2, [r3, #16]
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	8a9b      	ldrh	r3, [r3, #20]
 801d052:	1c59      	adds	r1, r3, #1
 801d054:	b288      	uxth	r0, r1
 801d056:	6879      	ldr	r1, [r7, #4]
 801d058:	8288      	strh	r0, [r1, #20]
 801d05a:	4413      	add	r3, r2
 801d05c:	78ba      	ldrb	r2, [r7, #2]
 801d05e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d062:	bf00      	nop
 801d064:	3708      	adds	r7, #8
 801d066:	46bd      	mov	sp, r7
 801d068:	bd80      	pop	{r7, pc}
 801d06a:	bf00      	nop
 801d06c:	08026744 	.word	0x08026744
 801d070:	080268d4 	.word	0x080268d4
 801d074:	080267a4 	.word	0x080267a4

0801d078 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 801d078:	b580      	push	{r7, lr}
 801d07a:	b082      	sub	sp, #8
 801d07c:	af00      	add	r7, sp, #0
 801d07e:	6078      	str	r0, [r7, #4]
 801d080:	460b      	mov	r3, r1
 801d082:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	8a9b      	ldrh	r3, [r3, #20]
 801d088:	2b43      	cmp	r3, #67	@ 0x43
 801d08a:	d906      	bls.n	801d09a <dhcp_option_byte+0x22>
 801d08c:	4b0b      	ldr	r3, [pc, #44]	@ (801d0bc <dhcp_option_byte+0x44>)
 801d08e:	f240 527b 	movw	r2, #1403	@ 0x57b
 801d092:	490b      	ldr	r1, [pc, #44]	@ (801d0c0 <dhcp_option_byte+0x48>)
 801d094:	480b      	ldr	r0, [pc, #44]	@ (801d0c4 <dhcp_option_byte+0x4c>)
 801d096:	f004 fb45 	bl	8021724 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	691a      	ldr	r2, [r3, #16]
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	8a9b      	ldrh	r3, [r3, #20]
 801d0a2:	1c59      	adds	r1, r3, #1
 801d0a4:	b288      	uxth	r0, r1
 801d0a6:	6879      	ldr	r1, [r7, #4]
 801d0a8:	8288      	strh	r0, [r1, #20]
 801d0aa:	4413      	add	r3, r2
 801d0ac:	78fa      	ldrb	r2, [r7, #3]
 801d0ae:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d0b2:	bf00      	nop
 801d0b4:	3708      	adds	r7, #8
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bd80      	pop	{r7, pc}
 801d0ba:	bf00      	nop
 801d0bc:	08026744 	.word	0x08026744
 801d0c0:	0802691c 	.word	0x0802691c
 801d0c4:	080267a4 	.word	0x080267a4

0801d0c8 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801d0c8:	b590      	push	{r4, r7, lr}
 801d0ca:	b083      	sub	sp, #12
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	6078      	str	r0, [r7, #4]
 801d0d0:	460b      	mov	r3, r1
 801d0d2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	8a9b      	ldrh	r3, [r3, #20]
 801d0d8:	3302      	adds	r3, #2
 801d0da:	2b44      	cmp	r3, #68	@ 0x44
 801d0dc:	d906      	bls.n	801d0ec <dhcp_option_short+0x24>
 801d0de:	4b14      	ldr	r3, [pc, #80]	@ (801d130 <dhcp_option_short+0x68>)
 801d0e0:	f240 5282 	movw	r2, #1410	@ 0x582
 801d0e4:	4913      	ldr	r1, [pc, #76]	@ (801d134 <dhcp_option_short+0x6c>)
 801d0e6:	4814      	ldr	r0, [pc, #80]	@ (801d138 <dhcp_option_short+0x70>)
 801d0e8:	f004 fb1c 	bl	8021724 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d0ec:	887b      	ldrh	r3, [r7, #2]
 801d0ee:	0a1b      	lsrs	r3, r3, #8
 801d0f0:	b298      	uxth	r0, r3
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	691a      	ldr	r2, [r3, #16]
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	8a9b      	ldrh	r3, [r3, #20]
 801d0fa:	1c59      	adds	r1, r3, #1
 801d0fc:	b28c      	uxth	r4, r1
 801d0fe:	6879      	ldr	r1, [r7, #4]
 801d100:	828c      	strh	r4, [r1, #20]
 801d102:	b2c1      	uxtb	r1, r0
 801d104:	4413      	add	r3, r2
 801d106:	460a      	mov	r2, r1
 801d108:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	691a      	ldr	r2, [r3, #16]
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	8a9b      	ldrh	r3, [r3, #20]
 801d114:	1c59      	adds	r1, r3, #1
 801d116:	b288      	uxth	r0, r1
 801d118:	6879      	ldr	r1, [r7, #4]
 801d11a:	8288      	strh	r0, [r1, #20]
 801d11c:	8879      	ldrh	r1, [r7, #2]
 801d11e:	b2c9      	uxtb	r1, r1
 801d120:	4413      	add	r3, r2
 801d122:	460a      	mov	r2, r1
 801d124:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d128:	bf00      	nop
 801d12a:	370c      	adds	r7, #12
 801d12c:	46bd      	mov	sp, r7
 801d12e:	bd90      	pop	{r4, r7, pc}
 801d130:	08026744 	.word	0x08026744
 801d134:	08026958 	.word	0x08026958
 801d138:	080267a4 	.word	0x080267a4

0801d13c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 801d13c:	b590      	push	{r4, r7, lr}
 801d13e:	b083      	sub	sp, #12
 801d140:	af00      	add	r7, sp, #0
 801d142:	6078      	str	r0, [r7, #4]
 801d144:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	8a9b      	ldrh	r3, [r3, #20]
 801d14a:	3304      	adds	r3, #4
 801d14c:	2b44      	cmp	r3, #68	@ 0x44
 801d14e:	d906      	bls.n	801d15e <dhcp_option_long+0x22>
 801d150:	4b22      	ldr	r3, [pc, #136]	@ (801d1dc <dhcp_option_long+0xa0>)
 801d152:	f240 528a 	movw	r2, #1418	@ 0x58a
 801d156:	4922      	ldr	r1, [pc, #136]	@ (801d1e0 <dhcp_option_long+0xa4>)
 801d158:	4822      	ldr	r0, [pc, #136]	@ (801d1e4 <dhcp_option_long+0xa8>)
 801d15a:	f004 fae3 	bl	8021724 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d15e:	683b      	ldr	r3, [r7, #0]
 801d160:	0e18      	lsrs	r0, r3, #24
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	691a      	ldr	r2, [r3, #16]
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	8a9b      	ldrh	r3, [r3, #20]
 801d16a:	1c59      	adds	r1, r3, #1
 801d16c:	b28c      	uxth	r4, r1
 801d16e:	6879      	ldr	r1, [r7, #4]
 801d170:	828c      	strh	r4, [r1, #20]
 801d172:	b2c1      	uxtb	r1, r0
 801d174:	4413      	add	r3, r2
 801d176:	460a      	mov	r2, r1
 801d178:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d17c:	683b      	ldr	r3, [r7, #0]
 801d17e:	0c18      	lsrs	r0, r3, #16
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	691a      	ldr	r2, [r3, #16]
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	8a9b      	ldrh	r3, [r3, #20]
 801d188:	1c59      	adds	r1, r3, #1
 801d18a:	b28c      	uxth	r4, r1
 801d18c:	6879      	ldr	r1, [r7, #4]
 801d18e:	828c      	strh	r4, [r1, #20]
 801d190:	b2c1      	uxtb	r1, r0
 801d192:	4413      	add	r3, r2
 801d194:	460a      	mov	r2, r1
 801d196:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d19a:	683b      	ldr	r3, [r7, #0]
 801d19c:	0a18      	lsrs	r0, r3, #8
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	691a      	ldr	r2, [r3, #16]
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	8a9b      	ldrh	r3, [r3, #20]
 801d1a6:	1c59      	adds	r1, r3, #1
 801d1a8:	b28c      	uxth	r4, r1
 801d1aa:	6879      	ldr	r1, [r7, #4]
 801d1ac:	828c      	strh	r4, [r1, #20]
 801d1ae:	b2c1      	uxtb	r1, r0
 801d1b0:	4413      	add	r3, r2
 801d1b2:	460a      	mov	r2, r1
 801d1b4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	691a      	ldr	r2, [r3, #16]
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	8a9b      	ldrh	r3, [r3, #20]
 801d1c0:	1c59      	adds	r1, r3, #1
 801d1c2:	b288      	uxth	r0, r1
 801d1c4:	6879      	ldr	r1, [r7, #4]
 801d1c6:	8288      	strh	r0, [r1, #20]
 801d1c8:	6839      	ldr	r1, [r7, #0]
 801d1ca:	b2c9      	uxtb	r1, r1
 801d1cc:	4413      	add	r3, r2
 801d1ce:	460a      	mov	r2, r1
 801d1d0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d1d4:	bf00      	nop
 801d1d6:	370c      	adds	r7, #12
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd90      	pop	{r4, r7, pc}
 801d1dc:	08026744 	.word	0x08026744
 801d1e0:	0802699c 	.word	0x0802699c
 801d1e4:	080267a4 	.word	0x080267a4

0801d1e8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b08e      	sub	sp, #56	@ 0x38
 801d1ec:	af00      	add	r7, sp, #0
 801d1ee:	6078      	str	r0, [r7, #4]
 801d1f0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	627b      	str	r3, [r7, #36]	@ 0x24
  int parse_sname_as_options = 0;
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801d1fa:	2208      	movs	r2, #8
 801d1fc:	2100      	movs	r1, #0
 801d1fe:	48b3      	ldr	r0, [pc, #716]	@ (801d4cc <dhcp_parse_reply+0x2e4>)
 801d200:	f004 fc66 	bl	8021ad0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	895b      	ldrh	r3, [r3, #10]
 801d208:	2b2b      	cmp	r3, #43	@ 0x2b
 801d20a:	d802      	bhi.n	801d212 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801d20c:	f06f 0301 	mvn.w	r3, #1
 801d210:	e26a      	b.n	801d6e8 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801d212:	683b      	ldr	r3, [r7, #0]
 801d214:	685a      	ldr	r2, [r3, #4]
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801d21a:	23f0      	movs	r3, #240	@ 0xf0
 801d21c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801d21e:	683b      	ldr	r3, [r7, #0]
 801d220:	891b      	ldrh	r3, [r3, #8]
 801d222:	85bb      	strh	r3, [r7, #44]	@ 0x2c
again:
  q = p;
 801d224:	683b      	ldr	r3, [r7, #0]
 801d226:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801d228:	e00c      	b.n	801d244 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 801d22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d22c:	895b      	ldrh	r3, [r3, #10]
 801d22e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d230:	1ad3      	subs	r3, r2, r3
 801d232:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max -= q->len;
 801d234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d236:	895b      	ldrh	r3, [r3, #10]
 801d238:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801d23a:	1ad3      	subs	r3, r2, r3
 801d23c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    q = q->next;
 801d23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d246:	2b00      	cmp	r3, #0
 801d248:	d004      	beq.n	801d254 <dhcp_parse_reply+0x6c>
 801d24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d24c:	895b      	ldrh	r3, [r3, #10]
 801d24e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d250:	429a      	cmp	r2, r3
 801d252:	d2ea      	bcs.n	801d22a <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801d254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d256:	2b00      	cmp	r3, #0
 801d258:	d102      	bne.n	801d260 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 801d25a:	f06f 0301 	mvn.w	r3, #1
 801d25e:	e243      	b.n	801d6e8 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 801d260:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d262:	867b      	strh	r3, [r7, #50]	@ 0x32
  offset_max = options_idx_max;
 801d264:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d266:	863b      	strh	r3, [r7, #48]	@ 0x30
  options = (u8_t*)q->payload;
 801d268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d26a:	685b      	ldr	r3, [r3, #4]
 801d26c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d26e:	e1fb      	b.n	801d668 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 801d270:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d274:	4413      	add	r3, r2
 801d276:	781b      	ldrb	r3, [r3, #0]
 801d278:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 801d27a:	2300      	movs	r3, #0
 801d27c:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 801d27e:	f04f 33ff 	mov.w	r3, #4294967295
 801d282:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801d284:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d286:	3302      	adds	r3, #2
 801d288:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801d28a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d28c:	3301      	adds	r3, #1
 801d28e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d290:	8952      	ldrh	r2, [r2, #10]
 801d292:	4293      	cmp	r3, r2
 801d294:	da06      	bge.n	801d2a4 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801d296:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d298:	3301      	adds	r3, #1
 801d29a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d29c:	4413      	add	r3, r2
 801d29e:	781b      	ldrb	r3, [r3, #0]
 801d2a0:	77fb      	strb	r3, [r7, #31]
 801d2a2:	e00a      	b.n	801d2ba <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801d2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d004      	beq.n	801d2b6 <dhcp_parse_reply+0xce>
 801d2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	685b      	ldr	r3, [r3, #4]
 801d2b2:	781b      	ldrb	r3, [r3, #0]
 801d2b4:	e000      	b.n	801d2b8 <dhcp_parse_reply+0xd0>
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801d2ba:	7ffb      	ldrb	r3, [r7, #31]
 801d2bc:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 801d2be:	7d7b      	ldrb	r3, [r7, #21]
 801d2c0:	2b3b      	cmp	r3, #59	@ 0x3b
 801d2c2:	f200 8121 	bhi.w	801d508 <dhcp_parse_reply+0x320>
 801d2c6:	a201      	add	r2, pc, #4	@ (adr r2, 801d2cc <dhcp_parse_reply+0xe4>)
 801d2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d2cc:	0801d3bd 	.word	0x0801d3bd
 801d2d0:	0801d3cd 	.word	0x0801d3cd
 801d2d4:	0801d509 	.word	0x0801d509
 801d2d8:	0801d3ed 	.word	0x0801d3ed
 801d2dc:	0801d509 	.word	0x0801d509
 801d2e0:	0801d509 	.word	0x0801d509
 801d2e4:	0801d509 	.word	0x0801d509
 801d2e8:	0801d509 	.word	0x0801d509
 801d2ec:	0801d509 	.word	0x0801d509
 801d2f0:	0801d509 	.word	0x0801d509
 801d2f4:	0801d509 	.word	0x0801d509
 801d2f8:	0801d509 	.word	0x0801d509
 801d2fc:	0801d509 	.word	0x0801d509
 801d300:	0801d509 	.word	0x0801d509
 801d304:	0801d509 	.word	0x0801d509
 801d308:	0801d509 	.word	0x0801d509
 801d30c:	0801d509 	.word	0x0801d509
 801d310:	0801d509 	.word	0x0801d509
 801d314:	0801d509 	.word	0x0801d509
 801d318:	0801d509 	.word	0x0801d509
 801d31c:	0801d509 	.word	0x0801d509
 801d320:	0801d509 	.word	0x0801d509
 801d324:	0801d509 	.word	0x0801d509
 801d328:	0801d509 	.word	0x0801d509
 801d32c:	0801d509 	.word	0x0801d509
 801d330:	0801d509 	.word	0x0801d509
 801d334:	0801d509 	.word	0x0801d509
 801d338:	0801d509 	.word	0x0801d509
 801d33c:	0801d509 	.word	0x0801d509
 801d340:	0801d509 	.word	0x0801d509
 801d344:	0801d509 	.word	0x0801d509
 801d348:	0801d509 	.word	0x0801d509
 801d34c:	0801d509 	.word	0x0801d509
 801d350:	0801d509 	.word	0x0801d509
 801d354:	0801d509 	.word	0x0801d509
 801d358:	0801d509 	.word	0x0801d509
 801d35c:	0801d509 	.word	0x0801d509
 801d360:	0801d509 	.word	0x0801d509
 801d364:	0801d509 	.word	0x0801d509
 801d368:	0801d509 	.word	0x0801d509
 801d36c:	0801d509 	.word	0x0801d509
 801d370:	0801d509 	.word	0x0801d509
 801d374:	0801d509 	.word	0x0801d509
 801d378:	0801d509 	.word	0x0801d509
 801d37c:	0801d509 	.word	0x0801d509
 801d380:	0801d509 	.word	0x0801d509
 801d384:	0801d509 	.word	0x0801d509
 801d388:	0801d509 	.word	0x0801d509
 801d38c:	0801d509 	.word	0x0801d509
 801d390:	0801d509 	.word	0x0801d509
 801d394:	0801d509 	.word	0x0801d509
 801d398:	0801d413 	.word	0x0801d413
 801d39c:	0801d433 	.word	0x0801d433
 801d3a0:	0801d46d 	.word	0x0801d46d
 801d3a4:	0801d48d 	.word	0x0801d48d
 801d3a8:	0801d509 	.word	0x0801d509
 801d3ac:	0801d509 	.word	0x0801d509
 801d3b0:	0801d509 	.word	0x0801d509
 801d3b4:	0801d4ad 	.word	0x0801d4ad
 801d3b8:	0801d4e9 	.word	0x0801d4e9
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801d3bc:	2300      	movs	r3, #0
 801d3be:	77fb      	strb	r3, [r7, #31]
 801d3c0:	7ffb      	ldrb	r3, [r7, #31]
 801d3c2:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801d3c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d3c6:	3b01      	subs	r3, #1
 801d3c8:	867b      	strh	r3, [r7, #50]	@ 0x32
        break;
 801d3ca:	e0a0      	b.n	801d50e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d3cc:	7ffb      	ldrb	r3, [r7, #31]
 801d3ce:	2b04      	cmp	r3, #4
 801d3d0:	d009      	beq.n	801d3e6 <dhcp_parse_reply+0x1fe>
 801d3d2:	4b3f      	ldr	r3, [pc, #252]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d3d4:	f240 52f6 	movw	r2, #1526	@ 0x5f6
 801d3d8:	493e      	ldr	r1, [pc, #248]	@ (801d4d4 <dhcp_parse_reply+0x2ec>)
 801d3da:	483f      	ldr	r0, [pc, #252]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d3dc:	f004 f9a2 	bl	8021724 <iprintf>
 801d3e0:	f06f 0305 	mvn.w	r3, #5
 801d3e4:	e180      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801d3e6:	2306      	movs	r3, #6
 801d3e8:	61bb      	str	r3, [r7, #24]
        break;
 801d3ea:	e090      	b.n	801d50e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801d3ec:	2304      	movs	r3, #4
 801d3ee:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d3f0:	7ffa      	ldrb	r2, [r7, #31]
 801d3f2:	7fbb      	ldrb	r3, [r7, #30]
 801d3f4:	429a      	cmp	r2, r3
 801d3f6:	d209      	bcs.n	801d40c <dhcp_parse_reply+0x224>
 801d3f8:	4b35      	ldr	r3, [pc, #212]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d3fa:	f240 52fb 	movw	r2, #1531	@ 0x5fb
 801d3fe:	4937      	ldr	r1, [pc, #220]	@ (801d4dc <dhcp_parse_reply+0x2f4>)
 801d400:	4835      	ldr	r0, [pc, #212]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d402:	f004 f98f 	bl	8021724 <iprintf>
 801d406:	f06f 0305 	mvn.w	r3, #5
 801d40a:	e16d      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801d40c:	2307      	movs	r3, #7
 801d40e:	61bb      	str	r3, [r7, #24]
        break;
 801d410:	e07d      	b.n	801d50e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d412:	7ffb      	ldrb	r3, [r7, #31]
 801d414:	2b04      	cmp	r3, #4
 801d416:	d009      	beq.n	801d42c <dhcp_parse_reply+0x244>
 801d418:	4b2d      	ldr	r3, [pc, #180]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d41a:	f240 6209 	movw	r2, #1545	@ 0x609
 801d41e:	492d      	ldr	r1, [pc, #180]	@ (801d4d4 <dhcp_parse_reply+0x2ec>)
 801d420:	482d      	ldr	r0, [pc, #180]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d422:	f004 f97f 	bl	8021724 <iprintf>
 801d426:	f06f 0305 	mvn.w	r3, #5
 801d42a:	e15d      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801d42c:	2303      	movs	r3, #3
 801d42e:	61bb      	str	r3, [r7, #24]
        break;
 801d430:	e06d      	b.n	801d50e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d432:	7ffb      	ldrb	r3, [r7, #31]
 801d434:	2b01      	cmp	r3, #1
 801d436:	d009      	beq.n	801d44c <dhcp_parse_reply+0x264>
 801d438:	4b25      	ldr	r3, [pc, #148]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d43a:	f240 6217 	movw	r2, #1559	@ 0x617
 801d43e:	4928      	ldr	r1, [pc, #160]	@ (801d4e0 <dhcp_parse_reply+0x2f8>)
 801d440:	4825      	ldr	r0, [pc, #148]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d442:	f004 f96f 	bl	8021724 <iprintf>
 801d446:	f06f 0305 	mvn.w	r3, #5
 801d44a:	e14d      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801d44c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d44e:	2bf0      	cmp	r3, #240	@ 0xf0
 801d450:	d009      	beq.n	801d466 <dhcp_parse_reply+0x27e>
 801d452:	4b1f      	ldr	r3, [pc, #124]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d454:	f240 6219 	movw	r2, #1561	@ 0x619
 801d458:	4922      	ldr	r1, [pc, #136]	@ (801d4e4 <dhcp_parse_reply+0x2fc>)
 801d45a:	481f      	ldr	r0, [pc, #124]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d45c:	f004 f962 	bl	8021724 <iprintf>
 801d460:	f06f 0305 	mvn.w	r3, #5
 801d464:	e140      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801d466:	2300      	movs	r3, #0
 801d468:	61bb      	str	r3, [r7, #24]
        break;
 801d46a:	e050      	b.n	801d50e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d46c:	7ffb      	ldrb	r3, [r7, #31]
 801d46e:	2b01      	cmp	r3, #1
 801d470:	d009      	beq.n	801d486 <dhcp_parse_reply+0x29e>
 801d472:	4b17      	ldr	r3, [pc, #92]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d474:	f240 621d 	movw	r2, #1565	@ 0x61d
 801d478:	4919      	ldr	r1, [pc, #100]	@ (801d4e0 <dhcp_parse_reply+0x2f8>)
 801d47a:	4817      	ldr	r0, [pc, #92]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d47c:	f004 f952 	bl	8021724 <iprintf>
 801d480:	f06f 0305 	mvn.w	r3, #5
 801d484:	e130      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801d486:	2301      	movs	r3, #1
 801d488:	61bb      	str	r3, [r7, #24]
        break;
 801d48a:	e040      	b.n	801d50e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d48c:	7ffb      	ldrb	r3, [r7, #31]
 801d48e:	2b04      	cmp	r3, #4
 801d490:	d009      	beq.n	801d4a6 <dhcp_parse_reply+0x2be>
 801d492:	4b0f      	ldr	r3, [pc, #60]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d494:	f240 6221 	movw	r2, #1569	@ 0x621
 801d498:	490e      	ldr	r1, [pc, #56]	@ (801d4d4 <dhcp_parse_reply+0x2ec>)
 801d49a:	480f      	ldr	r0, [pc, #60]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d49c:	f004 f942 	bl	8021724 <iprintf>
 801d4a0:	f06f 0305 	mvn.w	r3, #5
 801d4a4:	e120      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801d4a6:	2302      	movs	r3, #2
 801d4a8:	61bb      	str	r3, [r7, #24]
        break;
 801d4aa:	e030      	b.n	801d50e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d4ac:	7ffb      	ldrb	r3, [r7, #31]
 801d4ae:	2b04      	cmp	r3, #4
 801d4b0:	d009      	beq.n	801d4c6 <dhcp_parse_reply+0x2de>
 801d4b2:	4b07      	ldr	r3, [pc, #28]	@ (801d4d0 <dhcp_parse_reply+0x2e8>)
 801d4b4:	f240 6225 	movw	r2, #1573	@ 0x625
 801d4b8:	4906      	ldr	r1, [pc, #24]	@ (801d4d4 <dhcp_parse_reply+0x2ec>)
 801d4ba:	4807      	ldr	r0, [pc, #28]	@ (801d4d8 <dhcp_parse_reply+0x2f0>)
 801d4bc:	f004 f932 	bl	8021724 <iprintf>
 801d4c0:	f06f 0305 	mvn.w	r3, #5
 801d4c4:	e110      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801d4c6:	2304      	movs	r3, #4
 801d4c8:	61bb      	str	r3, [r7, #24]
        break;
 801d4ca:	e020      	b.n	801d50e <dhcp_parse_reply+0x326>
 801d4cc:	2000be3c 	.word	0x2000be3c
 801d4d0:	08026744 	.word	0x08026744
 801d4d4:	080269dc 	.word	0x080269dc
 801d4d8:	080267a4 	.word	0x080267a4
 801d4dc:	080269e8 	.word	0x080269e8
 801d4e0:	080269fc 	.word	0x080269fc
 801d4e4:	08026a08 	.word	0x08026a08
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d4e8:	7ffb      	ldrb	r3, [r7, #31]
 801d4ea:	2b04      	cmp	r3, #4
 801d4ec:	d009      	beq.n	801d502 <dhcp_parse_reply+0x31a>
 801d4ee:	4b80      	ldr	r3, [pc, #512]	@ (801d6f0 <dhcp_parse_reply+0x508>)
 801d4f0:	f240 6229 	movw	r2, #1577	@ 0x629
 801d4f4:	497f      	ldr	r1, [pc, #508]	@ (801d6f4 <dhcp_parse_reply+0x50c>)
 801d4f6:	4880      	ldr	r0, [pc, #512]	@ (801d6f8 <dhcp_parse_reply+0x510>)
 801d4f8:	f004 f914 	bl	8021724 <iprintf>
 801d4fc:	f06f 0305 	mvn.w	r3, #5
 801d500:	e0f2      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 801d502:	2305      	movs	r3, #5
 801d504:	61bb      	str	r3, [r7, #24]
        break;
 801d506:	e002      	b.n	801d50e <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 801d508:	2300      	movs	r3, #0
 801d50a:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 801d50c:	bf00      	nop
    }
    offset += len + 2;
 801d50e:	7ffb      	ldrb	r3, [r7, #31]
 801d510:	b29a      	uxth	r2, r3
 801d512:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d514:	4413      	add	r3, r2
 801d516:	b29b      	uxth	r3, r3
 801d518:	3302      	adds	r3, #2
 801d51a:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (decode_len > 0) {
 801d51c:	7fbb      	ldrb	r3, [r7, #30]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d079      	beq.n	801d616 <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 801d522:	2300      	movs	r3, #0
 801d524:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801d526:	69bb      	ldr	r3, [r7, #24]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	db02      	blt.n	801d532 <dhcp_parse_reply+0x34a>
 801d52c:	69bb      	ldr	r3, [r7, #24]
 801d52e:	2b07      	cmp	r3, #7
 801d530:	dd06      	ble.n	801d540 <dhcp_parse_reply+0x358>
 801d532:	4b6f      	ldr	r3, [pc, #444]	@ (801d6f0 <dhcp_parse_reply+0x508>)
 801d534:	f240 6236 	movw	r2, #1590	@ 0x636
 801d538:	4970      	ldr	r1, [pc, #448]	@ (801d6fc <dhcp_parse_reply+0x514>)
 801d53a:	486f      	ldr	r0, [pc, #444]	@ (801d6f8 <dhcp_parse_reply+0x510>)
 801d53c:	f004 f8f2 	bl	8021724 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801d540:	4a6f      	ldr	r2, [pc, #444]	@ (801d700 <dhcp_parse_reply+0x518>)
 801d542:	69bb      	ldr	r3, [r7, #24]
 801d544:	4413      	add	r3, r2
 801d546:	781b      	ldrb	r3, [r3, #0]
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d164      	bne.n	801d616 <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 801d54c:	7fbb      	ldrb	r3, [r7, #30]
 801d54e:	2b04      	cmp	r3, #4
 801d550:	bf28      	it	cs
 801d552:	2304      	movcs	r3, #4
 801d554:	b2db      	uxtb	r3, r3
 801d556:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801d558:	8afb      	ldrh	r3, [r7, #22]
 801d55a:	8a7a      	ldrh	r2, [r7, #18]
 801d55c:	f107 0108 	add.w	r1, r7, #8
 801d560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d562:	f7f8 faed 	bl	8015b40 <pbuf_copy_partial>
 801d566:	4603      	mov	r3, r0
 801d568:	461a      	mov	r2, r3
 801d56a:	8a7b      	ldrh	r3, [r7, #18]
 801d56c:	4293      	cmp	r3, r2
 801d56e:	d002      	beq.n	801d576 <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 801d570:	f06f 0301 	mvn.w	r3, #1
 801d574:	e0b8      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801d576:	7fbb      	ldrb	r3, [r7, #30]
 801d578:	2b04      	cmp	r3, #4
 801d57a:	d927      	bls.n	801d5cc <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801d57c:	7fbb      	ldrb	r3, [r7, #30]
 801d57e:	f003 0303 	and.w	r3, r3, #3
 801d582:	b2db      	uxtb	r3, r3
 801d584:	2b00      	cmp	r3, #0
 801d586:	d009      	beq.n	801d59c <dhcp_parse_reply+0x3b4>
 801d588:	4b59      	ldr	r3, [pc, #356]	@ (801d6f0 <dhcp_parse_reply+0x508>)
 801d58a:	f240 623e 	movw	r2, #1598	@ 0x63e
 801d58e:	495d      	ldr	r1, [pc, #372]	@ (801d704 <dhcp_parse_reply+0x51c>)
 801d590:	4859      	ldr	r0, [pc, #356]	@ (801d6f8 <dhcp_parse_reply+0x510>)
 801d592:	f004 f8c7 	bl	8021724 <iprintf>
 801d596:	f06f 0305 	mvn.w	r3, #5
 801d59a:	e0a5      	b.n	801d6e8 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 801d59c:	4a58      	ldr	r2, [pc, #352]	@ (801d700 <dhcp_parse_reply+0x518>)
 801d59e:	69bb      	ldr	r3, [r7, #24]
 801d5a0:	4413      	add	r3, r2
 801d5a2:	2201      	movs	r2, #1
 801d5a4:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801d5a6:	68bb      	ldr	r3, [r7, #8]
 801d5a8:	4618      	mov	r0, r3
 801d5aa:	f7f6 fe80 	bl	80142ae <lwip_htonl>
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	4955      	ldr	r1, [pc, #340]	@ (801d708 <dhcp_parse_reply+0x520>)
 801d5b2:	69bb      	ldr	r3, [r7, #24]
 801d5b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          decode_len -= 4;
 801d5b8:	7fbb      	ldrb	r3, [r7, #30]
 801d5ba:	3b04      	subs	r3, #4
 801d5bc:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 801d5be:	8afb      	ldrh	r3, [r7, #22]
 801d5c0:	3304      	adds	r3, #4
 801d5c2:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801d5c4:	69bb      	ldr	r3, [r7, #24]
 801d5c6:	3301      	adds	r3, #1
 801d5c8:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 801d5ca:	e7ac      	b.n	801d526 <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 801d5cc:	7fbb      	ldrb	r3, [r7, #30]
 801d5ce:	2b04      	cmp	r3, #4
 801d5d0:	d106      	bne.n	801d5e0 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801d5d2:	68bb      	ldr	r3, [r7, #8]
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	f7f6 fe6a 	bl	80142ae <lwip_htonl>
 801d5da:	4603      	mov	r3, r0
 801d5dc:	60bb      	str	r3, [r7, #8]
 801d5de:	e010      	b.n	801d602 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801d5e0:	7fbb      	ldrb	r3, [r7, #30]
 801d5e2:	2b01      	cmp	r3, #1
 801d5e4:	d009      	beq.n	801d5fa <dhcp_parse_reply+0x412>
 801d5e6:	4b42      	ldr	r3, [pc, #264]	@ (801d6f0 <dhcp_parse_reply+0x508>)
 801d5e8:	f44f 62c9 	mov.w	r2, #1608	@ 0x648
 801d5ec:	4947      	ldr	r1, [pc, #284]	@ (801d70c <dhcp_parse_reply+0x524>)
 801d5ee:	4842      	ldr	r0, [pc, #264]	@ (801d6f8 <dhcp_parse_reply+0x510>)
 801d5f0:	f004 f898 	bl	8021724 <iprintf>
 801d5f4:	f06f 0305 	mvn.w	r3, #5
 801d5f8:	e076      	b.n	801d6e8 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 801d5fa:	f107 0308 	add.w	r3, r7, #8
 801d5fe:	781b      	ldrb	r3, [r3, #0]
 801d600:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 801d602:	4a3f      	ldr	r2, [pc, #252]	@ (801d700 <dhcp_parse_reply+0x518>)
 801d604:	69bb      	ldr	r3, [r7, #24]
 801d606:	4413      	add	r3, r2
 801d608:	2201      	movs	r2, #1
 801d60a:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 801d60c:	68ba      	ldr	r2, [r7, #8]
 801d60e:	493e      	ldr	r1, [pc, #248]	@ (801d708 <dhcp_parse_reply+0x520>)
 801d610:	69bb      	ldr	r3, [r7, #24]
 801d612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 801d616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d618:	895b      	ldrh	r3, [r3, #10]
 801d61a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801d61c:	429a      	cmp	r2, r3
 801d61e:	d323      	bcc.n	801d668 <dhcp_parse_reply+0x480>
      offset -= q->len;
 801d620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d622:	895b      	ldrh	r3, [r3, #10]
 801d624:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801d626:	1ad3      	subs	r3, r2, r3
 801d628:	867b      	strh	r3, [r7, #50]	@ 0x32
      offset_max -= q->len;
 801d62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d62c:	895b      	ldrh	r3, [r3, #10]
 801d62e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801d630:	1ad3      	subs	r3, r2, r3
 801d632:	863b      	strh	r3, [r7, #48]	@ 0x30
      if ((offset < offset_max) && offset_max) {
 801d634:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801d636:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801d638:	429a      	cmp	r2, r3
 801d63a:	d223      	bcs.n	801d684 <dhcp_parse_reply+0x49c>
 801d63c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d020      	beq.n	801d684 <dhcp_parse_reply+0x49c>
        q = q->next;
 801d642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	62bb      	str	r3, [r7, #40]	@ 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801d648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d109      	bne.n	801d662 <dhcp_parse_reply+0x47a>
 801d64e:	4b28      	ldr	r3, [pc, #160]	@ (801d6f0 <dhcp_parse_reply+0x508>)
 801d650:	f240 6254 	movw	r2, #1620	@ 0x654
 801d654:	492e      	ldr	r1, [pc, #184]	@ (801d710 <dhcp_parse_reply+0x528>)
 801d656:	4828      	ldr	r0, [pc, #160]	@ (801d6f8 <dhcp_parse_reply+0x510>)
 801d658:	f004 f864 	bl	8021724 <iprintf>
 801d65c:	f06f 0305 	mvn.w	r3, #5
 801d660:	e042      	b.n	801d6e8 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d664:	685b      	ldr	r3, [r3, #4]
 801d666:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d00a      	beq.n	801d684 <dhcp_parse_reply+0x49c>
 801d66e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801d670:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801d672:	429a      	cmp	r2, r3
 801d674:	d206      	bcs.n	801d684 <dhcp_parse_reply+0x49c>
 801d676:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d678:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d67a:	4413      	add	r3, r2
 801d67c:	781b      	ldrb	r3, [r3, #0]
 801d67e:	2bff      	cmp	r3, #255	@ 0xff
 801d680:	f47f adf6 	bne.w	801d270 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801d684:	4b1e      	ldr	r3, [pc, #120]	@ (801d700 <dhcp_parse_reply+0x518>)
 801d686:	781b      	ldrb	r3, [r3, #0]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d018      	beq.n	801d6be <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d68c:	4b1e      	ldr	r3, [pc, #120]	@ (801d708 <dhcp_parse_reply+0x520>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d692:	4b1b      	ldr	r3, [pc, #108]	@ (801d700 <dhcp_parse_reply+0x518>)
 801d694:	2200      	movs	r2, #0
 801d696:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	2b01      	cmp	r3, #1
 801d69c:	d102      	bne.n	801d6a4 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 801d69e:	2301      	movs	r3, #1
 801d6a0:	627b      	str	r3, [r7, #36]	@ 0x24
 801d6a2:	e00c      	b.n	801d6be <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	2b02      	cmp	r3, #2
 801d6a8:	d102      	bne.n	801d6b0 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	623b      	str	r3, [r7, #32]
 801d6ae:	e006      	b.n	801d6be <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	2b03      	cmp	r3, #3
 801d6b4:	d103      	bne.n	801d6be <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801d6b6:	2301      	movs	r3, #1
 801d6b8:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 801d6ba:	2301      	movs	r3, #1
 801d6bc:	627b      	str	r3, [r7, #36]	@ 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 801d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d006      	beq.n	801d6d2 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801d6c4:	2300      	movs	r3, #0
 801d6c6:	627b      	str	r3, [r7, #36]	@ 0x24
    options_idx = DHCP_FILE_OFS;
 801d6c8:	236c      	movs	r3, #108	@ 0x6c
 801d6ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801d6cc:	23ec      	movs	r3, #236	@ 0xec
 801d6ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801d6d0:	e5a8      	b.n	801d224 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801d6d2:	6a3b      	ldr	r3, [r7, #32]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d006      	beq.n	801d6e6 <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 801d6d8:	2300      	movs	r3, #0
 801d6da:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 801d6dc:	232c      	movs	r3, #44	@ 0x2c
 801d6de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801d6e0:	236c      	movs	r3, #108	@ 0x6c
 801d6e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801d6e4:	e59e      	b.n	801d224 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 801d6e6:	2300      	movs	r3, #0
}
 801d6e8:	4618      	mov	r0, r3
 801d6ea:	3738      	adds	r7, #56	@ 0x38
 801d6ec:	46bd      	mov	sp, r7
 801d6ee:	bd80      	pop	{r7, pc}
 801d6f0:	08026744 	.word	0x08026744
 801d6f4:	080269dc 	.word	0x080269dc
 801d6f8:	080267a4 	.word	0x080267a4
 801d6fc:	08026a20 	.word	0x08026a20
 801d700:	2000be3c 	.word	0x2000be3c
 801d704:	08026a34 	.word	0x08026a34
 801d708:	2000be1c 	.word	0x2000be1c
 801d70c:	08026a4c 	.word	0x08026a4c
 801d710:	08026a60 	.word	0x08026a60

0801d714 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801d714:	b580      	push	{r7, lr}
 801d716:	b08a      	sub	sp, #40	@ 0x28
 801d718:	af00      	add	r7, sp, #0
 801d71a:	60f8      	str	r0, [r7, #12]
 801d71c:	60b9      	str	r1, [r7, #8]
 801d71e:	607a      	str	r2, [r7, #4]
 801d720:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801d722:	4b69      	ldr	r3, [pc, #420]	@ (801d8c8 <dhcp_recv+0x1b4>)
 801d724:	685b      	ldr	r3, [r3, #4]
 801d726:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d728:	6a3b      	ldr	r3, [r7, #32]
 801d72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d72c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	685b      	ldr	r3, [r3, #4]
 801d732:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801d734:	69fb      	ldr	r3, [r7, #28]
 801d736:	2b00      	cmp	r3, #0
 801d738:	f000 80a9 	beq.w	801d88e <dhcp_recv+0x17a>
 801d73c:	69fb      	ldr	r3, [r7, #28]
 801d73e:	7a1b      	ldrb	r3, [r3, #8]
 801d740:	2b00      	cmp	r3, #0
 801d742:	f000 80a4 	beq.w	801d88e <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801d746:	69fb      	ldr	r3, [r7, #28]
 801d748:	685b      	ldr	r3, [r3, #4]
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	d006      	beq.n	801d75c <dhcp_recv+0x48>
 801d74e:	4b5f      	ldr	r3, [pc, #380]	@ (801d8cc <dhcp_recv+0x1b8>)
 801d750:	f44f 62d5 	mov.w	r2, #1704	@ 0x6a8
 801d754:	495e      	ldr	r1, [pc, #376]	@ (801d8d0 <dhcp_recv+0x1bc>)
 801d756:	485f      	ldr	r0, [pc, #380]	@ (801d8d4 <dhcp_recv+0x1c0>)
 801d758:	f003 ffe4 	bl	8021724 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	895b      	ldrh	r3, [r3, #10]
 801d760:	2b2b      	cmp	r3, #43	@ 0x2b
 801d762:	f240 8096 	bls.w	801d892 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801d766:	69bb      	ldr	r3, [r7, #24]
 801d768:	781b      	ldrb	r3, [r3, #0]
 801d76a:	2b02      	cmp	r3, #2
 801d76c:	f040 8093 	bne.w	801d896 <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801d770:	2300      	movs	r3, #0
 801d772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d776:	e012      	b.n	801d79e <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801d778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d77c:	6a3a      	ldr	r2, [r7, #32]
 801d77e:	4413      	add	r3, r2
 801d780:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801d784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d788:	69b9      	ldr	r1, [r7, #24]
 801d78a:	440b      	add	r3, r1
 801d78c:	7f1b      	ldrb	r3, [r3, #28]
 801d78e:	429a      	cmp	r2, r3
 801d790:	f040 8083 	bne.w	801d89a <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801d794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d798:	3301      	adds	r3, #1
 801d79a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d79e:	6a3b      	ldr	r3, [r7, #32]
 801d7a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d7a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801d7a8:	429a      	cmp	r2, r3
 801d7aa:	d207      	bcs.n	801d7bc <dhcp_recv+0xa8>
 801d7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d7b0:	2b05      	cmp	r3, #5
 801d7b2:	d803      	bhi.n	801d7bc <dhcp_recv+0xa8>
 801d7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d7b8:	2b0f      	cmp	r3, #15
 801d7ba:	d9dd      	bls.n	801d778 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801d7bc:	69bb      	ldr	r3, [r7, #24]
 801d7be:	685b      	ldr	r3, [r3, #4]
 801d7c0:	4618      	mov	r0, r3
 801d7c2:	f7f6 fd74 	bl	80142ae <lwip_htonl>
 801d7c6:	4602      	mov	r2, r0
 801d7c8:	69fb      	ldr	r3, [r7, #28]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	429a      	cmp	r2, r3
 801d7ce:	d166      	bne.n	801d89e <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 801d7d0:	6879      	ldr	r1, [r7, #4]
 801d7d2:	69f8      	ldr	r0, [r7, #28]
 801d7d4:	f7ff fd08 	bl	801d1e8 <dhcp_parse_reply>
 801d7d8:	4603      	mov	r3, r0
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d161      	bne.n	801d8a2 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801d7de:	4b3e      	ldr	r3, [pc, #248]	@ (801d8d8 <dhcp_recv+0x1c4>)
 801d7e0:	785b      	ldrb	r3, [r3, #1]
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d05f      	beq.n	801d8a6 <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801d7e6:	4b3d      	ldr	r3, [pc, #244]	@ (801d8dc <dhcp_recv+0x1c8>)
 801d7e8:	685b      	ldr	r3, [r3, #4]
 801d7ea:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801d7ec:	7dfb      	ldrb	r3, [r7, #23]
 801d7ee:	2b05      	cmp	r3, #5
 801d7f0:	d128      	bne.n	801d844 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801d7f2:	69fb      	ldr	r3, [r7, #28]
 801d7f4:	7a5b      	ldrb	r3, [r3, #9]
 801d7f6:	2b01      	cmp	r3, #1
 801d7f8:	d111      	bne.n	801d81e <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 801d7fa:	6a38      	ldr	r0, [r7, #32]
 801d7fc:	f7fe fea0 	bl	801c540 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801d800:	6a3b      	ldr	r3, [r7, #32]
 801d802:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801d806:	f003 0308 	and.w	r3, r3, #8
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d003      	beq.n	801d816 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801d80e:	6a38      	ldr	r0, [r7, #32]
 801d810:	f7fe fc68 	bl	801c0e4 <dhcp_check>
 801d814:	e04a      	b.n	801d8ac <dhcp_recv+0x198>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801d816:	6a38      	ldr	r0, [r7, #32]
 801d818:	f7ff f8a0 	bl	801c95c <dhcp_bind>
 801d81c:	e046      	b.n	801d8ac <dhcp_recv+0x198>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d81e:	69fb      	ldr	r3, [r7, #28]
 801d820:	7a5b      	ldrb	r3, [r3, #9]
 801d822:	2b03      	cmp	r3, #3
 801d824:	d007      	beq.n	801d836 <dhcp_recv+0x122>
 801d826:	69fb      	ldr	r3, [r7, #28]
 801d828:	7a5b      	ldrb	r3, [r3, #9]
 801d82a:	2b04      	cmp	r3, #4
 801d82c:	d003      	beq.n	801d836 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801d82e:	69fb      	ldr	r3, [r7, #28]
 801d830:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d832:	2b05      	cmp	r3, #5
 801d834:	d13a      	bne.n	801d8ac <dhcp_recv+0x198>
      dhcp_handle_ack(netif);
 801d836:	6a38      	ldr	r0, [r7, #32]
 801d838:	f7fe fe82 	bl	801c540 <dhcp_handle_ack>
      dhcp_bind(netif);
 801d83c:	6a38      	ldr	r0, [r7, #32]
 801d83e:	f7ff f88d 	bl	801c95c <dhcp_bind>
 801d842:	e033      	b.n	801d8ac <dhcp_recv+0x198>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801d844:	7dfb      	ldrb	r3, [r7, #23]
 801d846:	2b06      	cmp	r3, #6
 801d848:	d113      	bne.n	801d872 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d84a:	69fb      	ldr	r3, [r7, #28]
 801d84c:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 801d84e:	2b03      	cmp	r3, #3
 801d850:	d00b      	beq.n	801d86a <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d852:	69fb      	ldr	r3, [r7, #28]
 801d854:	7a5b      	ldrb	r3, [r3, #9]
 801d856:	2b01      	cmp	r3, #1
 801d858:	d007      	beq.n	801d86a <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d85a:	69fb      	ldr	r3, [r7, #28]
 801d85c:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d85e:	2b04      	cmp	r3, #4
 801d860:	d003      	beq.n	801d86a <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d862:	69fb      	ldr	r3, [r7, #28]
 801d864:	7a5b      	ldrb	r3, [r3, #9]
 801d866:	2b05      	cmp	r3, #5
 801d868:	d103      	bne.n	801d872 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801d86a:	6a38      	ldr	r0, [r7, #32]
 801d86c:	f7fe fc20 	bl	801c0b0 <dhcp_handle_nak>
 801d870:	e01c      	b.n	801d8ac <dhcp_recv+0x198>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801d872:	7dfb      	ldrb	r3, [r7, #23]
 801d874:	2b02      	cmp	r3, #2
 801d876:	d118      	bne.n	801d8aa <dhcp_recv+0x196>
 801d878:	69fb      	ldr	r3, [r7, #28]
 801d87a:	7a5b      	ldrb	r3, [r3, #9]
 801d87c:	2b06      	cmp	r3, #6
 801d87e:	d114      	bne.n	801d8aa <dhcp_recv+0x196>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 801d880:	69fb      	ldr	r3, [r7, #28]
 801d882:	2200      	movs	r2, #0
 801d884:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801d886:	6a38      	ldr	r0, [r7, #32]
 801d888:	f7fe fc60 	bl	801c14c <dhcp_handle_offer>
 801d88c:	e00e      	b.n	801d8ac <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801d88e:	bf00      	nop
 801d890:	e00c      	b.n	801d8ac <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801d892:	bf00      	nop
 801d894:	e00a      	b.n	801d8ac <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801d896:	bf00      	nop
 801d898:	e008      	b.n	801d8ac <dhcp_recv+0x198>
      goto free_pbuf_and_return;
 801d89a:	bf00      	nop
 801d89c:	e006      	b.n	801d8ac <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801d89e:	bf00      	nop
 801d8a0:	e004      	b.n	801d8ac <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801d8a2:	bf00      	nop
 801d8a4:	e002      	b.n	801d8ac <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801d8a6:	bf00      	nop
 801d8a8:	e000      	b.n	801d8ac <dhcp_recv+0x198>
  }

free_pbuf_and_return:
 801d8aa:	bf00      	nop
  if (dhcp != NULL) {
 801d8ac:	69fb      	ldr	r3, [r7, #28]
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d002      	beq.n	801d8b8 <dhcp_recv+0x1a4>
    dhcp->msg_in = NULL;
 801d8b2:	69fb      	ldr	r3, [r7, #28]
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 801d8b8:	6878      	ldr	r0, [r7, #4]
 801d8ba:	f7f7 ff43 	bl	8015744 <pbuf_free>
}
 801d8be:	bf00      	nop
 801d8c0:	3728      	adds	r7, #40	@ 0x28
 801d8c2:	46bd      	mov	sp, r7
 801d8c4:	bd80      	pop	{r7, pc}
 801d8c6:	bf00      	nop
 801d8c8:	2000863c 	.word	0x2000863c
 801d8cc:	08026744 	.word	0x08026744
 801d8d0:	08026870 	.word	0x08026870
 801d8d4:	080267a4 	.word	0x080267a4
 801d8d8:	2000be3c 	.word	0x2000be3c
 801d8dc:	2000be1c 	.word	0x2000be1c

0801d8e0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 801d8e0:	b590      	push	{r4, r7, lr}
 801d8e2:	b087      	sub	sp, #28
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	60f8      	str	r0, [r7, #12]
 801d8e8:	60b9      	str	r1, [r7, #8]
 801d8ea:	4613      	mov	r3, r2
 801d8ec:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d109      	bne.n	801d908 <dhcp_create_msg+0x28>
 801d8f4:	4ba3      	ldr	r3, [pc, #652]	@ (801db84 <dhcp_create_msg+0x2a4>)
 801d8f6:	f240 721d 	movw	r2, #1821	@ 0x71d
 801d8fa:	49a3      	ldr	r1, [pc, #652]	@ (801db88 <dhcp_create_msg+0x2a8>)
 801d8fc:	48a3      	ldr	r0, [pc, #652]	@ (801db8c <dhcp_create_msg+0x2ac>)
 801d8fe:	f003 ff11 	bl	8021724 <iprintf>
 801d902:	f06f 030f 	mvn.w	r3, #15
 801d906:	e138      	b.n	801db7a <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801d908:	68bb      	ldr	r3, [r7, #8]
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d109      	bne.n	801d922 <dhcp_create_msg+0x42>
 801d90e:	4b9d      	ldr	r3, [pc, #628]	@ (801db84 <dhcp_create_msg+0x2a4>)
 801d910:	f240 721e 	movw	r2, #1822	@ 0x71e
 801d914:	499e      	ldr	r1, [pc, #632]	@ (801db90 <dhcp_create_msg+0x2b0>)
 801d916:	489d      	ldr	r0, [pc, #628]	@ (801db8c <dhcp_create_msg+0x2ac>)
 801d918:	f003 ff04 	bl	8021724 <iprintf>
 801d91c:	f06f 0305 	mvn.w	r3, #5
 801d920:	e12b      	b.n	801db7a <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 801d922:	68bb      	ldr	r3, [r7, #8]
 801d924:	68db      	ldr	r3, [r3, #12]
 801d926:	2b00      	cmp	r3, #0
 801d928:	d006      	beq.n	801d938 <dhcp_create_msg+0x58>
 801d92a:	4b96      	ldr	r3, [pc, #600]	@ (801db84 <dhcp_create_msg+0x2a4>)
 801d92c:	f240 721f 	movw	r2, #1823	@ 0x71f
 801d930:	4998      	ldr	r1, [pc, #608]	@ (801db94 <dhcp_create_msg+0x2b4>)
 801d932:	4896      	ldr	r0, [pc, #600]	@ (801db8c <dhcp_create_msg+0x2ac>)
 801d934:	f003 fef6 	bl	8021724 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801d938:	68bb      	ldr	r3, [r7, #8]
 801d93a:	691b      	ldr	r3, [r3, #16]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d006      	beq.n	801d94e <dhcp_create_msg+0x6e>
 801d940:	4b90      	ldr	r3, [pc, #576]	@ (801db84 <dhcp_create_msg+0x2a4>)
 801d942:	f44f 62e4 	mov.w	r2, #1824	@ 0x720
 801d946:	4994      	ldr	r1, [pc, #592]	@ (801db98 <dhcp_create_msg+0x2b8>)
 801d948:	4890      	ldr	r0, [pc, #576]	@ (801db8c <dhcp_create_msg+0x2ac>)
 801d94a:	f003 feeb 	bl	8021724 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801d94e:	2200      	movs	r2, #0
 801d950:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801d954:	2000      	movs	r0, #0
 801d956:	f7f7 fb7d 	bl	8015054 <pbuf_alloc>
 801d95a:	4602      	mov	r2, r0
 801d95c:	68bb      	ldr	r3, [r7, #8]
 801d95e:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 801d960:	68bb      	ldr	r3, [r7, #8]
 801d962:	68db      	ldr	r3, [r3, #12]
 801d964:	2b00      	cmp	r3, #0
 801d966:	d102      	bne.n	801d96e <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801d968:	f04f 33ff 	mov.w	r3, #4294967295
 801d96c:	e105      	b.n	801db7a <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801d96e:	68bb      	ldr	r3, [r7, #8]
 801d970:	68db      	ldr	r3, [r3, #12]
 801d972:	895b      	ldrh	r3, [r3, #10]
 801d974:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801d978:	d206      	bcs.n	801d988 <dhcp_create_msg+0xa8>
 801d97a:	4b82      	ldr	r3, [pc, #520]	@ (801db84 <dhcp_create_msg+0x2a4>)
 801d97c:	f240 7227 	movw	r2, #1831	@ 0x727
 801d980:	4986      	ldr	r1, [pc, #536]	@ (801db9c <dhcp_create_msg+0x2bc>)
 801d982:	4882      	ldr	r0, [pc, #520]	@ (801db8c <dhcp_create_msg+0x2ac>)
 801d984:	f003 fece 	bl	8021724 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801d988:	79fb      	ldrb	r3, [r7, #7]
 801d98a:	2b03      	cmp	r3, #3
 801d98c:	d103      	bne.n	801d996 <dhcp_create_msg+0xb6>
 801d98e:	68bb      	ldr	r3, [r7, #8]
 801d990:	7a5b      	ldrb	r3, [r3, #9]
 801d992:	2b03      	cmp	r3, #3
 801d994:	d10d      	bne.n	801d9b2 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801d996:	68bb      	ldr	r3, [r7, #8]
 801d998:	7a9b      	ldrb	r3, [r3, #10]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d105      	bne.n	801d9aa <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801d99e:	f003 f8d9 	bl	8020b54 <rand>
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	461a      	mov	r2, r3
 801d9a6:	4b7e      	ldr	r3, [pc, #504]	@ (801dba0 <dhcp_create_msg+0x2c0>)
 801d9a8:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801d9aa:	4b7d      	ldr	r3, [pc, #500]	@ (801dba0 <dhcp_create_msg+0x2c0>)
 801d9ac:	681a      	ldr	r2, [r3, #0]
 801d9ae:	68bb      	ldr	r3, [r7, #8]
 801d9b0:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 801d9b2:	68bb      	ldr	r3, [r7, #8]
 801d9b4:	68db      	ldr	r3, [r3, #12]
 801d9b6:	685a      	ldr	r2, [r3, #4]
 801d9b8:	68bb      	ldr	r3, [r7, #8]
 801d9ba:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801d9bc:	68bb      	ldr	r3, [r7, #8]
 801d9be:	691b      	ldr	r3, [r3, #16]
 801d9c0:	2201      	movs	r2, #1
 801d9c2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 801d9c4:	68bb      	ldr	r3, [r7, #8]
 801d9c6:	691b      	ldr	r3, [r3, #16]
 801d9c8:	2201      	movs	r2, #1
 801d9ca:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801d9cc:	68bb      	ldr	r3, [r7, #8]
 801d9ce:	691b      	ldr	r3, [r3, #16]
 801d9d0:	68fa      	ldr	r2, [r7, #12]
 801d9d2:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 801d9d6:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 801d9d8:	68bb      	ldr	r3, [r7, #8]
 801d9da:	691b      	ldr	r3, [r3, #16]
 801d9dc:	2200      	movs	r2, #0
 801d9de:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 801d9e0:	68bb      	ldr	r3, [r7, #8]
 801d9e2:	681a      	ldr	r2, [r3, #0]
 801d9e4:	68bb      	ldr	r3, [r7, #8]
 801d9e6:	691c      	ldr	r4, [r3, #16]
 801d9e8:	4610      	mov	r0, r2
 801d9ea:	f7f6 fc60 	bl	80142ae <lwip_htonl>
 801d9ee:	4603      	mov	r3, r0
 801d9f0:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 801d9f2:	68bb      	ldr	r3, [r7, #8]
 801d9f4:	691b      	ldr	r3, [r3, #16]
 801d9f6:	2200      	movs	r2, #0
 801d9f8:	721a      	strb	r2, [r3, #8]
 801d9fa:	2200      	movs	r2, #0
 801d9fc:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 801d9fe:	68bb      	ldr	r3, [r7, #8]
 801da00:	691b      	ldr	r3, [r3, #16]
 801da02:	2200      	movs	r2, #0
 801da04:	729a      	strb	r2, [r3, #10]
 801da06:	2200      	movs	r2, #0
 801da08:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801da0a:	68bb      	ldr	r3, [r7, #8]
 801da0c:	691b      	ldr	r3, [r3, #16]
 801da0e:	2200      	movs	r2, #0
 801da10:	731a      	strb	r2, [r3, #12]
 801da12:	2200      	movs	r2, #0
 801da14:	735a      	strb	r2, [r3, #13]
 801da16:	2200      	movs	r2, #0
 801da18:	739a      	strb	r2, [r3, #14]
 801da1a:	2200      	movs	r2, #0
 801da1c:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801da1e:	79fb      	ldrb	r3, [r7, #7]
 801da20:	2b08      	cmp	r3, #8
 801da22:	d010      	beq.n	801da46 <dhcp_create_msg+0x166>
 801da24:	79fb      	ldrb	r3, [r7, #7]
 801da26:	2b04      	cmp	r3, #4
 801da28:	d00d      	beq.n	801da46 <dhcp_create_msg+0x166>
 801da2a:	79fb      	ldrb	r3, [r7, #7]
 801da2c:	2b07      	cmp	r3, #7
 801da2e:	d00a      	beq.n	801da46 <dhcp_create_msg+0x166>
 801da30:	79fb      	ldrb	r3, [r7, #7]
 801da32:	2b03      	cmp	r3, #3
 801da34:	d10d      	bne.n	801da52 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801da36:	68bb      	ldr	r3, [r7, #8]
 801da38:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801da3a:	2b05      	cmp	r3, #5
 801da3c:	d003      	beq.n	801da46 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801da3e:	68bb      	ldr	r3, [r7, #8]
 801da40:	7a5b      	ldrb	r3, [r3, #9]
 801da42:	2b04      	cmp	r3, #4
 801da44:	d105      	bne.n	801da52 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	1d1a      	adds	r2, r3, #4
 801da4a:	68bb      	ldr	r3, [r7, #8]
 801da4c:	691b      	ldr	r3, [r3, #16]
 801da4e:	6812      	ldr	r2, [r2, #0]
 801da50:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801da52:	68bb      	ldr	r3, [r7, #8]
 801da54:	691b      	ldr	r3, [r3, #16]
 801da56:	2200      	movs	r2, #0
 801da58:	741a      	strb	r2, [r3, #16]
 801da5a:	2200      	movs	r2, #0
 801da5c:	745a      	strb	r2, [r3, #17]
 801da5e:	2200      	movs	r2, #0
 801da60:	749a      	strb	r2, [r3, #18]
 801da62:	2200      	movs	r2, #0
 801da64:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801da66:	68bb      	ldr	r3, [r7, #8]
 801da68:	691b      	ldr	r3, [r3, #16]
 801da6a:	2200      	movs	r2, #0
 801da6c:	751a      	strb	r2, [r3, #20]
 801da6e:	2200      	movs	r2, #0
 801da70:	755a      	strb	r2, [r3, #21]
 801da72:	2200      	movs	r2, #0
 801da74:	759a      	strb	r2, [r3, #22]
 801da76:	2200      	movs	r2, #0
 801da78:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801da7a:	68bb      	ldr	r3, [r7, #8]
 801da7c:	691b      	ldr	r3, [r3, #16]
 801da7e:	2200      	movs	r2, #0
 801da80:	761a      	strb	r2, [r3, #24]
 801da82:	2200      	movs	r2, #0
 801da84:	765a      	strb	r2, [r3, #25]
 801da86:	2200      	movs	r2, #0
 801da88:	769a      	strb	r2, [r3, #26]
 801da8a:	2200      	movs	r2, #0
 801da8c:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801da8e:	2300      	movs	r3, #0
 801da90:	82fb      	strh	r3, [r7, #22]
 801da92:	e019      	b.n	801dac8 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801da9a:	461a      	mov	r2, r3
 801da9c:	8afb      	ldrh	r3, [r7, #22]
 801da9e:	4293      	cmp	r3, r2
 801daa0:	d208      	bcs.n	801dab4 <dhcp_create_msg+0x1d4>
 801daa2:	8afb      	ldrh	r3, [r7, #22]
 801daa4:	2b05      	cmp	r3, #5
 801daa6:	d805      	bhi.n	801dab4 <dhcp_create_msg+0x1d4>
 801daa8:	8afb      	ldrh	r3, [r7, #22]
 801daaa:	68fa      	ldr	r2, [r7, #12]
 801daac:	4413      	add	r3, r2
 801daae:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 801dab2:	e000      	b.n	801dab6 <dhcp_create_msg+0x1d6>
 801dab4:	2100      	movs	r1, #0
 801dab6:	68bb      	ldr	r3, [r7, #8]
 801dab8:	691a      	ldr	r2, [r3, #16]
 801daba:	8afb      	ldrh	r3, [r7, #22]
 801dabc:	4413      	add	r3, r2
 801dabe:	460a      	mov	r2, r1
 801dac0:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801dac2:	8afb      	ldrh	r3, [r7, #22]
 801dac4:	3301      	adds	r3, #1
 801dac6:	82fb      	strh	r3, [r7, #22]
 801dac8:	8afb      	ldrh	r3, [r7, #22]
 801daca:	2b0f      	cmp	r3, #15
 801dacc:	d9e2      	bls.n	801da94 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801dace:	2300      	movs	r3, #0
 801dad0:	82fb      	strh	r3, [r7, #22]
 801dad2:	e009      	b.n	801dae8 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 801dad4:	68bb      	ldr	r3, [r7, #8]
 801dad6:	691a      	ldr	r2, [r3, #16]
 801dad8:	8afb      	ldrh	r3, [r7, #22]
 801dada:	4413      	add	r3, r2
 801dadc:	2200      	movs	r2, #0
 801dade:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801dae2:	8afb      	ldrh	r3, [r7, #22]
 801dae4:	3301      	adds	r3, #1
 801dae6:	82fb      	strh	r3, [r7, #22]
 801dae8:	8afb      	ldrh	r3, [r7, #22]
 801daea:	2b3f      	cmp	r3, #63	@ 0x3f
 801daec:	d9f2      	bls.n	801dad4 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801daee:	2300      	movs	r3, #0
 801daf0:	82fb      	strh	r3, [r7, #22]
 801daf2:	e009      	b.n	801db08 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 801daf4:	68bb      	ldr	r3, [r7, #8]
 801daf6:	691a      	ldr	r2, [r3, #16]
 801daf8:	8afb      	ldrh	r3, [r7, #22]
 801dafa:	4413      	add	r3, r2
 801dafc:	2200      	movs	r2, #0
 801dafe:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801db02:	8afb      	ldrh	r3, [r7, #22]
 801db04:	3301      	adds	r3, #1
 801db06:	82fb      	strh	r3, [r7, #22]
 801db08:	8afb      	ldrh	r3, [r7, #22]
 801db0a:	2b7f      	cmp	r3, #127	@ 0x7f
 801db0c:	d9f2      	bls.n	801daf4 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801db0e:	68bb      	ldr	r3, [r7, #8]
 801db10:	691b      	ldr	r3, [r3, #16]
 801db12:	2200      	movs	r2, #0
 801db14:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801db18:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801db1c:	2200      	movs	r2, #0
 801db1e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801db22:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801db26:	2200      	movs	r2, #0
 801db28:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801db2c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801db30:	2200      	movs	r2, #0
 801db32:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801db36:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  dhcp->options_out_len = 0;
 801db3a:	68bb      	ldr	r3, [r7, #8]
 801db3c:	2200      	movs	r2, #0
 801db3e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801db40:	2300      	movs	r3, #0
 801db42:	82fb      	strh	r3, [r7, #22]
 801db44:	e00b      	b.n	801db5e <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801db46:	68bb      	ldr	r3, [r7, #8]
 801db48:	691a      	ldr	r2, [r3, #16]
 801db4a:	8afb      	ldrh	r3, [r7, #22]
 801db4c:	8af9      	ldrh	r1, [r7, #22]
 801db4e:	b2c9      	uxtb	r1, r1
 801db50:	4413      	add	r3, r2
 801db52:	460a      	mov	r2, r1
 801db54:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801db58:	8afb      	ldrh	r3, [r7, #22]
 801db5a:	3301      	adds	r3, #1
 801db5c:	82fb      	strh	r3, [r7, #22]
 801db5e:	8afb      	ldrh	r3, [r7, #22]
 801db60:	2b43      	cmp	r3, #67	@ 0x43
 801db62:	d9f0      	bls.n	801db46 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801db64:	2201      	movs	r2, #1
 801db66:	2135      	movs	r1, #53	@ 0x35
 801db68:	68b8      	ldr	r0, [r7, #8]
 801db6a:	f7ff fa4b 	bl	801d004 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 801db6e:	79fb      	ldrb	r3, [r7, #7]
 801db70:	4619      	mov	r1, r3
 801db72:	68b8      	ldr	r0, [r7, #8]
 801db74:	f7ff fa80 	bl	801d078 <dhcp_option_byte>
  return ERR_OK;
 801db78:	2300      	movs	r3, #0
}
 801db7a:	4618      	mov	r0, r3
 801db7c:	371c      	adds	r7, #28
 801db7e:	46bd      	mov	sp, r7
 801db80:	bd90      	pop	{r4, r7, pc}
 801db82:	bf00      	nop
 801db84:	08026744 	.word	0x08026744
 801db88:	08026a74 	.word	0x08026a74
 801db8c:	080267a4 	.word	0x080267a4
 801db90:	08026a94 	.word	0x08026a94
 801db94:	08026ab4 	.word	0x08026ab4
 801db98:	08026adc 	.word	0x08026adc
 801db9c:	08026b04 	.word	0x08026b04
 801dba0:	2000be4c 	.word	0x2000be4c

0801dba4 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 801dba4:	b580      	push	{r7, lr}
 801dba6:	b082      	sub	sp, #8
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d107      	bne.n	801dbc2 <dhcp_delete_msg+0x1e>
 801dbb2:	4b18      	ldr	r3, [pc, #96]	@ (801dc14 <dhcp_delete_msg+0x70>)
 801dbb4:	f240 726d 	movw	r2, #1901	@ 0x76d
 801dbb8:	4917      	ldr	r1, [pc, #92]	@ (801dc18 <dhcp_delete_msg+0x74>)
 801dbba:	4818      	ldr	r0, [pc, #96]	@ (801dc1c <dhcp_delete_msg+0x78>)
 801dbbc:	f003 fdb2 	bl	8021724 <iprintf>
 801dbc0:	e024      	b.n	801dc0c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	68db      	ldr	r3, [r3, #12]
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d106      	bne.n	801dbd8 <dhcp_delete_msg+0x34>
 801dbca:	4b12      	ldr	r3, [pc, #72]	@ (801dc14 <dhcp_delete_msg+0x70>)
 801dbcc:	f240 726e 	movw	r2, #1902	@ 0x76e
 801dbd0:	4913      	ldr	r1, [pc, #76]	@ (801dc20 <dhcp_delete_msg+0x7c>)
 801dbd2:	4812      	ldr	r0, [pc, #72]	@ (801dc1c <dhcp_delete_msg+0x78>)
 801dbd4:	f003 fda6 	bl	8021724 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	691b      	ldr	r3, [r3, #16]
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d106      	bne.n	801dbee <dhcp_delete_msg+0x4a>
 801dbe0:	4b0c      	ldr	r3, [pc, #48]	@ (801dc14 <dhcp_delete_msg+0x70>)
 801dbe2:	f240 726f 	movw	r2, #1903	@ 0x76f
 801dbe6:	490f      	ldr	r1, [pc, #60]	@ (801dc24 <dhcp_delete_msg+0x80>)
 801dbe8:	480c      	ldr	r0, [pc, #48]	@ (801dc1c <dhcp_delete_msg+0x78>)
 801dbea:	f003 fd9b 	bl	8021724 <iprintf>
  if (dhcp->p_out != NULL) {
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	68db      	ldr	r3, [r3, #12]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d004      	beq.n	801dc00 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	68db      	ldr	r3, [r3, #12]
 801dbfa:	4618      	mov	r0, r3
 801dbfc:	f7f7 fda2 	bl	8015744 <pbuf_free>
  }
  dhcp->p_out = NULL;
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	2200      	movs	r2, #0
 801dc04:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	2200      	movs	r2, #0
 801dc0a:	611a      	str	r2, [r3, #16]
}
 801dc0c:	3708      	adds	r7, #8
 801dc0e:	46bd      	mov	sp, r7
 801dc10:	bd80      	pop	{r7, pc}
 801dc12:	bf00      	nop
 801dc14:	08026744 	.word	0x08026744
 801dc18:	08026b44 	.word	0x08026b44
 801dc1c:	080267a4 	.word	0x080267a4
 801dc20:	08026b64 	.word	0x08026b64
 801dc24:	08026b8c 	.word	0x08026b8c

0801dc28 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801dc28:	b580      	push	{r7, lr}
 801dc2a:	b082      	sub	sp, #8
 801dc2c:	af00      	add	r7, sp, #0
 801dc2e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d107      	bne.n	801dc46 <dhcp_option_trailer+0x1e>
 801dc36:	4b24      	ldr	r3, [pc, #144]	@ (801dcc8 <dhcp_option_trailer+0xa0>)
 801dc38:	f240 7282 	movw	r2, #1922	@ 0x782
 801dc3c:	4923      	ldr	r1, [pc, #140]	@ (801dccc <dhcp_option_trailer+0xa4>)
 801dc3e:	4824      	ldr	r0, [pc, #144]	@ (801dcd0 <dhcp_option_trailer+0xa8>)
 801dc40:	f003 fd70 	bl	8021724 <iprintf>
 801dc44:	e03c      	b.n	801dcc0 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	691b      	ldr	r3, [r3, #16]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d106      	bne.n	801dc5c <dhcp_option_trailer+0x34>
 801dc4e:	4b1e      	ldr	r3, [pc, #120]	@ (801dcc8 <dhcp_option_trailer+0xa0>)
 801dc50:	f240 7283 	movw	r2, #1923	@ 0x783
 801dc54:	491f      	ldr	r1, [pc, #124]	@ (801dcd4 <dhcp_option_trailer+0xac>)
 801dc56:	481e      	ldr	r0, [pc, #120]	@ (801dcd0 <dhcp_option_trailer+0xa8>)
 801dc58:	f003 fd64 	bl	8021724 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	8a9b      	ldrh	r3, [r3, #20]
 801dc60:	2b43      	cmp	r3, #67	@ 0x43
 801dc62:	d906      	bls.n	801dc72 <dhcp_option_trailer+0x4a>
 801dc64:	4b18      	ldr	r3, [pc, #96]	@ (801dcc8 <dhcp_option_trailer+0xa0>)
 801dc66:	f240 7284 	movw	r2, #1924	@ 0x784
 801dc6a:	491b      	ldr	r1, [pc, #108]	@ (801dcd8 <dhcp_option_trailer+0xb0>)
 801dc6c:	4818      	ldr	r0, [pc, #96]	@ (801dcd0 <dhcp_option_trailer+0xa8>)
 801dc6e:	f003 fd59 	bl	8021724 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	691a      	ldr	r2, [r3, #16]
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	8a9b      	ldrh	r3, [r3, #20]
 801dc7a:	1c59      	adds	r1, r3, #1
 801dc7c:	b288      	uxth	r0, r1
 801dc7e:	6879      	ldr	r1, [r7, #4]
 801dc80:	8288      	strh	r0, [r1, #20]
 801dc82:	4413      	add	r3, r2
 801dc84:	22ff      	movs	r2, #255	@ 0xff
 801dc86:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801dc8a:	e00b      	b.n	801dca4 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	691a      	ldr	r2, [r3, #16]
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	8a9b      	ldrh	r3, [r3, #20]
 801dc94:	1c59      	adds	r1, r3, #1
 801dc96:	b288      	uxth	r0, r1
 801dc98:	6879      	ldr	r1, [r7, #4]
 801dc9a:	8288      	strh	r0, [r1, #20]
 801dc9c:	4413      	add	r3, r2
 801dc9e:	2200      	movs	r2, #0
 801dca0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	8a9b      	ldrh	r3, [r3, #20]
 801dca8:	2b43      	cmp	r3, #67	@ 0x43
 801dcaa:	d905      	bls.n	801dcb8 <dhcp_option_trailer+0x90>
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	8a9b      	ldrh	r3, [r3, #20]
 801dcb0:	f003 0303 	and.w	r3, r3, #3
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d003      	beq.n	801dcc0 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801dcbc:	2b43      	cmp	r3, #67	@ 0x43
 801dcbe:	d9e5      	bls.n	801dc8c <dhcp_option_trailer+0x64>
  }
}
 801dcc0:	3708      	adds	r7, #8
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	bd80      	pop	{r7, pc}
 801dcc6:	bf00      	nop
 801dcc8:	08026744 	.word	0x08026744
 801dccc:	08026bb4 	.word	0x08026bb4
 801dcd0:	080267a4 	.word	0x080267a4
 801dcd4:	08026bd8 	.word	0x08026bd8
 801dcd8:	08026c04 	.word	0x08026c04

0801dcdc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801dcdc:	b480      	push	{r7}
 801dcde:	b085      	sub	sp, #20
 801dce0:	af00      	add	r7, sp, #0
 801dce2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d017      	beq.n	801dd1a <dhcp_supplied_address+0x3e>
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	d013      	beq.n	801dd1a <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dcf6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801dcf8:	68fb      	ldr	r3, [r7, #12]
 801dcfa:	7a5b      	ldrb	r3, [r3, #9]
 801dcfc:	2b0a      	cmp	r3, #10
 801dcfe:	d007      	beq.n	801dd10 <dhcp_supplied_address+0x34>
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	7a5b      	ldrb	r3, [r3, #9]
 801dd04:	2b05      	cmp	r3, #5
 801dd06:	d003      	beq.n	801dd10 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801dd0c:	2b04      	cmp	r3, #4
 801dd0e:	d101      	bne.n	801dd14 <dhcp_supplied_address+0x38>
 801dd10:	2301      	movs	r3, #1
 801dd12:	e000      	b.n	801dd16 <dhcp_supplied_address+0x3a>
 801dd14:	2300      	movs	r3, #0
 801dd16:	b2db      	uxtb	r3, r3
 801dd18:	e000      	b.n	801dd1c <dhcp_supplied_address+0x40>
  }
  return 0;
 801dd1a:	2300      	movs	r3, #0
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	3714      	adds	r7, #20
 801dd20:	46bd      	mov	sp, r7
 801dd22:	bc80      	pop	{r7}
 801dd24:	4770      	bx	lr
	...

0801dd28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801dd28:	b580      	push	{r7, lr}
 801dd2a:	b082      	sub	sp, #8
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801dd30:	4915      	ldr	r1, [pc, #84]	@ (801dd88 <etharp_free_entry+0x60>)
 801dd32:	687a      	ldr	r2, [r7, #4]
 801dd34:	4613      	mov	r3, r2
 801dd36:	005b      	lsls	r3, r3, #1
 801dd38:	4413      	add	r3, r2
 801dd3a:	00db      	lsls	r3, r3, #3
 801dd3c:	440b      	add	r3, r1
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d013      	beq.n	801dd6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801dd44:	4910      	ldr	r1, [pc, #64]	@ (801dd88 <etharp_free_entry+0x60>)
 801dd46:	687a      	ldr	r2, [r7, #4]
 801dd48:	4613      	mov	r3, r2
 801dd4a:	005b      	lsls	r3, r3, #1
 801dd4c:	4413      	add	r3, r2
 801dd4e:	00db      	lsls	r3, r3, #3
 801dd50:	440b      	add	r3, r1
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	4618      	mov	r0, r3
 801dd56:	f7f7 fcf5 	bl	8015744 <pbuf_free>
    arp_table[i].q = NULL;
 801dd5a:	490b      	ldr	r1, [pc, #44]	@ (801dd88 <etharp_free_entry+0x60>)
 801dd5c:	687a      	ldr	r2, [r7, #4]
 801dd5e:	4613      	mov	r3, r2
 801dd60:	005b      	lsls	r3, r3, #1
 801dd62:	4413      	add	r3, r2
 801dd64:	00db      	lsls	r3, r3, #3
 801dd66:	440b      	add	r3, r1
 801dd68:	2200      	movs	r2, #0
 801dd6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801dd6c:	4906      	ldr	r1, [pc, #24]	@ (801dd88 <etharp_free_entry+0x60>)
 801dd6e:	687a      	ldr	r2, [r7, #4]
 801dd70:	4613      	mov	r3, r2
 801dd72:	005b      	lsls	r3, r3, #1
 801dd74:	4413      	add	r3, r2
 801dd76:	00db      	lsls	r3, r3, #3
 801dd78:	440b      	add	r3, r1
 801dd7a:	3314      	adds	r3, #20
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801dd80:	bf00      	nop
 801dd82:	3708      	adds	r7, #8
 801dd84:	46bd      	mov	sp, r7
 801dd86:	bd80      	pop	{r7, pc}
 801dd88:	2000be50 	.word	0x2000be50

0801dd8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801dd8c:	b580      	push	{r7, lr}
 801dd8e:	b082      	sub	sp, #8
 801dd90:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dd92:	2300      	movs	r3, #0
 801dd94:	71fb      	strb	r3, [r7, #7]
 801dd96:	e096      	b.n	801dec6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801dd98:	79fa      	ldrb	r2, [r7, #7]
 801dd9a:	494f      	ldr	r1, [pc, #316]	@ (801ded8 <etharp_tmr+0x14c>)
 801dd9c:	4613      	mov	r3, r2
 801dd9e:	005b      	lsls	r3, r3, #1
 801dda0:	4413      	add	r3, r2
 801dda2:	00db      	lsls	r3, r3, #3
 801dda4:	440b      	add	r3, r1
 801dda6:	3314      	adds	r3, #20
 801dda8:	781b      	ldrb	r3, [r3, #0]
 801ddaa:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801ddac:	79bb      	ldrb	r3, [r7, #6]
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	f000 8086 	beq.w	801dec0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801ddb4:	79fa      	ldrb	r2, [r7, #7]
 801ddb6:	4948      	ldr	r1, [pc, #288]	@ (801ded8 <etharp_tmr+0x14c>)
 801ddb8:	4613      	mov	r3, r2
 801ddba:	005b      	lsls	r3, r3, #1
 801ddbc:	4413      	add	r3, r2
 801ddbe:	00db      	lsls	r3, r3, #3
 801ddc0:	440b      	add	r3, r1
 801ddc2:	3312      	adds	r3, #18
 801ddc4:	881b      	ldrh	r3, [r3, #0]
 801ddc6:	3301      	adds	r3, #1
 801ddc8:	b298      	uxth	r0, r3
 801ddca:	4943      	ldr	r1, [pc, #268]	@ (801ded8 <etharp_tmr+0x14c>)
 801ddcc:	4613      	mov	r3, r2
 801ddce:	005b      	lsls	r3, r3, #1
 801ddd0:	4413      	add	r3, r2
 801ddd2:	00db      	lsls	r3, r3, #3
 801ddd4:	440b      	add	r3, r1
 801ddd6:	3312      	adds	r3, #18
 801ddd8:	4602      	mov	r2, r0
 801ddda:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801dddc:	79fa      	ldrb	r2, [r7, #7]
 801ddde:	493e      	ldr	r1, [pc, #248]	@ (801ded8 <etharp_tmr+0x14c>)
 801dde0:	4613      	mov	r3, r2
 801dde2:	005b      	lsls	r3, r3, #1
 801dde4:	4413      	add	r3, r2
 801dde6:	00db      	lsls	r3, r3, #3
 801dde8:	440b      	add	r3, r1
 801ddea:	3312      	adds	r3, #18
 801ddec:	881b      	ldrh	r3, [r3, #0]
 801ddee:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801ddf2:	d215      	bcs.n	801de20 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ddf4:	79fa      	ldrb	r2, [r7, #7]
 801ddf6:	4938      	ldr	r1, [pc, #224]	@ (801ded8 <etharp_tmr+0x14c>)
 801ddf8:	4613      	mov	r3, r2
 801ddfa:	005b      	lsls	r3, r3, #1
 801ddfc:	4413      	add	r3, r2
 801ddfe:	00db      	lsls	r3, r3, #3
 801de00:	440b      	add	r3, r1
 801de02:	3314      	adds	r3, #20
 801de04:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801de06:	2b01      	cmp	r3, #1
 801de08:	d10f      	bne.n	801de2a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801de0a:	79fa      	ldrb	r2, [r7, #7]
 801de0c:	4932      	ldr	r1, [pc, #200]	@ (801ded8 <etharp_tmr+0x14c>)
 801de0e:	4613      	mov	r3, r2
 801de10:	005b      	lsls	r3, r3, #1
 801de12:	4413      	add	r3, r2
 801de14:	00db      	lsls	r3, r3, #3
 801de16:	440b      	add	r3, r1
 801de18:	3312      	adds	r3, #18
 801de1a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801de1c:	2b04      	cmp	r3, #4
 801de1e:	d904      	bls.n	801de2a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801de20:	79fb      	ldrb	r3, [r7, #7]
 801de22:	4618      	mov	r0, r3
 801de24:	f7ff ff80 	bl	801dd28 <etharp_free_entry>
 801de28:	e04a      	b.n	801dec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801de2a:	79fa      	ldrb	r2, [r7, #7]
 801de2c:	492a      	ldr	r1, [pc, #168]	@ (801ded8 <etharp_tmr+0x14c>)
 801de2e:	4613      	mov	r3, r2
 801de30:	005b      	lsls	r3, r3, #1
 801de32:	4413      	add	r3, r2
 801de34:	00db      	lsls	r3, r3, #3
 801de36:	440b      	add	r3, r1
 801de38:	3314      	adds	r3, #20
 801de3a:	781b      	ldrb	r3, [r3, #0]
 801de3c:	2b03      	cmp	r3, #3
 801de3e:	d10a      	bne.n	801de56 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801de40:	79fa      	ldrb	r2, [r7, #7]
 801de42:	4925      	ldr	r1, [pc, #148]	@ (801ded8 <etharp_tmr+0x14c>)
 801de44:	4613      	mov	r3, r2
 801de46:	005b      	lsls	r3, r3, #1
 801de48:	4413      	add	r3, r2
 801de4a:	00db      	lsls	r3, r3, #3
 801de4c:	440b      	add	r3, r1
 801de4e:	3314      	adds	r3, #20
 801de50:	2204      	movs	r2, #4
 801de52:	701a      	strb	r2, [r3, #0]
 801de54:	e034      	b.n	801dec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801de56:	79fa      	ldrb	r2, [r7, #7]
 801de58:	491f      	ldr	r1, [pc, #124]	@ (801ded8 <etharp_tmr+0x14c>)
 801de5a:	4613      	mov	r3, r2
 801de5c:	005b      	lsls	r3, r3, #1
 801de5e:	4413      	add	r3, r2
 801de60:	00db      	lsls	r3, r3, #3
 801de62:	440b      	add	r3, r1
 801de64:	3314      	adds	r3, #20
 801de66:	781b      	ldrb	r3, [r3, #0]
 801de68:	2b04      	cmp	r3, #4
 801de6a:	d10a      	bne.n	801de82 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801de6c:	79fa      	ldrb	r2, [r7, #7]
 801de6e:	491a      	ldr	r1, [pc, #104]	@ (801ded8 <etharp_tmr+0x14c>)
 801de70:	4613      	mov	r3, r2
 801de72:	005b      	lsls	r3, r3, #1
 801de74:	4413      	add	r3, r2
 801de76:	00db      	lsls	r3, r3, #3
 801de78:	440b      	add	r3, r1
 801de7a:	3314      	adds	r3, #20
 801de7c:	2202      	movs	r2, #2
 801de7e:	701a      	strb	r2, [r3, #0]
 801de80:	e01e      	b.n	801dec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801de82:	79fa      	ldrb	r2, [r7, #7]
 801de84:	4914      	ldr	r1, [pc, #80]	@ (801ded8 <etharp_tmr+0x14c>)
 801de86:	4613      	mov	r3, r2
 801de88:	005b      	lsls	r3, r3, #1
 801de8a:	4413      	add	r3, r2
 801de8c:	00db      	lsls	r3, r3, #3
 801de8e:	440b      	add	r3, r1
 801de90:	3314      	adds	r3, #20
 801de92:	781b      	ldrb	r3, [r3, #0]
 801de94:	2b01      	cmp	r3, #1
 801de96:	d113      	bne.n	801dec0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801de98:	79fa      	ldrb	r2, [r7, #7]
 801de9a:	490f      	ldr	r1, [pc, #60]	@ (801ded8 <etharp_tmr+0x14c>)
 801de9c:	4613      	mov	r3, r2
 801de9e:	005b      	lsls	r3, r3, #1
 801dea0:	4413      	add	r3, r2
 801dea2:	00db      	lsls	r3, r3, #3
 801dea4:	440b      	add	r3, r1
 801dea6:	3308      	adds	r3, #8
 801dea8:	6818      	ldr	r0, [r3, #0]
 801deaa:	79fa      	ldrb	r2, [r7, #7]
 801deac:	4613      	mov	r3, r2
 801deae:	005b      	lsls	r3, r3, #1
 801deb0:	4413      	add	r3, r2
 801deb2:	00db      	lsls	r3, r3, #3
 801deb4:	4a08      	ldr	r2, [pc, #32]	@ (801ded8 <etharp_tmr+0x14c>)
 801deb6:	4413      	add	r3, r2
 801deb8:	3304      	adds	r3, #4
 801deba:	4619      	mov	r1, r3
 801debc:	f000 fee8 	bl	801ec90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dec0:	79fb      	ldrb	r3, [r7, #7]
 801dec2:	3301      	adds	r3, #1
 801dec4:	71fb      	strb	r3, [r7, #7]
 801dec6:	79fb      	ldrb	r3, [r7, #7]
 801dec8:	2b09      	cmp	r3, #9
 801deca:	f67f af65 	bls.w	801dd98 <etharp_tmr+0xc>
      }
    }
  }
}
 801dece:	bf00      	nop
 801ded0:	bf00      	nop
 801ded2:	3708      	adds	r7, #8
 801ded4:	46bd      	mov	sp, r7
 801ded6:	bd80      	pop	{r7, pc}
 801ded8:	2000be50 	.word	0x2000be50

0801dedc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b088      	sub	sp, #32
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	60f8      	str	r0, [r7, #12]
 801dee4:	460b      	mov	r3, r1
 801dee6:	607a      	str	r2, [r7, #4]
 801dee8:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801deea:	230a      	movs	r3, #10
 801deec:	77fb      	strb	r3, [r7, #31]
 801deee:	230a      	movs	r3, #10
 801def0:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801def2:	230a      	movs	r3, #10
 801def4:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801def6:	2300      	movs	r3, #0
 801def8:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801defa:	230a      	movs	r3, #10
 801defc:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801defe:	2300      	movs	r3, #0
 801df00:	833b      	strh	r3, [r7, #24]
 801df02:	2300      	movs	r3, #0
 801df04:	82fb      	strh	r3, [r7, #22]
 801df06:	2300      	movs	r3, #0
 801df08:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801df0a:	2300      	movs	r3, #0
 801df0c:	773b      	strb	r3, [r7, #28]
 801df0e:	e093      	b.n	801e038 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801df10:	7f3a      	ldrb	r2, [r7, #28]
 801df12:	4990      	ldr	r1, [pc, #576]	@ (801e154 <etharp_find_entry+0x278>)
 801df14:	4613      	mov	r3, r2
 801df16:	005b      	lsls	r3, r3, #1
 801df18:	4413      	add	r3, r2
 801df1a:	00db      	lsls	r3, r3, #3
 801df1c:	440b      	add	r3, r1
 801df1e:	3314      	adds	r3, #20
 801df20:	781b      	ldrb	r3, [r3, #0]
 801df22:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801df24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801df28:	2b0a      	cmp	r3, #10
 801df2a:	d105      	bne.n	801df38 <etharp_find_entry+0x5c>
 801df2c:	7cfb      	ldrb	r3, [r7, #19]
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d102      	bne.n	801df38 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801df32:	7f3b      	ldrb	r3, [r7, #28]
 801df34:	777b      	strb	r3, [r7, #29]
 801df36:	e07c      	b.n	801e032 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801df38:	7cfb      	ldrb	r3, [r7, #19]
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	d079      	beq.n	801e032 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801df3e:	7cfb      	ldrb	r3, [r7, #19]
 801df40:	2b01      	cmp	r3, #1
 801df42:	d009      	beq.n	801df58 <etharp_find_entry+0x7c>
 801df44:	7cfb      	ldrb	r3, [r7, #19]
 801df46:	2b01      	cmp	r3, #1
 801df48:	d806      	bhi.n	801df58 <etharp_find_entry+0x7c>
 801df4a:	4b83      	ldr	r3, [pc, #524]	@ (801e158 <etharp_find_entry+0x27c>)
 801df4c:	f240 1225 	movw	r2, #293	@ 0x125
 801df50:	4982      	ldr	r1, [pc, #520]	@ (801e15c <etharp_find_entry+0x280>)
 801df52:	4883      	ldr	r0, [pc, #524]	@ (801e160 <etharp_find_entry+0x284>)
 801df54:	f003 fbe6 	bl	8021724 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801df58:	68fb      	ldr	r3, [r7, #12]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d00f      	beq.n	801df7e <etharp_find_entry+0xa2>
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	6819      	ldr	r1, [r3, #0]
 801df62:	7f3a      	ldrb	r2, [r7, #28]
 801df64:	487b      	ldr	r0, [pc, #492]	@ (801e154 <etharp_find_entry+0x278>)
 801df66:	4613      	mov	r3, r2
 801df68:	005b      	lsls	r3, r3, #1
 801df6a:	4413      	add	r3, r2
 801df6c:	00db      	lsls	r3, r3, #3
 801df6e:	4403      	add	r3, r0
 801df70:	3304      	adds	r3, #4
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	4299      	cmp	r1, r3
 801df76:	d102      	bne.n	801df7e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801df78:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801df7c:	e0e5      	b.n	801e14a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801df7e:	7cfb      	ldrb	r3, [r7, #19]
 801df80:	2b01      	cmp	r3, #1
 801df82:	d13b      	bne.n	801dffc <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801df84:	7f3a      	ldrb	r2, [r7, #28]
 801df86:	4973      	ldr	r1, [pc, #460]	@ (801e154 <etharp_find_entry+0x278>)
 801df88:	4613      	mov	r3, r2
 801df8a:	005b      	lsls	r3, r3, #1
 801df8c:	4413      	add	r3, r2
 801df8e:	00db      	lsls	r3, r3, #3
 801df90:	440b      	add	r3, r1
 801df92:	681b      	ldr	r3, [r3, #0]
 801df94:	2b00      	cmp	r3, #0
 801df96:	d018      	beq.n	801dfca <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801df98:	7f3a      	ldrb	r2, [r7, #28]
 801df9a:	496e      	ldr	r1, [pc, #440]	@ (801e154 <etharp_find_entry+0x278>)
 801df9c:	4613      	mov	r3, r2
 801df9e:	005b      	lsls	r3, r3, #1
 801dfa0:	4413      	add	r3, r2
 801dfa2:	00db      	lsls	r3, r3, #3
 801dfa4:	440b      	add	r3, r1
 801dfa6:	3312      	adds	r3, #18
 801dfa8:	881b      	ldrh	r3, [r3, #0]
 801dfaa:	8b3a      	ldrh	r2, [r7, #24]
 801dfac:	429a      	cmp	r2, r3
 801dfae:	d840      	bhi.n	801e032 <etharp_find_entry+0x156>
            old_queue = i;
 801dfb0:	7f3b      	ldrb	r3, [r7, #28]
 801dfb2:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801dfb4:	7f3a      	ldrb	r2, [r7, #28]
 801dfb6:	4967      	ldr	r1, [pc, #412]	@ (801e154 <etharp_find_entry+0x278>)
 801dfb8:	4613      	mov	r3, r2
 801dfba:	005b      	lsls	r3, r3, #1
 801dfbc:	4413      	add	r3, r2
 801dfbe:	00db      	lsls	r3, r3, #3
 801dfc0:	440b      	add	r3, r1
 801dfc2:	3312      	adds	r3, #18
 801dfc4:	881b      	ldrh	r3, [r3, #0]
 801dfc6:	833b      	strh	r3, [r7, #24]
 801dfc8:	e033      	b.n	801e032 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801dfca:	7f3a      	ldrb	r2, [r7, #28]
 801dfcc:	4961      	ldr	r1, [pc, #388]	@ (801e154 <etharp_find_entry+0x278>)
 801dfce:	4613      	mov	r3, r2
 801dfd0:	005b      	lsls	r3, r3, #1
 801dfd2:	4413      	add	r3, r2
 801dfd4:	00db      	lsls	r3, r3, #3
 801dfd6:	440b      	add	r3, r1
 801dfd8:	3312      	adds	r3, #18
 801dfda:	881b      	ldrh	r3, [r3, #0]
 801dfdc:	8afa      	ldrh	r2, [r7, #22]
 801dfde:	429a      	cmp	r2, r3
 801dfe0:	d827      	bhi.n	801e032 <etharp_find_entry+0x156>
            old_pending = i;
 801dfe2:	7f3b      	ldrb	r3, [r7, #28]
 801dfe4:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801dfe6:	7f3a      	ldrb	r2, [r7, #28]
 801dfe8:	495a      	ldr	r1, [pc, #360]	@ (801e154 <etharp_find_entry+0x278>)
 801dfea:	4613      	mov	r3, r2
 801dfec:	005b      	lsls	r3, r3, #1
 801dfee:	4413      	add	r3, r2
 801dff0:	00db      	lsls	r3, r3, #3
 801dff2:	440b      	add	r3, r1
 801dff4:	3312      	adds	r3, #18
 801dff6:	881b      	ldrh	r3, [r3, #0]
 801dff8:	82fb      	strh	r3, [r7, #22]
 801dffa:	e01a      	b.n	801e032 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801dffc:	7cfb      	ldrb	r3, [r7, #19]
 801dffe:	2b01      	cmp	r3, #1
 801e000:	d917      	bls.n	801e032 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e002:	7f3a      	ldrb	r2, [r7, #28]
 801e004:	4953      	ldr	r1, [pc, #332]	@ (801e154 <etharp_find_entry+0x278>)
 801e006:	4613      	mov	r3, r2
 801e008:	005b      	lsls	r3, r3, #1
 801e00a:	4413      	add	r3, r2
 801e00c:	00db      	lsls	r3, r3, #3
 801e00e:	440b      	add	r3, r1
 801e010:	3312      	adds	r3, #18
 801e012:	881b      	ldrh	r3, [r3, #0]
 801e014:	8aba      	ldrh	r2, [r7, #20]
 801e016:	429a      	cmp	r2, r3
 801e018:	d80b      	bhi.n	801e032 <etharp_find_entry+0x156>
            old_stable = i;
 801e01a:	7f3b      	ldrb	r3, [r7, #28]
 801e01c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801e01e:	7f3a      	ldrb	r2, [r7, #28]
 801e020:	494c      	ldr	r1, [pc, #304]	@ (801e154 <etharp_find_entry+0x278>)
 801e022:	4613      	mov	r3, r2
 801e024:	005b      	lsls	r3, r3, #1
 801e026:	4413      	add	r3, r2
 801e028:	00db      	lsls	r3, r3, #3
 801e02a:	440b      	add	r3, r1
 801e02c:	3312      	adds	r3, #18
 801e02e:	881b      	ldrh	r3, [r3, #0]
 801e030:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e032:	7f3b      	ldrb	r3, [r7, #28]
 801e034:	3301      	adds	r3, #1
 801e036:	773b      	strb	r3, [r7, #28]
 801e038:	7f3b      	ldrb	r3, [r7, #28]
 801e03a:	2b09      	cmp	r3, #9
 801e03c:	f67f af68 	bls.w	801df10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e040:	7afb      	ldrb	r3, [r7, #11]
 801e042:	f003 0302 	and.w	r3, r3, #2
 801e046:	2b00      	cmp	r3, #0
 801e048:	d108      	bne.n	801e05c <etharp_find_entry+0x180>
 801e04a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801e04e:	2b0a      	cmp	r3, #10
 801e050:	d107      	bne.n	801e062 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e052:	7afb      	ldrb	r3, [r7, #11]
 801e054:	f003 0301 	and.w	r3, r3, #1
 801e058:	2b00      	cmp	r3, #0
 801e05a:	d102      	bne.n	801e062 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801e05c:	f04f 33ff 	mov.w	r3, #4294967295
 801e060:	e073      	b.n	801e14a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e062:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801e066:	2b09      	cmp	r3, #9
 801e068:	dc02      	bgt.n	801e070 <etharp_find_entry+0x194>
    i = empty;
 801e06a:	7f7b      	ldrb	r3, [r7, #29]
 801e06c:	773b      	strb	r3, [r7, #28]
 801e06e:	e036      	b.n	801e0de <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e070:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e074:	2b09      	cmp	r3, #9
 801e076:	dc13      	bgt.n	801e0a0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801e078:	7fbb      	ldrb	r3, [r7, #30]
 801e07a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e07c:	7f3a      	ldrb	r2, [r7, #28]
 801e07e:	4935      	ldr	r1, [pc, #212]	@ (801e154 <etharp_find_entry+0x278>)
 801e080:	4613      	mov	r3, r2
 801e082:	005b      	lsls	r3, r3, #1
 801e084:	4413      	add	r3, r2
 801e086:	00db      	lsls	r3, r3, #3
 801e088:	440b      	add	r3, r1
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d018      	beq.n	801e0c2 <etharp_find_entry+0x1e6>
 801e090:	4b31      	ldr	r3, [pc, #196]	@ (801e158 <etharp_find_entry+0x27c>)
 801e092:	f240 126f 	movw	r2, #367	@ 0x16f
 801e096:	4933      	ldr	r1, [pc, #204]	@ (801e164 <etharp_find_entry+0x288>)
 801e098:	4831      	ldr	r0, [pc, #196]	@ (801e160 <etharp_find_entry+0x284>)
 801e09a:	f003 fb43 	bl	8021724 <iprintf>
 801e09e:	e010      	b.n	801e0c2 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e0a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e0a4:	2b09      	cmp	r3, #9
 801e0a6:	dc02      	bgt.n	801e0ae <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801e0a8:	7ffb      	ldrb	r3, [r7, #31]
 801e0aa:	773b      	strb	r3, [r7, #28]
 801e0ac:	e009      	b.n	801e0c2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e0ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e0b2:	2b09      	cmp	r3, #9
 801e0b4:	dc02      	bgt.n	801e0bc <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e0b6:	7efb      	ldrb	r3, [r7, #27]
 801e0b8:	773b      	strb	r3, [r7, #28]
 801e0ba:	e002      	b.n	801e0c2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801e0bc:	f04f 33ff 	mov.w	r3, #4294967295
 801e0c0:	e043      	b.n	801e14a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e0c2:	7f3b      	ldrb	r3, [r7, #28]
 801e0c4:	2b09      	cmp	r3, #9
 801e0c6:	d906      	bls.n	801e0d6 <etharp_find_entry+0x1fa>
 801e0c8:	4b23      	ldr	r3, [pc, #140]	@ (801e158 <etharp_find_entry+0x27c>)
 801e0ca:	f240 1281 	movw	r2, #385	@ 0x181
 801e0ce:	4926      	ldr	r1, [pc, #152]	@ (801e168 <etharp_find_entry+0x28c>)
 801e0d0:	4823      	ldr	r0, [pc, #140]	@ (801e160 <etharp_find_entry+0x284>)
 801e0d2:	f003 fb27 	bl	8021724 <iprintf>
    etharp_free_entry(i);
 801e0d6:	7f3b      	ldrb	r3, [r7, #28]
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f7ff fe25 	bl	801dd28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e0de:	7f3b      	ldrb	r3, [r7, #28]
 801e0e0:	2b09      	cmp	r3, #9
 801e0e2:	d906      	bls.n	801e0f2 <etharp_find_entry+0x216>
 801e0e4:	4b1c      	ldr	r3, [pc, #112]	@ (801e158 <etharp_find_entry+0x27c>)
 801e0e6:	f240 1285 	movw	r2, #389	@ 0x185
 801e0ea:	491f      	ldr	r1, [pc, #124]	@ (801e168 <etharp_find_entry+0x28c>)
 801e0ec:	481c      	ldr	r0, [pc, #112]	@ (801e160 <etharp_find_entry+0x284>)
 801e0ee:	f003 fb19 	bl	8021724 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e0f2:	7f3a      	ldrb	r2, [r7, #28]
 801e0f4:	4917      	ldr	r1, [pc, #92]	@ (801e154 <etharp_find_entry+0x278>)
 801e0f6:	4613      	mov	r3, r2
 801e0f8:	005b      	lsls	r3, r3, #1
 801e0fa:	4413      	add	r3, r2
 801e0fc:	00db      	lsls	r3, r3, #3
 801e0fe:	440b      	add	r3, r1
 801e100:	3314      	adds	r3, #20
 801e102:	781b      	ldrb	r3, [r3, #0]
 801e104:	2b00      	cmp	r3, #0
 801e106:	d006      	beq.n	801e116 <etharp_find_entry+0x23a>
 801e108:	4b13      	ldr	r3, [pc, #76]	@ (801e158 <etharp_find_entry+0x27c>)
 801e10a:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 801e10e:	4917      	ldr	r1, [pc, #92]	@ (801e16c <etharp_find_entry+0x290>)
 801e110:	4813      	ldr	r0, [pc, #76]	@ (801e160 <etharp_find_entry+0x284>)
 801e112:	f003 fb07 	bl	8021724 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d00a      	beq.n	801e132 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e11c:	7f3a      	ldrb	r2, [r7, #28]
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	6819      	ldr	r1, [r3, #0]
 801e122:	480c      	ldr	r0, [pc, #48]	@ (801e154 <etharp_find_entry+0x278>)
 801e124:	4613      	mov	r3, r2
 801e126:	005b      	lsls	r3, r3, #1
 801e128:	4413      	add	r3, r2
 801e12a:	00db      	lsls	r3, r3, #3
 801e12c:	4403      	add	r3, r0
 801e12e:	3304      	adds	r3, #4
 801e130:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e132:	7f3a      	ldrb	r2, [r7, #28]
 801e134:	4907      	ldr	r1, [pc, #28]	@ (801e154 <etharp_find_entry+0x278>)
 801e136:	4613      	mov	r3, r2
 801e138:	005b      	lsls	r3, r3, #1
 801e13a:	4413      	add	r3, r2
 801e13c:	00db      	lsls	r3, r3, #3
 801e13e:	440b      	add	r3, r1
 801e140:	3312      	adds	r3, #18
 801e142:	2200      	movs	r2, #0
 801e144:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801e146:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801e14a:	4618      	mov	r0, r3
 801e14c:	3720      	adds	r7, #32
 801e14e:	46bd      	mov	sp, r7
 801e150:	bd80      	pop	{r7, pc}
 801e152:	bf00      	nop
 801e154:	2000be50 	.word	0x2000be50
 801e158:	08026c44 	.word	0x08026c44
 801e15c:	08026c7c 	.word	0x08026c7c
 801e160:	08026cbc 	.word	0x08026cbc
 801e164:	08026ce4 	.word	0x08026ce4
 801e168:	08026cfc 	.word	0x08026cfc
 801e16c:	08026d10 	.word	0x08026d10

0801e170 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e170:	b580      	push	{r7, lr}
 801e172:	b088      	sub	sp, #32
 801e174:	af02      	add	r7, sp, #8
 801e176:	60f8      	str	r0, [r7, #12]
 801e178:	60b9      	str	r1, [r7, #8]
 801e17a:	607a      	str	r2, [r7, #4]
 801e17c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e184:	2b06      	cmp	r3, #6
 801e186:	d006      	beq.n	801e196 <etharp_update_arp_entry+0x26>
 801e188:	4b48      	ldr	r3, [pc, #288]	@ (801e2ac <etharp_update_arp_entry+0x13c>)
 801e18a:	f240 12ab 	movw	r2, #427	@ 0x1ab
 801e18e:	4948      	ldr	r1, [pc, #288]	@ (801e2b0 <etharp_update_arp_entry+0x140>)
 801e190:	4848      	ldr	r0, [pc, #288]	@ (801e2b4 <etharp_update_arp_entry+0x144>)
 801e192:	f003 fac7 	bl	8021724 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e196:	68bb      	ldr	r3, [r7, #8]
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d012      	beq.n	801e1c2 <etharp_update_arp_entry+0x52>
 801e19c:	68bb      	ldr	r3, [r7, #8]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d00e      	beq.n	801e1c2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e1a4:	68bb      	ldr	r3, [r7, #8]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	68f9      	ldr	r1, [r7, #12]
 801e1aa:	4618      	mov	r0, r3
 801e1ac:	f001 fb70 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801e1b0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d105      	bne.n	801e1c2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e1b6:	68bb      	ldr	r3, [r7, #8]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e1be:	2be0      	cmp	r3, #224	@ 0xe0
 801e1c0:	d102      	bne.n	801e1c8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e1c2:	f06f 030f 	mvn.w	r3, #15
 801e1c6:	e06c      	b.n	801e2a2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e1c8:	78fb      	ldrb	r3, [r7, #3]
 801e1ca:	68fa      	ldr	r2, [r7, #12]
 801e1cc:	4619      	mov	r1, r3
 801e1ce:	68b8      	ldr	r0, [r7, #8]
 801e1d0:	f7ff fe84 	bl	801dedc <etharp_find_entry>
 801e1d4:	4603      	mov	r3, r0
 801e1d6:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e1d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	da02      	bge.n	801e1e6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e1e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e1e4:	e05d      	b.n	801e2a2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e1e6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e1ea:	4933      	ldr	r1, [pc, #204]	@ (801e2b8 <etharp_update_arp_entry+0x148>)
 801e1ec:	4613      	mov	r3, r2
 801e1ee:	005b      	lsls	r3, r3, #1
 801e1f0:	4413      	add	r3, r2
 801e1f2:	00db      	lsls	r3, r3, #3
 801e1f4:	440b      	add	r3, r1
 801e1f6:	3314      	adds	r3, #20
 801e1f8:	2202      	movs	r2, #2
 801e1fa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e1fc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e200:	492d      	ldr	r1, [pc, #180]	@ (801e2b8 <etharp_update_arp_entry+0x148>)
 801e202:	4613      	mov	r3, r2
 801e204:	005b      	lsls	r3, r3, #1
 801e206:	4413      	add	r3, r2
 801e208:	00db      	lsls	r3, r3, #3
 801e20a:	440b      	add	r3, r1
 801e20c:	3308      	adds	r3, #8
 801e20e:	68fa      	ldr	r2, [r7, #12]
 801e210:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801e212:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e216:	4613      	mov	r3, r2
 801e218:	005b      	lsls	r3, r3, #1
 801e21a:	4413      	add	r3, r2
 801e21c:	00db      	lsls	r3, r3, #3
 801e21e:	3308      	adds	r3, #8
 801e220:	4a25      	ldr	r2, [pc, #148]	@ (801e2b8 <etharp_update_arp_entry+0x148>)
 801e222:	4413      	add	r3, r2
 801e224:	3304      	adds	r3, #4
 801e226:	2206      	movs	r2, #6
 801e228:	6879      	ldr	r1, [r7, #4]
 801e22a:	4618      	mov	r0, r3
 801e22c:	f003 fd25 	bl	8021c7a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e230:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e234:	4920      	ldr	r1, [pc, #128]	@ (801e2b8 <etharp_update_arp_entry+0x148>)
 801e236:	4613      	mov	r3, r2
 801e238:	005b      	lsls	r3, r3, #1
 801e23a:	4413      	add	r3, r2
 801e23c:	00db      	lsls	r3, r3, #3
 801e23e:	440b      	add	r3, r1
 801e240:	3312      	adds	r3, #18
 801e242:	2200      	movs	r2, #0
 801e244:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e246:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e24a:	491b      	ldr	r1, [pc, #108]	@ (801e2b8 <etharp_update_arp_entry+0x148>)
 801e24c:	4613      	mov	r3, r2
 801e24e:	005b      	lsls	r3, r3, #1
 801e250:	4413      	add	r3, r2
 801e252:	00db      	lsls	r3, r3, #3
 801e254:	440b      	add	r3, r1
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d021      	beq.n	801e2a0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e25c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e260:	4915      	ldr	r1, [pc, #84]	@ (801e2b8 <etharp_update_arp_entry+0x148>)
 801e262:	4613      	mov	r3, r2
 801e264:	005b      	lsls	r3, r3, #1
 801e266:	4413      	add	r3, r2
 801e268:	00db      	lsls	r3, r3, #3
 801e26a:	440b      	add	r3, r1
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e270:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e274:	4910      	ldr	r1, [pc, #64]	@ (801e2b8 <etharp_update_arp_entry+0x148>)
 801e276:	4613      	mov	r3, r2
 801e278:	005b      	lsls	r3, r3, #1
 801e27a:	4413      	add	r3, r2
 801e27c:	00db      	lsls	r3, r3, #3
 801e27e:	440b      	add	r3, r1
 801e280:	2200      	movs	r2, #0
 801e282:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801e28a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e28e:	9300      	str	r3, [sp, #0]
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	6939      	ldr	r1, [r7, #16]
 801e294:	68f8      	ldr	r0, [r7, #12]
 801e296:	f002 fc09 	bl	8020aac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e29a:	6938      	ldr	r0, [r7, #16]
 801e29c:	f7f7 fa52 	bl	8015744 <pbuf_free>
  }
  return ERR_OK;
 801e2a0:	2300      	movs	r3, #0
}
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	3718      	adds	r7, #24
 801e2a6:	46bd      	mov	sp, r7
 801e2a8:	bd80      	pop	{r7, pc}
 801e2aa:	bf00      	nop
 801e2ac:	08026c44 	.word	0x08026c44
 801e2b0:	08026d3c 	.word	0x08026d3c
 801e2b4:	08026cbc 	.word	0x08026cbc
 801e2b8:	2000be50 	.word	0x2000be50

0801e2bc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e2bc:	b580      	push	{r7, lr}
 801e2be:	b084      	sub	sp, #16
 801e2c0:	af00      	add	r7, sp, #0
 801e2c2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	73fb      	strb	r3, [r7, #15]
 801e2c8:	e01f      	b.n	801e30a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801e2ca:	7bfa      	ldrb	r2, [r7, #15]
 801e2cc:	4913      	ldr	r1, [pc, #76]	@ (801e31c <etharp_cleanup_netif+0x60>)
 801e2ce:	4613      	mov	r3, r2
 801e2d0:	005b      	lsls	r3, r3, #1
 801e2d2:	4413      	add	r3, r2
 801e2d4:	00db      	lsls	r3, r3, #3
 801e2d6:	440b      	add	r3, r1
 801e2d8:	3314      	adds	r3, #20
 801e2da:	781b      	ldrb	r3, [r3, #0]
 801e2dc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e2de:	7bbb      	ldrb	r3, [r7, #14]
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d00f      	beq.n	801e304 <etharp_cleanup_netif+0x48>
 801e2e4:	7bfa      	ldrb	r2, [r7, #15]
 801e2e6:	490d      	ldr	r1, [pc, #52]	@ (801e31c <etharp_cleanup_netif+0x60>)
 801e2e8:	4613      	mov	r3, r2
 801e2ea:	005b      	lsls	r3, r3, #1
 801e2ec:	4413      	add	r3, r2
 801e2ee:	00db      	lsls	r3, r3, #3
 801e2f0:	440b      	add	r3, r1
 801e2f2:	3308      	adds	r3, #8
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	687a      	ldr	r2, [r7, #4]
 801e2f8:	429a      	cmp	r2, r3
 801e2fa:	d103      	bne.n	801e304 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801e2fc:	7bfb      	ldrb	r3, [r7, #15]
 801e2fe:	4618      	mov	r0, r3
 801e300:	f7ff fd12 	bl	801dd28 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e304:	7bfb      	ldrb	r3, [r7, #15]
 801e306:	3301      	adds	r3, #1
 801e308:	73fb      	strb	r3, [r7, #15]
 801e30a:	7bfb      	ldrb	r3, [r7, #15]
 801e30c:	2b09      	cmp	r3, #9
 801e30e:	d9dc      	bls.n	801e2ca <etharp_cleanup_netif+0xe>
    }
  }
}
 801e310:	bf00      	nop
 801e312:	bf00      	nop
 801e314:	3710      	adds	r7, #16
 801e316:	46bd      	mov	sp, r7
 801e318:	bd80      	pop	{r7, pc}
 801e31a:	bf00      	nop
 801e31c:	2000be50 	.word	0x2000be50

0801e320 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
 801e320:	b580      	push	{r7, lr}
 801e322:	b084      	sub	sp, #16
 801e324:	af00      	add	r7, sp, #0
 801e326:	60b9      	str	r1, [r7, #8]
 801e328:	607a      	str	r2, [r7, #4]
 801e32a:	603b      	str	r3, [r7, #0]
 801e32c:	4603      	mov	r3, r0
 801e32e:	73fb      	strb	r3, [r7, #15]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801e330:	68bb      	ldr	r3, [r7, #8]
 801e332:	2b00      	cmp	r3, #0
 801e334:	d106      	bne.n	801e344 <etharp_get_entry+0x24>
 801e336:	4b28      	ldr	r3, [pc, #160]	@ (801e3d8 <etharp_get_entry+0xb8>)
 801e338:	f240 2266 	movw	r2, #614	@ 0x266
 801e33c:	4927      	ldr	r1, [pc, #156]	@ (801e3dc <etharp_get_entry+0xbc>)
 801e33e:	4828      	ldr	r0, [pc, #160]	@ (801e3e0 <etharp_get_entry+0xc0>)
 801e340:	f003 f9f0 	bl	8021724 <iprintf>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	2b00      	cmp	r3, #0
 801e348:	d106      	bne.n	801e358 <etharp_get_entry+0x38>
 801e34a:	4b23      	ldr	r3, [pc, #140]	@ (801e3d8 <etharp_get_entry+0xb8>)
 801e34c:	f240 2267 	movw	r2, #615	@ 0x267
 801e350:	4924      	ldr	r1, [pc, #144]	@ (801e3e4 <etharp_get_entry+0xc4>)
 801e352:	4823      	ldr	r0, [pc, #140]	@ (801e3e0 <etharp_get_entry+0xc0>)
 801e354:	f003 f9e6 	bl	8021724 <iprintf>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
 801e358:	683b      	ldr	r3, [r7, #0]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d106      	bne.n	801e36c <etharp_get_entry+0x4c>
 801e35e:	4b1e      	ldr	r3, [pc, #120]	@ (801e3d8 <etharp_get_entry+0xb8>)
 801e360:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801e364:	4920      	ldr	r1, [pc, #128]	@ (801e3e8 <etharp_get_entry+0xc8>)
 801e366:	481e      	ldr	r0, [pc, #120]	@ (801e3e0 <etharp_get_entry+0xc0>)
 801e368:	f003 f9dc 	bl	8021724 <iprintf>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 801e36c:	7bfb      	ldrb	r3, [r7, #15]
 801e36e:	2b09      	cmp	r3, #9
 801e370:	d82c      	bhi.n	801e3cc <etharp_get_entry+0xac>
 801e372:	7bfa      	ldrb	r2, [r7, #15]
 801e374:	491d      	ldr	r1, [pc, #116]	@ (801e3ec <etharp_get_entry+0xcc>)
 801e376:	4613      	mov	r3, r2
 801e378:	005b      	lsls	r3, r3, #1
 801e37a:	4413      	add	r3, r2
 801e37c:	00db      	lsls	r3, r3, #3
 801e37e:	440b      	add	r3, r1
 801e380:	3314      	adds	r3, #20
 801e382:	781b      	ldrb	r3, [r3, #0]
 801e384:	2b01      	cmp	r3, #1
 801e386:	d921      	bls.n	801e3cc <etharp_get_entry+0xac>
    *ipaddr  = &arp_table[i].ipaddr;
 801e388:	7bfa      	ldrb	r2, [r7, #15]
 801e38a:	4613      	mov	r3, r2
 801e38c:	005b      	lsls	r3, r3, #1
 801e38e:	4413      	add	r3, r2
 801e390:	00db      	lsls	r3, r3, #3
 801e392:	4a16      	ldr	r2, [pc, #88]	@ (801e3ec <etharp_get_entry+0xcc>)
 801e394:	4413      	add	r3, r2
 801e396:	1d1a      	adds	r2, r3, #4
 801e398:	68bb      	ldr	r3, [r7, #8]
 801e39a:	601a      	str	r2, [r3, #0]
    *netif   = arp_table[i].netif;
 801e39c:	7bfa      	ldrb	r2, [r7, #15]
 801e39e:	4913      	ldr	r1, [pc, #76]	@ (801e3ec <etharp_get_entry+0xcc>)
 801e3a0:	4613      	mov	r3, r2
 801e3a2:	005b      	lsls	r3, r3, #1
 801e3a4:	4413      	add	r3, r2
 801e3a6:	00db      	lsls	r3, r3, #3
 801e3a8:	440b      	add	r3, r1
 801e3aa:	3308      	adds	r3, #8
 801e3ac:	681a      	ldr	r2, [r3, #0]
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	601a      	str	r2, [r3, #0]
    *eth_ret = &arp_table[i].ethaddr;
 801e3b2:	7bfa      	ldrb	r2, [r7, #15]
 801e3b4:	4613      	mov	r3, r2
 801e3b6:	005b      	lsls	r3, r3, #1
 801e3b8:	4413      	add	r3, r2
 801e3ba:	00db      	lsls	r3, r3, #3
 801e3bc:	3308      	adds	r3, #8
 801e3be:	4a0b      	ldr	r2, [pc, #44]	@ (801e3ec <etharp_get_entry+0xcc>)
 801e3c0:	4413      	add	r3, r2
 801e3c2:	1d1a      	adds	r2, r3, #4
 801e3c4:	683b      	ldr	r3, [r7, #0]
 801e3c6:	601a      	str	r2, [r3, #0]
    return 1;
 801e3c8:	2301      	movs	r3, #1
 801e3ca:	e000      	b.n	801e3ce <etharp_get_entry+0xae>
  } else {
    return 0;
 801e3cc:	2300      	movs	r3, #0
  }
}
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	3710      	adds	r7, #16
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	bd80      	pop	{r7, pc}
 801e3d6:	bf00      	nop
 801e3d8:	08026c44 	.word	0x08026c44
 801e3dc:	08026d84 	.word	0x08026d84
 801e3e0:	08026cbc 	.word	0x08026cbc
 801e3e4:	08026d94 	.word	0x08026d94
 801e3e8:	08026da4 	.word	0x08026da4
 801e3ec:	2000be50 	.word	0x2000be50

0801e3f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e3f0:	b5b0      	push	{r4, r5, r7, lr}
 801e3f2:	b08a      	sub	sp, #40	@ 0x28
 801e3f4:	af04      	add	r7, sp, #16
 801e3f6:	6078      	str	r0, [r7, #4]
 801e3f8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d107      	bne.n	801e410 <etharp_input+0x20>
 801e400:	4b4c      	ldr	r3, [pc, #304]	@ (801e534 <etharp_input+0x144>)
 801e402:	f44f 7222 	mov.w	r2, #648	@ 0x288
 801e406:	494c      	ldr	r1, [pc, #304]	@ (801e538 <etharp_input+0x148>)
 801e408:	484c      	ldr	r0, [pc, #304]	@ (801e53c <etharp_input+0x14c>)
 801e40a:	f003 f98b 	bl	8021724 <iprintf>
 801e40e:	e08d      	b.n	801e52c <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	685b      	ldr	r3, [r3, #4]
 801e414:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801e416:	693b      	ldr	r3, [r7, #16]
 801e418:	881b      	ldrh	r3, [r3, #0]
 801e41a:	b29b      	uxth	r3, r3
 801e41c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e420:	d10c      	bne.n	801e43c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e422:	693b      	ldr	r3, [r7, #16]
 801e424:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801e426:	2b06      	cmp	r3, #6
 801e428:	d108      	bne.n	801e43c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e42a:	693b      	ldr	r3, [r7, #16]
 801e42c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e42e:	2b04      	cmp	r3, #4
 801e430:	d104      	bne.n	801e43c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e432:	693b      	ldr	r3, [r7, #16]
 801e434:	885b      	ldrh	r3, [r3, #2]
 801e436:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e438:	2b08      	cmp	r3, #8
 801e43a:	d00f      	beq.n	801e45c <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801e43c:	4b40      	ldr	r3, [pc, #256]	@ (801e540 <etharp_input+0x150>)
 801e43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e440:	3301      	adds	r3, #1
 801e442:	b29a      	uxth	r2, r3
 801e444:	4b3e      	ldr	r3, [pc, #248]	@ (801e540 <etharp_input+0x150>)
 801e446:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e448:	4b3d      	ldr	r3, [pc, #244]	@ (801e540 <etharp_input+0x150>)
 801e44a:	8bdb      	ldrh	r3, [r3, #30]
 801e44c:	3301      	adds	r3, #1
 801e44e:	b29a      	uxth	r2, r3
 801e450:	4b3b      	ldr	r3, [pc, #236]	@ (801e540 <etharp_input+0x150>)
 801e452:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801e454:	6878      	ldr	r0, [r7, #4]
 801e456:	f7f7 f975 	bl	8015744 <pbuf_free>
    return;
 801e45a:	e067      	b.n	801e52c <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 801e45c:	4b38      	ldr	r3, [pc, #224]	@ (801e540 <etharp_input+0x150>)
 801e45e:	8b5b      	ldrh	r3, [r3, #26]
 801e460:	3301      	adds	r3, #1
 801e462:	b29a      	uxth	r2, r3
 801e464:	4b36      	ldr	r3, [pc, #216]	@ (801e540 <etharp_input+0x150>)
 801e466:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801e468:	693b      	ldr	r3, [r7, #16]
 801e46a:	330e      	adds	r3, #14
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801e470:	693b      	ldr	r3, [r7, #16]
 801e472:	3318      	adds	r3, #24
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e478:	683b      	ldr	r3, [r7, #0]
 801e47a:	3304      	adds	r3, #4
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d102      	bne.n	801e488 <etharp_input+0x98>
    for_us = 0;
 801e482:	2300      	movs	r3, #0
 801e484:	75fb      	strb	r3, [r7, #23]
 801e486:	e009      	b.n	801e49c <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e488:	68ba      	ldr	r2, [r7, #8]
 801e48a:	683b      	ldr	r3, [r7, #0]
 801e48c:	3304      	adds	r3, #4
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	429a      	cmp	r2, r3
 801e492:	bf0c      	ite	eq
 801e494:	2301      	moveq	r3, #1
 801e496:	2300      	movne	r3, #0
 801e498:	b2db      	uxtb	r3, r3
 801e49a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e49c:	693b      	ldr	r3, [r7, #16]
 801e49e:	f103 0208 	add.w	r2, r3, #8
 801e4a2:	7dfb      	ldrb	r3, [r7, #23]
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d001      	beq.n	801e4ac <etharp_input+0xbc>
 801e4a8:	2301      	movs	r3, #1
 801e4aa:	e000      	b.n	801e4ae <etharp_input+0xbe>
 801e4ac:	2302      	movs	r3, #2
 801e4ae:	f107 010c 	add.w	r1, r7, #12
 801e4b2:	6838      	ldr	r0, [r7, #0]
 801e4b4:	f7ff fe5c 	bl	801e170 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801e4b8:	693b      	ldr	r3, [r7, #16]
 801e4ba:	88db      	ldrh	r3, [r3, #6]
 801e4bc:	b29b      	uxth	r3, r3
 801e4be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e4c2:	d003      	beq.n	801e4cc <etharp_input+0xdc>
 801e4c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e4c8:	d01e      	beq.n	801e508 <etharp_input+0x118>
 801e4ca:	e024      	b.n	801e516 <etharp_input+0x126>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 801e4cc:	7dfb      	ldrb	r3, [r7, #23]
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	d028      	beq.n	801e524 <etharp_input+0x134>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e4d2:	683b      	ldr	r3, [r7, #0]
 801e4d4:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801e4d8:	693b      	ldr	r3, [r7, #16]
 801e4da:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e4de:	683b      	ldr	r3, [r7, #0]
 801e4e0:	f103 052d 	add.w	r5, r3, #45	@ 0x2d
 801e4e4:	683b      	ldr	r3, [r7, #0]
 801e4e6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801e4e8:	693a      	ldr	r2, [r7, #16]
 801e4ea:	3208      	adds	r2, #8
      etharp_raw(netif,
 801e4ec:	2102      	movs	r1, #2
 801e4ee:	9103      	str	r1, [sp, #12]
 801e4f0:	f107 010c 	add.w	r1, r7, #12
 801e4f4:	9102      	str	r1, [sp, #8]
 801e4f6:	9201      	str	r2, [sp, #4]
 801e4f8:	9300      	str	r3, [sp, #0]
 801e4fa:	462b      	mov	r3, r5
 801e4fc:	4622      	mov	r2, r4
 801e4fe:	4601      	mov	r1, r0
 801e500:	6838      	ldr	r0, [r7, #0]
 801e502:	f000 fb09 	bl	801eb18 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 801e506:	e00d      	b.n	801e524 <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 801e508:	f107 030c 	add.w	r3, r7, #12
 801e50c:	4619      	mov	r1, r3
 801e50e:	6838      	ldr	r0, [r7, #0]
 801e510:	f7fe f902 	bl	801c718 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 801e514:	e007      	b.n	801e526 <etharp_input+0x136>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 801e516:	4b0a      	ldr	r3, [pc, #40]	@ (801e540 <etharp_input+0x150>)
 801e518:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801e51a:	3301      	adds	r3, #1
 801e51c:	b29a      	uxth	r2, r3
 801e51e:	4b08      	ldr	r3, [pc, #32]	@ (801e540 <etharp_input+0x150>)
 801e520:	859a      	strh	r2, [r3, #44]	@ 0x2c
    break;
 801e522:	e000      	b.n	801e526 <etharp_input+0x136>
    break;
 801e524:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801e526:	6878      	ldr	r0, [r7, #4]
 801e528:	f7f7 f90c 	bl	8015744 <pbuf_free>
}
 801e52c:	3718      	adds	r7, #24
 801e52e:	46bd      	mov	sp, r7
 801e530:	bdb0      	pop	{r4, r5, r7, pc}
 801e532:	bf00      	nop
 801e534:	08026c44 	.word	0x08026c44
 801e538:	08026d94 	.word	0x08026d94
 801e53c:	08026cbc 	.word	0x08026cbc
 801e540:	2000bc24 	.word	0x2000bc24

0801e544 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801e544:	b580      	push	{r7, lr}
 801e546:	b086      	sub	sp, #24
 801e548:	af02      	add	r7, sp, #8
 801e54a:	60f8      	str	r0, [r7, #12]
 801e54c:	60b9      	str	r1, [r7, #8]
 801e54e:	4613      	mov	r3, r2
 801e550:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e552:	79fa      	ldrb	r2, [r7, #7]
 801e554:	4944      	ldr	r1, [pc, #272]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e556:	4613      	mov	r3, r2
 801e558:	005b      	lsls	r3, r3, #1
 801e55a:	4413      	add	r3, r2
 801e55c:	00db      	lsls	r3, r3, #3
 801e55e:	440b      	add	r3, r1
 801e560:	3314      	adds	r3, #20
 801e562:	781b      	ldrb	r3, [r3, #0]
 801e564:	2b01      	cmp	r3, #1
 801e566:	d806      	bhi.n	801e576 <etharp_output_to_arp_index+0x32>
 801e568:	4b40      	ldr	r3, [pc, #256]	@ (801e66c <etharp_output_to_arp_index+0x128>)
 801e56a:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801e56e:	4940      	ldr	r1, [pc, #256]	@ (801e670 <etharp_output_to_arp_index+0x12c>)
 801e570:	4840      	ldr	r0, [pc, #256]	@ (801e674 <etharp_output_to_arp_index+0x130>)
 801e572:	f003 f8d7 	bl	8021724 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801e576:	79fa      	ldrb	r2, [r7, #7]
 801e578:	493b      	ldr	r1, [pc, #236]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e57a:	4613      	mov	r3, r2
 801e57c:	005b      	lsls	r3, r3, #1
 801e57e:	4413      	add	r3, r2
 801e580:	00db      	lsls	r3, r3, #3
 801e582:	440b      	add	r3, r1
 801e584:	3314      	adds	r3, #20
 801e586:	781b      	ldrb	r3, [r3, #0]
 801e588:	2b02      	cmp	r3, #2
 801e58a:	d153      	bne.n	801e634 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801e58c:	79fa      	ldrb	r2, [r7, #7]
 801e58e:	4936      	ldr	r1, [pc, #216]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e590:	4613      	mov	r3, r2
 801e592:	005b      	lsls	r3, r3, #1
 801e594:	4413      	add	r3, r2
 801e596:	00db      	lsls	r3, r3, #3
 801e598:	440b      	add	r3, r1
 801e59a:	3312      	adds	r3, #18
 801e59c:	881b      	ldrh	r3, [r3, #0]
 801e59e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801e5a2:	d919      	bls.n	801e5d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e5a4:	79fa      	ldrb	r2, [r7, #7]
 801e5a6:	4613      	mov	r3, r2
 801e5a8:	005b      	lsls	r3, r3, #1
 801e5aa:	4413      	add	r3, r2
 801e5ac:	00db      	lsls	r3, r3, #3
 801e5ae:	4a2e      	ldr	r2, [pc, #184]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e5b0:	4413      	add	r3, r2
 801e5b2:	3304      	adds	r3, #4
 801e5b4:	4619      	mov	r1, r3
 801e5b6:	68f8      	ldr	r0, [r7, #12]
 801e5b8:	f000 fb6a 	bl	801ec90 <etharp_request>
 801e5bc:	4603      	mov	r3, r0
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d138      	bne.n	801e634 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e5c2:	79fa      	ldrb	r2, [r7, #7]
 801e5c4:	4928      	ldr	r1, [pc, #160]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e5c6:	4613      	mov	r3, r2
 801e5c8:	005b      	lsls	r3, r3, #1
 801e5ca:	4413      	add	r3, r2
 801e5cc:	00db      	lsls	r3, r3, #3
 801e5ce:	440b      	add	r3, r1
 801e5d0:	3314      	adds	r3, #20
 801e5d2:	2203      	movs	r2, #3
 801e5d4:	701a      	strb	r2, [r3, #0]
 801e5d6:	e02d      	b.n	801e634 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801e5d8:	79fa      	ldrb	r2, [r7, #7]
 801e5da:	4923      	ldr	r1, [pc, #140]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e5dc:	4613      	mov	r3, r2
 801e5de:	005b      	lsls	r3, r3, #1
 801e5e0:	4413      	add	r3, r2
 801e5e2:	00db      	lsls	r3, r3, #3
 801e5e4:	440b      	add	r3, r1
 801e5e6:	3312      	adds	r3, #18
 801e5e8:	881b      	ldrh	r3, [r3, #0]
 801e5ea:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801e5ee:	d321      	bcc.n	801e634 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e5f0:	79fa      	ldrb	r2, [r7, #7]
 801e5f2:	4613      	mov	r3, r2
 801e5f4:	005b      	lsls	r3, r3, #1
 801e5f6:	4413      	add	r3, r2
 801e5f8:	00db      	lsls	r3, r3, #3
 801e5fa:	4a1b      	ldr	r2, [pc, #108]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e5fc:	4413      	add	r3, r2
 801e5fe:	1d19      	adds	r1, r3, #4
 801e600:	79fa      	ldrb	r2, [r7, #7]
 801e602:	4613      	mov	r3, r2
 801e604:	005b      	lsls	r3, r3, #1
 801e606:	4413      	add	r3, r2
 801e608:	00db      	lsls	r3, r3, #3
 801e60a:	3308      	adds	r3, #8
 801e60c:	4a16      	ldr	r2, [pc, #88]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e60e:	4413      	add	r3, r2
 801e610:	3304      	adds	r3, #4
 801e612:	461a      	mov	r2, r3
 801e614:	68f8      	ldr	r0, [r7, #12]
 801e616:	f000 fb19 	bl	801ec4c <etharp_request_dst>
 801e61a:	4603      	mov	r3, r0
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d109      	bne.n	801e634 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e620:	79fa      	ldrb	r2, [r7, #7]
 801e622:	4911      	ldr	r1, [pc, #68]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e624:	4613      	mov	r3, r2
 801e626:	005b      	lsls	r3, r3, #1
 801e628:	4413      	add	r3, r2
 801e62a:	00db      	lsls	r3, r3, #3
 801e62c:	440b      	add	r3, r1
 801e62e:	3314      	adds	r3, #20
 801e630:	2203      	movs	r2, #3
 801e632:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 801e63a:	79fa      	ldrb	r2, [r7, #7]
 801e63c:	4613      	mov	r3, r2
 801e63e:	005b      	lsls	r3, r3, #1
 801e640:	4413      	add	r3, r2
 801e642:	00db      	lsls	r3, r3, #3
 801e644:	3308      	adds	r3, #8
 801e646:	4a08      	ldr	r2, [pc, #32]	@ (801e668 <etharp_output_to_arp_index+0x124>)
 801e648:	4413      	add	r3, r2
 801e64a:	3304      	adds	r3, #4
 801e64c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e650:	9200      	str	r2, [sp, #0]
 801e652:	460a      	mov	r2, r1
 801e654:	68b9      	ldr	r1, [r7, #8]
 801e656:	68f8      	ldr	r0, [r7, #12]
 801e658:	f002 fa28 	bl	8020aac <ethernet_output>
 801e65c:	4603      	mov	r3, r0
}
 801e65e:	4618      	mov	r0, r3
 801e660:	3710      	adds	r7, #16
 801e662:	46bd      	mov	sp, r7
 801e664:	bd80      	pop	{r7, pc}
 801e666:	bf00      	nop
 801e668:	2000be50 	.word	0x2000be50
 801e66c:	08026c44 	.word	0x08026c44
 801e670:	08026db4 	.word	0x08026db4
 801e674:	08026cbc 	.word	0x08026cbc

0801e678 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801e678:	b580      	push	{r7, lr}
 801e67a:	b08a      	sub	sp, #40	@ 0x28
 801e67c:	af02      	add	r7, sp, #8
 801e67e:	60f8      	str	r0, [r7, #12]
 801e680:	60b9      	str	r1, [r7, #8]
 801e682:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e688:	68fb      	ldr	r3, [r7, #12]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d106      	bne.n	801e69c <etharp_output+0x24>
 801e68e:	4b6c      	ldr	r3, [pc, #432]	@ (801e840 <etharp_output+0x1c8>)
 801e690:	f240 321b 	movw	r2, #795	@ 0x31b
 801e694:	496b      	ldr	r1, [pc, #428]	@ (801e844 <etharp_output+0x1cc>)
 801e696:	486c      	ldr	r0, [pc, #432]	@ (801e848 <etharp_output+0x1d0>)
 801e698:	f003 f844 	bl	8021724 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801e69c:	68bb      	ldr	r3, [r7, #8]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d106      	bne.n	801e6b0 <etharp_output+0x38>
 801e6a2:	4b67      	ldr	r3, [pc, #412]	@ (801e840 <etharp_output+0x1c8>)
 801e6a4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801e6a8:	4968      	ldr	r1, [pc, #416]	@ (801e84c <etharp_output+0x1d4>)
 801e6aa:	4867      	ldr	r0, [pc, #412]	@ (801e848 <etharp_output+0x1d0>)
 801e6ac:	f003 f83a 	bl	8021724 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d106      	bne.n	801e6c4 <etharp_output+0x4c>
 801e6b6:	4b62      	ldr	r3, [pc, #392]	@ (801e840 <etharp_output+0x1c8>)
 801e6b8:	f240 321d 	movw	r2, #797	@ 0x31d
 801e6bc:	4964      	ldr	r1, [pc, #400]	@ (801e850 <etharp_output+0x1d8>)
 801e6be:	4862      	ldr	r0, [pc, #392]	@ (801e848 <etharp_output+0x1d0>)
 801e6c0:	f003 f830 	bl	8021724 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	681b      	ldr	r3, [r3, #0]
 801e6c8:	68f9      	ldr	r1, [r7, #12]
 801e6ca:	4618      	mov	r0, r3
 801e6cc:	f001 f8e0 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801e6d0:	4603      	mov	r3, r0
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d002      	beq.n	801e6dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801e6d6:	4b5f      	ldr	r3, [pc, #380]	@ (801e854 <etharp_output+0x1dc>)
 801e6d8:	61fb      	str	r3, [r7, #28]
 801e6da:	e0a1      	b.n	801e820 <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e6e4:	2be0      	cmp	r3, #224	@ 0xe0
 801e6e6:	d118      	bne.n	801e71a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801e6e8:	2301      	movs	r3, #1
 801e6ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801e6ec:	2300      	movs	r3, #0
 801e6ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801e6f0:	235e      	movs	r3, #94	@ 0x5e
 801e6f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	3301      	adds	r3, #1
 801e6f8:	781b      	ldrb	r3, [r3, #0]
 801e6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6fe:	b2db      	uxtb	r3, r3
 801e700:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	3302      	adds	r3, #2
 801e706:	781b      	ldrb	r3, [r3, #0]
 801e708:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	3303      	adds	r3, #3
 801e70e:	781b      	ldrb	r3, [r3, #0]
 801e710:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801e712:	f107 0310 	add.w	r3, r7, #16
 801e716:	61fb      	str	r3, [r7, #28]
 801e718:	e082      	b.n	801e820 <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	681a      	ldr	r2, [r3, #0]
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	3304      	adds	r3, #4
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	405a      	eors	r2, r3
 801e726:	68fb      	ldr	r3, [r7, #12]
 801e728:	3308      	adds	r3, #8
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	4013      	ands	r3, r2
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d012      	beq.n	801e758 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e738:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801e73c:	4293      	cmp	r3, r2
 801e73e:	d00b      	beq.n	801e758 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	330c      	adds	r3, #12
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	2b00      	cmp	r3, #0
 801e748:	d003      	beq.n	801e752 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	330c      	adds	r3, #12
 801e74e:	61bb      	str	r3, [r7, #24]
 801e750:	e002      	b.n	801e758 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801e752:	f06f 0303 	mvn.w	r3, #3
 801e756:	e06f      	b.n	801e838 <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e758:	4b3f      	ldr	r3, [pc, #252]	@ (801e858 <etharp_output+0x1e0>)
 801e75a:	781b      	ldrb	r3, [r3, #0]
 801e75c:	4619      	mov	r1, r3
 801e75e:	4a3f      	ldr	r2, [pc, #252]	@ (801e85c <etharp_output+0x1e4>)
 801e760:	460b      	mov	r3, r1
 801e762:	005b      	lsls	r3, r3, #1
 801e764:	440b      	add	r3, r1
 801e766:	00db      	lsls	r3, r3, #3
 801e768:	4413      	add	r3, r2
 801e76a:	3314      	adds	r3, #20
 801e76c:	781b      	ldrb	r3, [r3, #0]
 801e76e:	2b01      	cmp	r3, #1
 801e770:	d91d      	bls.n	801e7ae <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801e772:	69bb      	ldr	r3, [r7, #24]
 801e774:	681a      	ldr	r2, [r3, #0]
 801e776:	4b38      	ldr	r3, [pc, #224]	@ (801e858 <etharp_output+0x1e0>)
 801e778:	781b      	ldrb	r3, [r3, #0]
 801e77a:	4618      	mov	r0, r3
 801e77c:	4937      	ldr	r1, [pc, #220]	@ (801e85c <etharp_output+0x1e4>)
 801e77e:	4603      	mov	r3, r0
 801e780:	005b      	lsls	r3, r3, #1
 801e782:	4403      	add	r3, r0
 801e784:	00db      	lsls	r3, r3, #3
 801e786:	440b      	add	r3, r1
 801e788:	3304      	adds	r3, #4
 801e78a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e78c:	429a      	cmp	r2, r3
 801e78e:	d10e      	bne.n	801e7ae <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801e790:	4b33      	ldr	r3, [pc, #204]	@ (801e860 <etharp_output+0x1e8>)
 801e792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801e794:	3301      	adds	r3, #1
 801e796:	b29a      	uxth	r2, r3
 801e798:	4b31      	ldr	r3, [pc, #196]	@ (801e860 <etharp_output+0x1e8>)
 801e79a:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801e79c:	4b2e      	ldr	r3, [pc, #184]	@ (801e858 <etharp_output+0x1e0>)
 801e79e:	781b      	ldrb	r3, [r3, #0]
 801e7a0:	461a      	mov	r2, r3
 801e7a2:	68b9      	ldr	r1, [r7, #8]
 801e7a4:	68f8      	ldr	r0, [r7, #12]
 801e7a6:	f7ff fecd 	bl	801e544 <etharp_output_to_arp_index>
 801e7aa:	4603      	mov	r3, r0
 801e7ac:	e044      	b.n	801e838 <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e7ae:	2300      	movs	r3, #0
 801e7b0:	75fb      	strb	r3, [r7, #23]
 801e7b2:	e02a      	b.n	801e80a <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e7b4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e7b8:	4928      	ldr	r1, [pc, #160]	@ (801e85c <etharp_output+0x1e4>)
 801e7ba:	4613      	mov	r3, r2
 801e7bc:	005b      	lsls	r3, r3, #1
 801e7be:	4413      	add	r3, r2
 801e7c0:	00db      	lsls	r3, r3, #3
 801e7c2:	440b      	add	r3, r1
 801e7c4:	3314      	adds	r3, #20
 801e7c6:	781b      	ldrb	r3, [r3, #0]
 801e7c8:	2b01      	cmp	r3, #1
 801e7ca:	d918      	bls.n	801e7fe <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801e7cc:	69bb      	ldr	r3, [r7, #24]
 801e7ce:	6819      	ldr	r1, [r3, #0]
 801e7d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e7d4:	4821      	ldr	r0, [pc, #132]	@ (801e85c <etharp_output+0x1e4>)
 801e7d6:	4613      	mov	r3, r2
 801e7d8:	005b      	lsls	r3, r3, #1
 801e7da:	4413      	add	r3, r2
 801e7dc:	00db      	lsls	r3, r3, #3
 801e7de:	4403      	add	r3, r0
 801e7e0:	3304      	adds	r3, #4
 801e7e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e7e4:	4299      	cmp	r1, r3
 801e7e6:	d10a      	bne.n	801e7fe <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 801e7e8:	7dfa      	ldrb	r2, [r7, #23]
 801e7ea:	4b1b      	ldr	r3, [pc, #108]	@ (801e858 <etharp_output+0x1e0>)
 801e7ec:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801e7ee:	7dfb      	ldrb	r3, [r7, #23]
 801e7f0:	461a      	mov	r2, r3
 801e7f2:	68b9      	ldr	r1, [r7, #8]
 801e7f4:	68f8      	ldr	r0, [r7, #12]
 801e7f6:	f7ff fea5 	bl	801e544 <etharp_output_to_arp_index>
 801e7fa:	4603      	mov	r3, r0
 801e7fc:	e01c      	b.n	801e838 <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e802:	b2db      	uxtb	r3, r3
 801e804:	3301      	adds	r3, #1
 801e806:	b2db      	uxtb	r3, r3
 801e808:	75fb      	strb	r3, [r7, #23]
 801e80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e80e:	2b09      	cmp	r3, #9
 801e810:	ddd0      	ble.n	801e7b4 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801e812:	68ba      	ldr	r2, [r7, #8]
 801e814:	69b9      	ldr	r1, [r7, #24]
 801e816:	68f8      	ldr	r0, [r7, #12]
 801e818:	f000 f824 	bl	801e864 <etharp_query>
 801e81c:	4603      	mov	r3, r0
 801e81e:	e00b      	b.n	801e838 <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801e826:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e82a:	9300      	str	r3, [sp, #0]
 801e82c:	69fb      	ldr	r3, [r7, #28]
 801e82e:	68b9      	ldr	r1, [r7, #8]
 801e830:	68f8      	ldr	r0, [r7, #12]
 801e832:	f002 f93b 	bl	8020aac <ethernet_output>
 801e836:	4603      	mov	r3, r0
}
 801e838:	4618      	mov	r0, r3
 801e83a:	3720      	adds	r7, #32
 801e83c:	46bd      	mov	sp, r7
 801e83e:	bd80      	pop	{r7, pc}
 801e840:	08026c44 	.word	0x08026c44
 801e844:	08026d94 	.word	0x08026d94
 801e848:	08026cbc 	.word	0x08026cbc
 801e84c:	08026de4 	.word	0x08026de4
 801e850:	08026d84 	.word	0x08026d84
 801e854:	08030654 	.word	0x08030654
 801e858:	2000bf40 	.word	0x2000bf40
 801e85c:	2000be50 	.word	0x2000be50
 801e860:	2000bc24 	.word	0x2000bc24

0801e864 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801e864:	b580      	push	{r7, lr}
 801e866:	b08c      	sub	sp, #48	@ 0x30
 801e868:	af02      	add	r7, sp, #8
 801e86a:	60f8      	str	r0, [r7, #12]
 801e86c:	60b9      	str	r1, [r7, #8]
 801e86e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	332d      	adds	r3, #45	@ 0x2d
 801e874:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801e876:	23ff      	movs	r3, #255	@ 0xff
 801e878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801e87c:	2300      	movs	r3, #0
 801e87e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e880:	68bb      	ldr	r3, [r7, #8]
 801e882:	681b      	ldr	r3, [r3, #0]
 801e884:	68f9      	ldr	r1, [r7, #12]
 801e886:	4618      	mov	r0, r3
 801e888:	f001 f802 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801e88c:	4603      	mov	r3, r0
 801e88e:	2b00      	cmp	r3, #0
 801e890:	d10c      	bne.n	801e8ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e892:	68bb      	ldr	r3, [r7, #8]
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e89a:	2be0      	cmp	r3, #224	@ 0xe0
 801e89c:	d006      	beq.n	801e8ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e89e:	68bb      	ldr	r3, [r7, #8]
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d003      	beq.n	801e8ac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801e8a4:	68bb      	ldr	r3, [r7, #8]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d102      	bne.n	801e8b2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e8ac:	f06f 030f 	mvn.w	r3, #15
 801e8b0:	e11d      	b.n	801eaee <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e8b2:	68fa      	ldr	r2, [r7, #12]
 801e8b4:	2101      	movs	r1, #1
 801e8b6:	68b8      	ldr	r0, [r7, #8]
 801e8b8:	f7ff fb10 	bl	801dedc <etharp_find_entry>
 801e8bc:	4603      	mov	r3, r0
 801e8be:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 801e8c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	da0b      	bge.n	801e8e0 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	d005      	beq.n	801e8da <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801e8ce:	4b8a      	ldr	r3, [pc, #552]	@ (801eaf8 <etharp_query+0x294>)
 801e8d0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e8d2:	3301      	adds	r3, #1
 801e8d4:	b29a      	uxth	r2, r3
 801e8d6:	4b88      	ldr	r3, [pc, #544]	@ (801eaf8 <etharp_query+0x294>)
 801e8d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i;
 801e8da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e8de:	e106      	b.n	801eaee <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e8e0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e8e4:	4985      	ldr	r1, [pc, #532]	@ (801eafc <etharp_query+0x298>)
 801e8e6:	4613      	mov	r3, r2
 801e8e8:	005b      	lsls	r3, r3, #1
 801e8ea:	4413      	add	r3, r2
 801e8ec:	00db      	lsls	r3, r3, #3
 801e8ee:	440b      	add	r3, r1
 801e8f0:	3314      	adds	r3, #20
 801e8f2:	781b      	ldrb	r3, [r3, #0]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d117      	bne.n	801e928 <etharp_query+0xc4>
    is_new_entry = 1;
 801e8f8:	2301      	movs	r3, #1
 801e8fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e8fc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e900:	497e      	ldr	r1, [pc, #504]	@ (801eafc <etharp_query+0x298>)
 801e902:	4613      	mov	r3, r2
 801e904:	005b      	lsls	r3, r3, #1
 801e906:	4413      	add	r3, r2
 801e908:	00db      	lsls	r3, r3, #3
 801e90a:	440b      	add	r3, r1
 801e90c:	3314      	adds	r3, #20
 801e90e:	2201      	movs	r2, #1
 801e910:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e912:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e916:	4979      	ldr	r1, [pc, #484]	@ (801eafc <etharp_query+0x298>)
 801e918:	4613      	mov	r3, r2
 801e91a:	005b      	lsls	r3, r3, #1
 801e91c:	4413      	add	r3, r2
 801e91e:	00db      	lsls	r3, r3, #3
 801e920:	440b      	add	r3, r1
 801e922:	3308      	adds	r3, #8
 801e924:	68fa      	ldr	r2, [r7, #12]
 801e926:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e928:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e92c:	4973      	ldr	r1, [pc, #460]	@ (801eafc <etharp_query+0x298>)
 801e92e:	4613      	mov	r3, r2
 801e930:	005b      	lsls	r3, r3, #1
 801e932:	4413      	add	r3, r2
 801e934:	00db      	lsls	r3, r3, #3
 801e936:	440b      	add	r3, r1
 801e938:	3314      	adds	r3, #20
 801e93a:	781b      	ldrb	r3, [r3, #0]
 801e93c:	2b01      	cmp	r3, #1
 801e93e:	d012      	beq.n	801e966 <etharp_query+0x102>
 801e940:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e944:	496d      	ldr	r1, [pc, #436]	@ (801eafc <etharp_query+0x298>)
 801e946:	4613      	mov	r3, r2
 801e948:	005b      	lsls	r3, r3, #1
 801e94a:	4413      	add	r3, r2
 801e94c:	00db      	lsls	r3, r3, #3
 801e94e:	440b      	add	r3, r1
 801e950:	3314      	adds	r3, #20
 801e952:	781b      	ldrb	r3, [r3, #0]
 801e954:	2b01      	cmp	r3, #1
 801e956:	d806      	bhi.n	801e966 <etharp_query+0x102>
 801e958:	4b69      	ldr	r3, [pc, #420]	@ (801eb00 <etharp_query+0x29c>)
 801e95a:	f240 32c7 	movw	r2, #967	@ 0x3c7
 801e95e:	4969      	ldr	r1, [pc, #420]	@ (801eb04 <etharp_query+0x2a0>)
 801e960:	4869      	ldr	r0, [pc, #420]	@ (801eb08 <etharp_query+0x2a4>)
 801e962:	f002 fedf 	bl	8021724 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e966:	6a3b      	ldr	r3, [r7, #32]
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d102      	bne.n	801e972 <etharp_query+0x10e>
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d10c      	bne.n	801e98c <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e972:	68b9      	ldr	r1, [r7, #8]
 801e974:	68f8      	ldr	r0, [r7, #12]
 801e976:	f000 f98b 	bl	801ec90 <etharp_request>
 801e97a:	4603      	mov	r3, r0
 801e97c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	2b00      	cmp	r3, #0
 801e984:	d102      	bne.n	801e98c <etharp_query+0x128>
      return result;
 801e986:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801e98a:	e0b0      	b.n	801eaee <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d106      	bne.n	801e9a0 <etharp_query+0x13c>
 801e992:	4b5b      	ldr	r3, [pc, #364]	@ (801eb00 <etharp_query+0x29c>)
 801e994:	f240 32db 	movw	r2, #987	@ 0x3db
 801e998:	495c      	ldr	r1, [pc, #368]	@ (801eb0c <etharp_query+0x2a8>)
 801e99a:	485b      	ldr	r0, [pc, #364]	@ (801eb08 <etharp_query+0x2a4>)
 801e99c:	f002 fec2 	bl	8021724 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e9a0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e9a4:	4955      	ldr	r1, [pc, #340]	@ (801eafc <etharp_query+0x298>)
 801e9a6:	4613      	mov	r3, r2
 801e9a8:	005b      	lsls	r3, r3, #1
 801e9aa:	4413      	add	r3, r2
 801e9ac:	00db      	lsls	r3, r3, #3
 801e9ae:	440b      	add	r3, r1
 801e9b0:	3314      	adds	r3, #20
 801e9b2:	781b      	ldrb	r3, [r3, #0]
 801e9b4:	2b01      	cmp	r3, #1
 801e9b6:	d918      	bls.n	801e9ea <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801e9b8:	7cfa      	ldrb	r2, [r7, #19]
 801e9ba:	4b55      	ldr	r3, [pc, #340]	@ (801eb10 <etharp_query+0x2ac>)
 801e9bc:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e9be:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e9c2:	4613      	mov	r3, r2
 801e9c4:	005b      	lsls	r3, r3, #1
 801e9c6:	4413      	add	r3, r2
 801e9c8:	00db      	lsls	r3, r3, #3
 801e9ca:	3308      	adds	r3, #8
 801e9cc:	4a4b      	ldr	r2, [pc, #300]	@ (801eafc <etharp_query+0x298>)
 801e9ce:	4413      	add	r3, r2
 801e9d0:	3304      	adds	r3, #4
 801e9d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e9d6:	9200      	str	r2, [sp, #0]
 801e9d8:	697a      	ldr	r2, [r7, #20]
 801e9da:	6879      	ldr	r1, [r7, #4]
 801e9dc:	68f8      	ldr	r0, [r7, #12]
 801e9de:	f002 f865 	bl	8020aac <ethernet_output>
 801e9e2:	4603      	mov	r3, r0
 801e9e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e9e8:	e07f      	b.n	801eaea <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e9ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801e9ee:	4943      	ldr	r1, [pc, #268]	@ (801eafc <etharp_query+0x298>)
 801e9f0:	4613      	mov	r3, r2
 801e9f2:	005b      	lsls	r3, r3, #1
 801e9f4:	4413      	add	r3, r2
 801e9f6:	00db      	lsls	r3, r3, #3
 801e9f8:	440b      	add	r3, r1
 801e9fa:	3314      	adds	r3, #20
 801e9fc:	781b      	ldrb	r3, [r3, #0]
 801e9fe:	2b01      	cmp	r3, #1
 801ea00:	d173      	bne.n	801eaea <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ea02:	2300      	movs	r3, #0
 801ea04:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ea0a:	e01a      	b.n	801ea42 <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ea0c:	69fb      	ldr	r3, [r7, #28]
 801ea0e:	895a      	ldrh	r2, [r3, #10]
 801ea10:	69fb      	ldr	r3, [r7, #28]
 801ea12:	891b      	ldrh	r3, [r3, #8]
 801ea14:	429a      	cmp	r2, r3
 801ea16:	d10a      	bne.n	801ea2e <etharp_query+0x1ca>
 801ea18:	69fb      	ldr	r3, [r7, #28]
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d006      	beq.n	801ea2e <etharp_query+0x1ca>
 801ea20:	4b37      	ldr	r3, [pc, #220]	@ (801eb00 <etharp_query+0x29c>)
 801ea22:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801ea26:	493b      	ldr	r1, [pc, #236]	@ (801eb14 <etharp_query+0x2b0>)
 801ea28:	4837      	ldr	r0, [pc, #220]	@ (801eb08 <etharp_query+0x2a4>)
 801ea2a:	f002 fe7b 	bl	8021724 <iprintf>
      if (p->type != PBUF_ROM) {
 801ea2e:	69fb      	ldr	r3, [r7, #28]
 801ea30:	7b1b      	ldrb	r3, [r3, #12]
 801ea32:	2b01      	cmp	r3, #1
 801ea34:	d002      	beq.n	801ea3c <etharp_query+0x1d8>
        copy_needed = 1;
 801ea36:	2301      	movs	r3, #1
 801ea38:	61bb      	str	r3, [r7, #24]
        break;
 801ea3a:	e005      	b.n	801ea48 <etharp_query+0x1e4>
      }
      p = p->next;
 801ea3c:	69fb      	ldr	r3, [r7, #28]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ea42:	69fb      	ldr	r3, [r7, #28]
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d1e1      	bne.n	801ea0c <etharp_query+0x1a8>
    }
    if (copy_needed) {
 801ea48:	69bb      	ldr	r3, [r7, #24]
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d017      	beq.n	801ea7e <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801ea4e:	69fb      	ldr	r3, [r7, #28]
 801ea50:	891b      	ldrh	r3, [r3, #8]
 801ea52:	2200      	movs	r2, #0
 801ea54:	4619      	mov	r1, r3
 801ea56:	2002      	movs	r0, #2
 801ea58:	f7f6 fafc 	bl	8015054 <pbuf_alloc>
 801ea5c:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801ea5e:	69fb      	ldr	r3, [r7, #28]
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	d011      	beq.n	801ea88 <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 801ea64:	6879      	ldr	r1, [r7, #4]
 801ea66:	69f8      	ldr	r0, [r7, #28]
 801ea68:	f7f6 ff9e 	bl	80159a8 <pbuf_copy>
 801ea6c:	4603      	mov	r3, r0
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d00a      	beq.n	801ea88 <etharp_query+0x224>
          pbuf_free(p);
 801ea72:	69f8      	ldr	r0, [r7, #28]
 801ea74:	f7f6 fe66 	bl	8015744 <pbuf_free>
          p = NULL;
 801ea78:	2300      	movs	r3, #0
 801ea7a:	61fb      	str	r3, [r7, #28]
 801ea7c:	e004      	b.n	801ea88 <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ea82:	69f8      	ldr	r0, [r7, #28]
 801ea84:	f7f6 ff08 	bl	8015898 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ea88:	69fb      	ldr	r3, [r7, #28]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d024      	beq.n	801ead8 <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ea8e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ea92:	491a      	ldr	r1, [pc, #104]	@ (801eafc <etharp_query+0x298>)
 801ea94:	4613      	mov	r3, r2
 801ea96:	005b      	lsls	r3, r3, #1
 801ea98:	4413      	add	r3, r2
 801ea9a:	00db      	lsls	r3, r3, #3
 801ea9c:	440b      	add	r3, r1
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	2b00      	cmp	r3, #0
 801eaa2:	d00b      	beq.n	801eabc <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801eaa4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801eaa8:	4914      	ldr	r1, [pc, #80]	@ (801eafc <etharp_query+0x298>)
 801eaaa:	4613      	mov	r3, r2
 801eaac:	005b      	lsls	r3, r3, #1
 801eaae:	4413      	add	r3, r2
 801eab0:	00db      	lsls	r3, r3, #3
 801eab2:	440b      	add	r3, r1
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	4618      	mov	r0, r3
 801eab8:	f7f6 fe44 	bl	8015744 <pbuf_free>
      }
      arp_table[i].q = p;
 801eabc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801eac0:	490e      	ldr	r1, [pc, #56]	@ (801eafc <etharp_query+0x298>)
 801eac2:	4613      	mov	r3, r2
 801eac4:	005b      	lsls	r3, r3, #1
 801eac6:	4413      	add	r3, r2
 801eac8:	00db      	lsls	r3, r3, #3
 801eaca:	440b      	add	r3, r1
 801eacc:	69fa      	ldr	r2, [r7, #28]
 801eace:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ead0:	2300      	movs	r3, #0
 801ead2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ead6:	e008      	b.n	801eaea <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801ead8:	4b07      	ldr	r3, [pc, #28]	@ (801eaf8 <etharp_query+0x294>)
 801eada:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801eadc:	3301      	adds	r3, #1
 801eade:	b29a      	uxth	r2, r3
 801eae0:	4b05      	ldr	r3, [pc, #20]	@ (801eaf8 <etharp_query+0x294>)
 801eae2:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801eae4:	23ff      	movs	r3, #255	@ 0xff
 801eae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801eaea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801eaee:	4618      	mov	r0, r3
 801eaf0:	3728      	adds	r7, #40	@ 0x28
 801eaf2:	46bd      	mov	sp, r7
 801eaf4:	bd80      	pop	{r7, pc}
 801eaf6:	bf00      	nop
 801eaf8:	2000bc24 	.word	0x2000bc24
 801eafc:	2000be50 	.word	0x2000be50
 801eb00:	08026c44 	.word	0x08026c44
 801eb04:	08026df0 	.word	0x08026df0
 801eb08:	08026cbc 	.word	0x08026cbc
 801eb0c:	08026de4 	.word	0x08026de4
 801eb10:	2000bf40 	.word	0x2000bf40
 801eb14:	08026e18 	.word	0x08026e18

0801eb18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801eb18:	b580      	push	{r7, lr}
 801eb1a:	b08a      	sub	sp, #40	@ 0x28
 801eb1c:	af02      	add	r7, sp, #8
 801eb1e:	60f8      	str	r0, [r7, #12]
 801eb20:	60b9      	str	r1, [r7, #8]
 801eb22:	607a      	str	r2, [r7, #4]
 801eb24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801eb26:	2300      	movs	r3, #0
 801eb28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d106      	bne.n	801eb3e <etharp_raw+0x26>
 801eb30:	4b40      	ldr	r3, [pc, #256]	@ (801ec34 <etharp_raw+0x11c>)
 801eb32:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 801eb36:	4940      	ldr	r1, [pc, #256]	@ (801ec38 <etharp_raw+0x120>)
 801eb38:	4840      	ldr	r0, [pc, #256]	@ (801ec3c <etharp_raw+0x124>)
 801eb3a:	f002 fdf3 	bl	8021724 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801eb3e:	2200      	movs	r2, #0
 801eb40:	211c      	movs	r1, #28
 801eb42:	2002      	movs	r0, #2
 801eb44:	f7f6 fa86 	bl	8015054 <pbuf_alloc>
 801eb48:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801eb4a:	69bb      	ldr	r3, [r7, #24]
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d108      	bne.n	801eb62 <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801eb50:	4b3b      	ldr	r3, [pc, #236]	@ (801ec40 <etharp_raw+0x128>)
 801eb52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801eb54:	3301      	adds	r3, #1
 801eb56:	b29a      	uxth	r2, r3
 801eb58:	4b39      	ldr	r3, [pc, #228]	@ (801ec40 <etharp_raw+0x128>)
 801eb5a:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801eb5c:	f04f 33ff 	mov.w	r3, #4294967295
 801eb60:	e063      	b.n	801ec2a <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801eb62:	69bb      	ldr	r3, [r7, #24]
 801eb64:	895b      	ldrh	r3, [r3, #10]
 801eb66:	2b1b      	cmp	r3, #27
 801eb68:	d806      	bhi.n	801eb78 <etharp_raw+0x60>
 801eb6a:	4b32      	ldr	r3, [pc, #200]	@ (801ec34 <etharp_raw+0x11c>)
 801eb6c:	f240 4263 	movw	r2, #1123	@ 0x463
 801eb70:	4934      	ldr	r1, [pc, #208]	@ (801ec44 <etharp_raw+0x12c>)
 801eb72:	4832      	ldr	r0, [pc, #200]	@ (801ec3c <etharp_raw+0x124>)
 801eb74:	f002 fdd6 	bl	8021724 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801eb78:	69bb      	ldr	r3, [r7, #24]
 801eb7a:	685b      	ldr	r3, [r3, #4]
 801eb7c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801eb7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801eb80:	4618      	mov	r0, r3
 801eb82:	f7f5 fb87 	bl	8014294 <lwip_htons>
 801eb86:	4603      	mov	r3, r0
 801eb88:	461a      	mov	r2, r3
 801eb8a:	697b      	ldr	r3, [r7, #20]
 801eb8c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801eb94:	2b06      	cmp	r3, #6
 801eb96:	d006      	beq.n	801eba6 <etharp_raw+0x8e>
 801eb98:	4b26      	ldr	r3, [pc, #152]	@ (801ec34 <etharp_raw+0x11c>)
 801eb9a:	f240 426a 	movw	r2, #1130	@ 0x46a
 801eb9e:	492a      	ldr	r1, [pc, #168]	@ (801ec48 <etharp_raw+0x130>)
 801eba0:	4826      	ldr	r0, [pc, #152]	@ (801ec3c <etharp_raw+0x124>)
 801eba2:	f002 fdbf 	bl	8021724 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801eba6:	697b      	ldr	r3, [r7, #20]
 801eba8:	3308      	adds	r3, #8
 801ebaa:	2206      	movs	r2, #6
 801ebac:	6839      	ldr	r1, [r7, #0]
 801ebae:	4618      	mov	r0, r3
 801ebb0:	f003 f863 	bl	8021c7a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801ebb4:	697b      	ldr	r3, [r7, #20]
 801ebb6:	3312      	adds	r3, #18
 801ebb8:	2206      	movs	r2, #6
 801ebba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ebbc:	4618      	mov	r0, r3
 801ebbe:	f003 f85c 	bl	8021c7a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801ebc2:	697b      	ldr	r3, [r7, #20]
 801ebc4:	330e      	adds	r3, #14
 801ebc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ebc8:	6812      	ldr	r2, [r2, #0]
 801ebca:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801ebcc:	697b      	ldr	r3, [r7, #20]
 801ebce:	3318      	adds	r3, #24
 801ebd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ebd2:	6812      	ldr	r2, [r2, #0]
 801ebd4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801ebd6:	697b      	ldr	r3, [r7, #20]
 801ebd8:	2200      	movs	r2, #0
 801ebda:	701a      	strb	r2, [r3, #0]
 801ebdc:	2200      	movs	r2, #0
 801ebde:	f042 0201 	orr.w	r2, r2, #1
 801ebe2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ebe4:	697b      	ldr	r3, [r7, #20]
 801ebe6:	2200      	movs	r2, #0
 801ebe8:	f042 0208 	orr.w	r2, r2, #8
 801ebec:	709a      	strb	r2, [r3, #2]
 801ebee:	2200      	movs	r2, #0
 801ebf0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ebf2:	697b      	ldr	r3, [r7, #20]
 801ebf4:	2206      	movs	r2, #6
 801ebf6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ebf8:	697b      	ldr	r3, [r7, #20]
 801ebfa:	2204      	movs	r2, #4
 801ebfc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ebfe:	f640 0306 	movw	r3, #2054	@ 0x806
 801ec02:	9300      	str	r3, [sp, #0]
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	68ba      	ldr	r2, [r7, #8]
 801ec08:	69b9      	ldr	r1, [r7, #24]
 801ec0a:	68f8      	ldr	r0, [r7, #12]
 801ec0c:	f001 ff4e 	bl	8020aac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801ec10:	4b0b      	ldr	r3, [pc, #44]	@ (801ec40 <etharp_raw+0x128>)
 801ec12:	8b1b      	ldrh	r3, [r3, #24]
 801ec14:	3301      	adds	r3, #1
 801ec16:	b29a      	uxth	r2, r3
 801ec18:	4b09      	ldr	r3, [pc, #36]	@ (801ec40 <etharp_raw+0x128>)
 801ec1a:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801ec1c:	69b8      	ldr	r0, [r7, #24]
 801ec1e:	f7f6 fd91 	bl	8015744 <pbuf_free>
  p = NULL;
 801ec22:	2300      	movs	r3, #0
 801ec24:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ec26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	3720      	adds	r7, #32
 801ec2e:	46bd      	mov	sp, r7
 801ec30:	bd80      	pop	{r7, pc}
 801ec32:	bf00      	nop
 801ec34:	08026c44 	.word	0x08026c44
 801ec38:	08026d94 	.word	0x08026d94
 801ec3c:	08026cbc 	.word	0x08026cbc
 801ec40:	2000bc24 	.word	0x2000bc24
 801ec44:	08026e34 	.word	0x08026e34
 801ec48:	08026e68 	.word	0x08026e68

0801ec4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801ec4c:	b580      	push	{r7, lr}
 801ec4e:	b088      	sub	sp, #32
 801ec50:	af04      	add	r7, sp, #16
 801ec52:	60f8      	str	r0, [r7, #12]
 801ec54:	60b9      	str	r1, [r7, #8]
 801ec56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801ec64:	68fb      	ldr	r3, [r7, #12]
 801ec66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ec68:	2201      	movs	r2, #1
 801ec6a:	9203      	str	r2, [sp, #12]
 801ec6c:	68ba      	ldr	r2, [r7, #8]
 801ec6e:	9202      	str	r2, [sp, #8]
 801ec70:	4a06      	ldr	r2, [pc, #24]	@ (801ec8c <etharp_request_dst+0x40>)
 801ec72:	9201      	str	r2, [sp, #4]
 801ec74:	9300      	str	r3, [sp, #0]
 801ec76:	4603      	mov	r3, r0
 801ec78:	687a      	ldr	r2, [r7, #4]
 801ec7a:	68f8      	ldr	r0, [r7, #12]
 801ec7c:	f7ff ff4c 	bl	801eb18 <etharp_raw>
 801ec80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ec82:	4618      	mov	r0, r3
 801ec84:	3710      	adds	r7, #16
 801ec86:	46bd      	mov	sp, r7
 801ec88:	bd80      	pop	{r7, pc}
 801ec8a:	bf00      	nop
 801ec8c:	0803065c 	.word	0x0803065c

0801ec90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ec90:	b580      	push	{r7, lr}
 801ec92:	b082      	sub	sp, #8
 801ec94:	af00      	add	r7, sp, #0
 801ec96:	6078      	str	r0, [r7, #4]
 801ec98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ec9a:	4a05      	ldr	r2, [pc, #20]	@ (801ecb0 <etharp_request+0x20>)
 801ec9c:	6839      	ldr	r1, [r7, #0]
 801ec9e:	6878      	ldr	r0, [r7, #4]
 801eca0:	f7ff ffd4 	bl	801ec4c <etharp_request_dst>
 801eca4:	4603      	mov	r3, r0
}
 801eca6:	4618      	mov	r0, r3
 801eca8:	3708      	adds	r7, #8
 801ecaa:	46bd      	mov	sp, r7
 801ecac:	bd80      	pop	{r7, pc}
 801ecae:	bf00      	nop
 801ecb0:	08030654 	.word	0x08030654

0801ecb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ecb4:	b580      	push	{r7, lr}
 801ecb6:	b08e      	sub	sp, #56	@ 0x38
 801ecb8:	af04      	add	r7, sp, #16
 801ecba:	6078      	str	r0, [r7, #4]
 801ecbc:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 801ecbe:	4baa      	ldr	r3, [pc, #680]	@ (801ef68 <icmp_input+0x2b4>)
 801ecc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ecc4:	3301      	adds	r3, #1
 801ecc6:	b29a      	uxth	r2, r3
 801ecc8:	4ba7      	ldr	r3, [pc, #668]	@ (801ef68 <icmp_input+0x2b4>)
 801ecca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 801ecce:	4ba6      	ldr	r3, [pc, #664]	@ (801ef68 <icmp_input+0x2b4>)
 801ecd0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801ecd4:	3301      	adds	r3, #1
 801ecd6:	4aa4      	ldr	r2, [pc, #656]	@ (801ef68 <icmp_input+0x2b4>)
 801ecd8:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c

  iphdr_in = ip4_current_header();
 801ecdc:	4ba3      	ldr	r3, [pc, #652]	@ (801ef6c <icmp_input+0x2b8>)
 801ecde:	689b      	ldr	r3, [r3, #8]
 801ece0:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801ece2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ece4:	781b      	ldrb	r3, [r3, #0]
 801ece6:	f003 030f 	and.w	r3, r3, #15
 801ecea:	b29b      	uxth	r3, r3
 801ecec:	009b      	lsls	r3, r3, #2
 801ecee:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801ecf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ecf2:	2b13      	cmp	r3, #19
 801ecf4:	f240 817f 	bls.w	801eff6 <icmp_input+0x342>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	895b      	ldrh	r3, [r3, #10]
 801ecfc:	2b03      	cmp	r3, #3
 801ecfe:	f240 817c 	bls.w	801effa <icmp_input+0x346>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	685b      	ldr	r3, [r3, #4]
 801ed06:	781b      	ldrb	r3, [r3, #0]
 801ed08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ed0c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d002      	beq.n	801ed1a <icmp_input+0x66>
 801ed14:	2b08      	cmp	r3, #8
 801ed16:	d008      	beq.n	801ed2a <icmp_input+0x76>
 801ed18:	e0dd      	b.n	801eed6 <icmp_input+0x222>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
 801ed1a:	4b93      	ldr	r3, [pc, #588]	@ (801ef68 <icmp_input+0x2b4>)
 801ed1c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801ed20:	3301      	adds	r3, #1
 801ed22:	4a91      	ldr	r2, [pc, #580]	@ (801ef68 <icmp_input+0x2b4>)
 801ed24:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
    break;
 801ed28:	e161      	b.n	801efee <icmp_input+0x33a>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
 801ed2a:	4b8f      	ldr	r3, [pc, #572]	@ (801ef68 <icmp_input+0x2b4>)
 801ed2c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 801ed30:	3301      	adds	r3, #1
 801ed32:	4a8d      	ldr	r2, [pc, #564]	@ (801ef68 <icmp_input+0x2b4>)
 801ed34:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
    src = ip4_current_dest_addr();
 801ed38:	4b8d      	ldr	r3, [pc, #564]	@ (801ef70 <icmp_input+0x2bc>)
 801ed3a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ed3c:	4b8b      	ldr	r3, [pc, #556]	@ (801ef6c <icmp_input+0x2b8>)
 801ed3e:	695b      	ldr	r3, [r3, #20]
 801ed40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ed44:	2be0      	cmp	r3, #224	@ 0xe0
 801ed46:	f000 816e 	beq.w	801f026 <icmp_input+0x372>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ed4a:	4b88      	ldr	r3, [pc, #544]	@ (801ef6c <icmp_input+0x2b8>)
 801ed4c:	695b      	ldr	r3, [r3, #20]
 801ed4e:	4a87      	ldr	r2, [pc, #540]	@ (801ef6c <icmp_input+0x2b8>)
 801ed50:	6812      	ldr	r2, [r2, #0]
 801ed52:	4611      	mov	r1, r2
 801ed54:	4618      	mov	r0, r3
 801ed56:	f000 fd9b 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	f040 8164 	bne.w	801f02a <icmp_input+0x376>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	891b      	ldrh	r3, [r3, #8]
 801ed66:	2b07      	cmp	r3, #7
 801ed68:	f240 8149 	bls.w	801effe <icmp_input+0x34a>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801ed6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ed6e:	330e      	adds	r3, #14
 801ed70:	b29b      	uxth	r3, r3
 801ed72:	b21b      	sxth	r3, r3
 801ed74:	4619      	mov	r1, r3
 801ed76:	6878      	ldr	r0, [r7, #4]
 801ed78:	f7f6 fcc0 	bl	80156fc <pbuf_header>
 801ed7c:	4603      	mov	r3, r0
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d046      	beq.n	801ee10 <icmp_input+0x15c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	891a      	ldrh	r2, [r3, #8]
 801ed86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ed88:	4413      	add	r3, r2
 801ed8a:	b29b      	uxth	r3, r3
 801ed8c:	2200      	movs	r2, #0
 801ed8e:	4619      	mov	r1, r3
 801ed90:	2002      	movs	r0, #2
 801ed92:	f7f6 f95f 	bl	8015054 <pbuf_alloc>
 801ed96:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801ed98:	69bb      	ldr	r3, [r7, #24]
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	f000 8147 	beq.w	801f02e <icmp_input+0x37a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801eda0:	69bb      	ldr	r3, [r7, #24]
 801eda2:	895b      	ldrh	r3, [r3, #10]
 801eda4:	461a      	mov	r2, r3
 801eda6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801eda8:	3308      	adds	r3, #8
 801edaa:	429a      	cmp	r2, r3
 801edac:	d203      	bcs.n	801edb6 <icmp_input+0x102>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801edae:	69b8      	ldr	r0, [r7, #24]
 801edb0:	f7f6 fcc8 	bl	8015744 <pbuf_free>
        goto icmperr;
 801edb4:	e13c      	b.n	801f030 <icmp_input+0x37c>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801edb6:	69bb      	ldr	r3, [r7, #24]
 801edb8:	685b      	ldr	r3, [r3, #4]
 801edba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801edbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801edbe:	4618      	mov	r0, r3
 801edc0:	f002 ff5b 	bl	8021c7a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801edc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801edc6:	425b      	negs	r3, r3
 801edc8:	b29b      	uxth	r3, r3
 801edca:	b21b      	sxth	r3, r3
 801edcc:	4619      	mov	r1, r3
 801edce:	69b8      	ldr	r0, [r7, #24]
 801edd0:	f7f6 fc94 	bl	80156fc <pbuf_header>
 801edd4:	4603      	mov	r3, r0
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d009      	beq.n	801edee <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801edda:	4b66      	ldr	r3, [pc, #408]	@ (801ef74 <icmp_input+0x2c0>)
 801eddc:	22af      	movs	r2, #175	@ 0xaf
 801edde:	4966      	ldr	r1, [pc, #408]	@ (801ef78 <icmp_input+0x2c4>)
 801ede0:	4866      	ldr	r0, [pc, #408]	@ (801ef7c <icmp_input+0x2c8>)
 801ede2:	f002 fc9f 	bl	8021724 <iprintf>
        pbuf_free(r);
 801ede6:	69b8      	ldr	r0, [r7, #24]
 801ede8:	f7f6 fcac 	bl	8015744 <pbuf_free>
        goto icmperr;
 801edec:	e120      	b.n	801f030 <icmp_input+0x37c>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801edee:	6879      	ldr	r1, [r7, #4]
 801edf0:	69b8      	ldr	r0, [r7, #24]
 801edf2:	f7f6 fdd9 	bl	80159a8 <pbuf_copy>
 801edf6:	4603      	mov	r3, r0
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d003      	beq.n	801ee04 <icmp_input+0x150>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801edfc:	69b8      	ldr	r0, [r7, #24]
 801edfe:	f7f6 fca1 	bl	8015744 <pbuf_free>
        goto icmperr;
 801ee02:	e115      	b.n	801f030 <icmp_input+0x37c>
      }
      /* free the original p */
      pbuf_free(p);
 801ee04:	6878      	ldr	r0, [r7, #4]
 801ee06:	f7f6 fc9d 	bl	8015744 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801ee0a:	69bb      	ldr	r3, [r7, #24]
 801ee0c:	607b      	str	r3, [r7, #4]
 801ee0e:	e015      	b.n	801ee3c <icmp_input+0x188>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801ee10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ee12:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801ee16:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801ee1a:	33f2      	adds	r3, #242	@ 0xf2
 801ee1c:	b29b      	uxth	r3, r3
 801ee1e:	b21b      	sxth	r3, r3
 801ee20:	4619      	mov	r1, r3
 801ee22:	6878      	ldr	r0, [r7, #4]
 801ee24:	f7f6 fc6a 	bl	80156fc <pbuf_header>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d006      	beq.n	801ee3c <icmp_input+0x188>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ee2e:	4b51      	ldr	r3, [pc, #324]	@ (801ef74 <icmp_input+0x2c0>)
 801ee30:	22c0      	movs	r2, #192	@ 0xc0
 801ee32:	4953      	ldr	r1, [pc, #332]	@ (801ef80 <icmp_input+0x2cc>)
 801ee34:	4851      	ldr	r0, [pc, #324]	@ (801ef7c <icmp_input+0x2c8>)
 801ee36:	f002 fc75 	bl	8021724 <iprintf>
        goto icmperr;
 801ee3a:	e0f9      	b.n	801f030 <icmp_input+0x37c>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	685b      	ldr	r3, [r3, #4]
 801ee40:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801ee42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ee46:	4619      	mov	r1, r3
 801ee48:	6878      	ldr	r0, [r7, #4]
 801ee4a:	f7f6 fc57 	bl	80156fc <pbuf_header>
 801ee4e:	4603      	mov	r3, r0
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	f040 80cb 	bne.w	801efec <icmp_input+0x338>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	685b      	ldr	r3, [r3, #4]
 801ee5a:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801ee5c:	69fb      	ldr	r3, [r7, #28]
 801ee5e:	681a      	ldr	r2, [r3, #0]
 801ee60:	693b      	ldr	r3, [r7, #16]
 801ee62:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ee64:	4b41      	ldr	r3, [pc, #260]	@ (801ef6c <icmp_input+0x2b8>)
 801ee66:	691a      	ldr	r2, [r3, #16]
 801ee68:	693b      	ldr	r3, [r7, #16]
 801ee6a:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ee6c:	697b      	ldr	r3, [r7, #20]
 801ee6e:	2200      	movs	r2, #0
 801ee70:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801ee72:	697b      	ldr	r3, [r7, #20]
 801ee74:	2200      	movs	r2, #0
 801ee76:	709a      	strb	r2, [r3, #2]
 801ee78:	2200      	movs	r2, #0
 801ee7a:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801ee7c:	693b      	ldr	r3, [r7, #16]
 801ee7e:	22ff      	movs	r2, #255	@ 0xff
 801ee80:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801ee82:	693b      	ldr	r3, [r7, #16]
 801ee84:	2200      	movs	r2, #0
 801ee86:	729a      	strb	r2, [r3, #10]
 801ee88:	2200      	movs	r2, #0
 801ee8a:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 801ee8c:	4b36      	ldr	r3, [pc, #216]	@ (801ef68 <icmp_input+0x2b4>)
 801ee8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ee92:	3301      	adds	r3, #1
 801ee94:	b29a      	uxth	r2, r3
 801ee96:	4b34      	ldr	r3, [pc, #208]	@ (801ef68 <icmp_input+0x2b4>)
 801ee98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
 801ee9c:	4b32      	ldr	r3, [pc, #200]	@ (801ef68 <icmp_input+0x2b4>)
 801ee9e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801eea2:	3301      	adds	r3, #1
 801eea4:	4a30      	ldr	r2, [pc, #192]	@ (801ef68 <icmp_input+0x2b4>)
 801eea6:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
 801eeaa:	4b2f      	ldr	r3, [pc, #188]	@ (801ef68 <icmp_input+0x2b4>)
 801eeac:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 801eeb0:	3301      	adds	r3, #1
 801eeb2:	4a2d      	ldr	r2, [pc, #180]	@ (801ef68 <icmp_input+0x2b4>)
 801eeb4:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801eeb8:	683b      	ldr	r3, [r7, #0]
 801eeba:	9302      	str	r3, [sp, #8]
 801eebc:	2301      	movs	r3, #1
 801eebe:	9301      	str	r3, [sp, #4]
 801eec0:	2300      	movs	r3, #0
 801eec2:	9300      	str	r3, [sp, #0]
 801eec4:	23ff      	movs	r3, #255	@ 0xff
 801eec6:	2200      	movs	r2, #0
 801eec8:	69f9      	ldr	r1, [r7, #28]
 801eeca:	6878      	ldr	r0, [r7, #4]
 801eecc:	f000 fbee 	bl	801f6ac <ip4_output_if>
 801eed0:	4603      	mov	r3, r0
 801eed2:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801eed4:	e08a      	b.n	801efec <icmp_input+0x338>
  default:
    if (type == ICMP_DUR) {
 801eed6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801eeda:	2b03      	cmp	r3, #3
 801eedc:	d107      	bne.n	801eeee <icmp_input+0x23a>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
 801eede:	4b22      	ldr	r3, [pc, #136]	@ (801ef68 <icmp_input+0x2b4>)
 801eee0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 801eee4:	3301      	adds	r3, #1
 801eee6:	4a20      	ldr	r2, [pc, #128]	@ (801ef68 <icmp_input+0x2b4>)
 801eee8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 801eeec:	e06d      	b.n	801efca <icmp_input+0x316>
    } else if (type == ICMP_TE) {
 801eeee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801eef2:	2b0b      	cmp	r3, #11
 801eef4:	d107      	bne.n	801ef06 <icmp_input+0x252>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
 801eef6:	4b1c      	ldr	r3, [pc, #112]	@ (801ef68 <icmp_input+0x2b4>)
 801eef8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801eefc:	3301      	adds	r3, #1
 801eefe:	4a1a      	ldr	r2, [pc, #104]	@ (801ef68 <icmp_input+0x2b4>)
 801ef00:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
 801ef04:	e061      	b.n	801efca <icmp_input+0x316>
    } else if (type == ICMP_PP) {
 801ef06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ef0a:	2b0c      	cmp	r3, #12
 801ef0c:	d107      	bne.n	801ef1e <icmp_input+0x26a>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
 801ef0e:	4b16      	ldr	r3, [pc, #88]	@ (801ef68 <icmp_input+0x2b4>)
 801ef10:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 801ef14:	3301      	adds	r3, #1
 801ef16:	4a14      	ldr	r2, [pc, #80]	@ (801ef68 <icmp_input+0x2b4>)
 801ef18:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
 801ef1c:	e055      	b.n	801efca <icmp_input+0x316>
    } else if (type == ICMP_SQ) {
 801ef1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ef22:	2b04      	cmp	r3, #4
 801ef24:	d107      	bne.n	801ef36 <icmp_input+0x282>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
 801ef26:	4b10      	ldr	r3, [pc, #64]	@ (801ef68 <icmp_input+0x2b4>)
 801ef28:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801ef2c:	3301      	adds	r3, #1
 801ef2e:	4a0e      	ldr	r2, [pc, #56]	@ (801ef68 <icmp_input+0x2b4>)
 801ef30:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
 801ef34:	e049      	b.n	801efca <icmp_input+0x316>
    } else if (type == ICMP_RD) {
 801ef36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ef3a:	2b05      	cmp	r3, #5
 801ef3c:	d107      	bne.n	801ef4e <icmp_input+0x29a>
      MIB2_STATS_INC(mib2.icmpinredirects);
 801ef3e:	4b0a      	ldr	r3, [pc, #40]	@ (801ef68 <icmp_input+0x2b4>)
 801ef40:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801ef44:	3301      	adds	r3, #1
 801ef46:	4a08      	ldr	r2, [pc, #32]	@ (801ef68 <icmp_input+0x2b4>)
 801ef48:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
 801ef4c:	e03d      	b.n	801efca <icmp_input+0x316>
    } else if (type == ICMP_TS) {
 801ef4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ef52:	2b0d      	cmp	r3, #13
 801ef54:	d116      	bne.n	801ef84 <icmp_input+0x2d0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
 801ef56:	4b04      	ldr	r3, [pc, #16]	@ (801ef68 <icmp_input+0x2b4>)
 801ef58:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 801ef5c:	3301      	adds	r3, #1
 801ef5e:	4a02      	ldr	r2, [pc, #8]	@ (801ef68 <icmp_input+0x2b4>)
 801ef60:	f8c2 3170 	str.w	r3, [r2, #368]	@ 0x170
 801ef64:	e031      	b.n	801efca <icmp_input+0x316>
 801ef66:	bf00      	nop
 801ef68:	2000bc24 	.word	0x2000bc24
 801ef6c:	2000863c 	.word	0x2000863c
 801ef70:	20008650 	.word	0x20008650
 801ef74:	08026eac 	.word	0x08026eac
 801ef78:	08026ee4 	.word	0x08026ee4
 801ef7c:	08026f1c 	.word	0x08026f1c
 801ef80:	08026f44 	.word	0x08026f44
    } else if (type == ICMP_TSR) {
 801ef84:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ef88:	2b0e      	cmp	r3, #14
 801ef8a:	d107      	bne.n	801ef9c <icmp_input+0x2e8>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
 801ef8c:	4b33      	ldr	r3, [pc, #204]	@ (801f05c <icmp_input+0x3a8>)
 801ef8e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 801ef92:	3301      	adds	r3, #1
 801ef94:	4a31      	ldr	r2, [pc, #196]	@ (801f05c <icmp_input+0x3a8>)
 801ef96:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
 801ef9a:	e016      	b.n	801efca <icmp_input+0x316>
    } else if (type == ICMP_AM) {
 801ef9c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801efa0:	2b11      	cmp	r3, #17
 801efa2:	d107      	bne.n	801efb4 <icmp_input+0x300>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
 801efa4:	4b2d      	ldr	r3, [pc, #180]	@ (801f05c <icmp_input+0x3a8>)
 801efa6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801efaa:	3301      	adds	r3, #1
 801efac:	4a2b      	ldr	r2, [pc, #172]	@ (801f05c <icmp_input+0x3a8>)
 801efae:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
 801efb2:	e00a      	b.n	801efca <icmp_input+0x316>
    } else if (type == ICMP_AMR) {
 801efb4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801efb8:	2b12      	cmp	r3, #18
 801efba:	d106      	bne.n	801efca <icmp_input+0x316>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
 801efbc:	4b27      	ldr	r3, [pc, #156]	@ (801f05c <icmp_input+0x3a8>)
 801efbe:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801efc2:	3301      	adds	r3, #1
 801efc4:	4a25      	ldr	r2, [pc, #148]	@ (801f05c <icmp_input+0x3a8>)
 801efc6:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 801efca:	4b24      	ldr	r3, [pc, #144]	@ (801f05c <icmp_input+0x3a8>)
 801efcc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801efd0:	3301      	adds	r3, #1
 801efd2:	b29a      	uxth	r2, r3
 801efd4:	4b21      	ldr	r3, [pc, #132]	@ (801f05c <icmp_input+0x3a8>)
 801efd6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
    ICMP_STATS_INC(icmp.drop);
 801efda:	4b20      	ldr	r3, [pc, #128]	@ (801f05c <icmp_input+0x3a8>)
 801efdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801efe0:	3301      	adds	r3, #1
 801efe2:	b29a      	uxth	r2, r3
 801efe4:	4b1d      	ldr	r3, [pc, #116]	@ (801f05c <icmp_input+0x3a8>)
 801efe6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801efea:	e000      	b.n	801efee <icmp_input+0x33a>
    break;
 801efec:	bf00      	nop
  }
  pbuf_free(p);
 801efee:	6878      	ldr	r0, [r7, #4]
 801eff0:	f7f6 fba8 	bl	8015744 <pbuf_free>
  return;
 801eff4:	e02f      	b.n	801f056 <icmp_input+0x3a2>
    goto lenerr;
 801eff6:	bf00      	nop
 801eff8:	e002      	b.n	801f000 <icmp_input+0x34c>
    goto lenerr;
 801effa:	bf00      	nop
 801effc:	e000      	b.n	801f000 <icmp_input+0x34c>
      goto lenerr;
 801effe:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f000:	6878      	ldr	r0, [r7, #4]
 801f002:	f7f6 fb9f 	bl	8015744 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801f006:	4b15      	ldr	r3, [pc, #84]	@ (801f05c <icmp_input+0x3a8>)
 801f008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f00c:	3301      	adds	r3, #1
 801f00e:	b29a      	uxth	r2, r3
 801f010:	4b12      	ldr	r3, [pc, #72]	@ (801f05c <icmp_input+0x3a8>)
 801f012:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 801f016:	4b11      	ldr	r3, [pc, #68]	@ (801f05c <icmp_input+0x3a8>)
 801f018:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801f01c:	3301      	adds	r3, #1
 801f01e:	4a0f      	ldr	r2, [pc, #60]	@ (801f05c <icmp_input+0x3a8>)
 801f020:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801f024:	e017      	b.n	801f056 <icmp_input+0x3a2>
      goto icmperr;
 801f026:	bf00      	nop
 801f028:	e002      	b.n	801f030 <icmp_input+0x37c>
      goto icmperr;
 801f02a:	bf00      	nop
 801f02c:	e000      	b.n	801f030 <icmp_input+0x37c>
        goto icmperr;
 801f02e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f030:	6878      	ldr	r0, [r7, #4]
 801f032:	f7f6 fb87 	bl	8015744 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801f036:	4b09      	ldr	r3, [pc, #36]	@ (801f05c <icmp_input+0x3a8>)
 801f038:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801f03c:	3301      	adds	r3, #1
 801f03e:	b29a      	uxth	r2, r3
 801f040:	4b06      	ldr	r3, [pc, #24]	@ (801f05c <icmp_input+0x3a8>)
 801f042:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 801f046:	4b05      	ldr	r3, [pc, #20]	@ (801f05c <icmp_input+0x3a8>)
 801f048:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801f04c:	3301      	adds	r3, #1
 801f04e:	4a03      	ldr	r2, [pc, #12]	@ (801f05c <icmp_input+0x3a8>)
 801f050:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801f054:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f056:	3728      	adds	r7, #40	@ 0x28
 801f058:	46bd      	mov	sp, r7
 801f05a:	bd80      	pop	{r7, pc}
 801f05c:	2000bc24 	.word	0x2000bc24

0801f060 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f060:	b580      	push	{r7, lr}
 801f062:	b082      	sub	sp, #8
 801f064:	af00      	add	r7, sp, #0
 801f066:	6078      	str	r0, [r7, #4]
 801f068:	460b      	mov	r3, r1
 801f06a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 801f06c:	4b08      	ldr	r3, [pc, #32]	@ (801f090 <icmp_dest_unreach+0x30>)
 801f06e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801f072:	3301      	adds	r3, #1
 801f074:	4a06      	ldr	r2, [pc, #24]	@ (801f090 <icmp_dest_unreach+0x30>)
 801f076:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
  icmp_send_response(p, ICMP_DUR, t);
 801f07a:	78fb      	ldrb	r3, [r7, #3]
 801f07c:	461a      	mov	r2, r3
 801f07e:	2103      	movs	r1, #3
 801f080:	6878      	ldr	r0, [r7, #4]
 801f082:	f000 f821 	bl	801f0c8 <icmp_send_response>
}
 801f086:	bf00      	nop
 801f088:	3708      	adds	r7, #8
 801f08a:	46bd      	mov	sp, r7
 801f08c:	bd80      	pop	{r7, pc}
 801f08e:	bf00      	nop
 801f090:	2000bc24 	.word	0x2000bc24

0801f094 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f094:	b580      	push	{r7, lr}
 801f096:	b082      	sub	sp, #8
 801f098:	af00      	add	r7, sp, #0
 801f09a:	6078      	str	r0, [r7, #4]
 801f09c:	460b      	mov	r3, r1
 801f09e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 801f0a0:	4b08      	ldr	r3, [pc, #32]	@ (801f0c4 <icmp_time_exceeded+0x30>)
 801f0a2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801f0a6:	3301      	adds	r3, #1
 801f0a8:	4a06      	ldr	r2, [pc, #24]	@ (801f0c4 <icmp_time_exceeded+0x30>)
 801f0aa:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
  icmp_send_response(p, ICMP_TE, t);
 801f0ae:	78fb      	ldrb	r3, [r7, #3]
 801f0b0:	461a      	mov	r2, r3
 801f0b2:	210b      	movs	r1, #11
 801f0b4:	6878      	ldr	r0, [r7, #4]
 801f0b6:	f000 f807 	bl	801f0c8 <icmp_send_response>
}
 801f0ba:	bf00      	nop
 801f0bc:	3708      	adds	r7, #8
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	bd80      	pop	{r7, pc}
 801f0c2:	bf00      	nop
 801f0c4:	2000bc24 	.word	0x2000bc24

0801f0c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f0c8:	b580      	push	{r7, lr}
 801f0ca:	b08c      	sub	sp, #48	@ 0x30
 801f0cc:	af04      	add	r7, sp, #16
 801f0ce:	6078      	str	r0, [r7, #4]
 801f0d0:	460b      	mov	r3, r1
 801f0d2:	70fb      	strb	r3, [r7, #3]
 801f0d4:	4613      	mov	r3, r2
 801f0d6:	70bb      	strb	r3, [r7, #2]
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 801f0d8:	4b37      	ldr	r3, [pc, #220]	@ (801f1b8 <icmp_send_response+0xf0>)
 801f0da:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801f0de:	3301      	adds	r3, #1
 801f0e0:	4a35      	ldr	r2, [pc, #212]	@ (801f1b8 <icmp_send_response+0xf0>)
 801f0e2:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f0e6:	2200      	movs	r2, #0
 801f0e8:	2124      	movs	r1, #36	@ 0x24
 801f0ea:	2001      	movs	r0, #1
 801f0ec:	f7f5 ffb2 	bl	8015054 <pbuf_alloc>
 801f0f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801f0f2:	69fb      	ldr	r3, [r7, #28]
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d107      	bne.n	801f108 <icmp_send_response+0x40>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
 801f0f8:	4b2f      	ldr	r3, [pc, #188]	@ (801f1b8 <icmp_send_response+0xf0>)
 801f0fa:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801f0fe:	3301      	adds	r3, #1
 801f100:	4a2d      	ldr	r2, [pc, #180]	@ (801f1b8 <icmp_send_response+0xf0>)
 801f102:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
 801f106:	e053      	b.n	801f1b0 <icmp_send_response+0xe8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f108:	69fb      	ldr	r3, [r7, #28]
 801f10a:	895b      	ldrh	r3, [r3, #10]
 801f10c:	2b23      	cmp	r3, #35	@ 0x23
 801f10e:	d806      	bhi.n	801f11e <icmp_send_response+0x56>
 801f110:	4b2a      	ldr	r3, [pc, #168]	@ (801f1bc <icmp_send_response+0xf4>)
 801f112:	f240 1261 	movw	r2, #353	@ 0x161
 801f116:	492a      	ldr	r1, [pc, #168]	@ (801f1c0 <icmp_send_response+0xf8>)
 801f118:	482a      	ldr	r0, [pc, #168]	@ (801f1c4 <icmp_send_response+0xfc>)
 801f11a:	f002 fb03 	bl	8021724 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	685b      	ldr	r3, [r3, #4]
 801f122:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f124:	69fb      	ldr	r3, [r7, #28]
 801f126:	685b      	ldr	r3, [r3, #4]
 801f128:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801f12a:	697b      	ldr	r3, [r7, #20]
 801f12c:	78fa      	ldrb	r2, [r7, #3]
 801f12e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f130:	697b      	ldr	r3, [r7, #20]
 801f132:	78ba      	ldrb	r2, [r7, #2]
 801f134:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f136:	697b      	ldr	r3, [r7, #20]
 801f138:	2200      	movs	r2, #0
 801f13a:	711a      	strb	r2, [r3, #4]
 801f13c:	2200      	movs	r2, #0
 801f13e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	2200      	movs	r2, #0
 801f144:	719a      	strb	r2, [r3, #6]
 801f146:	2200      	movs	r2, #0
 801f148:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f14a:	69fb      	ldr	r3, [r7, #28]
 801f14c:	685b      	ldr	r3, [r3, #4]
 801f14e:	f103 0008 	add.w	r0, r3, #8
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	221c      	movs	r2, #28
 801f158:	4619      	mov	r1, r3
 801f15a:	f002 fd8e 	bl	8021c7a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f15e:	69bb      	ldr	r3, [r7, #24]
 801f160:	68db      	ldr	r3, [r3, #12]
 801f162:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f164:	f107 030c 	add.w	r3, r7, #12
 801f168:	4618      	mov	r0, r3
 801f16a:	f000 f82d 	bl	801f1c8 <ip4_route>
 801f16e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801f170:	693b      	ldr	r3, [r7, #16]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d019      	beq.n	801f1aa <icmp_send_response+0xe2>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f176:	697b      	ldr	r3, [r7, #20]
 801f178:	2200      	movs	r2, #0
 801f17a:	709a      	strb	r2, [r3, #2]
 801f17c:	2200      	movs	r2, #0
 801f17e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801f180:	4b0d      	ldr	r3, [pc, #52]	@ (801f1b8 <icmp_send_response+0xf0>)
 801f182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f186:	3301      	adds	r3, #1
 801f188:	b29a      	uxth	r2, r3
 801f18a:	4b0b      	ldr	r3, [pc, #44]	@ (801f1b8 <icmp_send_response+0xf0>)
 801f18c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f190:	f107 020c 	add.w	r2, r7, #12
 801f194:	693b      	ldr	r3, [r7, #16]
 801f196:	9302      	str	r3, [sp, #8]
 801f198:	2301      	movs	r3, #1
 801f19a:	9301      	str	r3, [sp, #4]
 801f19c:	2300      	movs	r3, #0
 801f19e:	9300      	str	r3, [sp, #0]
 801f1a0:	23ff      	movs	r3, #255	@ 0xff
 801f1a2:	2100      	movs	r1, #0
 801f1a4:	69f8      	ldr	r0, [r7, #28]
 801f1a6:	f000 fa81 	bl	801f6ac <ip4_output_if>
  }
  pbuf_free(q);
 801f1aa:	69f8      	ldr	r0, [r7, #28]
 801f1ac:	f7f6 faca 	bl	8015744 <pbuf_free>
}
 801f1b0:	3720      	adds	r7, #32
 801f1b2:	46bd      	mov	sp, r7
 801f1b4:	bd80      	pop	{r7, pc}
 801f1b6:	bf00      	nop
 801f1b8:	2000bc24 	.word	0x2000bc24
 801f1bc:	08026eac 	.word	0x08026eac
 801f1c0:	08026f78 	.word	0x08026f78
 801f1c4:	08026f1c 	.word	0x08026f1c

0801f1c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f1c8:	b480      	push	{r7}
 801f1ca:	b085      	sub	sp, #20
 801f1cc:	af00      	add	r7, sp, #0
 801f1ce:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801f1d0:	4b37      	ldr	r3, [pc, #220]	@ (801f2b0 <ip4_route+0xe8>)
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	60fb      	str	r3, [r7, #12]
 801f1d6:	e036      	b.n	801f246 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f1d8:	68fb      	ldr	r3, [r7, #12]
 801f1da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f1de:	f003 0301 	and.w	r3, r3, #1
 801f1e2:	b2db      	uxtb	r3, r3
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d02b      	beq.n	801f240 <ip4_route+0x78>
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f1ee:	089b      	lsrs	r3, r3, #2
 801f1f0:	f003 0301 	and.w	r3, r3, #1
 801f1f4:	b2db      	uxtb	r3, r3
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d022      	beq.n	801f240 <ip4_route+0x78>
 801f1fa:	68fb      	ldr	r3, [r7, #12]
 801f1fc:	3304      	adds	r3, #4
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	2b00      	cmp	r3, #0
 801f202:	d01d      	beq.n	801f240 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	681a      	ldr	r2, [r3, #0]
 801f208:	68fb      	ldr	r3, [r7, #12]
 801f20a:	3304      	adds	r3, #4
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	405a      	eors	r2, r3
 801f210:	68fb      	ldr	r3, [r7, #12]
 801f212:	3308      	adds	r3, #8
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	4013      	ands	r3, r2
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d101      	bne.n	801f220 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	e042      	b.n	801f2a6 <ip4_route+0xde>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f220:	68fb      	ldr	r3, [r7, #12]
 801f222:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f226:	f003 0302 	and.w	r3, r3, #2
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d108      	bne.n	801f240 <ip4_route+0x78>
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	681a      	ldr	r2, [r3, #0]
 801f232:	68fb      	ldr	r3, [r7, #12]
 801f234:	330c      	adds	r3, #12
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	429a      	cmp	r2, r3
 801f23a:	d101      	bne.n	801f240 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f23c:	68fb      	ldr	r3, [r7, #12]
 801f23e:	e032      	b.n	801f2a6 <ip4_route+0xde>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	60fb      	str	r3, [r7, #12]
 801f246:	68fb      	ldr	r3, [r7, #12]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	d1c5      	bne.n	801f1d8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f24c:	4b19      	ldr	r3, [pc, #100]	@ (801f2b4 <ip4_route+0xec>)
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	2b00      	cmp	r3, #0
 801f252:	d015      	beq.n	801f280 <ip4_route+0xb8>
 801f254:	4b17      	ldr	r3, [pc, #92]	@ (801f2b4 <ip4_route+0xec>)
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f25c:	f003 0301 	and.w	r3, r3, #1
 801f260:	2b00      	cmp	r3, #0
 801f262:	d00d      	beq.n	801f280 <ip4_route+0xb8>
 801f264:	4b13      	ldr	r3, [pc, #76]	@ (801f2b4 <ip4_route+0xec>)
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f26c:	f003 0304 	and.w	r3, r3, #4
 801f270:	2b00      	cmp	r3, #0
 801f272:	d005      	beq.n	801f280 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801f274:	4b0f      	ldr	r3, [pc, #60]	@ (801f2b4 <ip4_route+0xec>)
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	3304      	adds	r3, #4
 801f27a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d110      	bne.n	801f2a2 <ip4_route+0xda>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801f280:	4b0d      	ldr	r3, [pc, #52]	@ (801f2b8 <ip4_route+0xf0>)
 801f282:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f286:	3301      	adds	r3, #1
 801f288:	b29a      	uxth	r2, r3
 801f28a:	4b0b      	ldr	r3, [pc, #44]	@ (801f2b8 <ip4_route+0xf0>)
 801f28c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 801f290:	4b09      	ldr	r3, [pc, #36]	@ (801f2b8 <ip4_route+0xf0>)
 801f292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f296:	3301      	adds	r3, #1
 801f298:	4a07      	ldr	r2, [pc, #28]	@ (801f2b8 <ip4_route+0xf0>)
 801f29a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    return NULL;
 801f29e:	2300      	movs	r3, #0
 801f2a0:	e001      	b.n	801f2a6 <ip4_route+0xde>
  }

  return netif_default;
 801f2a2:	4b04      	ldr	r3, [pc, #16]	@ (801f2b4 <ip4_route+0xec>)
 801f2a4:	681b      	ldr	r3, [r3, #0]
}
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	3714      	adds	r7, #20
 801f2aa:	46bd      	mov	sp, r7
 801f2ac:	bc80      	pop	{r7}
 801f2ae:	4770      	bx	lr
 801f2b0:	2000bc18 	.word	0x2000bc18
 801f2b4:	2000bc1c 	.word	0x2000bc1c
 801f2b8:	2000bc24 	.word	0x2000bc24

0801f2bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f2bc:	b580      	push	{r7, lr}
 801f2be:	b088      	sub	sp, #32
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	6078      	str	r0, [r7, #4]
 801f2c4:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f2c6:	2301      	movs	r3, #1
 801f2c8:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 801f2ca:	4b9d      	ldr	r3, [pc, #628]	@ (801f540 <ip4_input+0x284>)
 801f2cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801f2d0:	3301      	adds	r3, #1
 801f2d2:	b29a      	uxth	r2, r3
 801f2d4:	4b9a      	ldr	r3, [pc, #616]	@ (801f540 <ip4_input+0x284>)
 801f2d6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 801f2da:	4b99      	ldr	r3, [pc, #612]	@ (801f540 <ip4_input+0x284>)
 801f2dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801f2e0:	3301      	adds	r3, #1
 801f2e2:	4a97      	ldr	r2, [pc, #604]	@ (801f540 <ip4_input+0x284>)
 801f2e4:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	685b      	ldr	r3, [r3, #4]
 801f2ec:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801f2ee:	69fb      	ldr	r3, [r7, #28]
 801f2f0:	781b      	ldrb	r3, [r3, #0]
 801f2f2:	091b      	lsrs	r3, r3, #4
 801f2f4:	b2db      	uxtb	r3, r3
 801f2f6:	2b04      	cmp	r3, #4
 801f2f8:	d01b      	beq.n	801f332 <ip4_input+0x76>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f2fa:	6878      	ldr	r0, [r7, #4]
 801f2fc:	f7f6 fa22 	bl	8015744 <pbuf_free>
    IP_STATS_INC(ip.err);
 801f300:	4b8f      	ldr	r3, [pc, #572]	@ (801f540 <ip4_input+0x284>)
 801f302:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801f306:	3301      	adds	r3, #1
 801f308:	b29a      	uxth	r2, r3
 801f30a:	4b8d      	ldr	r3, [pc, #564]	@ (801f540 <ip4_input+0x284>)
 801f30c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801f310:	4b8b      	ldr	r3, [pc, #556]	@ (801f540 <ip4_input+0x284>)
 801f312:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801f316:	3301      	adds	r3, #1
 801f318:	b29a      	uxth	r2, r3
 801f31a:	4b89      	ldr	r3, [pc, #548]	@ (801f540 <ip4_input+0x284>)
 801f31c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 801f320:	4b87      	ldr	r3, [pc, #540]	@ (801f540 <ip4_input+0x284>)
 801f322:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801f326:	3301      	adds	r3, #1
 801f328:	4a85      	ldr	r2, [pc, #532]	@ (801f540 <ip4_input+0x284>)
 801f32a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    return ERR_OK;
 801f32e:	2300      	movs	r3, #0
 801f330:	e1b3      	b.n	801f69a <ip4_input+0x3de>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801f332:	69fb      	ldr	r3, [r7, #28]
 801f334:	781b      	ldrb	r3, [r3, #0]
 801f336:	f003 030f 	and.w	r3, r3, #15
 801f33a:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801f33c:	89fb      	ldrh	r3, [r7, #14]
 801f33e:	009b      	lsls	r3, r3, #2
 801f340:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f342:	69fb      	ldr	r3, [r7, #28]
 801f344:	885b      	ldrh	r3, [r3, #2]
 801f346:	b29b      	uxth	r3, r3
 801f348:	4618      	mov	r0, r3
 801f34a:	f7f4 ffa3 	bl	8014294 <lwip_htons>
 801f34e:	4603      	mov	r3, r0
 801f350:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	891b      	ldrh	r3, [r3, #8]
 801f356:	89ba      	ldrh	r2, [r7, #12]
 801f358:	429a      	cmp	r2, r3
 801f35a:	d204      	bcs.n	801f366 <ip4_input+0xaa>
    pbuf_realloc(p, iphdr_len);
 801f35c:	89bb      	ldrh	r3, [r7, #12]
 801f35e:	4619      	mov	r1, r3
 801f360:	6878      	ldr	r0, [r7, #4]
 801f362:	f7f6 f87b 	bl	801545c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	895b      	ldrh	r3, [r3, #10]
 801f36a:	89fa      	ldrh	r2, [r7, #14]
 801f36c:	429a      	cmp	r2, r3
 801f36e:	d807      	bhi.n	801f380 <ip4_input+0xc4>
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	891b      	ldrh	r3, [r3, #8]
 801f374:	89ba      	ldrh	r2, [r7, #12]
 801f376:	429a      	cmp	r2, r3
 801f378:	d802      	bhi.n	801f380 <ip4_input+0xc4>
 801f37a:	89fb      	ldrh	r3, [r7, #14]
 801f37c:	2b13      	cmp	r3, #19
 801f37e:	d81b      	bhi.n	801f3b8 <ip4_input+0xfc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f380:	6878      	ldr	r0, [r7, #4]
 801f382:	f7f6 f9df 	bl	8015744 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801f386:	4b6e      	ldr	r3, [pc, #440]	@ (801f540 <ip4_input+0x284>)
 801f388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801f38c:	3301      	adds	r3, #1
 801f38e:	b29a      	uxth	r2, r3
 801f390:	4b6b      	ldr	r3, [pc, #428]	@ (801f540 <ip4_input+0x284>)
 801f392:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801f396:	4b6a      	ldr	r3, [pc, #424]	@ (801f540 <ip4_input+0x284>)
 801f398:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801f39c:	3301      	adds	r3, #1
 801f39e:	b29a      	uxth	r2, r3
 801f3a0:	4b67      	ldr	r3, [pc, #412]	@ (801f540 <ip4_input+0x284>)
 801f3a2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
 801f3a6:	4b66      	ldr	r3, [pc, #408]	@ (801f540 <ip4_input+0x284>)
 801f3a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801f3ac:	3301      	adds	r3, #1
 801f3ae:	4a64      	ldr	r2, [pc, #400]	@ (801f540 <ip4_input+0x284>)
 801f3b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    return ERR_OK;
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	e170      	b.n	801f69a <ip4_input+0x3de>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f3b8:	69fb      	ldr	r3, [r7, #28]
 801f3ba:	691b      	ldr	r3, [r3, #16]
 801f3bc:	4a61      	ldr	r2, [pc, #388]	@ (801f544 <ip4_input+0x288>)
 801f3be:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f3c0:	69fb      	ldr	r3, [r7, #28]
 801f3c2:	68db      	ldr	r3, [r3, #12]
 801f3c4:	4a5f      	ldr	r2, [pc, #380]	@ (801f544 <ip4_input+0x288>)
 801f3c6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f3c8:	4b5e      	ldr	r3, [pc, #376]	@ (801f544 <ip4_input+0x288>)
 801f3ca:	695b      	ldr	r3, [r3, #20]
 801f3cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801f3d0:	2be0      	cmp	r3, #224	@ 0xe0
 801f3d2:	d112      	bne.n	801f3fa <ip4_input+0x13e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f3d4:	683b      	ldr	r3, [r7, #0]
 801f3d6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f3da:	f003 0301 	and.w	r3, r3, #1
 801f3de:	b2db      	uxtb	r3, r3
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	d007      	beq.n	801f3f4 <ip4_input+0x138>
 801f3e4:	683b      	ldr	r3, [r7, #0]
 801f3e6:	3304      	adds	r3, #4
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d002      	beq.n	801f3f4 <ip4_input+0x138>
      netif = inp;
 801f3ee:	683b      	ldr	r3, [r7, #0]
 801f3f0:	61bb      	str	r3, [r7, #24]
 801f3f2:	e041      	b.n	801f478 <ip4_input+0x1bc>
    } else {
      netif = NULL;
 801f3f4:	2300      	movs	r3, #0
 801f3f6:	61bb      	str	r3, [r7, #24]
 801f3f8:	e03e      	b.n	801f478 <ip4_input+0x1bc>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801f3fa:	2301      	movs	r3, #1
 801f3fc:	613b      	str	r3, [r7, #16]
    netif = inp;
 801f3fe:	683b      	ldr	r3, [r7, #0]
 801f400:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f402:	69bb      	ldr	r3, [r7, #24]
 801f404:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f408:	f003 0301 	and.w	r3, r3, #1
 801f40c:	b2db      	uxtb	r3, r3
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d014      	beq.n	801f43c <ip4_input+0x180>
 801f412:	69bb      	ldr	r3, [r7, #24]
 801f414:	3304      	adds	r3, #4
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d00f      	beq.n	801f43c <ip4_input+0x180>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f41c:	4b49      	ldr	r3, [pc, #292]	@ (801f544 <ip4_input+0x288>)
 801f41e:	695a      	ldr	r2, [r3, #20]
 801f420:	69bb      	ldr	r3, [r7, #24]
 801f422:	3304      	adds	r3, #4
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	429a      	cmp	r2, r3
 801f428:	d026      	beq.n	801f478 <ip4_input+0x1bc>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f42a:	4b46      	ldr	r3, [pc, #280]	@ (801f544 <ip4_input+0x288>)
 801f42c:	695b      	ldr	r3, [r3, #20]
 801f42e:	69b9      	ldr	r1, [r7, #24]
 801f430:	4618      	mov	r0, r3
 801f432:	f000 fa2d 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801f436:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d11d      	bne.n	801f478 <ip4_input+0x1bc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801f43c:	693b      	ldr	r3, [r7, #16]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d00d      	beq.n	801f45e <ip4_input+0x1a2>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801f442:	4b40      	ldr	r3, [pc, #256]	@ (801f544 <ip4_input+0x288>)
 801f444:	695b      	ldr	r3, [r3, #20]
 801f446:	b2db      	uxtb	r3, r3
 801f448:	2b7f      	cmp	r3, #127	@ 0x7f
 801f44a:	d102      	bne.n	801f452 <ip4_input+0x196>
          netif = NULL;
 801f44c:	2300      	movs	r3, #0
 801f44e:	61bb      	str	r3, [r7, #24]
          break;
 801f450:	e012      	b.n	801f478 <ip4_input+0x1bc>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801f452:	2300      	movs	r3, #0
 801f454:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 801f456:	4b3c      	ldr	r3, [pc, #240]	@ (801f548 <ip4_input+0x28c>)
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	61bb      	str	r3, [r7, #24]
 801f45c:	e002      	b.n	801f464 <ip4_input+0x1a8>
      } else {
        netif = netif->next;
 801f45e:	69bb      	ldr	r3, [r7, #24]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 801f464:	69ba      	ldr	r2, [r7, #24]
 801f466:	683b      	ldr	r3, [r7, #0]
 801f468:	429a      	cmp	r2, r3
 801f46a:	d102      	bne.n	801f472 <ip4_input+0x1b6>
        netif = netif->next;
 801f46c:	69bb      	ldr	r3, [r7, #24]
 801f46e:	681b      	ldr	r3, [r3, #0]
 801f470:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801f472:	69bb      	ldr	r3, [r7, #24]
 801f474:	2b00      	cmp	r3, #0
 801f476:	d1c4      	bne.n	801f402 <ip4_input+0x146>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f478:	69bb      	ldr	r3, [r7, #24]
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d111      	bne.n	801f4a2 <ip4_input+0x1e6>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f47e:	69fb      	ldr	r3, [r7, #28]
 801f480:	7a5b      	ldrb	r3, [r3, #9]
 801f482:	2b11      	cmp	r3, #17
 801f484:	d10d      	bne.n	801f4a2 <ip4_input+0x1e6>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801f486:	89fb      	ldrh	r3, [r7, #14]
 801f488:	69fa      	ldr	r2, [r7, #28]
 801f48a:	4413      	add	r3, r2
 801f48c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f48e:	68bb      	ldr	r3, [r7, #8]
 801f490:	885b      	ldrh	r3, [r3, #2]
 801f492:	b29b      	uxth	r3, r3
 801f494:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801f498:	d103      	bne.n	801f4a2 <ip4_input+0x1e6>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f49a:	683b      	ldr	r3, [r7, #0]
 801f49c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801f49e:	2300      	movs	r3, #0
 801f4a0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801f4a2:	697b      	ldr	r3, [r7, #20]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d02d      	beq.n	801f504 <ip4_input+0x248>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f4a8:	4b26      	ldr	r3, [pc, #152]	@ (801f544 <ip4_input+0x288>)
 801f4aa:	691b      	ldr	r3, [r3, #16]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d029      	beq.n	801f504 <ip4_input+0x248>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f4b0:	4b24      	ldr	r3, [pc, #144]	@ (801f544 <ip4_input+0x288>)
 801f4b2:	691b      	ldr	r3, [r3, #16]
 801f4b4:	6839      	ldr	r1, [r7, #0]
 801f4b6:	4618      	mov	r0, r3
 801f4b8:	f000 f9ea 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801f4bc:	4603      	mov	r3, r0
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d105      	bne.n	801f4ce <ip4_input+0x212>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f4c2:	4b20      	ldr	r3, [pc, #128]	@ (801f544 <ip4_input+0x288>)
 801f4c4:	691b      	ldr	r3, [r3, #16]
 801f4c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f4ca:	2be0      	cmp	r3, #224	@ 0xe0
 801f4cc:	d11a      	bne.n	801f504 <ip4_input+0x248>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f4ce:	6878      	ldr	r0, [r7, #4]
 801f4d0:	f7f6 f938 	bl	8015744 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801f4d4:	4b1a      	ldr	r3, [pc, #104]	@ (801f540 <ip4_input+0x284>)
 801f4d6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801f4da:	3301      	adds	r3, #1
 801f4dc:	b29a      	uxth	r2, r3
 801f4de:	4b18      	ldr	r3, [pc, #96]	@ (801f540 <ip4_input+0x284>)
 801f4e0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801f4e4:	4b16      	ldr	r3, [pc, #88]	@ (801f540 <ip4_input+0x284>)
 801f4e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801f4ea:	3301      	adds	r3, #1
 801f4ec:	4a14      	ldr	r2, [pc, #80]	@ (801f540 <ip4_input+0x284>)
 801f4ee:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801f4f2:	4b13      	ldr	r3, [pc, #76]	@ (801f540 <ip4_input+0x284>)
 801f4f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801f4f8:	3301      	adds	r3, #1
 801f4fa:	4a11      	ldr	r2, [pc, #68]	@ (801f540 <ip4_input+0x284>)
 801f4fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      return ERR_OK;
 801f500:	2300      	movs	r3, #0
 801f502:	e0ca      	b.n	801f69a <ip4_input+0x3de>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f504:	69bb      	ldr	r3, [r7, #24]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d120      	bne.n	801f54c <ip4_input+0x290>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801f50a:	4b0d      	ldr	r3, [pc, #52]	@ (801f540 <ip4_input+0x284>)
 801f50c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801f510:	3301      	adds	r3, #1
 801f512:	b29a      	uxth	r2, r3
 801f514:	4b0a      	ldr	r3, [pc, #40]	@ (801f540 <ip4_input+0x284>)
 801f516:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801f51a:	4b09      	ldr	r3, [pc, #36]	@ (801f540 <ip4_input+0x284>)
 801f51c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801f520:	3301      	adds	r3, #1
 801f522:	4a07      	ldr	r2, [pc, #28]	@ (801f540 <ip4_input+0x284>)
 801f524:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801f528:	4b05      	ldr	r3, [pc, #20]	@ (801f540 <ip4_input+0x284>)
 801f52a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801f52e:	3301      	adds	r3, #1
 801f530:	4a03      	ldr	r2, [pc, #12]	@ (801f540 <ip4_input+0x284>)
 801f532:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    }
    pbuf_free(p);
 801f536:	6878      	ldr	r0, [r7, #4]
 801f538:	f7f6 f904 	bl	8015744 <pbuf_free>
    return ERR_OK;
 801f53c:	2300      	movs	r3, #0
 801f53e:	e0ac      	b.n	801f69a <ip4_input+0x3de>
 801f540:	2000bc24 	.word	0x2000bc24
 801f544:	2000863c 	.word	0x2000863c
 801f548:	2000bc18 	.word	0x2000bc18
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f54c:	69fb      	ldr	r3, [r7, #28]
 801f54e:	88db      	ldrh	r3, [r3, #6]
 801f550:	b29b      	uxth	r3, r3
 801f552:	461a      	mov	r2, r3
 801f554:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801f558:	4013      	ands	r3, r2
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d00b      	beq.n	801f576 <ip4_input+0x2ba>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f55e:	6878      	ldr	r0, [r7, #4]
 801f560:	f000 fed0 	bl	8020304 <ip4_reass>
 801f564:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d101      	bne.n	801f570 <ip4_input+0x2b4>
      return ERR_OK;
 801f56c:	2300      	movs	r3, #0
 801f56e:	e094      	b.n	801f69a <ip4_input+0x3de>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	685b      	ldr	r3, [r3, #4]
 801f574:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f576:	4a4b      	ldr	r2, [pc, #300]	@ (801f6a4 <ip4_input+0x3e8>)
 801f578:	69bb      	ldr	r3, [r7, #24]
 801f57a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f57c:	4a49      	ldr	r2, [pc, #292]	@ (801f6a4 <ip4_input+0x3e8>)
 801f57e:	683b      	ldr	r3, [r7, #0]
 801f580:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f582:	4a48      	ldr	r2, [pc, #288]	@ (801f6a4 <ip4_input+0x3e8>)
 801f584:	69fb      	ldr	r3, [r7, #28]
 801f586:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801f588:	69fb      	ldr	r3, [r7, #28]
 801f58a:	781b      	ldrb	r3, [r3, #0]
 801f58c:	f003 030f 	and.w	r3, r3, #15
 801f590:	b29b      	uxth	r3, r3
 801f592:	009b      	lsls	r3, r3, #2
 801f594:	b29a      	uxth	r2, r3
 801f596:	4b43      	ldr	r3, [pc, #268]	@ (801f6a4 <ip4_input+0x3e8>)
 801f598:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801f59a:	89fb      	ldrh	r3, [r7, #14]
 801f59c:	425b      	negs	r3, r3
 801f59e:	b29b      	uxth	r3, r3
 801f5a0:	b21b      	sxth	r3, r3
 801f5a2:	4619      	mov	r1, r3
 801f5a4:	6878      	ldr	r0, [r7, #4]
 801f5a6:	f7f6 f8a9 	bl	80156fc <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801f5aa:	69fb      	ldr	r3, [r7, #28]
 801f5ac:	7a5b      	ldrb	r3, [r3, #9]
 801f5ae:	2b11      	cmp	r3, #17
 801f5b0:	d006      	beq.n	801f5c0 <ip4_input+0x304>
 801f5b2:	2b11      	cmp	r3, #17
 801f5b4:	dc28      	bgt.n	801f608 <ip4_input+0x34c>
 801f5b6:	2b01      	cmp	r3, #1
 801f5b8:	d01a      	beq.n	801f5f0 <ip4_input+0x334>
 801f5ba:	2b06      	cmp	r3, #6
 801f5bc:	d00c      	beq.n	801f5d8 <ip4_input+0x31c>
 801f5be:	e023      	b.n	801f608 <ip4_input+0x34c>
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
 801f5c0:	4b39      	ldr	r3, [pc, #228]	@ (801f6a8 <ip4_input+0x3ec>)
 801f5c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801f5c6:	3301      	adds	r3, #1
 801f5c8:	4a37      	ldr	r2, [pc, #220]	@ (801f6a8 <ip4_input+0x3ec>)
 801f5ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      udp_input(p, inp);
 801f5ce:	6839      	ldr	r1, [r7, #0]
 801f5d0:	6878      	ldr	r0, [r7, #4]
 801f5d2:	f7fc f93d 	bl	801b850 <udp_input>
      break;
 801f5d6:	e04d      	b.n	801f674 <ip4_input+0x3b8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
 801f5d8:	4b33      	ldr	r3, [pc, #204]	@ (801f6a8 <ip4_input+0x3ec>)
 801f5da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801f5de:	3301      	adds	r3, #1
 801f5e0:	4a31      	ldr	r2, [pc, #196]	@ (801f6a8 <ip4_input+0x3ec>)
 801f5e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      tcp_input(p, inp);
 801f5e6:	6839      	ldr	r1, [r7, #0]
 801f5e8:	6878      	ldr	r0, [r7, #4]
 801f5ea:	f7f8 f8c1 	bl	8017770 <tcp_input>
      break;
 801f5ee:	e041      	b.n	801f674 <ip4_input+0x3b8>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
 801f5f0:	4b2d      	ldr	r3, [pc, #180]	@ (801f6a8 <ip4_input+0x3ec>)
 801f5f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801f5f6:	3301      	adds	r3, #1
 801f5f8:	4a2b      	ldr	r2, [pc, #172]	@ (801f6a8 <ip4_input+0x3ec>)
 801f5fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      icmp_input(p, inp);
 801f5fe:	6839      	ldr	r1, [r7, #0]
 801f600:	6878      	ldr	r0, [r7, #4]
 801f602:	f7ff fb57 	bl	801ecb4 <icmp_input>
      break;
 801f606:	e035      	b.n	801f674 <ip4_input+0x3b8>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f608:	4b26      	ldr	r3, [pc, #152]	@ (801f6a4 <ip4_input+0x3e8>)
 801f60a:	695b      	ldr	r3, [r3, #20]
 801f60c:	69b9      	ldr	r1, [r7, #24]
 801f60e:	4618      	mov	r0, r3
 801f610:	f000 f93e 	bl	801f890 <ip4_addr_isbroadcast_u32>
 801f614:	4603      	mov	r3, r0
 801f616:	2b00      	cmp	r3, #0
 801f618:	d112      	bne.n	801f640 <ip4_input+0x384>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f61a:	4b22      	ldr	r3, [pc, #136]	@ (801f6a4 <ip4_input+0x3e8>)
 801f61c:	695b      	ldr	r3, [r3, #20]
 801f61e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f622:	2be0      	cmp	r3, #224	@ 0xe0
 801f624:	d00c      	beq.n	801f640 <ip4_input+0x384>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801f626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801f62a:	4619      	mov	r1, r3
 801f62c:	6878      	ldr	r0, [r7, #4]
 801f62e:	f7f6 f877 	bl	8015720 <pbuf_header_force>
        p->payload = iphdr;
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	69fa      	ldr	r2, [r7, #28]
 801f636:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f638:	2102      	movs	r1, #2
 801f63a:	6878      	ldr	r0, [r7, #4]
 801f63c:	f7ff fd10 	bl	801f060 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801f640:	6878      	ldr	r0, [r7, #4]
 801f642:	f7f6 f87f 	bl	8015744 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 801f646:	4b18      	ldr	r3, [pc, #96]	@ (801f6a8 <ip4_input+0x3ec>)
 801f648:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801f64c:	3301      	adds	r3, #1
 801f64e:	b29a      	uxth	r2, r3
 801f650:	4b15      	ldr	r3, [pc, #84]	@ (801f6a8 <ip4_input+0x3ec>)
 801f652:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      IP_STATS_INC(ip.drop);
 801f656:	4b14      	ldr	r3, [pc, #80]	@ (801f6a8 <ip4_input+0x3ec>)
 801f658:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801f65c:	3301      	adds	r3, #1
 801f65e:	b29a      	uxth	r2, r3
 801f660:	4b11      	ldr	r3, [pc, #68]	@ (801f6a8 <ip4_input+0x3ec>)
 801f662:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
 801f666:	4b10      	ldr	r3, [pc, #64]	@ (801f6a8 <ip4_input+0x3ec>)
 801f668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801f66c:	3301      	adds	r3, #1
 801f66e:	4a0e      	ldr	r2, [pc, #56]	@ (801f6a8 <ip4_input+0x3ec>)
 801f670:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f674:	4b0b      	ldr	r3, [pc, #44]	@ (801f6a4 <ip4_input+0x3e8>)
 801f676:	2200      	movs	r2, #0
 801f678:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f67a:	4b0a      	ldr	r3, [pc, #40]	@ (801f6a4 <ip4_input+0x3e8>)
 801f67c:	2200      	movs	r2, #0
 801f67e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f680:	4b08      	ldr	r3, [pc, #32]	@ (801f6a4 <ip4_input+0x3e8>)
 801f682:	2200      	movs	r2, #0
 801f684:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f686:	4b07      	ldr	r3, [pc, #28]	@ (801f6a4 <ip4_input+0x3e8>)
 801f688:	2200      	movs	r2, #0
 801f68a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f68c:	4b05      	ldr	r3, [pc, #20]	@ (801f6a4 <ip4_input+0x3e8>)
 801f68e:	2200      	movs	r2, #0
 801f690:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f692:	4b04      	ldr	r3, [pc, #16]	@ (801f6a4 <ip4_input+0x3e8>)
 801f694:	2200      	movs	r2, #0
 801f696:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f698:	2300      	movs	r3, #0
}
 801f69a:	4618      	mov	r0, r3
 801f69c:	3720      	adds	r7, #32
 801f69e:	46bd      	mov	sp, r7
 801f6a0:	bd80      	pop	{r7, pc}
 801f6a2:	bf00      	nop
 801f6a4:	2000863c 	.word	0x2000863c
 801f6a8:	2000bc24 	.word	0x2000bc24

0801f6ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b08a      	sub	sp, #40	@ 0x28
 801f6b0:	af04      	add	r7, sp, #16
 801f6b2:	60f8      	str	r0, [r7, #12]
 801f6b4:	60b9      	str	r1, [r7, #8]
 801f6b6:	607a      	str	r2, [r7, #4]
 801f6b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f6ba:	68bb      	ldr	r3, [r7, #8]
 801f6bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	d009      	beq.n	801f6d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f6c4:	68bb      	ldr	r3, [r7, #8]
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d003      	beq.n	801f6d2 <ip4_output_if+0x26>
 801f6ca:	68bb      	ldr	r3, [r7, #8]
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d102      	bne.n	801f6d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f6d4:	3304      	adds	r3, #4
 801f6d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f6d8:	78fa      	ldrb	r2, [r7, #3]
 801f6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f6dc:	9302      	str	r3, [sp, #8]
 801f6de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801f6e2:	9301      	str	r3, [sp, #4]
 801f6e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f6e8:	9300      	str	r3, [sp, #0]
 801f6ea:	4613      	mov	r3, r2
 801f6ec:	687a      	ldr	r2, [r7, #4]
 801f6ee:	6979      	ldr	r1, [r7, #20]
 801f6f0:	68f8      	ldr	r0, [r7, #12]
 801f6f2:	f000 f805 	bl	801f700 <ip4_output_if_src>
 801f6f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f6f8:	4618      	mov	r0, r3
 801f6fa:	3718      	adds	r7, #24
 801f6fc:	46bd      	mov	sp, r7
 801f6fe:	bd80      	pop	{r7, pc}

0801f700 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801f700:	b580      	push	{r7, lr}
 801f702:	b088      	sub	sp, #32
 801f704:	af00      	add	r7, sp, #0
 801f706:	60f8      	str	r0, [r7, #12]
 801f708:	60b9      	str	r1, [r7, #8]
 801f70a:	607a      	str	r2, [r7, #4]
 801f70c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f70e:	68fb      	ldr	r3, [r7, #12]
 801f710:	89db      	ldrh	r3, [r3, #14]
 801f712:	2b01      	cmp	r3, #1
 801f714:	d006      	beq.n	801f724 <ip4_output_if_src+0x24>
 801f716:	4b57      	ldr	r3, [pc, #348]	@ (801f874 <ip4_output_if_src+0x174>)
 801f718:	f240 3233 	movw	r2, #819	@ 0x333
 801f71c:	4956      	ldr	r1, [pc, #344]	@ (801f878 <ip4_output_if_src+0x178>)
 801f71e:	4857      	ldr	r0, [pc, #348]	@ (801f87c <ip4_output_if_src+0x17c>)
 801f720:	f002 f800 	bl	8021724 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);
 801f724:	4b56      	ldr	r3, [pc, #344]	@ (801f880 <ip4_output_if_src+0x180>)
 801f726:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801f72a:	3301      	adds	r3, #1
 801f72c:	4a54      	ldr	r2, [pc, #336]	@ (801f880 <ip4_output_if_src+0x180>)
 801f72e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	2b00      	cmp	r3, #0
 801f736:	d06f      	beq.n	801f818 <ip4_output_if_src+0x118>
    u16_t ip_hlen = IP_HLEN;
 801f738:	2314      	movs	r3, #20
 801f73a:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801f73c:	2114      	movs	r1, #20
 801f73e:	68f8      	ldr	r0, [r7, #12]
 801f740:	f7f5 ffdc 	bl	80156fc <pbuf_header>
 801f744:	4603      	mov	r3, r0
 801f746:	2b00      	cmp	r3, #0
 801f748:	d011      	beq.n	801f76e <ip4_output_if_src+0x6e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801f74a:	4b4d      	ldr	r3, [pc, #308]	@ (801f880 <ip4_output_if_src+0x180>)
 801f74c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801f750:	3301      	adds	r3, #1
 801f752:	b29a      	uxth	r2, r3
 801f754:	4b4a      	ldr	r3, [pc, #296]	@ (801f880 <ip4_output_if_src+0x180>)
 801f756:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 801f75a:	4b49      	ldr	r3, [pc, #292]	@ (801f880 <ip4_output_if_src+0x180>)
 801f75c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801f760:	3301      	adds	r3, #1
 801f762:	4a47      	ldr	r2, [pc, #284]	@ (801f880 <ip4_output_if_src+0x180>)
 801f764:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      return ERR_BUF;
 801f768:	f06f 0301 	mvn.w	r3, #1
 801f76c:	e07d      	b.n	801f86a <ip4_output_if_src+0x16a>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f76e:	68fb      	ldr	r3, [r7, #12]
 801f770:	685b      	ldr	r3, [r3, #4]
 801f772:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	895b      	ldrh	r3, [r3, #10]
 801f778:	2b13      	cmp	r3, #19
 801f77a:	d806      	bhi.n	801f78a <ip4_output_if_src+0x8a>
 801f77c:	4b3d      	ldr	r3, [pc, #244]	@ (801f874 <ip4_output_if_src+0x174>)
 801f77e:	f44f 7258 	mov.w	r2, #864	@ 0x360
 801f782:	4940      	ldr	r1, [pc, #256]	@ (801f884 <ip4_output_if_src+0x184>)
 801f784:	483d      	ldr	r0, [pc, #244]	@ (801f87c <ip4_output_if_src+0x17c>)
 801f786:	f001 ffcd 	bl	8021724 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f78a:	69fb      	ldr	r3, [r7, #28]
 801f78c:	78fa      	ldrb	r2, [r7, #3]
 801f78e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f790:	69fb      	ldr	r3, [r7, #28]
 801f792:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801f796:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	681a      	ldr	r2, [r3, #0]
 801f79c:	69fb      	ldr	r3, [r7, #28]
 801f79e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f7a0:	8b7b      	ldrh	r3, [r7, #26]
 801f7a2:	089b      	lsrs	r3, r3, #2
 801f7a4:	b29b      	uxth	r3, r3
 801f7a6:	b2db      	uxtb	r3, r3
 801f7a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f7ac:	b2da      	uxtb	r2, r3
 801f7ae:	69fb      	ldr	r3, [r7, #28]
 801f7b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f7b2:	69fb      	ldr	r3, [r7, #28]
 801f7b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801f7b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f7ba:	68fb      	ldr	r3, [r7, #12]
 801f7bc:	891b      	ldrh	r3, [r3, #8]
 801f7be:	4618      	mov	r0, r3
 801f7c0:	f7f4 fd68 	bl	8014294 <lwip_htons>
 801f7c4:	4603      	mov	r3, r0
 801f7c6:	461a      	mov	r2, r3
 801f7c8:	69fb      	ldr	r3, [r7, #28]
 801f7ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f7cc:	69fb      	ldr	r3, [r7, #28]
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	719a      	strb	r2, [r3, #6]
 801f7d2:	2200      	movs	r2, #0
 801f7d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f7d6:	4b2c      	ldr	r3, [pc, #176]	@ (801f888 <ip4_output_if_src+0x188>)
 801f7d8:	881b      	ldrh	r3, [r3, #0]
 801f7da:	4618      	mov	r0, r3
 801f7dc:	f7f4 fd5a 	bl	8014294 <lwip_htons>
 801f7e0:	4603      	mov	r3, r0
 801f7e2:	461a      	mov	r2, r3
 801f7e4:	69fb      	ldr	r3, [r7, #28]
 801f7e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f7e8:	4b27      	ldr	r3, [pc, #156]	@ (801f888 <ip4_output_if_src+0x188>)
 801f7ea:	881b      	ldrh	r3, [r3, #0]
 801f7ec:	3301      	adds	r3, #1
 801f7ee:	b29a      	uxth	r2, r3
 801f7f0:	4b25      	ldr	r3, [pc, #148]	@ (801f888 <ip4_output_if_src+0x188>)
 801f7f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f7f4:	68bb      	ldr	r3, [r7, #8]
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d104      	bne.n	801f804 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f7fa:	4b24      	ldr	r3, [pc, #144]	@ (801f88c <ip4_output_if_src+0x18c>)
 801f7fc:	681a      	ldr	r2, [r3, #0]
 801f7fe:	69fb      	ldr	r3, [r7, #28]
 801f800:	60da      	str	r2, [r3, #12]
 801f802:	e003      	b.n	801f80c <ip4_output_if_src+0x10c>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f804:	68bb      	ldr	r3, [r7, #8]
 801f806:	681a      	ldr	r2, [r3, #0]
 801f808:	69fb      	ldr	r3, [r7, #28]
 801f80a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f80c:	69fb      	ldr	r3, [r7, #28]
 801f80e:	2200      	movs	r2, #0
 801f810:	729a      	strb	r2, [r3, #10]
 801f812:	2200      	movs	r2, #0
 801f814:	72da      	strb	r2, [r3, #11]
 801f816:	e008      	b.n	801f82a <ip4_output_if_src+0x12a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801f818:	68fb      	ldr	r3, [r7, #12]
 801f81a:	685b      	ldr	r3, [r3, #4]
 801f81c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f81e:	69fb      	ldr	r3, [r7, #28]
 801f820:	691b      	ldr	r3, [r3, #16]
 801f822:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801f824:	f107 0314 	add.w	r3, r7, #20
 801f828:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801f82a:	4b15      	ldr	r3, [pc, #84]	@ (801f880 <ip4_output_if_src+0x180>)
 801f82c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801f830:	3301      	adds	r3, #1
 801f832:	b29a      	uxth	r2, r3
 801f834:	4b12      	ldr	r3, [pc, #72]	@ (801f880 <ip4_output_if_src+0x180>)
 801f836:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f83c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d00c      	beq.n	801f85c <ip4_output_if_src+0x15c>
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	891a      	ldrh	r2, [r3, #8]
 801f846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801f84a:	429a      	cmp	r2, r3
 801f84c:	d906      	bls.n	801f85c <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 801f84e:	687a      	ldr	r2, [r7, #4]
 801f850:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801f852:	68f8      	ldr	r0, [r7, #12]
 801f854:	f000 ff30 	bl	80206b8 <ip4_frag>
 801f858:	4603      	mov	r3, r0
 801f85a:	e006      	b.n	801f86a <ip4_output_if_src+0x16a>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f85e:	695b      	ldr	r3, [r3, #20]
 801f860:	687a      	ldr	r2, [r7, #4]
 801f862:	68f9      	ldr	r1, [r7, #12]
 801f864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f866:	4798      	blx	r3
 801f868:	4603      	mov	r3, r0
}
 801f86a:	4618      	mov	r0, r3
 801f86c:	3720      	adds	r7, #32
 801f86e:	46bd      	mov	sp, r7
 801f870:	bd80      	pop	{r7, pc}
 801f872:	bf00      	nop
 801f874:	08026fa4 	.word	0x08026fa4
 801f878:	08026fd8 	.word	0x08026fd8
 801f87c:	08026fe4 	.word	0x08026fe4
 801f880:	2000bc24 	.word	0x2000bc24
 801f884:	0802700c 	.word	0x0802700c
 801f888:	2000bf42 	.word	0x2000bf42
 801f88c:	0803064c 	.word	0x0803064c

0801f890 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f890:	b480      	push	{r7}
 801f892:	b085      	sub	sp, #20
 801f894:	af00      	add	r7, sp, #0
 801f896:	6078      	str	r0, [r7, #4]
 801f898:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f89e:	687b      	ldr	r3, [r7, #4]
 801f8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f8a4:	d002      	beq.n	801f8ac <ip4_addr_isbroadcast_u32+0x1c>
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d101      	bne.n	801f8b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801f8ac:	2301      	movs	r3, #1
 801f8ae:	e02a      	b.n	801f906 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f8b0:	683b      	ldr	r3, [r7, #0]
 801f8b2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f8b6:	f003 0302 	and.w	r3, r3, #2
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	d101      	bne.n	801f8c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801f8be:	2300      	movs	r3, #0
 801f8c0:	e021      	b.n	801f906 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f8c2:	683b      	ldr	r3, [r7, #0]
 801f8c4:	3304      	adds	r3, #4
 801f8c6:	681b      	ldr	r3, [r3, #0]
 801f8c8:	687a      	ldr	r2, [r7, #4]
 801f8ca:	429a      	cmp	r2, r3
 801f8cc:	d101      	bne.n	801f8d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801f8ce:	2300      	movs	r3, #0
 801f8d0:	e019      	b.n	801f906 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f8d2:	68fa      	ldr	r2, [r7, #12]
 801f8d4:	683b      	ldr	r3, [r7, #0]
 801f8d6:	3304      	adds	r3, #4
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	405a      	eors	r2, r3
 801f8dc:	683b      	ldr	r3, [r7, #0]
 801f8de:	3308      	adds	r3, #8
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	4013      	ands	r3, r2
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d10d      	bne.n	801f904 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f8e8:	683b      	ldr	r3, [r7, #0]
 801f8ea:	3308      	adds	r3, #8
 801f8ec:	681b      	ldr	r3, [r3, #0]
 801f8ee:	43da      	mvns	r2, r3
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801f8f4:	683b      	ldr	r3, [r7, #0]
 801f8f6:	3308      	adds	r3, #8
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f8fc:	429a      	cmp	r2, r3
 801f8fe:	d101      	bne.n	801f904 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801f900:	2301      	movs	r3, #1
 801f902:	e000      	b.n	801f906 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801f904:	2300      	movs	r3, #0
  }
}
 801f906:	4618      	mov	r0, r3
 801f908:	3714      	adds	r7, #20
 801f90a:	46bd      	mov	sp, r7
 801f90c:	bc80      	pop	{r7}
 801f90e:	4770      	bx	lr

0801f910 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801f910:	b580      	push	{r7, lr}
 801f912:	b084      	sub	sp, #16
 801f914:	af00      	add	r7, sp, #0
 801f916:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 801f918:	f107 030c 	add.w	r3, r7, #12
 801f91c:	4619      	mov	r1, r3
 801f91e:	6878      	ldr	r0, [r7, #4]
 801f920:	f000 f80c 	bl	801f93c <ip4addr_aton>
 801f924:	4603      	mov	r3, r0
 801f926:	2b00      	cmp	r3, #0
 801f928:	d001      	beq.n	801f92e <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 801f92a:	68fb      	ldr	r3, [r7, #12]
 801f92c:	e001      	b.n	801f932 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801f92e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f932:	4618      	mov	r0, r3
 801f934:	3710      	adds	r7, #16
 801f936:	46bd      	mov	sp, r7
 801f938:	bd80      	pop	{r7, pc}
	...

0801f93c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801f93c:	b580      	push	{r7, lr}
 801f93e:	b08a      	sub	sp, #40	@ 0x28
 801f940:	af00      	add	r7, sp, #0
 801f942:	6078      	str	r0, [r7, #4]
 801f944:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801f946:	f107 030c 	add.w	r3, r7, #12
 801f94a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	781b      	ldrb	r3, [r3, #0]
 801f950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801f954:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f958:	2b2f      	cmp	r3, #47	@ 0x2f
 801f95a:	d903      	bls.n	801f964 <ip4addr_aton+0x28>
 801f95c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f960:	2b39      	cmp	r3, #57	@ 0x39
 801f962:	d901      	bls.n	801f968 <ip4addr_aton+0x2c>
      return 0;
 801f964:	2300      	movs	r3, #0
 801f966:	e11e      	b.n	801fba6 <ip4addr_aton+0x26a>
    }
    val = 0;
 801f968:	2300      	movs	r3, #0
 801f96a:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801f96c:	230a      	movs	r3, #10
 801f96e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801f972:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f976:	2b30      	cmp	r3, #48	@ 0x30
 801f978:	d11c      	bne.n	801f9b4 <ip4addr_aton+0x78>
      c = *++cp;
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	3301      	adds	r3, #1
 801f97e:	607b      	str	r3, [r7, #4]
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	781b      	ldrb	r3, [r3, #0]
 801f984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801f988:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f98c:	2b78      	cmp	r3, #120	@ 0x78
 801f98e:	d003      	beq.n	801f998 <ip4addr_aton+0x5c>
 801f990:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f994:	2b58      	cmp	r3, #88	@ 0x58
 801f996:	d10a      	bne.n	801f9ae <ip4addr_aton+0x72>
        base = 16;
 801f998:	2310      	movs	r3, #16
 801f99a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	3301      	adds	r3, #1
 801f9a2:	607b      	str	r3, [r7, #4]
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	781b      	ldrb	r3, [r3, #0]
 801f9a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801f9ac:	e002      	b.n	801f9b4 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801f9ae:	2308      	movs	r3, #8
 801f9b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801f9b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f9b8:	2b2f      	cmp	r3, #47	@ 0x2f
 801f9ba:	d915      	bls.n	801f9e8 <ip4addr_aton+0xac>
 801f9bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f9c0:	2b39      	cmp	r3, #57	@ 0x39
 801f9c2:	d811      	bhi.n	801f9e8 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 801f9c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f9c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f9ca:	fb03 f202 	mul.w	r2, r3, r2
 801f9ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f9d2:	4413      	add	r3, r2
 801f9d4:	3b30      	subs	r3, #48	@ 0x30
 801f9d6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	3301      	adds	r3, #1
 801f9dc:	607b      	str	r3, [r7, #4]
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	781b      	ldrb	r3, [r3, #0]
 801f9e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801f9e6:	e036      	b.n	801fa56 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 801f9e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f9ec:	2b10      	cmp	r3, #16
 801f9ee:	d133      	bne.n	801fa58 <ip4addr_aton+0x11c>
 801f9f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f9f4:	2b2f      	cmp	r3, #47	@ 0x2f
 801f9f6:	d903      	bls.n	801fa00 <ip4addr_aton+0xc4>
 801f9f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f9fc:	2b39      	cmp	r3, #57	@ 0x39
 801f9fe:	d90f      	bls.n	801fa20 <ip4addr_aton+0xe4>
 801fa00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fa04:	2b60      	cmp	r3, #96	@ 0x60
 801fa06:	d903      	bls.n	801fa10 <ip4addr_aton+0xd4>
 801fa08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fa0c:	2b66      	cmp	r3, #102	@ 0x66
 801fa0e:	d907      	bls.n	801fa20 <ip4addr_aton+0xe4>
 801fa10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fa14:	2b40      	cmp	r3, #64	@ 0x40
 801fa16:	d91f      	bls.n	801fa58 <ip4addr_aton+0x11c>
 801fa18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fa1c:	2b46      	cmp	r3, #70	@ 0x46
 801fa1e:	d81b      	bhi.n	801fa58 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801fa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa22:	011b      	lsls	r3, r3, #4
 801fa24:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801fa28:	f102 010a 	add.w	r1, r2, #10
 801fa2c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801fa30:	2a60      	cmp	r2, #96	@ 0x60
 801fa32:	d905      	bls.n	801fa40 <ip4addr_aton+0x104>
 801fa34:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801fa38:	2a7a      	cmp	r2, #122	@ 0x7a
 801fa3a:	d801      	bhi.n	801fa40 <ip4addr_aton+0x104>
 801fa3c:	2261      	movs	r2, #97	@ 0x61
 801fa3e:	e000      	b.n	801fa42 <ip4addr_aton+0x106>
 801fa40:	2241      	movs	r2, #65	@ 0x41
 801fa42:	1a8a      	subs	r2, r1, r2
 801fa44:	4313      	orrs	r3, r2
 801fa46:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	3301      	adds	r3, #1
 801fa4c:	607b      	str	r3, [r7, #4]
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	781b      	ldrb	r3, [r3, #0]
 801fa52:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (isdigit(c)) {
 801fa56:	e7ad      	b.n	801f9b4 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 801fa58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fa5c:	2b2e      	cmp	r3, #46	@ 0x2e
 801fa5e:	d114      	bne.n	801fa8a <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801fa60:	f107 030c 	add.w	r3, r7, #12
 801fa64:	330c      	adds	r3, #12
 801fa66:	69fa      	ldr	r2, [r7, #28]
 801fa68:	429a      	cmp	r2, r3
 801fa6a:	d301      	bcc.n	801fa70 <ip4addr_aton+0x134>
        return 0;
 801fa6c:	2300      	movs	r3, #0
 801fa6e:	e09a      	b.n	801fba6 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801fa70:	69fb      	ldr	r3, [r7, #28]
 801fa72:	1d1a      	adds	r2, r3, #4
 801fa74:	61fa      	str	r2, [r7, #28]
 801fa76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fa78:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	3301      	adds	r3, #1
 801fa7e:	607b      	str	r3, [r7, #4]
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	781b      	ldrb	r3, [r3, #0]
 801fa84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!isdigit(c)) {
 801fa88:	e764      	b.n	801f954 <ip4addr_aton+0x18>
    } else {
      break;
 801fa8a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 801fa8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d019      	beq.n	801fac8 <ip4addr_aton+0x18c>
 801fa94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fa98:	2b20      	cmp	r3, #32
 801fa9a:	d015      	beq.n	801fac8 <ip4addr_aton+0x18c>
 801fa9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801faa0:	2b0c      	cmp	r3, #12
 801faa2:	d011      	beq.n	801fac8 <ip4addr_aton+0x18c>
 801faa4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801faa8:	2b0a      	cmp	r3, #10
 801faaa:	d00d      	beq.n	801fac8 <ip4addr_aton+0x18c>
 801faac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fab0:	2b0d      	cmp	r3, #13
 801fab2:	d009      	beq.n	801fac8 <ip4addr_aton+0x18c>
 801fab4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fab8:	2b09      	cmp	r3, #9
 801faba:	d005      	beq.n	801fac8 <ip4addr_aton+0x18c>
 801fabc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fac0:	2b0b      	cmp	r3, #11
 801fac2:	d001      	beq.n	801fac8 <ip4addr_aton+0x18c>
    return 0;
 801fac4:	2300      	movs	r3, #0
 801fac6:	e06e      	b.n	801fba6 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801fac8:	f107 030c 	add.w	r3, r7, #12
 801facc:	69fa      	ldr	r2, [r7, #28]
 801face:	1ad3      	subs	r3, r2, r3
 801fad0:	109b      	asrs	r3, r3, #2
 801fad2:	3301      	adds	r3, #1
 801fad4:	2b04      	cmp	r3, #4
 801fad6:	d853      	bhi.n	801fb80 <ip4addr_aton+0x244>
 801fad8:	a201      	add	r2, pc, #4	@ (adr r2, 801fae0 <ip4addr_aton+0x1a4>)
 801fada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fade:	bf00      	nop
 801fae0:	0801faf5 	.word	0x0801faf5
 801fae4:	0801fb91 	.word	0x0801fb91
 801fae8:	0801faf9 	.word	0x0801faf9
 801faec:	0801fb1b 	.word	0x0801fb1b
 801faf0:	0801fb49 	.word	0x0801fb49

  case 0:
    return 0;       /* initial nondigit */
 801faf4:	2300      	movs	r3, #0
 801faf6:	e056      	b.n	801fba6 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 801faf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fafa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fafe:	d301      	bcc.n	801fb04 <ip4addr_aton+0x1c8>
      return 0;
 801fb00:	2300      	movs	r3, #0
 801fb02:	e050      	b.n	801fba6 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	2bff      	cmp	r3, #255	@ 0xff
 801fb08:	d901      	bls.n	801fb0e <ip4addr_aton+0x1d2>
      return 0;
 801fb0a:	2300      	movs	r3, #0
 801fb0c:	e04b      	b.n	801fba6 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 801fb0e:	68fb      	ldr	r3, [r7, #12]
 801fb10:	061b      	lsls	r3, r3, #24
 801fb12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fb14:	4313      	orrs	r3, r2
 801fb16:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 801fb18:	e03b      	b.n	801fb92 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 801fb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fb20:	d301      	bcc.n	801fb26 <ip4addr_aton+0x1ea>
      return 0;
 801fb22:	2300      	movs	r3, #0
 801fb24:	e03f      	b.n	801fba6 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801fb26:	68fb      	ldr	r3, [r7, #12]
 801fb28:	2bff      	cmp	r3, #255	@ 0xff
 801fb2a:	d802      	bhi.n	801fb32 <ip4addr_aton+0x1f6>
 801fb2c:	693b      	ldr	r3, [r7, #16]
 801fb2e:	2bff      	cmp	r3, #255	@ 0xff
 801fb30:	d901      	bls.n	801fb36 <ip4addr_aton+0x1fa>
      return 0;
 801fb32:	2300      	movs	r3, #0
 801fb34:	e037      	b.n	801fba6 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 801fb36:	68fb      	ldr	r3, [r7, #12]
 801fb38:	061a      	lsls	r2, r3, #24
 801fb3a:	693b      	ldr	r3, [r7, #16]
 801fb3c:	041b      	lsls	r3, r3, #16
 801fb3e:	4313      	orrs	r3, r2
 801fb40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fb42:	4313      	orrs	r3, r2
 801fb44:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 801fb46:	e024      	b.n	801fb92 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 801fb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb4a:	2bff      	cmp	r3, #255	@ 0xff
 801fb4c:	d901      	bls.n	801fb52 <ip4addr_aton+0x216>
      return 0;
 801fb4e:	2300      	movs	r3, #0
 801fb50:	e029      	b.n	801fba6 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801fb52:	68fb      	ldr	r3, [r7, #12]
 801fb54:	2bff      	cmp	r3, #255	@ 0xff
 801fb56:	d805      	bhi.n	801fb64 <ip4addr_aton+0x228>
 801fb58:	693b      	ldr	r3, [r7, #16]
 801fb5a:	2bff      	cmp	r3, #255	@ 0xff
 801fb5c:	d802      	bhi.n	801fb64 <ip4addr_aton+0x228>
 801fb5e:	697b      	ldr	r3, [r7, #20]
 801fb60:	2bff      	cmp	r3, #255	@ 0xff
 801fb62:	d901      	bls.n	801fb68 <ip4addr_aton+0x22c>
      return 0;
 801fb64:	2300      	movs	r3, #0
 801fb66:	e01e      	b.n	801fba6 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801fb68:	68fb      	ldr	r3, [r7, #12]
 801fb6a:	061a      	lsls	r2, r3, #24
 801fb6c:	693b      	ldr	r3, [r7, #16]
 801fb6e:	041b      	lsls	r3, r3, #16
 801fb70:	431a      	orrs	r2, r3
 801fb72:	697b      	ldr	r3, [r7, #20]
 801fb74:	021b      	lsls	r3, r3, #8
 801fb76:	4313      	orrs	r3, r2
 801fb78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fb7a:	4313      	orrs	r3, r2
 801fb7c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 801fb7e:	e008      	b.n	801fb92 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 801fb80:	4b0b      	ldr	r3, [pc, #44]	@ (801fbb0 <ip4addr_aton+0x274>)
 801fb82:	f240 1203 	movw	r2, #259	@ 0x103
 801fb86:	490b      	ldr	r1, [pc, #44]	@ (801fbb4 <ip4addr_aton+0x278>)
 801fb88:	480b      	ldr	r0, [pc, #44]	@ (801fbb8 <ip4addr_aton+0x27c>)
 801fb8a:	f001 fdcb 	bl	8021724 <iprintf>
    break;
 801fb8e:	e000      	b.n	801fb92 <ip4addr_aton+0x256>
    break;
 801fb90:	bf00      	nop
  }
  if (addr) {
 801fb92:	683b      	ldr	r3, [r7, #0]
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	d005      	beq.n	801fba4 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801fb98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fb9a:	f7f4 fb88 	bl	80142ae <lwip_htonl>
 801fb9e:	4602      	mov	r2, r0
 801fba0:	683b      	ldr	r3, [r7, #0]
 801fba2:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801fba4:	2301      	movs	r3, #1
}
 801fba6:	4618      	mov	r0, r3
 801fba8:	3728      	adds	r7, #40	@ 0x28
 801fbaa:	46bd      	mov	sp, r7
 801fbac:	bd80      	pop	{r7, pc}
 801fbae:	bf00      	nop
 801fbb0:	0802703c 	.word	0x0802703c
 801fbb4:	08027078 	.word	0x08027078
 801fbb8:	08027084 	.word	0x08027084

0801fbbc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801fbbc:	b580      	push	{r7, lr}
 801fbbe:	b082      	sub	sp, #8
 801fbc0:	af00      	add	r7, sp, #0
 801fbc2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801fbc4:	2210      	movs	r2, #16
 801fbc6:	4904      	ldr	r1, [pc, #16]	@ (801fbd8 <ip4addr_ntoa+0x1c>)
 801fbc8:	6878      	ldr	r0, [r7, #4]
 801fbca:	f000 f807 	bl	801fbdc <ip4addr_ntoa_r>
 801fbce:	4603      	mov	r3, r0
}
 801fbd0:	4618      	mov	r0, r3
 801fbd2:	3708      	adds	r7, #8
 801fbd4:	46bd      	mov	sp, r7
 801fbd6:	bd80      	pop	{r7, pc}
 801fbd8:	2000bf44 	.word	0x2000bf44

0801fbdc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801fbdc:	b480      	push	{r7}
 801fbde:	b08d      	sub	sp, #52	@ 0x34
 801fbe0:	af00      	add	r7, sp, #0
 801fbe2:	60f8      	str	r0, [r7, #12]
 801fbe4:	60b9      	str	r1, [r7, #8]
 801fbe6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801fbe8:	2300      	movs	r3, #0
 801fbea:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801fbec:	68fb      	ldr	r3, [r7, #12]
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801fbf2:	68bb      	ldr	r3, [r7, #8]
 801fbf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801fbf6:	f107 0318 	add.w	r3, r7, #24
 801fbfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801fc02:	e058      	b.n	801fcb6 <ip4addr_ntoa_r+0xda>
    i = 0;
 801fc04:	2300      	movs	r3, #0
 801fc06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801fc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc0c:	781a      	ldrb	r2, [r3, #0]
 801fc0e:	4b32      	ldr	r3, [pc, #200]	@ (801fcd8 <ip4addr_ntoa_r+0xfc>)
 801fc10:	fba3 1302 	umull	r1, r3, r3, r2
 801fc14:	08d9      	lsrs	r1, r3, #3
 801fc16:	460b      	mov	r3, r1
 801fc18:	009b      	lsls	r3, r3, #2
 801fc1a:	440b      	add	r3, r1
 801fc1c:	005b      	lsls	r3, r3, #1
 801fc1e:	1ad3      	subs	r3, r2, r3
 801fc20:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801fc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc24:	781b      	ldrb	r3, [r3, #0]
 801fc26:	4a2c      	ldr	r2, [pc, #176]	@ (801fcd8 <ip4addr_ntoa_r+0xfc>)
 801fc28:	fba2 2303 	umull	r2, r3, r2, r3
 801fc2c:	08db      	lsrs	r3, r3, #3
 801fc2e:	b2da      	uxtb	r2, r3
 801fc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc32:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801fc34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801fc38:	1c5a      	adds	r2, r3, #1
 801fc3a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801fc3e:	4619      	mov	r1, r3
 801fc40:	7ffb      	ldrb	r3, [r7, #31]
 801fc42:	3330      	adds	r3, #48	@ 0x30
 801fc44:	b2da      	uxtb	r2, r3
 801fc46:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801fc4a:	443b      	add	r3, r7
 801fc4c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801fc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc52:	781b      	ldrb	r3, [r3, #0]
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d1d8      	bne.n	801fc0a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801fc58:	e011      	b.n	801fc7e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801fc5a:	6a3b      	ldr	r3, [r7, #32]
 801fc5c:	1c5a      	adds	r2, r3, #1
 801fc5e:	623a      	str	r2, [r7, #32]
 801fc60:	687a      	ldr	r2, [r7, #4]
 801fc62:	429a      	cmp	r2, r3
 801fc64:	dc01      	bgt.n	801fc6a <ip4addr_ntoa_r+0x8e>
        return NULL;
 801fc66:	2300      	movs	r3, #0
 801fc68:	e030      	b.n	801fccc <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801fc6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801fc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc70:	1c59      	adds	r1, r3, #1
 801fc72:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801fc74:	3230      	adds	r2, #48	@ 0x30
 801fc76:	443a      	add	r2, r7
 801fc78:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801fc7c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801fc7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801fc82:	1e5a      	subs	r2, r3, #1
 801fc84:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	d1e6      	bne.n	801fc5a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801fc8c:	6a3b      	ldr	r3, [r7, #32]
 801fc8e:	1c5a      	adds	r2, r3, #1
 801fc90:	623a      	str	r2, [r7, #32]
 801fc92:	687a      	ldr	r2, [r7, #4]
 801fc94:	429a      	cmp	r2, r3
 801fc96:	dc01      	bgt.n	801fc9c <ip4addr_ntoa_r+0xc0>
      return NULL;
 801fc98:	2300      	movs	r3, #0
 801fc9a:	e017      	b.n	801fccc <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801fc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc9e:	1c5a      	adds	r2, r3, #1
 801fca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801fca2:	222e      	movs	r2, #46	@ 0x2e
 801fca4:	701a      	strb	r2, [r3, #0]
    ap++;
 801fca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fca8:	3301      	adds	r3, #1
 801fcaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801fcac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fcb0:	3301      	adds	r3, #1
 801fcb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801fcb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801fcba:	2b03      	cmp	r3, #3
 801fcbc:	d9a2      	bls.n	801fc04 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801fcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcc0:	3b01      	subs	r3, #1
 801fcc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fcc6:	2200      	movs	r2, #0
 801fcc8:	701a      	strb	r2, [r3, #0]
  return buf;
 801fcca:	68bb      	ldr	r3, [r7, #8]
}
 801fccc:	4618      	mov	r0, r3
 801fcce:	3734      	adds	r7, #52	@ 0x34
 801fcd0:	46bd      	mov	sp, r7
 801fcd2:	bc80      	pop	{r7}
 801fcd4:	4770      	bx	lr
 801fcd6:	bf00      	nop
 801fcd8:	cccccccd 	.word	0xcccccccd

0801fcdc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801fcdc:	b580      	push	{r7, lr}
 801fcde:	b084      	sub	sp, #16
 801fce0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801fce2:	2300      	movs	r3, #0
 801fce4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801fce6:	4b12      	ldr	r3, [pc, #72]	@ (801fd30 <ip_reass_tmr+0x54>)
 801fce8:	681b      	ldr	r3, [r3, #0]
 801fcea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801fcec:	e018      	b.n	801fd20 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801fcee:	68fb      	ldr	r3, [r7, #12]
 801fcf0:	7fdb      	ldrb	r3, [r3, #31]
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	d00b      	beq.n	801fd0e <ip_reass_tmr+0x32>
      r->timer--;
 801fcf6:	68fb      	ldr	r3, [r7, #12]
 801fcf8:	7fdb      	ldrb	r3, [r3, #31]
 801fcfa:	3b01      	subs	r3, #1
 801fcfc:	b2da      	uxtb	r2, r3
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	60fb      	str	r3, [r7, #12]
 801fd0c:	e008      	b.n	801fd20 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801fd0e:	68fb      	ldr	r3, [r7, #12]
 801fd10:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801fd12:	68fb      	ldr	r3, [r7, #12]
 801fd14:	681b      	ldr	r3, [r3, #0]
 801fd16:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801fd18:	68b9      	ldr	r1, [r7, #8]
 801fd1a:	6878      	ldr	r0, [r7, #4]
 801fd1c:	f000 f80a 	bl	801fd34 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801fd20:	68fb      	ldr	r3, [r7, #12]
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d1e3      	bne.n	801fcee <ip_reass_tmr+0x12>
     }
   }
}
 801fd26:	bf00      	nop
 801fd28:	bf00      	nop
 801fd2a:	3710      	adds	r7, #16
 801fd2c:	46bd      	mov	sp, r7
 801fd2e:	bd80      	pop	{r7, pc}
 801fd30:	2000bf54 	.word	0x2000bf54

0801fd34 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fd34:	b580      	push	{r7, lr}
 801fd36:	b088      	sub	sp, #32
 801fd38:	af00      	add	r7, sp, #0
 801fd3a:	6078      	str	r0, [r7, #4]
 801fd3c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801fd3e:	2300      	movs	r3, #0
 801fd40:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801fd42:	683a      	ldr	r2, [r7, #0]
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	429a      	cmp	r2, r3
 801fd48:	d105      	bne.n	801fd56 <ip_reass_free_complete_datagram+0x22>
 801fd4a:	4b48      	ldr	r3, [pc, #288]	@ (801fe6c <ip_reass_free_complete_datagram+0x138>)
 801fd4c:	22ab      	movs	r2, #171	@ 0xab
 801fd4e:	4948      	ldr	r1, [pc, #288]	@ (801fe70 <ip_reass_free_complete_datagram+0x13c>)
 801fd50:	4848      	ldr	r0, [pc, #288]	@ (801fe74 <ip_reass_free_complete_datagram+0x140>)
 801fd52:	f001 fce7 	bl	8021724 <iprintf>
  if (prev != NULL) {
 801fd56:	683b      	ldr	r3, [r7, #0]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d00a      	beq.n	801fd72 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801fd5c:	683b      	ldr	r3, [r7, #0]
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	687a      	ldr	r2, [r7, #4]
 801fd62:	429a      	cmp	r2, r3
 801fd64:	d005      	beq.n	801fd72 <ip_reass_free_complete_datagram+0x3e>
 801fd66:	4b41      	ldr	r3, [pc, #260]	@ (801fe6c <ip_reass_free_complete_datagram+0x138>)
 801fd68:	22ad      	movs	r2, #173	@ 0xad
 801fd6a:	4943      	ldr	r1, [pc, #268]	@ (801fe78 <ip_reass_free_complete_datagram+0x144>)
 801fd6c:	4841      	ldr	r0, [pc, #260]	@ (801fe74 <ip_reass_free_complete_datagram+0x140>)
 801fd6e:	f001 fcd9 	bl	8021724 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
 801fd72:	4b42      	ldr	r3, [pc, #264]	@ (801fe7c <ip_reass_free_complete_datagram+0x148>)
 801fd74:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801fd78:	3301      	adds	r3, #1
 801fd7a:	4a40      	ldr	r2, [pc, #256]	@ (801fe7c <ip_reass_free_complete_datagram+0x148>)
 801fd7c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	685b      	ldr	r3, [r3, #4]
 801fd84:	685b      	ldr	r3, [r3, #4]
 801fd86:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801fd88:	697b      	ldr	r3, [r7, #20]
 801fd8a:	889b      	ldrh	r3, [r3, #4]
 801fd8c:	b29b      	uxth	r3, r3
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d12a      	bne.n	801fde8 <ip_reass_free_complete_datagram+0xb4>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	685b      	ldr	r3, [r3, #4]
 801fd96:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801fd98:	697b      	ldr	r3, [r7, #20]
 801fd9a:	681a      	ldr	r2, [r3, #0]
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801fda0:	69bb      	ldr	r3, [r7, #24]
 801fda2:	6858      	ldr	r0, [r3, #4]
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	3308      	adds	r3, #8
 801fda8:	2214      	movs	r2, #20
 801fdaa:	4619      	mov	r1, r3
 801fdac:	f001 ff65 	bl	8021c7a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801fdb0:	2101      	movs	r1, #1
 801fdb2:	69b8      	ldr	r0, [r7, #24]
 801fdb4:	f7ff f96e 	bl	801f094 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801fdb8:	69b8      	ldr	r0, [r7, #24]
 801fdba:	f7f5 fd57 	bl	801586c <pbuf_clen>
 801fdbe:	4603      	mov	r3, r0
 801fdc0:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fdc2:	8bfa      	ldrh	r2, [r7, #30]
 801fdc4:	8a7b      	ldrh	r3, [r7, #18]
 801fdc6:	4413      	add	r3, r2
 801fdc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fdcc:	db05      	blt.n	801fdda <ip_reass_free_complete_datagram+0xa6>
 801fdce:	4b27      	ldr	r3, [pc, #156]	@ (801fe6c <ip_reass_free_complete_datagram+0x138>)
 801fdd0:	22bc      	movs	r2, #188	@ 0xbc
 801fdd2:	492b      	ldr	r1, [pc, #172]	@ (801fe80 <ip_reass_free_complete_datagram+0x14c>)
 801fdd4:	4827      	ldr	r0, [pc, #156]	@ (801fe74 <ip_reass_free_complete_datagram+0x140>)
 801fdd6:	f001 fca5 	bl	8021724 <iprintf>
    pbufs_freed += clen;
 801fdda:	8bfa      	ldrh	r2, [r7, #30]
 801fddc:	8a7b      	ldrh	r3, [r7, #18]
 801fdde:	4413      	add	r3, r2
 801fde0:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801fde2:	69b8      	ldr	r0, [r7, #24]
 801fde4:	f7f5 fcae 	bl	8015744 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	685b      	ldr	r3, [r3, #4]
 801fdec:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801fdee:	e01f      	b.n	801fe30 <ip_reass_free_complete_datagram+0xfc>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801fdf0:	69bb      	ldr	r3, [r7, #24]
 801fdf2:	685b      	ldr	r3, [r3, #4]
 801fdf4:	617b      	str	r3, [r7, #20]
    pcur = p;
 801fdf6:	69bb      	ldr	r3, [r7, #24]
 801fdf8:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801fdfa:	697b      	ldr	r3, [r7, #20]
 801fdfc:	681b      	ldr	r3, [r3, #0]
 801fdfe:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801fe00:	68f8      	ldr	r0, [r7, #12]
 801fe02:	f7f5 fd33 	bl	801586c <pbuf_clen>
 801fe06:	4603      	mov	r3, r0
 801fe08:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fe0a:	8bfa      	ldrh	r2, [r7, #30]
 801fe0c:	8a7b      	ldrh	r3, [r7, #18]
 801fe0e:	4413      	add	r3, r2
 801fe10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fe14:	db05      	blt.n	801fe22 <ip_reass_free_complete_datagram+0xee>
 801fe16:	4b15      	ldr	r3, [pc, #84]	@ (801fe6c <ip_reass_free_complete_datagram+0x138>)
 801fe18:	22cc      	movs	r2, #204	@ 0xcc
 801fe1a:	4919      	ldr	r1, [pc, #100]	@ (801fe80 <ip_reass_free_complete_datagram+0x14c>)
 801fe1c:	4815      	ldr	r0, [pc, #84]	@ (801fe74 <ip_reass_free_complete_datagram+0x140>)
 801fe1e:	f001 fc81 	bl	8021724 <iprintf>
    pbufs_freed += clen;
 801fe22:	8bfa      	ldrh	r2, [r7, #30]
 801fe24:	8a7b      	ldrh	r3, [r7, #18]
 801fe26:	4413      	add	r3, r2
 801fe28:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801fe2a:	68f8      	ldr	r0, [r7, #12]
 801fe2c:	f7f5 fc8a 	bl	8015744 <pbuf_free>
  while (p != NULL) {
 801fe30:	69bb      	ldr	r3, [r7, #24]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d1dc      	bne.n	801fdf0 <ip_reass_free_complete_datagram+0xbc>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801fe36:	6839      	ldr	r1, [r7, #0]
 801fe38:	6878      	ldr	r0, [r7, #4]
 801fe3a:	f000 f8cb 	bl	801ffd4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801fe3e:	4b11      	ldr	r3, [pc, #68]	@ (801fe84 <ip_reass_free_complete_datagram+0x150>)
 801fe40:	881b      	ldrh	r3, [r3, #0]
 801fe42:	8bfa      	ldrh	r2, [r7, #30]
 801fe44:	429a      	cmp	r2, r3
 801fe46:	d905      	bls.n	801fe54 <ip_reass_free_complete_datagram+0x120>
 801fe48:	4b08      	ldr	r3, [pc, #32]	@ (801fe6c <ip_reass_free_complete_datagram+0x138>)
 801fe4a:	22d2      	movs	r2, #210	@ 0xd2
 801fe4c:	490e      	ldr	r1, [pc, #56]	@ (801fe88 <ip_reass_free_complete_datagram+0x154>)
 801fe4e:	4809      	ldr	r0, [pc, #36]	@ (801fe74 <ip_reass_free_complete_datagram+0x140>)
 801fe50:	f001 fc68 	bl	8021724 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801fe54:	4b0b      	ldr	r3, [pc, #44]	@ (801fe84 <ip_reass_free_complete_datagram+0x150>)
 801fe56:	881a      	ldrh	r2, [r3, #0]
 801fe58:	8bfb      	ldrh	r3, [r7, #30]
 801fe5a:	1ad3      	subs	r3, r2, r3
 801fe5c:	b29a      	uxth	r2, r3
 801fe5e:	4b09      	ldr	r3, [pc, #36]	@ (801fe84 <ip_reass_free_complete_datagram+0x150>)
 801fe60:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801fe62:	8bfb      	ldrh	r3, [r7, #30]
}
 801fe64:	4618      	mov	r0, r3
 801fe66:	3720      	adds	r7, #32
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	bd80      	pop	{r7, pc}
 801fe6c:	080270ac 	.word	0x080270ac
 801fe70:	080270e8 	.word	0x080270e8
 801fe74:	080270f4 	.word	0x080270f4
 801fe78:	0802711c 	.word	0x0802711c
 801fe7c:	2000bc24 	.word	0x2000bc24
 801fe80:	08027130 	.word	0x08027130
 801fe84:	2000bf58 	.word	0x2000bf58
 801fe88:	08027150 	.word	0x08027150

0801fe8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801fe8c:	b580      	push	{r7, lr}
 801fe8e:	b08a      	sub	sp, #40	@ 0x28
 801fe90:	af00      	add	r7, sp, #0
 801fe92:	6078      	str	r0, [r7, #4]
 801fe94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801fe96:	2300      	movs	r3, #0
 801fe98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801fe9a:	2300      	movs	r3, #0
 801fe9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801fe9e:	2300      	movs	r3, #0
 801fea0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801fea2:	2300      	movs	r3, #0
 801fea4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801fea6:	2300      	movs	r3, #0
 801fea8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801feaa:	4b28      	ldr	r3, [pc, #160]	@ (801ff4c <ip_reass_remove_oldest_datagram+0xc0>)
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801feb0:	e030      	b.n	801ff14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801feb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801feb4:	695a      	ldr	r2, [r3, #20]
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	68db      	ldr	r3, [r3, #12]
 801feba:	429a      	cmp	r2, r3
 801febc:	d10c      	bne.n	801fed8 <ip_reass_remove_oldest_datagram+0x4c>
 801febe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fec0:	699a      	ldr	r2, [r3, #24]
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	691b      	ldr	r3, [r3, #16]
 801fec6:	429a      	cmp	r2, r3
 801fec8:	d106      	bne.n	801fed8 <ip_reass_remove_oldest_datagram+0x4c>
 801feca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fecc:	899a      	ldrh	r2, [r3, #12]
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	889b      	ldrh	r3, [r3, #4]
 801fed2:	b29b      	uxth	r3, r3
 801fed4:	429a      	cmp	r2, r3
 801fed6:	d014      	beq.n	801ff02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801fed8:	693b      	ldr	r3, [r7, #16]
 801feda:	3301      	adds	r3, #1
 801fedc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801fede:	6a3b      	ldr	r3, [r7, #32]
 801fee0:	2b00      	cmp	r3, #0
 801fee2:	d104      	bne.n	801feee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801fee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fee6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fee8:	69fb      	ldr	r3, [r7, #28]
 801feea:	61bb      	str	r3, [r7, #24]
 801feec:	e009      	b.n	801ff02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801feee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fef0:	7fda      	ldrb	r2, [r3, #31]
 801fef2:	6a3b      	ldr	r3, [r7, #32]
 801fef4:	7fdb      	ldrb	r3, [r3, #31]
 801fef6:	429a      	cmp	r2, r3
 801fef8:	d803      	bhi.n	801ff02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801fefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fefc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fefe:	69fb      	ldr	r3, [r7, #28]
 801ff00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ff02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d001      	beq.n	801ff0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ff0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ff0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff10:	681b      	ldr	r3, [r3, #0]
 801ff12:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ff14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d1cb      	bne.n	801feb2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ff1a:	6a3b      	ldr	r3, [r7, #32]
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	d008      	beq.n	801ff32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ff20:	69b9      	ldr	r1, [r7, #24]
 801ff22:	6a38      	ldr	r0, [r7, #32]
 801ff24:	f7ff ff06 	bl	801fd34 <ip_reass_free_complete_datagram>
 801ff28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ff2a:	697a      	ldr	r2, [r7, #20]
 801ff2c:	68fb      	ldr	r3, [r7, #12]
 801ff2e:	4413      	add	r3, r2
 801ff30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ff32:	697a      	ldr	r2, [r7, #20]
 801ff34:	683b      	ldr	r3, [r7, #0]
 801ff36:	429a      	cmp	r2, r3
 801ff38:	da02      	bge.n	801ff40 <ip_reass_remove_oldest_datagram+0xb4>
 801ff3a:	693b      	ldr	r3, [r7, #16]
 801ff3c:	2b01      	cmp	r3, #1
 801ff3e:	dcac      	bgt.n	801fe9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ff40:	697b      	ldr	r3, [r7, #20]
}
 801ff42:	4618      	mov	r0, r3
 801ff44:	3728      	adds	r7, #40	@ 0x28
 801ff46:	46bd      	mov	sp, r7
 801ff48:	bd80      	pop	{r7, pc}
 801ff4a:	bf00      	nop
 801ff4c:	2000bf54 	.word	0x2000bf54

0801ff50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ff50:	b580      	push	{r7, lr}
 801ff52:	b084      	sub	sp, #16
 801ff54:	af00      	add	r7, sp, #0
 801ff56:	6078      	str	r0, [r7, #4]
 801ff58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ff5a:	2004      	movs	r0, #4
 801ff5c:	f7f4 fe44 	bl	8014be8 <memp_malloc>
 801ff60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ff62:	68fb      	ldr	r3, [r7, #12]
 801ff64:	2b00      	cmp	r3, #0
 801ff66:	d116      	bne.n	801ff96 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ff68:	6839      	ldr	r1, [r7, #0]
 801ff6a:	6878      	ldr	r0, [r7, #4]
 801ff6c:	f7ff ff8e 	bl	801fe8c <ip_reass_remove_oldest_datagram>
 801ff70:	4602      	mov	r2, r0
 801ff72:	683b      	ldr	r3, [r7, #0]
 801ff74:	4293      	cmp	r3, r2
 801ff76:	dc03      	bgt.n	801ff80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ff78:	2004      	movs	r0, #4
 801ff7a:	f7f4 fe35 	bl	8014be8 <memp_malloc>
 801ff7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ff80:	68fb      	ldr	r3, [r7, #12]
 801ff82:	2b00      	cmp	r3, #0
 801ff84:	d107      	bne.n	801ff96 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801ff86:	4b11      	ldr	r3, [pc, #68]	@ (801ffcc <ip_reass_enqueue_new_datagram+0x7c>)
 801ff88:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ff8a:	3301      	adds	r3, #1
 801ff8c:	b29a      	uxth	r2, r3
 801ff8e:	4b0f      	ldr	r3, [pc, #60]	@ (801ffcc <ip_reass_enqueue_new_datagram+0x7c>)
 801ff90:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801ff92:	2300      	movs	r3, #0
 801ff94:	e016      	b.n	801ffc4 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ff96:	2220      	movs	r2, #32
 801ff98:	2100      	movs	r1, #0
 801ff9a:	68f8      	ldr	r0, [r7, #12]
 801ff9c:	f001 fd98 	bl	8021ad0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ffa0:	68fb      	ldr	r3, [r7, #12]
 801ffa2:	2203      	movs	r2, #3
 801ffa4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ffa6:	4b0a      	ldr	r3, [pc, #40]	@ (801ffd0 <ip_reass_enqueue_new_datagram+0x80>)
 801ffa8:	681a      	ldr	r2, [r3, #0]
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ffae:	4a08      	ldr	r2, [pc, #32]	@ (801ffd0 <ip_reass_enqueue_new_datagram+0x80>)
 801ffb0:	68fb      	ldr	r3, [r7, #12]
 801ffb2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ffb4:	68fb      	ldr	r3, [r7, #12]
 801ffb6:	3308      	adds	r3, #8
 801ffb8:	2214      	movs	r2, #20
 801ffba:	6879      	ldr	r1, [r7, #4]
 801ffbc:	4618      	mov	r0, r3
 801ffbe:	f001 fe5c 	bl	8021c7a <memcpy>
  return ipr;
 801ffc2:	68fb      	ldr	r3, [r7, #12]
}
 801ffc4:	4618      	mov	r0, r3
 801ffc6:	3710      	adds	r7, #16
 801ffc8:	46bd      	mov	sp, r7
 801ffca:	bd80      	pop	{r7, pc}
 801ffcc:	2000bc24 	.word	0x2000bc24
 801ffd0:	2000bf54 	.word	0x2000bf54

0801ffd4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ffd4:	b580      	push	{r7, lr}
 801ffd6:	b082      	sub	sp, #8
 801ffd8:	af00      	add	r7, sp, #0
 801ffda:	6078      	str	r0, [r7, #4]
 801ffdc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ffde:	4b10      	ldr	r3, [pc, #64]	@ (8020020 <ip_reass_dequeue_datagram+0x4c>)
 801ffe0:	681b      	ldr	r3, [r3, #0]
 801ffe2:	687a      	ldr	r2, [r7, #4]
 801ffe4:	429a      	cmp	r2, r3
 801ffe6:	d104      	bne.n	801fff2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ffe8:	687b      	ldr	r3, [r7, #4]
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	4a0c      	ldr	r2, [pc, #48]	@ (8020020 <ip_reass_dequeue_datagram+0x4c>)
 801ffee:	6013      	str	r3, [r2, #0]
 801fff0:	e00d      	b.n	802000e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801fff2:	683b      	ldr	r3, [r7, #0]
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d106      	bne.n	8020006 <ip_reass_dequeue_datagram+0x32>
 801fff8:	4b0a      	ldr	r3, [pc, #40]	@ (8020024 <ip_reass_dequeue_datagram+0x50>)
 801fffa:	f240 1245 	movw	r2, #325	@ 0x145
 801fffe:	490a      	ldr	r1, [pc, #40]	@ (8020028 <ip_reass_dequeue_datagram+0x54>)
 8020000:	480a      	ldr	r0, [pc, #40]	@ (802002c <ip_reass_dequeue_datagram+0x58>)
 8020002:	f001 fb8f 	bl	8021724 <iprintf>
    prev->next = ipr->next;
 8020006:	687b      	ldr	r3, [r7, #4]
 8020008:	681a      	ldr	r2, [r3, #0]
 802000a:	683b      	ldr	r3, [r7, #0]
 802000c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 802000e:	6879      	ldr	r1, [r7, #4]
 8020010:	2004      	movs	r0, #4
 8020012:	f7f4 fe3b 	bl	8014c8c <memp_free>
}
 8020016:	bf00      	nop
 8020018:	3708      	adds	r7, #8
 802001a:	46bd      	mov	sp, r7
 802001c:	bd80      	pop	{r7, pc}
 802001e:	bf00      	nop
 8020020:	2000bf54 	.word	0x2000bf54
 8020024:	080270ac 	.word	0x080270ac
 8020028:	0802716c 	.word	0x0802716c
 802002c:	080270f4 	.word	0x080270f4

08020030 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020030:	b580      	push	{r7, lr}
 8020032:	b08c      	sub	sp, #48	@ 0x30
 8020034:	af00      	add	r7, sp, #0
 8020036:	60f8      	str	r0, [r7, #12]
 8020038:	60b9      	str	r1, [r7, #8]
 802003a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 802003c:	2300      	movs	r3, #0
 802003e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8020040:	2301      	movs	r3, #1
 8020042:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8020044:	68bb      	ldr	r3, [r7, #8]
 8020046:	685b      	ldr	r3, [r3, #4]
 8020048:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 802004a:	69fb      	ldr	r3, [r7, #28]
 802004c:	885b      	ldrh	r3, [r3, #2]
 802004e:	b29b      	uxth	r3, r3
 8020050:	4618      	mov	r0, r3
 8020052:	f7f4 f91f 	bl	8014294 <lwip_htons>
 8020056:	4603      	mov	r3, r0
 8020058:	461a      	mov	r2, r3
 802005a:	69fb      	ldr	r3, [r7, #28]
 802005c:	781b      	ldrb	r3, [r3, #0]
 802005e:	f003 030f 	and.w	r3, r3, #15
 8020062:	b29b      	uxth	r3, r3
 8020064:	009b      	lsls	r3, r3, #2
 8020066:	b29b      	uxth	r3, r3
 8020068:	1ad3      	subs	r3, r2, r3
 802006a:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 802006c:	69fb      	ldr	r3, [r7, #28]
 802006e:	88db      	ldrh	r3, [r3, #6]
 8020070:	b29b      	uxth	r3, r3
 8020072:	4618      	mov	r0, r3
 8020074:	f7f4 f90e 	bl	8014294 <lwip_htons>
 8020078:	4603      	mov	r3, r0
 802007a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802007e:	b29b      	uxth	r3, r3
 8020080:	00db      	lsls	r3, r3, #3
 8020082:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8020084:	68bb      	ldr	r3, [r7, #8]
 8020086:	685b      	ldr	r3, [r3, #4]
 8020088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 802008a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802008c:	2200      	movs	r2, #0
 802008e:	701a      	strb	r2, [r3, #0]
 8020090:	2200      	movs	r2, #0
 8020092:	705a      	strb	r2, [r3, #1]
 8020094:	2200      	movs	r2, #0
 8020096:	709a      	strb	r2, [r3, #2]
 8020098:	2200      	movs	r2, #0
 802009a:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802009c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802009e:	8b3a      	ldrh	r2, [r7, #24]
 80200a0:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80200a2:	8b3a      	ldrh	r2, [r7, #24]
 80200a4:	8b7b      	ldrh	r3, [r7, #26]
 80200a6:	4413      	add	r3, r2
 80200a8:	b29a      	uxth	r2, r3
 80200aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200ac:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80200ae:	68fb      	ldr	r3, [r7, #12]
 80200b0:	685b      	ldr	r3, [r3, #4]
 80200b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80200b4:	e061      	b.n	802017a <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80200b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80200b8:	685b      	ldr	r3, [r3, #4]
 80200ba:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80200bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200be:	889b      	ldrh	r3, [r3, #4]
 80200c0:	b29a      	uxth	r2, r3
 80200c2:	697b      	ldr	r3, [r7, #20]
 80200c4:	889b      	ldrh	r3, [r3, #4]
 80200c6:	b29b      	uxth	r3, r3
 80200c8:	429a      	cmp	r2, r3
 80200ca:	d232      	bcs.n	8020132 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80200cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80200d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80200d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	d01f      	beq.n	8020118 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80200d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200da:	889b      	ldrh	r3, [r3, #4]
 80200dc:	b29a      	uxth	r2, r3
 80200de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200e0:	88db      	ldrh	r3, [r3, #6]
 80200e2:	b29b      	uxth	r3, r3
 80200e4:	429a      	cmp	r2, r3
 80200e6:	f0c0 80e3 	bcc.w	80202b0 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 80200ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200ec:	88db      	ldrh	r3, [r3, #6]
 80200ee:	b29a      	uxth	r2, r3
 80200f0:	697b      	ldr	r3, [r7, #20]
 80200f2:	889b      	ldrh	r3, [r3, #4]
 80200f4:	b29b      	uxth	r3, r3
 80200f6:	429a      	cmp	r2, r3
 80200f8:	f200 80da 	bhi.w	80202b0 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80200fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200fe:	68ba      	ldr	r2, [r7, #8]
 8020100:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8020102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020104:	88db      	ldrh	r3, [r3, #6]
 8020106:	b29a      	uxth	r2, r3
 8020108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802010a:	889b      	ldrh	r3, [r3, #4]
 802010c:	b29b      	uxth	r3, r3
 802010e:	429a      	cmp	r2, r3
 8020110:	d037      	beq.n	8020182 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020112:	2300      	movs	r3, #0
 8020114:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8020116:	e034      	b.n	8020182 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 8020118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802011a:	88db      	ldrh	r3, [r3, #6]
 802011c:	b29a      	uxth	r2, r3
 802011e:	697b      	ldr	r3, [r7, #20]
 8020120:	889b      	ldrh	r3, [r3, #4]
 8020122:	b29b      	uxth	r3, r3
 8020124:	429a      	cmp	r2, r3
 8020126:	f200 80c5 	bhi.w	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 802012a:	68fb      	ldr	r3, [r7, #12]
 802012c:	68ba      	ldr	r2, [r7, #8]
 802012e:	605a      	str	r2, [r3, #4]
      break;
 8020130:	e027      	b.n	8020182 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 8020132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020134:	889b      	ldrh	r3, [r3, #4]
 8020136:	b29a      	uxth	r2, r3
 8020138:	697b      	ldr	r3, [r7, #20]
 802013a:	889b      	ldrh	r3, [r3, #4]
 802013c:	b29b      	uxth	r3, r3
 802013e:	429a      	cmp	r2, r3
 8020140:	f000 80ba 	beq.w	80202b8 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020146:	889b      	ldrh	r3, [r3, #4]
 8020148:	b29a      	uxth	r2, r3
 802014a:	697b      	ldr	r3, [r7, #20]
 802014c:	88db      	ldrh	r3, [r3, #6]
 802014e:	b29b      	uxth	r3, r3
 8020150:	429a      	cmp	r2, r3
 8020152:	f0c0 80b3 	bcc.w	80202bc <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8020156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020158:	2b00      	cmp	r3, #0
 802015a:	d009      	beq.n	8020170 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 802015c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802015e:	88db      	ldrh	r3, [r3, #6]
 8020160:	b29a      	uxth	r2, r3
 8020162:	697b      	ldr	r3, [r7, #20]
 8020164:	889b      	ldrh	r3, [r3, #4]
 8020166:	b29b      	uxth	r3, r3
 8020168:	429a      	cmp	r2, r3
 802016a:	d001      	beq.n	8020170 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802016c:	2300      	movs	r3, #0
 802016e:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020170:	697b      	ldr	r3, [r7, #20]
 8020172:	681b      	ldr	r3, [r3, #0]
 8020174:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8020176:	697b      	ldr	r3, [r7, #20]
 8020178:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 802017a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802017c:	2b00      	cmp	r3, #0
 802017e:	d19a      	bne.n	80200b6 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 8020180:	e000      	b.n	8020184 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 8020182:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8020184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020186:	2b00      	cmp	r3, #0
 8020188:	d12d      	bne.n	80201e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 802018a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802018c:	2b00      	cmp	r3, #0
 802018e:	d01c      	beq.n	80201ca <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8020190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020192:	88db      	ldrh	r3, [r3, #6]
 8020194:	b29a      	uxth	r2, r3
 8020196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020198:	889b      	ldrh	r3, [r3, #4]
 802019a:	b29b      	uxth	r3, r3
 802019c:	429a      	cmp	r2, r3
 802019e:	d906      	bls.n	80201ae <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 80201a0:	4b51      	ldr	r3, [pc, #324]	@ (80202e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80201a2:	f240 12ab 	movw	r2, #427	@ 0x1ab
 80201a6:	4951      	ldr	r1, [pc, #324]	@ (80202ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80201a8:	4851      	ldr	r0, [pc, #324]	@ (80202f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80201aa:	f001 fabb 	bl	8021724 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80201ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201b0:	68ba      	ldr	r2, [r7, #8]
 80201b2:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80201b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201b6:	88db      	ldrh	r3, [r3, #6]
 80201b8:	b29a      	uxth	r2, r3
 80201ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80201bc:	889b      	ldrh	r3, [r3, #4]
 80201be:	b29b      	uxth	r3, r3
 80201c0:	429a      	cmp	r2, r3
 80201c2:	d010      	beq.n	80201e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 80201c4:	2300      	movs	r3, #0
 80201c6:	623b      	str	r3, [r7, #32]
 80201c8:	e00d      	b.n	80201e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80201ca:	68fb      	ldr	r3, [r7, #12]
 80201cc:	685b      	ldr	r3, [r3, #4]
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d006      	beq.n	80201e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 80201d2:	4b45      	ldr	r3, [pc, #276]	@ (80202e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80201d4:	f240 12b3 	movw	r2, #435	@ 0x1b3
 80201d8:	4946      	ldr	r1, [pc, #280]	@ (80202f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80201da:	4845      	ldr	r0, [pc, #276]	@ (80202f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80201dc:	f001 faa2 	bl	8021724 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80201e0:	68fb      	ldr	r3, [r7, #12]
 80201e2:	68ba      	ldr	r2, [r7, #8]
 80201e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d105      	bne.n	80201f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 80201ec:	68fb      	ldr	r3, [r7, #12]
 80201ee:	7f9b      	ldrb	r3, [r3, #30]
 80201f0:	f003 0301 	and.w	r3, r3, #1
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d059      	beq.n	80202ac <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 80201f8:	6a3b      	ldr	r3, [r7, #32]
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d04f      	beq.n	802029e <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80201fe:	68fb      	ldr	r3, [r7, #12]
 8020200:	685b      	ldr	r3, [r3, #4]
 8020202:	2b00      	cmp	r3, #0
 8020204:	d006      	beq.n	8020214 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 8020206:	68fb      	ldr	r3, [r7, #12]
 8020208:	685b      	ldr	r3, [r3, #4]
 802020a:	685b      	ldr	r3, [r3, #4]
 802020c:	889b      	ldrh	r3, [r3, #4]
 802020e:	b29b      	uxth	r3, r3
 8020210:	2b00      	cmp	r3, #0
 8020212:	d002      	beq.n	802021a <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 8020214:	2300      	movs	r3, #0
 8020216:	623b      	str	r3, [r7, #32]
 8020218:	e041      	b.n	802029e <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802021a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802021c:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 802021e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8020224:	e012      	b.n	802024c <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 8020226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020228:	685b      	ldr	r3, [r3, #4]
 802022a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 802022c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802022e:	88db      	ldrh	r3, [r3, #6]
 8020230:	b29a      	uxth	r2, r3
 8020232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020234:	889b      	ldrh	r3, [r3, #4]
 8020236:	b29b      	uxth	r3, r3
 8020238:	429a      	cmp	r2, r3
 802023a:	d002      	beq.n	8020242 <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 802023c:	2300      	movs	r3, #0
 802023e:	623b      	str	r3, [r7, #32]
            break;
 8020240:	e007      	b.n	8020252 <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 8020242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020244:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8020246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 802024c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802024e:	2b00      	cmp	r3, #0
 8020250:	d1e9      	bne.n	8020226 <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020252:	6a3b      	ldr	r3, [r7, #32]
 8020254:	2b00      	cmp	r3, #0
 8020256:	d022      	beq.n	802029e <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8020258:	68fb      	ldr	r3, [r7, #12]
 802025a:	685b      	ldr	r3, [r3, #4]
 802025c:	2b00      	cmp	r3, #0
 802025e:	d106      	bne.n	802026e <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 8020260:	4b21      	ldr	r3, [pc, #132]	@ (80202e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020262:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 8020266:	4924      	ldr	r1, [pc, #144]	@ (80202f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020268:	4821      	ldr	r0, [pc, #132]	@ (80202f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 802026a:	f001 fa5b 	bl	8021724 <iprintf>
          LWIP_ASSERT("sanity check",
 802026e:	68fb      	ldr	r3, [r7, #12]
 8020270:	685b      	ldr	r3, [r3, #4]
 8020272:	685b      	ldr	r3, [r3, #4]
 8020274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020276:	429a      	cmp	r2, r3
 8020278:	d106      	bne.n	8020288 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 802027a:	4b1b      	ldr	r3, [pc, #108]	@ (80202e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 802027c:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8020280:	491d      	ldr	r1, [pc, #116]	@ (80202f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020282:	481b      	ldr	r0, [pc, #108]	@ (80202f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020284:	f001 fa4e 	bl	8021724 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8020288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802028a:	681b      	ldr	r3, [r3, #0]
 802028c:	2b00      	cmp	r3, #0
 802028e:	d006      	beq.n	802029e <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 8020290:	4b15      	ldr	r3, [pc, #84]	@ (80202e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020292:	f240 12d7 	movw	r2, #471	@ 0x1d7
 8020296:	4919      	ldr	r1, [pc, #100]	@ (80202fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020298:	4815      	ldr	r0, [pc, #84]	@ (80202f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 802029a:	f001 fa43 	bl	8021724 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 802029e:	6a3b      	ldr	r3, [r7, #32]
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	bf14      	ite	ne
 80202a4:	2301      	movne	r3, #1
 80202a6:	2300      	moveq	r3, #0
 80202a8:	b2db      	uxtb	r3, r3
 80202aa:	e018      	b.n	80202de <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80202ac:	2300      	movs	r3, #0
 80202ae:	e016      	b.n	80202de <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 80202b0:	bf00      	nop
 80202b2:	e004      	b.n	80202be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 80202b4:	bf00      	nop
 80202b6:	e002      	b.n	80202be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 80202b8:	bf00      	nop
 80202ba:	e000      	b.n	80202be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 80202bc:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80202be:	68b8      	ldr	r0, [r7, #8]
 80202c0:	f7f5 fad4 	bl	801586c <pbuf_clen>
 80202c4:	4603      	mov	r3, r0
 80202c6:	461a      	mov	r2, r3
 80202c8:	4b0d      	ldr	r3, [pc, #52]	@ (8020300 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80202ca:	881b      	ldrh	r3, [r3, #0]
 80202cc:	1a9b      	subs	r3, r3, r2
 80202ce:	b29a      	uxth	r2, r3
 80202d0:	4b0b      	ldr	r3, [pc, #44]	@ (8020300 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80202d2:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80202d4:	68b8      	ldr	r0, [r7, #8]
 80202d6:	f7f5 fa35 	bl	8015744 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80202da:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80202de:	4618      	mov	r0, r3
 80202e0:	3730      	adds	r7, #48	@ 0x30
 80202e2:	46bd      	mov	sp, r7
 80202e4:	bd80      	pop	{r7, pc}
 80202e6:	bf00      	nop
 80202e8:	080270ac 	.word	0x080270ac
 80202ec:	08027188 	.word	0x08027188
 80202f0:	080270f4 	.word	0x080270f4
 80202f4:	080271a8 	.word	0x080271a8
 80202f8:	080271e0 	.word	0x080271e0
 80202fc:	080271f0 	.word	0x080271f0
 8020300:	2000bf58 	.word	0x2000bf58

08020304 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8020304:	b580      	push	{r7, lr}
 8020306:	b08e      	sub	sp, #56	@ 0x38
 8020308:	af00      	add	r7, sp, #0
 802030a:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 802030c:	4b9d      	ldr	r3, [pc, #628]	@ (8020584 <ip4_reass+0x280>)
 802030e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020310:	3301      	adds	r3, #1
 8020312:	b29a      	uxth	r2, r3
 8020314:	4b9b      	ldr	r3, [pc, #620]	@ (8020584 <ip4_reass+0x280>)
 8020316:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 8020318:	4b9a      	ldr	r3, [pc, #616]	@ (8020584 <ip4_reass+0x280>)
 802031a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 802031e:	3301      	adds	r3, #1
 8020320:	4a98      	ldr	r2, [pc, #608]	@ (8020584 <ip4_reass+0x280>)
 8020322:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  fraghdr = (struct ip_hdr*)p->payload;
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	685b      	ldr	r3, [r3, #4]
 802032a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 802032c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802032e:	781b      	ldrb	r3, [r3, #0]
 8020330:	f003 030f 	and.w	r3, r3, #15
 8020334:	2b05      	cmp	r3, #5
 8020336:	d008      	beq.n	802034a <ip4_reass+0x46>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8020338:	4b92      	ldr	r3, [pc, #584]	@ (8020584 <ip4_reass+0x280>)
 802033a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 802033e:	3301      	adds	r3, #1
 8020340:	b29a      	uxth	r2, r3
 8020342:	4b90      	ldr	r3, [pc, #576]	@ (8020584 <ip4_reass+0x280>)
 8020344:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 8020348:	e14c      	b.n	80205e4 <ip4_reass+0x2e0>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 802034a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802034c:	88db      	ldrh	r3, [r3, #6]
 802034e:	b29b      	uxth	r3, r3
 8020350:	4618      	mov	r0, r3
 8020352:	f7f3 ff9f 	bl	8014294 <lwip_htons>
 8020356:	4603      	mov	r3, r0
 8020358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802035c:	b29b      	uxth	r3, r3
 802035e:	00db      	lsls	r3, r3, #3
 8020360:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8020362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020364:	885b      	ldrh	r3, [r3, #2]
 8020366:	b29b      	uxth	r3, r3
 8020368:	4618      	mov	r0, r3
 802036a:	f7f3 ff93 	bl	8014294 <lwip_htons>
 802036e:	4603      	mov	r3, r0
 8020370:	461a      	mov	r2, r3
 8020372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020374:	781b      	ldrb	r3, [r3, #0]
 8020376:	f003 030f 	and.w	r3, r3, #15
 802037a:	b29b      	uxth	r3, r3
 802037c:	009b      	lsls	r3, r3, #2
 802037e:	b29b      	uxth	r3, r3
 8020380:	1ad3      	subs	r3, r2, r3
 8020382:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020384:	6878      	ldr	r0, [r7, #4]
 8020386:	f7f5 fa71 	bl	801586c <pbuf_clen>
 802038a:	4603      	mov	r3, r0
 802038c:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802038e:	4b7e      	ldr	r3, [pc, #504]	@ (8020588 <ip4_reass+0x284>)
 8020390:	881b      	ldrh	r3, [r3, #0]
 8020392:	461a      	mov	r2, r3
 8020394:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020396:	4413      	add	r3, r2
 8020398:	2b0a      	cmp	r3, #10
 802039a:	dd15      	ble.n	80203c8 <ip4_reass+0xc4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802039c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802039e:	4619      	mov	r1, r3
 80203a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80203a2:	f7ff fd73 	bl	801fe8c <ip_reass_remove_oldest_datagram>
 80203a6:	4603      	mov	r3, r0
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d006      	beq.n	80203ba <ip4_reass+0xb6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80203ac:	4b76      	ldr	r3, [pc, #472]	@ (8020588 <ip4_reass+0x284>)
 80203ae:	881b      	ldrh	r3, [r3, #0]
 80203b0:	461a      	mov	r2, r3
 80203b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80203b4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80203b6:	2b0a      	cmp	r3, #10
 80203b8:	dd06      	ble.n	80203c8 <ip4_reass+0xc4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 80203ba:	4b72      	ldr	r3, [pc, #456]	@ (8020584 <ip4_reass+0x280>)
 80203bc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80203be:	3301      	adds	r3, #1
 80203c0:	b29a      	uxth	r2, r3
 80203c2:	4b70      	ldr	r3, [pc, #448]	@ (8020584 <ip4_reass+0x280>)
 80203c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 80203c6:	e10d      	b.n	80205e4 <ip4_reass+0x2e0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80203c8:	4b70      	ldr	r3, [pc, #448]	@ (802058c <ip4_reass+0x288>)
 80203ca:	681b      	ldr	r3, [r3, #0]
 80203cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80203ce:	e01e      	b.n	802040e <ip4_reass+0x10a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80203d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80203d2:	695a      	ldr	r2, [r3, #20]
 80203d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80203d6:	68db      	ldr	r3, [r3, #12]
 80203d8:	429a      	cmp	r2, r3
 80203da:	d115      	bne.n	8020408 <ip4_reass+0x104>
 80203dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80203de:	699a      	ldr	r2, [r3, #24]
 80203e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80203e2:	691b      	ldr	r3, [r3, #16]
 80203e4:	429a      	cmp	r2, r3
 80203e6:	d10f      	bne.n	8020408 <ip4_reass+0x104>
 80203e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80203ea:	899a      	ldrh	r2, [r3, #12]
 80203ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80203ee:	889b      	ldrh	r3, [r3, #4]
 80203f0:	b29b      	uxth	r3, r3
 80203f2:	429a      	cmp	r2, r3
 80203f4:	d108      	bne.n	8020408 <ip4_reass+0x104>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 80203f6:	4b63      	ldr	r3, [pc, #396]	@ (8020584 <ip4_reass+0x280>)
 80203f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80203fc:	3301      	adds	r3, #1
 80203fe:	b29a      	uxth	r2, r3
 8020400:	4b60      	ldr	r3, [pc, #384]	@ (8020584 <ip4_reass+0x280>)
 8020402:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 8020406:	e005      	b.n	8020414 <ip4_reass+0x110>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802040a:	681b      	ldr	r3, [r3, #0]
 802040c:	633b      	str	r3, [r7, #48]	@ 0x30
 802040e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020410:	2b00      	cmp	r3, #0
 8020412:	d1dd      	bne.n	80203d0 <ip4_reass+0xcc>
    }
  }

  if (ipr == NULL) {
 8020414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020416:	2b00      	cmp	r3, #0
 8020418:	d109      	bne.n	802042e <ip4_reass+0x12a>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802041a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802041c:	4619      	mov	r1, r3
 802041e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020420:	f7ff fd96 	bl	801ff50 <ip_reass_enqueue_new_datagram>
 8020424:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8020426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020428:	2b00      	cmp	r3, #0
 802042a:	d11c      	bne.n	8020466 <ip4_reass+0x162>
      goto nullreturn;
 802042c:	e0da      	b.n	80205e4 <ip4_reass+0x2e0>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802042e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020430:	88db      	ldrh	r3, [r3, #6]
 8020432:	b29b      	uxth	r3, r3
 8020434:	4618      	mov	r0, r3
 8020436:	f7f3 ff2d 	bl	8014294 <lwip_htons>
 802043a:	4603      	mov	r3, r0
 802043c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020440:	2b00      	cmp	r3, #0
 8020442:	d110      	bne.n	8020466 <ip4_reass+0x162>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020446:	89db      	ldrh	r3, [r3, #14]
 8020448:	4618      	mov	r0, r3
 802044a:	f7f3 ff23 	bl	8014294 <lwip_htons>
 802044e:	4603      	mov	r3, r0
 8020450:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020454:	2b00      	cmp	r3, #0
 8020456:	d006      	beq.n	8020466 <ip4_reass+0x162>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802045a:	3308      	adds	r3, #8
 802045c:	2214      	movs	r2, #20
 802045e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020460:	4618      	mov	r0, r3
 8020462:	f001 fc0a 	bl	8021c7a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020468:	88db      	ldrh	r3, [r3, #6]
 802046a:	b29b      	uxth	r3, r3
 802046c:	f003 0320 	and.w	r3, r3, #32
 8020470:	2b00      	cmp	r3, #0
 8020472:	bf0c      	ite	eq
 8020474:	2301      	moveq	r3, #1
 8020476:	2300      	movne	r3, #0
 8020478:	b2db      	uxtb	r3, r3
 802047a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 802047c:	69fb      	ldr	r3, [r7, #28]
 802047e:	2b00      	cmp	r3, #0
 8020480:	d00e      	beq.n	80204a0 <ip4_reass+0x19c>
    u16_t datagram_len = (u16_t)(offset + len);
 8020482:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8020484:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020486:	4413      	add	r3, r2
 8020488:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802048a:	8b7a      	ldrh	r2, [r7, #26]
 802048c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802048e:	429a      	cmp	r2, r3
 8020490:	f0c0 80a5 	bcc.w	80205de <ip4_reass+0x2da>
 8020494:	8b7b      	ldrh	r3, [r7, #26]
 8020496:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 802049a:	4293      	cmp	r3, r2
 802049c:	f200 809f 	bhi.w	80205de <ip4_reass+0x2da>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80204a0:	69fa      	ldr	r2, [r7, #28]
 80204a2:	6879      	ldr	r1, [r7, #4]
 80204a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80204a6:	f7ff fdc3 	bl	8020030 <ip_reass_chain_frag_into_datagram_and_validate>
 80204aa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80204ac:	697b      	ldr	r3, [r7, #20]
 80204ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80204b2:	f000 8096 	beq.w	80205e2 <ip4_reass+0x2de>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80204b6:	4b34      	ldr	r3, [pc, #208]	@ (8020588 <ip4_reass+0x284>)
 80204b8:	881a      	ldrh	r2, [r3, #0]
 80204ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80204bc:	4413      	add	r3, r2
 80204be:	b29a      	uxth	r2, r3
 80204c0:	4b31      	ldr	r3, [pc, #196]	@ (8020588 <ip4_reass+0x284>)
 80204c2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80204c4:	69fb      	ldr	r3, [r7, #28]
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d00d      	beq.n	80204e6 <ip4_reass+0x1e2>
    u16_t datagram_len = (u16_t)(offset + len);
 80204ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80204cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80204ce:	4413      	add	r3, r2
 80204d0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80204d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204d4:	8a7a      	ldrh	r2, [r7, #18]
 80204d6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80204d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204da:	7f9b      	ldrb	r3, [r3, #30]
 80204dc:	f043 0301 	orr.w	r3, r3, #1
 80204e0:	b2da      	uxtb	r2, r3
 80204e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204e4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80204e6:	697b      	ldr	r3, [r7, #20]
 80204e8:	2b01      	cmp	r3, #1
 80204ea:	d176      	bne.n	80205da <ip4_reass+0x2d6>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80204ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204ee:	8b9b      	ldrh	r3, [r3, #28]
 80204f0:	3314      	adds	r3, #20
 80204f2:	b29a      	uxth	r2, r3
 80204f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204f6:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80204f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204fa:	685b      	ldr	r3, [r3, #4]
 80204fc:	685b      	ldr	r3, [r3, #4]
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8020502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020504:	685b      	ldr	r3, [r3, #4]
 8020506:	685b      	ldr	r3, [r3, #4]
 8020508:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802050a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802050c:	3308      	adds	r3, #8
 802050e:	2214      	movs	r2, #20
 8020510:	4619      	mov	r1, r3
 8020512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020514:	f001 fbb1 	bl	8021c7a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8020518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802051a:	8b9b      	ldrh	r3, [r3, #28]
 802051c:	4618      	mov	r0, r3
 802051e:	f7f3 feb9 	bl	8014294 <lwip_htons>
 8020522:	4603      	mov	r3, r0
 8020524:	461a      	mov	r2, r3
 8020526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020528:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 802052a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802052c:	2200      	movs	r2, #0
 802052e:	719a      	strb	r2, [r3, #6]
 8020530:	2200      	movs	r2, #0
 8020532:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8020534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020536:	2200      	movs	r2, #0
 8020538:	729a      	strb	r2, [r3, #10]
 802053a:	2200      	movs	r2, #0
 802053c:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802053e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020540:	685b      	ldr	r3, [r3, #4]
 8020542:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8020544:	e00e      	b.n	8020564 <ip4_reass+0x260>
      iprh = (struct ip_reass_helper*)r->payload;
 8020546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020548:	685b      	ldr	r3, [r3, #4]
 802054a:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 802054c:	f06f 0113 	mvn.w	r1, #19
 8020550:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8020552:	f7f5 f8d3 	bl	80156fc <pbuf_header>
      pbuf_cat(p, r);
 8020556:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8020558:	6878      	ldr	r0, [r7, #4]
 802055a:	f7f5 f9bf 	bl	80158dc <pbuf_cat>
      r = iprh->next_pbuf;
 802055e:	68fb      	ldr	r3, [r7, #12]
 8020560:	681b      	ldr	r3, [r3, #0]
 8020562:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8020564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020566:	2b00      	cmp	r3, #0
 8020568:	d1ed      	bne.n	8020546 <ip4_reass+0x242>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802056a:	4b08      	ldr	r3, [pc, #32]	@ (802058c <ip4_reass+0x288>)
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020570:	429a      	cmp	r2, r3
 8020572:	d102      	bne.n	802057a <ip4_reass+0x276>
      ipr_prev = NULL;
 8020574:	2300      	movs	r3, #0
 8020576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020578:	e017      	b.n	80205aa <ip4_reass+0x2a6>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802057a:	4b04      	ldr	r3, [pc, #16]	@ (802058c <ip4_reass+0x288>)
 802057c:	681b      	ldr	r3, [r3, #0]
 802057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020580:	e00e      	b.n	80205a0 <ip4_reass+0x29c>
 8020582:	bf00      	nop
 8020584:	2000bc24 	.word	0x2000bc24
 8020588:	2000bf58 	.word	0x2000bf58
 802058c:	2000bf54 	.word	0x2000bf54
        if (ipr_prev->next == ipr) {
 8020590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020596:	429a      	cmp	r2, r3
 8020598:	d006      	beq.n	80205a8 <ip4_reass+0x2a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802059a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80205a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80205a2:	2b00      	cmp	r3, #0
 80205a4:	d1f4      	bne.n	8020590 <ip4_reass+0x28c>
 80205a6:	e000      	b.n	80205aa <ip4_reass+0x2a6>
          break;
 80205a8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80205aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80205ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80205ae:	f7ff fd11 	bl	801ffd4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80205b2:	6878      	ldr	r0, [r7, #4]
 80205b4:	f7f5 f95a 	bl	801586c <pbuf_clen>
 80205b8:	4603      	mov	r3, r0
 80205ba:	461a      	mov	r2, r3
 80205bc:	4b10      	ldr	r3, [pc, #64]	@ (8020600 <ip4_reass+0x2fc>)
 80205be:	881b      	ldrh	r3, [r3, #0]
 80205c0:	1a9b      	subs	r3, r3, r2
 80205c2:	b29a      	uxth	r2, r3
 80205c4:	4b0e      	ldr	r3, [pc, #56]	@ (8020600 <ip4_reass+0x2fc>)
 80205c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);
 80205c8:	4b0e      	ldr	r3, [pc, #56]	@ (8020604 <ip4_reass+0x300>)
 80205ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80205ce:	3301      	adds	r3, #1
 80205d0:	4a0c      	ldr	r2, [pc, #48]	@ (8020604 <ip4_reass+0x300>)
 80205d2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    /* Return the pbuf chain */
    return p;
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	e00e      	b.n	80205f8 <ip4_reass+0x2f4>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80205da:	2300      	movs	r3, #0
 80205dc:	e00c      	b.n	80205f8 <ip4_reass+0x2f4>
      goto nullreturn;
 80205de:	bf00      	nop
 80205e0:	e000      	b.n	80205e4 <ip4_reass+0x2e0>
    goto nullreturn;
 80205e2:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 80205e4:	4b07      	ldr	r3, [pc, #28]	@ (8020604 <ip4_reass+0x300>)
 80205e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80205e8:	3301      	adds	r3, #1
 80205ea:	b29a      	uxth	r2, r3
 80205ec:	4b05      	ldr	r3, [pc, #20]	@ (8020604 <ip4_reass+0x300>)
 80205ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 80205f0:	6878      	ldr	r0, [r7, #4]
 80205f2:	f7f5 f8a7 	bl	8015744 <pbuf_free>
  return NULL;
 80205f6:	2300      	movs	r3, #0
}
 80205f8:	4618      	mov	r0, r3
 80205fa:	3738      	adds	r7, #56	@ 0x38
 80205fc:	46bd      	mov	sp, r7
 80205fe:	bd80      	pop	{r7, pc}
 8020600:	2000bf58 	.word	0x2000bf58
 8020604:	2000bc24 	.word	0x2000bc24

08020608 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8020608:	b580      	push	{r7, lr}
 802060a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 802060c:	2005      	movs	r0, #5
 802060e:	f7f4 faeb 	bl	8014be8 <memp_malloc>
 8020612:	4603      	mov	r3, r0
}
 8020614:	4618      	mov	r0, r3
 8020616:	bd80      	pop	{r7, pc}

08020618 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8020618:	b580      	push	{r7, lr}
 802061a:	b082      	sub	sp, #8
 802061c:	af00      	add	r7, sp, #0
 802061e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	2b00      	cmp	r3, #0
 8020624:	d106      	bne.n	8020634 <ip_frag_free_pbuf_custom_ref+0x1c>
 8020626:	4b07      	ldr	r3, [pc, #28]	@ (8020644 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020628:	f240 22ae 	movw	r2, #686	@ 0x2ae
 802062c:	4906      	ldr	r1, [pc, #24]	@ (8020648 <ip_frag_free_pbuf_custom_ref+0x30>)
 802062e:	4807      	ldr	r0, [pc, #28]	@ (802064c <ip_frag_free_pbuf_custom_ref+0x34>)
 8020630:	f001 f878 	bl	8021724 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020634:	6879      	ldr	r1, [r7, #4]
 8020636:	2005      	movs	r0, #5
 8020638:	f7f4 fb28 	bl	8014c8c <memp_free>
}
 802063c:	bf00      	nop
 802063e:	3708      	adds	r7, #8
 8020640:	46bd      	mov	sp, r7
 8020642:	bd80      	pop	{r7, pc}
 8020644:	080270ac 	.word	0x080270ac
 8020648:	08027214 	.word	0x08027214
 802064c:	080270f4 	.word	0x080270f4

08020650 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020650:	b580      	push	{r7, lr}
 8020652:	b084      	sub	sp, #16
 8020654:	af00      	add	r7, sp, #0
 8020656:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	2b00      	cmp	r3, #0
 8020660:	d106      	bne.n	8020670 <ipfrag_free_pbuf_custom+0x20>
 8020662:	4b11      	ldr	r3, [pc, #68]	@ (80206a8 <ipfrag_free_pbuf_custom+0x58>)
 8020664:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 8020668:	4910      	ldr	r1, [pc, #64]	@ (80206ac <ipfrag_free_pbuf_custom+0x5c>)
 802066a:	4811      	ldr	r0, [pc, #68]	@ (80206b0 <ipfrag_free_pbuf_custom+0x60>)
 802066c:	f001 f85a 	bl	8021724 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8020670:	68fa      	ldr	r2, [r7, #12]
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	429a      	cmp	r2, r3
 8020676:	d006      	beq.n	8020686 <ipfrag_free_pbuf_custom+0x36>
 8020678:	4b0b      	ldr	r3, [pc, #44]	@ (80206a8 <ipfrag_free_pbuf_custom+0x58>)
 802067a:	f240 22b9 	movw	r2, #697	@ 0x2b9
 802067e:	490d      	ldr	r1, [pc, #52]	@ (80206b4 <ipfrag_free_pbuf_custom+0x64>)
 8020680:	480b      	ldr	r0, [pc, #44]	@ (80206b0 <ipfrag_free_pbuf_custom+0x60>)
 8020682:	f001 f84f 	bl	8021724 <iprintf>
  if (pcr->original != NULL) {
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	695b      	ldr	r3, [r3, #20]
 802068a:	2b00      	cmp	r3, #0
 802068c:	d004      	beq.n	8020698 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	695b      	ldr	r3, [r3, #20]
 8020692:	4618      	mov	r0, r3
 8020694:	f7f5 f856 	bl	8015744 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8020698:	68f8      	ldr	r0, [r7, #12]
 802069a:	f7ff ffbd 	bl	8020618 <ip_frag_free_pbuf_custom_ref>
}
 802069e:	bf00      	nop
 80206a0:	3710      	adds	r7, #16
 80206a2:	46bd      	mov	sp, r7
 80206a4:	bd80      	pop	{r7, pc}
 80206a6:	bf00      	nop
 80206a8:	080270ac 	.word	0x080270ac
 80206ac:	08027220 	.word	0x08027220
 80206b0:	080270f4 	.word	0x080270f4
 80206b4:	0802722c 	.word	0x0802722c

080206b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80206b8:	b580      	push	{r7, lr}
 80206ba:	b092      	sub	sp, #72	@ 0x48
 80206bc:	af02      	add	r7, sp, #8
 80206be:	60f8      	str	r0, [r7, #12]
 80206c0:	60b9      	str	r1, [r7, #8]
 80206c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80206c4:	2300      	movs	r3, #0
 80206c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80206c8:	68bb      	ldr	r3, [r7, #8]
 80206ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80206cc:	3b14      	subs	r3, #20
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	da00      	bge.n	80206d4 <ip4_frag+0x1c>
 80206d2:	3307      	adds	r3, #7
 80206d4:	10db      	asrs	r3, r3, #3
 80206d6:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80206d8:	2314      	movs	r3, #20
 80206da:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	685b      	ldr	r3, [r3, #4]
 80206e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 80206e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80206e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80206e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80206e8:	781b      	ldrb	r3, [r3, #0]
 80206ea:	f003 030f 	and.w	r3, r3, #15
 80206ee:	2b05      	cmp	r3, #5
 80206f0:	d009      	beq.n	8020706 <ip4_frag+0x4e>
 80206f2:	4b84      	ldr	r3, [pc, #528]	@ (8020904 <ip4_frag+0x24c>)
 80206f4:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80206f8:	4983      	ldr	r1, [pc, #524]	@ (8020908 <ip4_frag+0x250>)
 80206fa:	4884      	ldr	r0, [pc, #528]	@ (802090c <ip4_frag+0x254>)
 80206fc:	f001 f812 	bl	8021724 <iprintf>
 8020700:	f06f 0305 	mvn.w	r3, #5
 8020704:	e0fa      	b.n	80208fc <ip4_frag+0x244>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020708:	88db      	ldrh	r3, [r3, #6]
 802070a:	b29b      	uxth	r3, r3
 802070c:	4618      	mov	r0, r3
 802070e:	f7f3 fdc1 	bl	8014294 <lwip_htons>
 8020712:	4603      	mov	r3, r0
 8020714:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 8020716:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802071c:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 802071e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020724:	2b00      	cmp	r3, #0
 8020726:	d009      	beq.n	802073c <ip4_frag+0x84>
 8020728:	4b76      	ldr	r3, [pc, #472]	@ (8020904 <ip4_frag+0x24c>)
 802072a:	f240 22e6 	movw	r2, #742	@ 0x2e6
 802072e:	4978      	ldr	r1, [pc, #480]	@ (8020910 <ip4_frag+0x258>)
 8020730:	4876      	ldr	r0, [pc, #472]	@ (802090c <ip4_frag+0x254>)
 8020732:	f000 fff7 	bl	8021724 <iprintf>
 8020736:	f06f 0305 	mvn.w	r3, #5
 802073a:	e0df      	b.n	80208fc <ip4_frag+0x244>

  left = p->tot_len - IP_HLEN;
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	891b      	ldrh	r3, [r3, #8]
 8020740:	3b14      	subs	r3, #20
 8020742:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 8020744:	e0c3      	b.n	80208ce <ip4_frag+0x216>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8020746:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8020748:	00da      	lsls	r2, r3, #3
 802074a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 802074c:	4293      	cmp	r3, r2
 802074e:	bfa8      	it	ge
 8020750:	4613      	movge	r3, r2
 8020752:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020754:	2200      	movs	r2, #0
 8020756:	2114      	movs	r1, #20
 8020758:	2002      	movs	r0, #2
 802075a:	f7f4 fc7b 	bl	8015054 <pbuf_alloc>
 802075e:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8020760:	6a3b      	ldr	r3, [r7, #32]
 8020762:	2b00      	cmp	r3, #0
 8020764:	f000 80c0 	beq.w	80208e8 <ip4_frag+0x230>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020768:	68fb      	ldr	r3, [r7, #12]
 802076a:	895b      	ldrh	r3, [r3, #10]
 802076c:	2b13      	cmp	r3, #19
 802076e:	d806      	bhi.n	802077e <ip4_frag+0xc6>
 8020770:	4b64      	ldr	r3, [pc, #400]	@ (8020904 <ip4_frag+0x24c>)
 8020772:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8020776:	4967      	ldr	r1, [pc, #412]	@ (8020914 <ip4_frag+0x25c>)
 8020778:	4864      	ldr	r0, [pc, #400]	@ (802090c <ip4_frag+0x254>)
 802077a:	f000 ffd3 	bl	8021724 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802077e:	6a3b      	ldr	r3, [r7, #32]
 8020780:	685b      	ldr	r3, [r3, #4]
 8020782:	2214      	movs	r2, #20
 8020784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020786:	4618      	mov	r0, r3
 8020788:	f001 fa77 	bl	8021c7a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802078c:	6a3b      	ldr	r3, [r7, #32]
 802078e:	685b      	ldr	r3, [r3, #4]
 8020790:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 8020792:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020794:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 8020796:	e04f      	b.n	8020838 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	895a      	ldrh	r2, [r3, #10]
 802079c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802079e:	1ad3      	subs	r3, r2, r3
 80207a0:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80207a2:	8b7a      	ldrh	r2, [r7, #26]
 80207a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80207a6:	4293      	cmp	r3, r2
 80207a8:	bf28      	it	cs
 80207aa:	4613      	movcs	r3, r2
 80207ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80207ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d105      	bne.n	80207c0 <ip4_frag+0x108>
        poff = 0;
 80207b4:	2300      	movs	r3, #0
 80207b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 80207b8:	68fb      	ldr	r3, [r7, #12]
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	60fb      	str	r3, [r7, #12]
        continue;
 80207be:	e03b      	b.n	8020838 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80207c0:	f7ff ff22 	bl	8020608 <ip_frag_alloc_pbuf_custom_ref>
 80207c4:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80207c6:	697b      	ldr	r3, [r7, #20]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	d103      	bne.n	80207d4 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 80207cc:	6a38      	ldr	r0, [r7, #32]
 80207ce:	f7f4 ffb9 	bl	8015744 <pbuf_free>
        goto memerr;
 80207d2:	e08a      	b.n	80208ea <ip4_frag+0x232>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80207d4:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80207d6:	68fb      	ldr	r3, [r7, #12]
 80207d8:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80207da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80207dc:	4413      	add	r3, r2
 80207de:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80207e0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80207e2:	9201      	str	r2, [sp, #4]
 80207e4:	9300      	str	r3, [sp, #0]
 80207e6:	4603      	mov	r3, r0
 80207e8:	2202      	movs	r2, #2
 80207ea:	2004      	movs	r0, #4
 80207ec:	f7f4 fdcc 	bl	8015388 <pbuf_alloced_custom>
 80207f0:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80207f2:	693b      	ldr	r3, [r7, #16]
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d106      	bne.n	8020806 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 80207f8:	6978      	ldr	r0, [r7, #20]
 80207fa:	f7ff ff0d 	bl	8020618 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80207fe:	6a38      	ldr	r0, [r7, #32]
 8020800:	f7f4 ffa0 	bl	8015744 <pbuf_free>
        goto memerr;
 8020804:	e071      	b.n	80208ea <ip4_frag+0x232>
      }
      pbuf_ref(p);
 8020806:	68f8      	ldr	r0, [r7, #12]
 8020808:	f7f5 f846 	bl	8015898 <pbuf_ref>
      pcr->original = p;
 802080c:	697b      	ldr	r3, [r7, #20]
 802080e:	68fa      	ldr	r2, [r7, #12]
 8020810:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020812:	697b      	ldr	r3, [r7, #20]
 8020814:	4a40      	ldr	r2, [pc, #256]	@ (8020918 <ip4_frag+0x260>)
 8020816:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8020818:	6939      	ldr	r1, [r7, #16]
 802081a:	6a38      	ldr	r0, [r7, #32]
 802081c:	f7f5 f85e 	bl	80158dc <pbuf_cat>
      left_to_copy -= newpbuflen;
 8020820:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8020822:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020824:	1ad3      	subs	r3, r2, r3
 8020826:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 8020828:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802082a:	2b00      	cmp	r3, #0
 802082c:	d004      	beq.n	8020838 <ip4_frag+0x180>
        poff = 0;
 802082e:	2300      	movs	r3, #0
 8020830:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 8020832:	68fb      	ldr	r3, [r7, #12]
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020838:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802083a:	2b00      	cmp	r3, #0
 802083c:	d1ac      	bne.n	8020798 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 802083e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020840:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020842:	4413      	add	r3, r2
 8020844:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020846:	68bb      	ldr	r3, [r7, #8]
 8020848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802084a:	f1a3 0213 	sub.w	r2, r3, #19
 802084e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8020850:	429a      	cmp	r2, r3
 8020852:	bfcc      	ite	gt
 8020854:	2301      	movgt	r3, #1
 8020856:	2300      	movle	r3, #0
 8020858:	b2db      	uxtb	r3, r3
 802085a:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 802085c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 802085e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020862:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 8020864:	69fb      	ldr	r3, [r7, #28]
 8020866:	2b00      	cmp	r3, #0
 8020868:	d103      	bne.n	8020872 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 802086a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 802086c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020870:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020872:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020874:	4618      	mov	r0, r3
 8020876:	f7f3 fd0d 	bl	8014294 <lwip_htons>
 802087a:	4603      	mov	r3, r0
 802087c:	461a      	mov	r2, r3
 802087e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020880:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8020882:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020884:	3314      	adds	r3, #20
 8020886:	b29b      	uxth	r3, r3
 8020888:	4618      	mov	r0, r3
 802088a:	f7f3 fd03 	bl	8014294 <lwip_htons>
 802088e:	4603      	mov	r3, r0
 8020890:	461a      	mov	r2, r3
 8020892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020894:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8020896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020898:	2200      	movs	r2, #0
 802089a:	729a      	strb	r2, [r3, #10]
 802089c:	2200      	movs	r2, #0
 802089e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80208a0:	68bb      	ldr	r3, [r7, #8]
 80208a2:	695b      	ldr	r3, [r3, #20]
 80208a4:	687a      	ldr	r2, [r7, #4]
 80208a6:	6a39      	ldr	r1, [r7, #32]
 80208a8:	68b8      	ldr	r0, [r7, #8]
 80208aa:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 80208ac:	4b1b      	ldr	r3, [pc, #108]	@ (802091c <ip4_frag+0x264>)
 80208ae:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80208b0:	3301      	adds	r3, #1
 80208b2:	b29a      	uxth	r2, r3
 80208b4:	4b19      	ldr	r3, [pc, #100]	@ (802091c <ip4_frag+0x264>)
 80208b6:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80208b8:	6a38      	ldr	r0, [r7, #32]
 80208ba:	f7f4 ff43 	bl	8015744 <pbuf_free>
    left -= fragsize;
 80208be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80208c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80208c2:	1ad3      	subs	r3, r2, r3
 80208c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 80208c6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80208c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80208ca:	4413      	add	r3, r2
 80208cc:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 80208ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	f47f af38 	bne.w	8020746 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
 80208d6:	4b11      	ldr	r3, [pc, #68]	@ (802091c <ip4_frag+0x264>)
 80208d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80208dc:	3301      	adds	r3, #1
 80208de:	4a0f      	ldr	r2, [pc, #60]	@ (802091c <ip4_frag+0x264>)
 80208e0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  return ERR_OK;
 80208e4:	2300      	movs	r3, #0
 80208e6:	e009      	b.n	80208fc <ip4_frag+0x244>
      goto memerr;
 80208e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
 80208ea:	4b0c      	ldr	r3, [pc, #48]	@ (802091c <ip4_frag+0x264>)
 80208ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80208f0:	3301      	adds	r3, #1
 80208f2:	4a0a      	ldr	r2, [pc, #40]	@ (802091c <ip4_frag+0x264>)
 80208f4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  return ERR_MEM;
 80208f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80208fc:	4618      	mov	r0, r3
 80208fe:	3740      	adds	r7, #64	@ 0x40
 8020900:	46bd      	mov	sp, r7
 8020902:	bd80      	pop	{r7, pc}
 8020904:	080270ac 	.word	0x080270ac
 8020908:	08027238 	.word	0x08027238
 802090c:	080270f4 	.word	0x080270f4
 8020910:	08027260 	.word	0x08027260
 8020914:	0802727c 	.word	0x0802727c
 8020918:	08020651 	.word	0x08020651
 802091c:	2000bc24 	.word	0x2000bc24

08020920 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020920:	b580      	push	{r7, lr}
 8020922:	b086      	sub	sp, #24
 8020924:	af00      	add	r7, sp, #0
 8020926:	6078      	str	r0, [r7, #4]
 8020928:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 802092a:	230e      	movs	r3, #14
 802092c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	895b      	ldrh	r3, [r3, #10]
 8020932:	2b0e      	cmp	r3, #14
 8020934:	d811      	bhi.n	802095a <ethernet_input+0x3a>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8020936:	4b5b      	ldr	r3, [pc, #364]	@ (8020aa4 <ethernet_input+0x184>)
 8020938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802093a:	3301      	adds	r3, #1
 802093c:	b29a      	uxth	r2, r3
 802093e:	4b59      	ldr	r3, [pc, #356]	@ (8020aa4 <ethernet_input+0x184>)
 8020940:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8020942:	4b58      	ldr	r3, [pc, #352]	@ (8020aa4 <ethernet_input+0x184>)
 8020944:	8bdb      	ldrh	r3, [r3, #30]
 8020946:	3301      	adds	r3, #1
 8020948:	b29a      	uxth	r2, r3
 802094a:	4b56      	ldr	r3, [pc, #344]	@ (8020aa4 <ethernet_input+0x184>)
 802094c:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 802094e:	683b      	ldr	r3, [r7, #0]
 8020950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020952:	1c5a      	adds	r2, r3, #1
 8020954:	683b      	ldr	r3, [r7, #0]
 8020956:	651a      	str	r2, [r3, #80]	@ 0x50
    goto free_and_return;
 8020958:	e09b      	b.n	8020a92 <ethernet_input+0x172>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	685b      	ldr	r3, [r3, #4]
 802095e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8020960:	693b      	ldr	r3, [r7, #16]
 8020962:	7b1a      	ldrb	r2, [r3, #12]
 8020964:	7b5b      	ldrb	r3, [r3, #13]
 8020966:	021b      	lsls	r3, r3, #8
 8020968:	4313      	orrs	r3, r2
 802096a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802096c:	693b      	ldr	r3, [r7, #16]
 802096e:	781b      	ldrb	r3, [r3, #0]
 8020970:	f003 0301 	and.w	r3, r3, #1
 8020974:	2b00      	cmp	r3, #0
 8020976:	d023      	beq.n	80209c0 <ethernet_input+0xa0>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020978:	693b      	ldr	r3, [r7, #16]
 802097a:	781b      	ldrb	r3, [r3, #0]
 802097c:	2b01      	cmp	r3, #1
 802097e:	d10f      	bne.n	80209a0 <ethernet_input+0x80>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020980:	693b      	ldr	r3, [r7, #16]
 8020982:	785b      	ldrb	r3, [r3, #1]
 8020984:	2b00      	cmp	r3, #0
 8020986:	d11b      	bne.n	80209c0 <ethernet_input+0xa0>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8020988:	693b      	ldr	r3, [r7, #16]
 802098a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802098c:	2b5e      	cmp	r3, #94	@ 0x5e
 802098e:	d117      	bne.n	80209c0 <ethernet_input+0xa0>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	7b5b      	ldrb	r3, [r3, #13]
 8020994:	f043 0310 	orr.w	r3, r3, #16
 8020998:	b2da      	uxtb	r2, r3
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	735a      	strb	r2, [r3, #13]
 802099e:	e00f      	b.n	80209c0 <ethernet_input+0xa0>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80209a0:	693b      	ldr	r3, [r7, #16]
 80209a2:	2206      	movs	r2, #6
 80209a4:	4940      	ldr	r1, [pc, #256]	@ (8020aa8 <ethernet_input+0x188>)
 80209a6:	4618      	mov	r0, r3
 80209a8:	f001 f868 	bl	8021a7c <memcmp>
 80209ac:	4603      	mov	r3, r0
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	d106      	bne.n	80209c0 <ethernet_input+0xa0>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80209b2:	687b      	ldr	r3, [r7, #4]
 80209b4:	7b5b      	ldrb	r3, [r3, #13]
 80209b6:	f043 0308 	orr.w	r3, r3, #8
 80209ba:	b2da      	uxtb	r2, r3
 80209bc:	687b      	ldr	r3, [r7, #4]
 80209be:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80209c0:	89fb      	ldrh	r3, [r7, #14]
 80209c2:	2b08      	cmp	r3, #8
 80209c4:	d003      	beq.n	80209ce <ethernet_input+0xae>
 80209c6:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80209ca:	d01e      	beq.n	8020a0a <ethernet_input+0xea>
 80209cc:	e048      	b.n	8020a60 <ethernet_input+0x140>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80209ce:	683b      	ldr	r3, [r7, #0]
 80209d0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80209d4:	f003 0308 	and.w	r3, r3, #8
 80209d8:	2b00      	cmp	r3, #0
 80209da:	d055      	beq.n	8020a88 <ethernet_input+0x168>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	895b      	ldrh	r3, [r3, #10]
 80209e0:	461a      	mov	r2, r3
 80209e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80209e6:	429a      	cmp	r2, r3
 80209e8:	db50      	blt.n	8020a8c <ethernet_input+0x16c>
 80209ea:	8afb      	ldrh	r3, [r7, #22]
 80209ec:	425b      	negs	r3, r3
 80209ee:	b29b      	uxth	r3, r3
 80209f0:	b21b      	sxth	r3, r3
 80209f2:	4619      	mov	r1, r3
 80209f4:	6878      	ldr	r0, [r7, #4]
 80209f6:	f7f4 fe81 	bl	80156fc <pbuf_header>
 80209fa:	4603      	mov	r3, r0
 80209fc:	2b00      	cmp	r3, #0
 80209fe:	d145      	bne.n	8020a8c <ethernet_input+0x16c>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8020a00:	6839      	ldr	r1, [r7, #0]
 8020a02:	6878      	ldr	r0, [r7, #4]
 8020a04:	f7fe fc5a 	bl	801f2bc <ip4_input>
      }
      break;
 8020a08:	e03c      	b.n	8020a84 <ethernet_input+0x164>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020a0a:	683b      	ldr	r3, [r7, #0]
 8020a0c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8020a10:	f003 0308 	and.w	r3, r3, #8
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	d03b      	beq.n	8020a90 <ethernet_input+0x170>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	895b      	ldrh	r3, [r3, #10]
 8020a1c:	461a      	mov	r2, r3
 8020a1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020a22:	429a      	cmp	r2, r3
 8020a24:	db0a      	blt.n	8020a3c <ethernet_input+0x11c>
 8020a26:	8afb      	ldrh	r3, [r7, #22]
 8020a28:	425b      	negs	r3, r3
 8020a2a:	b29b      	uxth	r3, r3
 8020a2c:	b21b      	sxth	r3, r3
 8020a2e:	4619      	mov	r1, r3
 8020a30:	6878      	ldr	r0, [r7, #4]
 8020a32:	f7f4 fe63 	bl	80156fc <pbuf_header>
 8020a36:	4603      	mov	r3, r0
 8020a38:	2b00      	cmp	r3, #0
 8020a3a:	d00c      	beq.n	8020a56 <ethernet_input+0x136>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8020a3c:	4b19      	ldr	r3, [pc, #100]	@ (8020aa4 <ethernet_input+0x184>)
 8020a3e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8020a40:	3301      	adds	r3, #1
 8020a42:	b29a      	uxth	r2, r3
 8020a44:	4b17      	ldr	r3, [pc, #92]	@ (8020aa4 <ethernet_input+0x184>)
 8020a46:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 8020a48:	4b16      	ldr	r3, [pc, #88]	@ (8020aa4 <ethernet_input+0x184>)
 8020a4a:	8bdb      	ldrh	r3, [r3, #30]
 8020a4c:	3301      	adds	r3, #1
 8020a4e:	b29a      	uxth	r2, r3
 8020a50:	4b14      	ldr	r3, [pc, #80]	@ (8020aa4 <ethernet_input+0x184>)
 8020a52:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8020a54:	e01d      	b.n	8020a92 <ethernet_input+0x172>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8020a56:	6839      	ldr	r1, [r7, #0]
 8020a58:	6878      	ldr	r0, [r7, #4]
 8020a5a:	f7fd fcc9 	bl	801e3f0 <etharp_input>
      }
      break;
 8020a5e:	e011      	b.n	8020a84 <ethernet_input+0x164>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8020a60:	4b10      	ldr	r3, [pc, #64]	@ (8020aa4 <ethernet_input+0x184>)
 8020a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8020a64:	3301      	adds	r3, #1
 8020a66:	b29a      	uxth	r2, r3
 8020a68:	4b0e      	ldr	r3, [pc, #56]	@ (8020aa4 <ethernet_input+0x184>)
 8020a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 8020a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8020aa4 <ethernet_input+0x184>)
 8020a6e:	8bdb      	ldrh	r3, [r3, #30]
 8020a70:	3301      	adds	r3, #1
 8020a72:	b29a      	uxth	r2, r3
 8020a74:	4b0b      	ldr	r3, [pc, #44]	@ (8020aa4 <ethernet_input+0x184>)
 8020a76:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 8020a78:	683b      	ldr	r3, [r7, #0]
 8020a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a7c:	1c5a      	adds	r2, r3, #1
 8020a7e:	683b      	ldr	r3, [r7, #0]
 8020a80:	655a      	str	r2, [r3, #84]	@ 0x54
      goto free_and_return;
 8020a82:	e006      	b.n	8020a92 <ethernet_input+0x172>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020a84:	2300      	movs	r3, #0
 8020a86:	e008      	b.n	8020a9a <ethernet_input+0x17a>
        goto free_and_return;
 8020a88:	bf00      	nop
 8020a8a:	e002      	b.n	8020a92 <ethernet_input+0x172>
        goto free_and_return;
 8020a8c:	bf00      	nop
 8020a8e:	e000      	b.n	8020a92 <ethernet_input+0x172>
        goto free_and_return;
 8020a90:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8020a92:	6878      	ldr	r0, [r7, #4]
 8020a94:	f7f4 fe56 	bl	8015744 <pbuf_free>
  return ERR_OK;
 8020a98:	2300      	movs	r3, #0
}
 8020a9a:	4618      	mov	r0, r3
 8020a9c:	3718      	adds	r7, #24
 8020a9e:	46bd      	mov	sp, r7
 8020aa0:	bd80      	pop	{r7, pc}
 8020aa2:	bf00      	nop
 8020aa4:	2000bc24 	.word	0x2000bc24
 8020aa8:	08030654 	.word	0x08030654

08020aac <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8020aac:	b580      	push	{r7, lr}
 8020aae:	b086      	sub	sp, #24
 8020ab0:	af00      	add	r7, sp, #0
 8020ab2:	60f8      	str	r0, [r7, #12]
 8020ab4:	60b9      	str	r1, [r7, #8]
 8020ab6:	607a      	str	r2, [r7, #4]
 8020ab8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020aba:	8c3b      	ldrh	r3, [r7, #32]
 8020abc:	4618      	mov	r0, r3
 8020abe:	f7f3 fbe9 	bl	8014294 <lwip_htons>
 8020ac2:	4603      	mov	r3, r0
 8020ac4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8020ac6:	210e      	movs	r1, #14
 8020ac8:	68b8      	ldr	r0, [r7, #8]
 8020aca:	f7f4 fe17 	bl	80156fc <pbuf_header>
 8020ace:	4603      	mov	r3, r0
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d125      	bne.n	8020b20 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8020ad4:	68bb      	ldr	r3, [r7, #8]
 8020ad6:	685b      	ldr	r3, [r3, #4]
 8020ad8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8020ada:	693b      	ldr	r3, [r7, #16]
 8020adc:	8afa      	ldrh	r2, [r7, #22]
 8020ade:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8020ae0:	693b      	ldr	r3, [r7, #16]
 8020ae2:	2206      	movs	r2, #6
 8020ae4:	6839      	ldr	r1, [r7, #0]
 8020ae6:	4618      	mov	r0, r3
 8020ae8:	f001 f8c7 	bl	8021c7a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8020aec:	693b      	ldr	r3, [r7, #16]
 8020aee:	3306      	adds	r3, #6
 8020af0:	2206      	movs	r2, #6
 8020af2:	6879      	ldr	r1, [r7, #4]
 8020af4:	4618      	mov	r0, r3
 8020af6:	f001 f8c0 	bl	8021c7a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8020afa:	68fb      	ldr	r3, [r7, #12]
 8020afc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8020b00:	2b06      	cmp	r3, #6
 8020b02:	d006      	beq.n	8020b12 <ethernet_output+0x66>
 8020b04:	4b0d      	ldr	r3, [pc, #52]	@ (8020b3c <ethernet_output+0x90>)
 8020b06:	f240 122b 	movw	r2, #299	@ 0x12b
 8020b0a:	490d      	ldr	r1, [pc, #52]	@ (8020b40 <ethernet_output+0x94>)
 8020b0c:	480d      	ldr	r0, [pc, #52]	@ (8020b44 <ethernet_output+0x98>)
 8020b0e:	f000 fe09 	bl	8021724 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8020b12:	68fb      	ldr	r3, [r7, #12]
 8020b14:	699b      	ldr	r3, [r3, #24]
 8020b16:	68b9      	ldr	r1, [r7, #8]
 8020b18:	68f8      	ldr	r0, [r7, #12]
 8020b1a:	4798      	blx	r3
 8020b1c:	4603      	mov	r3, r0
 8020b1e:	e008      	b.n	8020b32 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8020b20:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8020b22:	4b09      	ldr	r3, [pc, #36]	@ (8020b48 <ethernet_output+0x9c>)
 8020b24:	895b      	ldrh	r3, [r3, #10]
 8020b26:	3301      	adds	r3, #1
 8020b28:	b29a      	uxth	r2, r3
 8020b2a:	4b07      	ldr	r3, [pc, #28]	@ (8020b48 <ethernet_output+0x9c>)
 8020b2c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8020b2e:	f06f 0301 	mvn.w	r3, #1
}
 8020b32:	4618      	mov	r0, r3
 8020b34:	3718      	adds	r7, #24
 8020b36:	46bd      	mov	sp, r7
 8020b38:	bd80      	pop	{r7, pc}
 8020b3a:	bf00      	nop
 8020b3c:	0802729c 	.word	0x0802729c
 8020b40:	080272d4 	.word	0x080272d4
 8020b44:	08027308 	.word	0x08027308
 8020b48:	2000bc24 	.word	0x2000bc24

08020b4c <atoi>:
 8020b4c:	220a      	movs	r2, #10
 8020b4e:	2100      	movs	r1, #0
 8020b50:	f000 b8ba 	b.w	8020cc8 <strtol>

08020b54 <rand>:
 8020b54:	4b16      	ldr	r3, [pc, #88]	@ (8020bb0 <rand+0x5c>)
 8020b56:	b510      	push	{r4, lr}
 8020b58:	681c      	ldr	r4, [r3, #0]
 8020b5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020b5c:	b9b3      	cbnz	r3, 8020b8c <rand+0x38>
 8020b5e:	2018      	movs	r0, #24
 8020b60:	f001 ff5e 	bl	8022a20 <malloc>
 8020b64:	4602      	mov	r2, r0
 8020b66:	6320      	str	r0, [r4, #48]	@ 0x30
 8020b68:	b920      	cbnz	r0, 8020b74 <rand+0x20>
 8020b6a:	2152      	movs	r1, #82	@ 0x52
 8020b6c:	4b11      	ldr	r3, [pc, #68]	@ (8020bb4 <rand+0x60>)
 8020b6e:	4812      	ldr	r0, [pc, #72]	@ (8020bb8 <rand+0x64>)
 8020b70:	f001 f892 	bl	8021c98 <__assert_func>
 8020b74:	4911      	ldr	r1, [pc, #68]	@ (8020bbc <rand+0x68>)
 8020b76:	4b12      	ldr	r3, [pc, #72]	@ (8020bc0 <rand+0x6c>)
 8020b78:	e9c0 1300 	strd	r1, r3, [r0]
 8020b7c:	4b11      	ldr	r3, [pc, #68]	@ (8020bc4 <rand+0x70>)
 8020b7e:	2100      	movs	r1, #0
 8020b80:	6083      	str	r3, [r0, #8]
 8020b82:	230b      	movs	r3, #11
 8020b84:	8183      	strh	r3, [r0, #12]
 8020b86:	2001      	movs	r0, #1
 8020b88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020b8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020b8e:	480e      	ldr	r0, [pc, #56]	@ (8020bc8 <rand+0x74>)
 8020b90:	690b      	ldr	r3, [r1, #16]
 8020b92:	694c      	ldr	r4, [r1, #20]
 8020b94:	4358      	muls	r0, r3
 8020b96:	4a0d      	ldr	r2, [pc, #52]	@ (8020bcc <rand+0x78>)
 8020b98:	fb02 0004 	mla	r0, r2, r4, r0
 8020b9c:	fba3 3202 	umull	r3, r2, r3, r2
 8020ba0:	3301      	adds	r3, #1
 8020ba2:	eb40 0002 	adc.w	r0, r0, r2
 8020ba6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020baa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020bae:	bd10      	pop	{r4, pc}
 8020bb0:	2000012c 	.word	0x2000012c
 8020bb4:	08030662 	.word	0x08030662
 8020bb8:	08030679 	.word	0x08030679
 8020bbc:	abcd330e 	.word	0xabcd330e
 8020bc0:	e66d1234 	.word	0xe66d1234
 8020bc4:	0005deec 	.word	0x0005deec
 8020bc8:	5851f42d 	.word	0x5851f42d
 8020bcc:	4c957f2d 	.word	0x4c957f2d

08020bd0 <_strtol_l.isra.0>:
 8020bd0:	2b24      	cmp	r3, #36	@ 0x24
 8020bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bd6:	4686      	mov	lr, r0
 8020bd8:	4690      	mov	r8, r2
 8020bda:	d801      	bhi.n	8020be0 <_strtol_l.isra.0+0x10>
 8020bdc:	2b01      	cmp	r3, #1
 8020bde:	d106      	bne.n	8020bee <_strtol_l.isra.0+0x1e>
 8020be0:	f001 f810 	bl	8021c04 <__errno>
 8020be4:	2316      	movs	r3, #22
 8020be6:	6003      	str	r3, [r0, #0]
 8020be8:	2000      	movs	r0, #0
 8020bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bee:	460d      	mov	r5, r1
 8020bf0:	4833      	ldr	r0, [pc, #204]	@ (8020cc0 <_strtol_l.isra.0+0xf0>)
 8020bf2:	462a      	mov	r2, r5
 8020bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020bf8:	5d06      	ldrb	r6, [r0, r4]
 8020bfa:	f016 0608 	ands.w	r6, r6, #8
 8020bfe:	d1f8      	bne.n	8020bf2 <_strtol_l.isra.0+0x22>
 8020c00:	2c2d      	cmp	r4, #45	@ 0x2d
 8020c02:	d110      	bne.n	8020c26 <_strtol_l.isra.0+0x56>
 8020c04:	2601      	movs	r6, #1
 8020c06:	782c      	ldrb	r4, [r5, #0]
 8020c08:	1c95      	adds	r5, r2, #2
 8020c0a:	f033 0210 	bics.w	r2, r3, #16
 8020c0e:	d115      	bne.n	8020c3c <_strtol_l.isra.0+0x6c>
 8020c10:	2c30      	cmp	r4, #48	@ 0x30
 8020c12:	d10d      	bne.n	8020c30 <_strtol_l.isra.0+0x60>
 8020c14:	782a      	ldrb	r2, [r5, #0]
 8020c16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8020c1a:	2a58      	cmp	r2, #88	@ 0x58
 8020c1c:	d108      	bne.n	8020c30 <_strtol_l.isra.0+0x60>
 8020c1e:	786c      	ldrb	r4, [r5, #1]
 8020c20:	3502      	adds	r5, #2
 8020c22:	2310      	movs	r3, #16
 8020c24:	e00a      	b.n	8020c3c <_strtol_l.isra.0+0x6c>
 8020c26:	2c2b      	cmp	r4, #43	@ 0x2b
 8020c28:	bf04      	itt	eq
 8020c2a:	782c      	ldrbeq	r4, [r5, #0]
 8020c2c:	1c95      	addeq	r5, r2, #2
 8020c2e:	e7ec      	b.n	8020c0a <_strtol_l.isra.0+0x3a>
 8020c30:	2b00      	cmp	r3, #0
 8020c32:	d1f6      	bne.n	8020c22 <_strtol_l.isra.0+0x52>
 8020c34:	2c30      	cmp	r4, #48	@ 0x30
 8020c36:	bf14      	ite	ne
 8020c38:	230a      	movne	r3, #10
 8020c3a:	2308      	moveq	r3, #8
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8020c42:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020c46:	fbbc f9f3 	udiv	r9, ip, r3
 8020c4a:	4610      	mov	r0, r2
 8020c4c:	fb03 ca19 	mls	sl, r3, r9, ip
 8020c50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8020c54:	2f09      	cmp	r7, #9
 8020c56:	d80f      	bhi.n	8020c78 <_strtol_l.isra.0+0xa8>
 8020c58:	463c      	mov	r4, r7
 8020c5a:	42a3      	cmp	r3, r4
 8020c5c:	dd1b      	ble.n	8020c96 <_strtol_l.isra.0+0xc6>
 8020c5e:	1c57      	adds	r7, r2, #1
 8020c60:	d007      	beq.n	8020c72 <_strtol_l.isra.0+0xa2>
 8020c62:	4581      	cmp	r9, r0
 8020c64:	d314      	bcc.n	8020c90 <_strtol_l.isra.0+0xc0>
 8020c66:	d101      	bne.n	8020c6c <_strtol_l.isra.0+0x9c>
 8020c68:	45a2      	cmp	sl, r4
 8020c6a:	db11      	blt.n	8020c90 <_strtol_l.isra.0+0xc0>
 8020c6c:	2201      	movs	r2, #1
 8020c6e:	fb00 4003 	mla	r0, r0, r3, r4
 8020c72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020c76:	e7eb      	b.n	8020c50 <_strtol_l.isra.0+0x80>
 8020c78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8020c7c:	2f19      	cmp	r7, #25
 8020c7e:	d801      	bhi.n	8020c84 <_strtol_l.isra.0+0xb4>
 8020c80:	3c37      	subs	r4, #55	@ 0x37
 8020c82:	e7ea      	b.n	8020c5a <_strtol_l.isra.0+0x8a>
 8020c84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8020c88:	2f19      	cmp	r7, #25
 8020c8a:	d804      	bhi.n	8020c96 <_strtol_l.isra.0+0xc6>
 8020c8c:	3c57      	subs	r4, #87	@ 0x57
 8020c8e:	e7e4      	b.n	8020c5a <_strtol_l.isra.0+0x8a>
 8020c90:	f04f 32ff 	mov.w	r2, #4294967295
 8020c94:	e7ed      	b.n	8020c72 <_strtol_l.isra.0+0xa2>
 8020c96:	1c53      	adds	r3, r2, #1
 8020c98:	d108      	bne.n	8020cac <_strtol_l.isra.0+0xdc>
 8020c9a:	2322      	movs	r3, #34	@ 0x22
 8020c9c:	4660      	mov	r0, ip
 8020c9e:	f8ce 3000 	str.w	r3, [lr]
 8020ca2:	f1b8 0f00 	cmp.w	r8, #0
 8020ca6:	d0a0      	beq.n	8020bea <_strtol_l.isra.0+0x1a>
 8020ca8:	1e69      	subs	r1, r5, #1
 8020caa:	e006      	b.n	8020cba <_strtol_l.isra.0+0xea>
 8020cac:	b106      	cbz	r6, 8020cb0 <_strtol_l.isra.0+0xe0>
 8020cae:	4240      	negs	r0, r0
 8020cb0:	f1b8 0f00 	cmp.w	r8, #0
 8020cb4:	d099      	beq.n	8020bea <_strtol_l.isra.0+0x1a>
 8020cb6:	2a00      	cmp	r2, #0
 8020cb8:	d1f6      	bne.n	8020ca8 <_strtol_l.isra.0+0xd8>
 8020cba:	f8c8 1000 	str.w	r1, [r8]
 8020cbe:	e794      	b.n	8020bea <_strtol_l.isra.0+0x1a>
 8020cc0:	08030845 	.word	0x08030845

08020cc4 <_strtol_r>:
 8020cc4:	f7ff bf84 	b.w	8020bd0 <_strtol_l.isra.0>

08020cc8 <strtol>:
 8020cc8:	4613      	mov	r3, r2
 8020cca:	460a      	mov	r2, r1
 8020ccc:	4601      	mov	r1, r0
 8020cce:	4802      	ldr	r0, [pc, #8]	@ (8020cd8 <strtol+0x10>)
 8020cd0:	6800      	ldr	r0, [r0, #0]
 8020cd2:	f7ff bf7d 	b.w	8020bd0 <_strtol_l.isra.0>
 8020cd6:	bf00      	nop
 8020cd8:	2000012c 	.word	0x2000012c

08020cdc <isxdigit>:
 8020cdc:	4b02      	ldr	r3, [pc, #8]	@ (8020ce8 <isxdigit+0xc>)
 8020cde:	4403      	add	r3, r0
 8020ce0:	7858      	ldrb	r0, [r3, #1]
 8020ce2:	f000 0044 	and.w	r0, r0, #68	@ 0x44
 8020ce6:	4770      	bx	lr
 8020ce8:	08030844 	.word	0x08030844

08020cec <__cvt>:
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020cf2:	461d      	mov	r5, r3
 8020cf4:	bfbb      	ittet	lt
 8020cf6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8020cfa:	461d      	movlt	r5, r3
 8020cfc:	2300      	movge	r3, #0
 8020cfe:	232d      	movlt	r3, #45	@ 0x2d
 8020d00:	b088      	sub	sp, #32
 8020d02:	4614      	mov	r4, r2
 8020d04:	bfb8      	it	lt
 8020d06:	4614      	movlt	r4, r2
 8020d08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020d0a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8020d0c:	7013      	strb	r3, [r2, #0]
 8020d0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020d10:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8020d14:	f023 0820 	bic.w	r8, r3, #32
 8020d18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8020d1c:	d005      	beq.n	8020d2a <__cvt+0x3e>
 8020d1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8020d22:	d100      	bne.n	8020d26 <__cvt+0x3a>
 8020d24:	3601      	adds	r6, #1
 8020d26:	2302      	movs	r3, #2
 8020d28:	e000      	b.n	8020d2c <__cvt+0x40>
 8020d2a:	2303      	movs	r3, #3
 8020d2c:	aa07      	add	r2, sp, #28
 8020d2e:	9204      	str	r2, [sp, #16]
 8020d30:	aa06      	add	r2, sp, #24
 8020d32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8020d36:	e9cd 3600 	strd	r3, r6, [sp]
 8020d3a:	4622      	mov	r2, r4
 8020d3c:	462b      	mov	r3, r5
 8020d3e:	f001 f853 	bl	8021de8 <_dtoa_r>
 8020d42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8020d46:	4607      	mov	r7, r0
 8020d48:	d119      	bne.n	8020d7e <__cvt+0x92>
 8020d4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020d4c:	07db      	lsls	r3, r3, #31
 8020d4e:	d50e      	bpl.n	8020d6e <__cvt+0x82>
 8020d50:	eb00 0906 	add.w	r9, r0, r6
 8020d54:	2200      	movs	r2, #0
 8020d56:	2300      	movs	r3, #0
 8020d58:	4620      	mov	r0, r4
 8020d5a:	4629      	mov	r1, r5
 8020d5c:	f7df fe6a 	bl	8000a34 <__aeabi_dcmpeq>
 8020d60:	b108      	cbz	r0, 8020d66 <__cvt+0x7a>
 8020d62:	f8cd 901c 	str.w	r9, [sp, #28]
 8020d66:	2230      	movs	r2, #48	@ 0x30
 8020d68:	9b07      	ldr	r3, [sp, #28]
 8020d6a:	454b      	cmp	r3, r9
 8020d6c:	d31e      	bcc.n	8020dac <__cvt+0xc0>
 8020d6e:	4638      	mov	r0, r7
 8020d70:	9b07      	ldr	r3, [sp, #28]
 8020d72:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020d74:	1bdb      	subs	r3, r3, r7
 8020d76:	6013      	str	r3, [r2, #0]
 8020d78:	b008      	add	sp, #32
 8020d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8020d82:	eb00 0906 	add.w	r9, r0, r6
 8020d86:	d1e5      	bne.n	8020d54 <__cvt+0x68>
 8020d88:	7803      	ldrb	r3, [r0, #0]
 8020d8a:	2b30      	cmp	r3, #48	@ 0x30
 8020d8c:	d10a      	bne.n	8020da4 <__cvt+0xb8>
 8020d8e:	2200      	movs	r2, #0
 8020d90:	2300      	movs	r3, #0
 8020d92:	4620      	mov	r0, r4
 8020d94:	4629      	mov	r1, r5
 8020d96:	f7df fe4d 	bl	8000a34 <__aeabi_dcmpeq>
 8020d9a:	b918      	cbnz	r0, 8020da4 <__cvt+0xb8>
 8020d9c:	f1c6 0601 	rsb	r6, r6, #1
 8020da0:	f8ca 6000 	str.w	r6, [sl]
 8020da4:	f8da 3000 	ldr.w	r3, [sl]
 8020da8:	4499      	add	r9, r3
 8020daa:	e7d3      	b.n	8020d54 <__cvt+0x68>
 8020dac:	1c59      	adds	r1, r3, #1
 8020dae:	9107      	str	r1, [sp, #28]
 8020db0:	701a      	strb	r2, [r3, #0]
 8020db2:	e7d9      	b.n	8020d68 <__cvt+0x7c>

08020db4 <__exponent>:
 8020db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020db6:	2900      	cmp	r1, #0
 8020db8:	bfb6      	itet	lt
 8020dba:	232d      	movlt	r3, #45	@ 0x2d
 8020dbc:	232b      	movge	r3, #43	@ 0x2b
 8020dbe:	4249      	neglt	r1, r1
 8020dc0:	2909      	cmp	r1, #9
 8020dc2:	7002      	strb	r2, [r0, #0]
 8020dc4:	7043      	strb	r3, [r0, #1]
 8020dc6:	dd29      	ble.n	8020e1c <__exponent+0x68>
 8020dc8:	f10d 0307 	add.w	r3, sp, #7
 8020dcc:	461d      	mov	r5, r3
 8020dce:	270a      	movs	r7, #10
 8020dd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8020dd4:	461a      	mov	r2, r3
 8020dd6:	fb07 1416 	mls	r4, r7, r6, r1
 8020dda:	3430      	adds	r4, #48	@ 0x30
 8020ddc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8020de0:	460c      	mov	r4, r1
 8020de2:	2c63      	cmp	r4, #99	@ 0x63
 8020de4:	4631      	mov	r1, r6
 8020de6:	f103 33ff 	add.w	r3, r3, #4294967295
 8020dea:	dcf1      	bgt.n	8020dd0 <__exponent+0x1c>
 8020dec:	3130      	adds	r1, #48	@ 0x30
 8020dee:	1e94      	subs	r4, r2, #2
 8020df0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8020df4:	4623      	mov	r3, r4
 8020df6:	1c41      	adds	r1, r0, #1
 8020df8:	42ab      	cmp	r3, r5
 8020dfa:	d30a      	bcc.n	8020e12 <__exponent+0x5e>
 8020dfc:	f10d 0309 	add.w	r3, sp, #9
 8020e00:	1a9b      	subs	r3, r3, r2
 8020e02:	42ac      	cmp	r4, r5
 8020e04:	bf88      	it	hi
 8020e06:	2300      	movhi	r3, #0
 8020e08:	3302      	adds	r3, #2
 8020e0a:	4403      	add	r3, r0
 8020e0c:	1a18      	subs	r0, r3, r0
 8020e0e:	b003      	add	sp, #12
 8020e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8020e16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8020e1a:	e7ed      	b.n	8020df8 <__exponent+0x44>
 8020e1c:	2330      	movs	r3, #48	@ 0x30
 8020e1e:	3130      	adds	r1, #48	@ 0x30
 8020e20:	7083      	strb	r3, [r0, #2]
 8020e22:	70c1      	strb	r1, [r0, #3]
 8020e24:	1d03      	adds	r3, r0, #4
 8020e26:	e7f1      	b.n	8020e0c <__exponent+0x58>

08020e28 <_printf_float>:
 8020e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e2c:	b091      	sub	sp, #68	@ 0x44
 8020e2e:	460c      	mov	r4, r1
 8020e30:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8020e34:	4616      	mov	r6, r2
 8020e36:	461f      	mov	r7, r3
 8020e38:	4605      	mov	r5, r0
 8020e3a:	f000 fe99 	bl	8021b70 <_localeconv_r>
 8020e3e:	6803      	ldr	r3, [r0, #0]
 8020e40:	4618      	mov	r0, r3
 8020e42:	9308      	str	r3, [sp, #32]
 8020e44:	f7df f9ca 	bl	80001dc <strlen>
 8020e48:	2300      	movs	r3, #0
 8020e4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8020e50:	9009      	str	r0, [sp, #36]	@ 0x24
 8020e52:	3307      	adds	r3, #7
 8020e54:	f023 0307 	bic.w	r3, r3, #7
 8020e58:	f103 0208 	add.w	r2, r3, #8
 8020e5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8020e60:	f8d4 b000 	ldr.w	fp, [r4]
 8020e64:	f8c8 2000 	str.w	r2, [r8]
 8020e68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020e6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8020e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020e72:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8020e76:	f04f 32ff 	mov.w	r2, #4294967295
 8020e7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8020e7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8020e82:	4b9c      	ldr	r3, [pc, #624]	@ (80210f4 <_printf_float+0x2cc>)
 8020e84:	f7df fe08 	bl	8000a98 <__aeabi_dcmpun>
 8020e88:	bb70      	cbnz	r0, 8020ee8 <_printf_float+0xc0>
 8020e8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8020e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8020e92:	4b98      	ldr	r3, [pc, #608]	@ (80210f4 <_printf_float+0x2cc>)
 8020e94:	f7df fde2 	bl	8000a5c <__aeabi_dcmple>
 8020e98:	bb30      	cbnz	r0, 8020ee8 <_printf_float+0xc0>
 8020e9a:	2200      	movs	r2, #0
 8020e9c:	2300      	movs	r3, #0
 8020e9e:	4640      	mov	r0, r8
 8020ea0:	4649      	mov	r1, r9
 8020ea2:	f7df fdd1 	bl	8000a48 <__aeabi_dcmplt>
 8020ea6:	b110      	cbz	r0, 8020eae <_printf_float+0x86>
 8020ea8:	232d      	movs	r3, #45	@ 0x2d
 8020eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020eae:	4a92      	ldr	r2, [pc, #584]	@ (80210f8 <_printf_float+0x2d0>)
 8020eb0:	4b92      	ldr	r3, [pc, #584]	@ (80210fc <_printf_float+0x2d4>)
 8020eb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8020eb6:	bf8c      	ite	hi
 8020eb8:	4690      	movhi	r8, r2
 8020eba:	4698      	movls	r8, r3
 8020ebc:	2303      	movs	r3, #3
 8020ebe:	f04f 0900 	mov.w	r9, #0
 8020ec2:	6123      	str	r3, [r4, #16]
 8020ec4:	f02b 0304 	bic.w	r3, fp, #4
 8020ec8:	6023      	str	r3, [r4, #0]
 8020eca:	4633      	mov	r3, r6
 8020ecc:	4621      	mov	r1, r4
 8020ece:	4628      	mov	r0, r5
 8020ed0:	9700      	str	r7, [sp, #0]
 8020ed2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8020ed4:	f000 f9d4 	bl	8021280 <_printf_common>
 8020ed8:	3001      	adds	r0, #1
 8020eda:	f040 8090 	bne.w	8020ffe <_printf_float+0x1d6>
 8020ede:	f04f 30ff 	mov.w	r0, #4294967295
 8020ee2:	b011      	add	sp, #68	@ 0x44
 8020ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ee8:	4642      	mov	r2, r8
 8020eea:	464b      	mov	r3, r9
 8020eec:	4640      	mov	r0, r8
 8020eee:	4649      	mov	r1, r9
 8020ef0:	f7df fdd2 	bl	8000a98 <__aeabi_dcmpun>
 8020ef4:	b148      	cbz	r0, 8020f0a <_printf_float+0xe2>
 8020ef6:	464b      	mov	r3, r9
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	bfb8      	it	lt
 8020efc:	232d      	movlt	r3, #45	@ 0x2d
 8020efe:	4a80      	ldr	r2, [pc, #512]	@ (8021100 <_printf_float+0x2d8>)
 8020f00:	bfb8      	it	lt
 8020f02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8020f06:	4b7f      	ldr	r3, [pc, #508]	@ (8021104 <_printf_float+0x2dc>)
 8020f08:	e7d3      	b.n	8020eb2 <_printf_float+0x8a>
 8020f0a:	6863      	ldr	r3, [r4, #4]
 8020f0c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8020f10:	1c5a      	adds	r2, r3, #1
 8020f12:	d13f      	bne.n	8020f94 <_printf_float+0x16c>
 8020f14:	2306      	movs	r3, #6
 8020f16:	6063      	str	r3, [r4, #4]
 8020f18:	2200      	movs	r2, #0
 8020f1a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8020f1e:	6023      	str	r3, [r4, #0]
 8020f20:	9206      	str	r2, [sp, #24]
 8020f22:	aa0e      	add	r2, sp, #56	@ 0x38
 8020f24:	e9cd a204 	strd	sl, r2, [sp, #16]
 8020f28:	aa0d      	add	r2, sp, #52	@ 0x34
 8020f2a:	9203      	str	r2, [sp, #12]
 8020f2c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8020f30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8020f34:	6863      	ldr	r3, [r4, #4]
 8020f36:	4642      	mov	r2, r8
 8020f38:	9300      	str	r3, [sp, #0]
 8020f3a:	4628      	mov	r0, r5
 8020f3c:	464b      	mov	r3, r9
 8020f3e:	910a      	str	r1, [sp, #40]	@ 0x28
 8020f40:	f7ff fed4 	bl	8020cec <__cvt>
 8020f44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020f46:	4680      	mov	r8, r0
 8020f48:	2947      	cmp	r1, #71	@ 0x47
 8020f4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020f4c:	d128      	bne.n	8020fa0 <_printf_float+0x178>
 8020f4e:	1cc8      	adds	r0, r1, #3
 8020f50:	db02      	blt.n	8020f58 <_printf_float+0x130>
 8020f52:	6863      	ldr	r3, [r4, #4]
 8020f54:	4299      	cmp	r1, r3
 8020f56:	dd40      	ble.n	8020fda <_printf_float+0x1b2>
 8020f58:	f1aa 0a02 	sub.w	sl, sl, #2
 8020f5c:	fa5f fa8a 	uxtb.w	sl, sl
 8020f60:	4652      	mov	r2, sl
 8020f62:	3901      	subs	r1, #1
 8020f64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8020f68:	910d      	str	r1, [sp, #52]	@ 0x34
 8020f6a:	f7ff ff23 	bl	8020db4 <__exponent>
 8020f6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f70:	4681      	mov	r9, r0
 8020f72:	1813      	adds	r3, r2, r0
 8020f74:	2a01      	cmp	r2, #1
 8020f76:	6123      	str	r3, [r4, #16]
 8020f78:	dc02      	bgt.n	8020f80 <_printf_float+0x158>
 8020f7a:	6822      	ldr	r2, [r4, #0]
 8020f7c:	07d2      	lsls	r2, r2, #31
 8020f7e:	d501      	bpl.n	8020f84 <_printf_float+0x15c>
 8020f80:	3301      	adds	r3, #1
 8020f82:	6123      	str	r3, [r4, #16]
 8020f84:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	d09e      	beq.n	8020eca <_printf_float+0xa2>
 8020f8c:	232d      	movs	r3, #45	@ 0x2d
 8020f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020f92:	e79a      	b.n	8020eca <_printf_float+0xa2>
 8020f94:	2947      	cmp	r1, #71	@ 0x47
 8020f96:	d1bf      	bne.n	8020f18 <_printf_float+0xf0>
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d1bd      	bne.n	8020f18 <_printf_float+0xf0>
 8020f9c:	2301      	movs	r3, #1
 8020f9e:	e7ba      	b.n	8020f16 <_printf_float+0xee>
 8020fa0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8020fa4:	d9dc      	bls.n	8020f60 <_printf_float+0x138>
 8020fa6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8020faa:	d118      	bne.n	8020fde <_printf_float+0x1b6>
 8020fac:	2900      	cmp	r1, #0
 8020fae:	6863      	ldr	r3, [r4, #4]
 8020fb0:	dd0b      	ble.n	8020fca <_printf_float+0x1a2>
 8020fb2:	6121      	str	r1, [r4, #16]
 8020fb4:	b913      	cbnz	r3, 8020fbc <_printf_float+0x194>
 8020fb6:	6822      	ldr	r2, [r4, #0]
 8020fb8:	07d0      	lsls	r0, r2, #31
 8020fba:	d502      	bpl.n	8020fc2 <_printf_float+0x19a>
 8020fbc:	3301      	adds	r3, #1
 8020fbe:	440b      	add	r3, r1
 8020fc0:	6123      	str	r3, [r4, #16]
 8020fc2:	f04f 0900 	mov.w	r9, #0
 8020fc6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8020fc8:	e7dc      	b.n	8020f84 <_printf_float+0x15c>
 8020fca:	b913      	cbnz	r3, 8020fd2 <_printf_float+0x1aa>
 8020fcc:	6822      	ldr	r2, [r4, #0]
 8020fce:	07d2      	lsls	r2, r2, #31
 8020fd0:	d501      	bpl.n	8020fd6 <_printf_float+0x1ae>
 8020fd2:	3302      	adds	r3, #2
 8020fd4:	e7f4      	b.n	8020fc0 <_printf_float+0x198>
 8020fd6:	2301      	movs	r3, #1
 8020fd8:	e7f2      	b.n	8020fc0 <_printf_float+0x198>
 8020fda:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8020fde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fe0:	4299      	cmp	r1, r3
 8020fe2:	db05      	blt.n	8020ff0 <_printf_float+0x1c8>
 8020fe4:	6823      	ldr	r3, [r4, #0]
 8020fe6:	6121      	str	r1, [r4, #16]
 8020fe8:	07d8      	lsls	r0, r3, #31
 8020fea:	d5ea      	bpl.n	8020fc2 <_printf_float+0x19a>
 8020fec:	1c4b      	adds	r3, r1, #1
 8020fee:	e7e7      	b.n	8020fc0 <_printf_float+0x198>
 8020ff0:	2900      	cmp	r1, #0
 8020ff2:	bfcc      	ite	gt
 8020ff4:	2201      	movgt	r2, #1
 8020ff6:	f1c1 0202 	rsble	r2, r1, #2
 8020ffa:	4413      	add	r3, r2
 8020ffc:	e7e0      	b.n	8020fc0 <_printf_float+0x198>
 8020ffe:	6823      	ldr	r3, [r4, #0]
 8021000:	055a      	lsls	r2, r3, #21
 8021002:	d407      	bmi.n	8021014 <_printf_float+0x1ec>
 8021004:	6923      	ldr	r3, [r4, #16]
 8021006:	4642      	mov	r2, r8
 8021008:	4631      	mov	r1, r6
 802100a:	4628      	mov	r0, r5
 802100c:	47b8      	blx	r7
 802100e:	3001      	adds	r0, #1
 8021010:	d12b      	bne.n	802106a <_printf_float+0x242>
 8021012:	e764      	b.n	8020ede <_printf_float+0xb6>
 8021014:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021018:	f240 80dc 	bls.w	80211d4 <_printf_float+0x3ac>
 802101c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021020:	2200      	movs	r2, #0
 8021022:	2300      	movs	r3, #0
 8021024:	f7df fd06 	bl	8000a34 <__aeabi_dcmpeq>
 8021028:	2800      	cmp	r0, #0
 802102a:	d033      	beq.n	8021094 <_printf_float+0x26c>
 802102c:	2301      	movs	r3, #1
 802102e:	4631      	mov	r1, r6
 8021030:	4628      	mov	r0, r5
 8021032:	4a35      	ldr	r2, [pc, #212]	@ (8021108 <_printf_float+0x2e0>)
 8021034:	47b8      	blx	r7
 8021036:	3001      	adds	r0, #1
 8021038:	f43f af51 	beq.w	8020ede <_printf_float+0xb6>
 802103c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8021040:	4543      	cmp	r3, r8
 8021042:	db02      	blt.n	802104a <_printf_float+0x222>
 8021044:	6823      	ldr	r3, [r4, #0]
 8021046:	07d8      	lsls	r0, r3, #31
 8021048:	d50f      	bpl.n	802106a <_printf_float+0x242>
 802104a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802104e:	4631      	mov	r1, r6
 8021050:	4628      	mov	r0, r5
 8021052:	47b8      	blx	r7
 8021054:	3001      	adds	r0, #1
 8021056:	f43f af42 	beq.w	8020ede <_printf_float+0xb6>
 802105a:	f04f 0900 	mov.w	r9, #0
 802105e:	f108 38ff 	add.w	r8, r8, #4294967295
 8021062:	f104 0a1a 	add.w	sl, r4, #26
 8021066:	45c8      	cmp	r8, r9
 8021068:	dc09      	bgt.n	802107e <_printf_float+0x256>
 802106a:	6823      	ldr	r3, [r4, #0]
 802106c:	079b      	lsls	r3, r3, #30
 802106e:	f100 8102 	bmi.w	8021276 <_printf_float+0x44e>
 8021072:	68e0      	ldr	r0, [r4, #12]
 8021074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021076:	4298      	cmp	r0, r3
 8021078:	bfb8      	it	lt
 802107a:	4618      	movlt	r0, r3
 802107c:	e731      	b.n	8020ee2 <_printf_float+0xba>
 802107e:	2301      	movs	r3, #1
 8021080:	4652      	mov	r2, sl
 8021082:	4631      	mov	r1, r6
 8021084:	4628      	mov	r0, r5
 8021086:	47b8      	blx	r7
 8021088:	3001      	adds	r0, #1
 802108a:	f43f af28 	beq.w	8020ede <_printf_float+0xb6>
 802108e:	f109 0901 	add.w	r9, r9, #1
 8021092:	e7e8      	b.n	8021066 <_printf_float+0x23e>
 8021094:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021096:	2b00      	cmp	r3, #0
 8021098:	dc38      	bgt.n	802110c <_printf_float+0x2e4>
 802109a:	2301      	movs	r3, #1
 802109c:	4631      	mov	r1, r6
 802109e:	4628      	mov	r0, r5
 80210a0:	4a19      	ldr	r2, [pc, #100]	@ (8021108 <_printf_float+0x2e0>)
 80210a2:	47b8      	blx	r7
 80210a4:	3001      	adds	r0, #1
 80210a6:	f43f af1a 	beq.w	8020ede <_printf_float+0xb6>
 80210aa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80210ae:	ea59 0303 	orrs.w	r3, r9, r3
 80210b2:	d102      	bne.n	80210ba <_printf_float+0x292>
 80210b4:	6823      	ldr	r3, [r4, #0]
 80210b6:	07d9      	lsls	r1, r3, #31
 80210b8:	d5d7      	bpl.n	802106a <_printf_float+0x242>
 80210ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80210be:	4631      	mov	r1, r6
 80210c0:	4628      	mov	r0, r5
 80210c2:	47b8      	blx	r7
 80210c4:	3001      	adds	r0, #1
 80210c6:	f43f af0a 	beq.w	8020ede <_printf_float+0xb6>
 80210ca:	f04f 0a00 	mov.w	sl, #0
 80210ce:	f104 0b1a 	add.w	fp, r4, #26
 80210d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210d4:	425b      	negs	r3, r3
 80210d6:	4553      	cmp	r3, sl
 80210d8:	dc01      	bgt.n	80210de <_printf_float+0x2b6>
 80210da:	464b      	mov	r3, r9
 80210dc:	e793      	b.n	8021006 <_printf_float+0x1de>
 80210de:	2301      	movs	r3, #1
 80210e0:	465a      	mov	r2, fp
 80210e2:	4631      	mov	r1, r6
 80210e4:	4628      	mov	r0, r5
 80210e6:	47b8      	blx	r7
 80210e8:	3001      	adds	r0, #1
 80210ea:	f43f aef8 	beq.w	8020ede <_printf_float+0xb6>
 80210ee:	f10a 0a01 	add.w	sl, sl, #1
 80210f2:	e7ee      	b.n	80210d2 <_printf_float+0x2aa>
 80210f4:	7fefffff 	.word	0x7fefffff
 80210f8:	080306d5 	.word	0x080306d5
 80210fc:	080306d1 	.word	0x080306d1
 8021100:	080306dd 	.word	0x080306dd
 8021104:	080306d9 	.word	0x080306d9
 8021108:	08030835 	.word	0x08030835
 802110c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802110e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8021112:	4553      	cmp	r3, sl
 8021114:	bfa8      	it	ge
 8021116:	4653      	movge	r3, sl
 8021118:	2b00      	cmp	r3, #0
 802111a:	4699      	mov	r9, r3
 802111c:	dc36      	bgt.n	802118c <_printf_float+0x364>
 802111e:	f04f 0b00 	mov.w	fp, #0
 8021122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021126:	f104 021a 	add.w	r2, r4, #26
 802112a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802112c:	930a      	str	r3, [sp, #40]	@ 0x28
 802112e:	eba3 0309 	sub.w	r3, r3, r9
 8021132:	455b      	cmp	r3, fp
 8021134:	dc31      	bgt.n	802119a <_printf_float+0x372>
 8021136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021138:	459a      	cmp	sl, r3
 802113a:	dc3a      	bgt.n	80211b2 <_printf_float+0x38a>
 802113c:	6823      	ldr	r3, [r4, #0]
 802113e:	07da      	lsls	r2, r3, #31
 8021140:	d437      	bmi.n	80211b2 <_printf_float+0x38a>
 8021142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021144:	ebaa 0903 	sub.w	r9, sl, r3
 8021148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802114a:	ebaa 0303 	sub.w	r3, sl, r3
 802114e:	4599      	cmp	r9, r3
 8021150:	bfa8      	it	ge
 8021152:	4699      	movge	r9, r3
 8021154:	f1b9 0f00 	cmp.w	r9, #0
 8021158:	dc33      	bgt.n	80211c2 <_printf_float+0x39a>
 802115a:	f04f 0800 	mov.w	r8, #0
 802115e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021162:	f104 0b1a 	add.w	fp, r4, #26
 8021166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021168:	ebaa 0303 	sub.w	r3, sl, r3
 802116c:	eba3 0309 	sub.w	r3, r3, r9
 8021170:	4543      	cmp	r3, r8
 8021172:	f77f af7a 	ble.w	802106a <_printf_float+0x242>
 8021176:	2301      	movs	r3, #1
 8021178:	465a      	mov	r2, fp
 802117a:	4631      	mov	r1, r6
 802117c:	4628      	mov	r0, r5
 802117e:	47b8      	blx	r7
 8021180:	3001      	adds	r0, #1
 8021182:	f43f aeac 	beq.w	8020ede <_printf_float+0xb6>
 8021186:	f108 0801 	add.w	r8, r8, #1
 802118a:	e7ec      	b.n	8021166 <_printf_float+0x33e>
 802118c:	4642      	mov	r2, r8
 802118e:	4631      	mov	r1, r6
 8021190:	4628      	mov	r0, r5
 8021192:	47b8      	blx	r7
 8021194:	3001      	adds	r0, #1
 8021196:	d1c2      	bne.n	802111e <_printf_float+0x2f6>
 8021198:	e6a1      	b.n	8020ede <_printf_float+0xb6>
 802119a:	2301      	movs	r3, #1
 802119c:	4631      	mov	r1, r6
 802119e:	4628      	mov	r0, r5
 80211a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80211a2:	47b8      	blx	r7
 80211a4:	3001      	adds	r0, #1
 80211a6:	f43f ae9a 	beq.w	8020ede <_printf_float+0xb6>
 80211aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80211ac:	f10b 0b01 	add.w	fp, fp, #1
 80211b0:	e7bb      	b.n	802112a <_printf_float+0x302>
 80211b2:	4631      	mov	r1, r6
 80211b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80211b8:	4628      	mov	r0, r5
 80211ba:	47b8      	blx	r7
 80211bc:	3001      	adds	r0, #1
 80211be:	d1c0      	bne.n	8021142 <_printf_float+0x31a>
 80211c0:	e68d      	b.n	8020ede <_printf_float+0xb6>
 80211c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80211c4:	464b      	mov	r3, r9
 80211c6:	4631      	mov	r1, r6
 80211c8:	4628      	mov	r0, r5
 80211ca:	4442      	add	r2, r8
 80211cc:	47b8      	blx	r7
 80211ce:	3001      	adds	r0, #1
 80211d0:	d1c3      	bne.n	802115a <_printf_float+0x332>
 80211d2:	e684      	b.n	8020ede <_printf_float+0xb6>
 80211d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80211d8:	f1ba 0f01 	cmp.w	sl, #1
 80211dc:	dc01      	bgt.n	80211e2 <_printf_float+0x3ba>
 80211de:	07db      	lsls	r3, r3, #31
 80211e0:	d536      	bpl.n	8021250 <_printf_float+0x428>
 80211e2:	2301      	movs	r3, #1
 80211e4:	4642      	mov	r2, r8
 80211e6:	4631      	mov	r1, r6
 80211e8:	4628      	mov	r0, r5
 80211ea:	47b8      	blx	r7
 80211ec:	3001      	adds	r0, #1
 80211ee:	f43f ae76 	beq.w	8020ede <_printf_float+0xb6>
 80211f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80211f6:	4631      	mov	r1, r6
 80211f8:	4628      	mov	r0, r5
 80211fa:	47b8      	blx	r7
 80211fc:	3001      	adds	r0, #1
 80211fe:	f43f ae6e 	beq.w	8020ede <_printf_float+0xb6>
 8021202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021206:	2200      	movs	r2, #0
 8021208:	2300      	movs	r3, #0
 802120a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802120e:	f7df fc11 	bl	8000a34 <__aeabi_dcmpeq>
 8021212:	b9c0      	cbnz	r0, 8021246 <_printf_float+0x41e>
 8021214:	4653      	mov	r3, sl
 8021216:	f108 0201 	add.w	r2, r8, #1
 802121a:	4631      	mov	r1, r6
 802121c:	4628      	mov	r0, r5
 802121e:	47b8      	blx	r7
 8021220:	3001      	adds	r0, #1
 8021222:	d10c      	bne.n	802123e <_printf_float+0x416>
 8021224:	e65b      	b.n	8020ede <_printf_float+0xb6>
 8021226:	2301      	movs	r3, #1
 8021228:	465a      	mov	r2, fp
 802122a:	4631      	mov	r1, r6
 802122c:	4628      	mov	r0, r5
 802122e:	47b8      	blx	r7
 8021230:	3001      	adds	r0, #1
 8021232:	f43f ae54 	beq.w	8020ede <_printf_float+0xb6>
 8021236:	f108 0801 	add.w	r8, r8, #1
 802123a:	45d0      	cmp	r8, sl
 802123c:	dbf3      	blt.n	8021226 <_printf_float+0x3fe>
 802123e:	464b      	mov	r3, r9
 8021240:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8021244:	e6e0      	b.n	8021008 <_printf_float+0x1e0>
 8021246:	f04f 0800 	mov.w	r8, #0
 802124a:	f104 0b1a 	add.w	fp, r4, #26
 802124e:	e7f4      	b.n	802123a <_printf_float+0x412>
 8021250:	2301      	movs	r3, #1
 8021252:	4642      	mov	r2, r8
 8021254:	e7e1      	b.n	802121a <_printf_float+0x3f2>
 8021256:	2301      	movs	r3, #1
 8021258:	464a      	mov	r2, r9
 802125a:	4631      	mov	r1, r6
 802125c:	4628      	mov	r0, r5
 802125e:	47b8      	blx	r7
 8021260:	3001      	adds	r0, #1
 8021262:	f43f ae3c 	beq.w	8020ede <_printf_float+0xb6>
 8021266:	f108 0801 	add.w	r8, r8, #1
 802126a:	68e3      	ldr	r3, [r4, #12]
 802126c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802126e:	1a5b      	subs	r3, r3, r1
 8021270:	4543      	cmp	r3, r8
 8021272:	dcf0      	bgt.n	8021256 <_printf_float+0x42e>
 8021274:	e6fd      	b.n	8021072 <_printf_float+0x24a>
 8021276:	f04f 0800 	mov.w	r8, #0
 802127a:	f104 0919 	add.w	r9, r4, #25
 802127e:	e7f4      	b.n	802126a <_printf_float+0x442>

08021280 <_printf_common>:
 8021280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021284:	4616      	mov	r6, r2
 8021286:	4698      	mov	r8, r3
 8021288:	688a      	ldr	r2, [r1, #8]
 802128a:	690b      	ldr	r3, [r1, #16]
 802128c:	4607      	mov	r7, r0
 802128e:	4293      	cmp	r3, r2
 8021290:	bfb8      	it	lt
 8021292:	4613      	movlt	r3, r2
 8021294:	6033      	str	r3, [r6, #0]
 8021296:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802129a:	460c      	mov	r4, r1
 802129c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80212a0:	b10a      	cbz	r2, 80212a6 <_printf_common+0x26>
 80212a2:	3301      	adds	r3, #1
 80212a4:	6033      	str	r3, [r6, #0]
 80212a6:	6823      	ldr	r3, [r4, #0]
 80212a8:	0699      	lsls	r1, r3, #26
 80212aa:	bf42      	ittt	mi
 80212ac:	6833      	ldrmi	r3, [r6, #0]
 80212ae:	3302      	addmi	r3, #2
 80212b0:	6033      	strmi	r3, [r6, #0]
 80212b2:	6825      	ldr	r5, [r4, #0]
 80212b4:	f015 0506 	ands.w	r5, r5, #6
 80212b8:	d106      	bne.n	80212c8 <_printf_common+0x48>
 80212ba:	f104 0a19 	add.w	sl, r4, #25
 80212be:	68e3      	ldr	r3, [r4, #12]
 80212c0:	6832      	ldr	r2, [r6, #0]
 80212c2:	1a9b      	subs	r3, r3, r2
 80212c4:	42ab      	cmp	r3, r5
 80212c6:	dc2b      	bgt.n	8021320 <_printf_common+0xa0>
 80212c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80212cc:	6822      	ldr	r2, [r4, #0]
 80212ce:	3b00      	subs	r3, #0
 80212d0:	bf18      	it	ne
 80212d2:	2301      	movne	r3, #1
 80212d4:	0692      	lsls	r2, r2, #26
 80212d6:	d430      	bmi.n	802133a <_printf_common+0xba>
 80212d8:	4641      	mov	r1, r8
 80212da:	4638      	mov	r0, r7
 80212dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80212e0:	47c8      	blx	r9
 80212e2:	3001      	adds	r0, #1
 80212e4:	d023      	beq.n	802132e <_printf_common+0xae>
 80212e6:	6823      	ldr	r3, [r4, #0]
 80212e8:	6922      	ldr	r2, [r4, #16]
 80212ea:	f003 0306 	and.w	r3, r3, #6
 80212ee:	2b04      	cmp	r3, #4
 80212f0:	bf14      	ite	ne
 80212f2:	2500      	movne	r5, #0
 80212f4:	6833      	ldreq	r3, [r6, #0]
 80212f6:	f04f 0600 	mov.w	r6, #0
 80212fa:	bf08      	it	eq
 80212fc:	68e5      	ldreq	r5, [r4, #12]
 80212fe:	f104 041a 	add.w	r4, r4, #26
 8021302:	bf08      	it	eq
 8021304:	1aed      	subeq	r5, r5, r3
 8021306:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802130a:	bf08      	it	eq
 802130c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021310:	4293      	cmp	r3, r2
 8021312:	bfc4      	itt	gt
 8021314:	1a9b      	subgt	r3, r3, r2
 8021316:	18ed      	addgt	r5, r5, r3
 8021318:	42b5      	cmp	r5, r6
 802131a:	d11a      	bne.n	8021352 <_printf_common+0xd2>
 802131c:	2000      	movs	r0, #0
 802131e:	e008      	b.n	8021332 <_printf_common+0xb2>
 8021320:	2301      	movs	r3, #1
 8021322:	4652      	mov	r2, sl
 8021324:	4641      	mov	r1, r8
 8021326:	4638      	mov	r0, r7
 8021328:	47c8      	blx	r9
 802132a:	3001      	adds	r0, #1
 802132c:	d103      	bne.n	8021336 <_printf_common+0xb6>
 802132e:	f04f 30ff 	mov.w	r0, #4294967295
 8021332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021336:	3501      	adds	r5, #1
 8021338:	e7c1      	b.n	80212be <_printf_common+0x3e>
 802133a:	2030      	movs	r0, #48	@ 0x30
 802133c:	18e1      	adds	r1, r4, r3
 802133e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021342:	1c5a      	adds	r2, r3, #1
 8021344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021348:	4422      	add	r2, r4
 802134a:	3302      	adds	r3, #2
 802134c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021350:	e7c2      	b.n	80212d8 <_printf_common+0x58>
 8021352:	2301      	movs	r3, #1
 8021354:	4622      	mov	r2, r4
 8021356:	4641      	mov	r1, r8
 8021358:	4638      	mov	r0, r7
 802135a:	47c8      	blx	r9
 802135c:	3001      	adds	r0, #1
 802135e:	d0e6      	beq.n	802132e <_printf_common+0xae>
 8021360:	3601      	adds	r6, #1
 8021362:	e7d9      	b.n	8021318 <_printf_common+0x98>

08021364 <_printf_i>:
 8021364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021368:	7e0f      	ldrb	r7, [r1, #24]
 802136a:	4691      	mov	r9, r2
 802136c:	2f78      	cmp	r7, #120	@ 0x78
 802136e:	4680      	mov	r8, r0
 8021370:	460c      	mov	r4, r1
 8021372:	469a      	mov	sl, r3
 8021374:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802137a:	d807      	bhi.n	802138c <_printf_i+0x28>
 802137c:	2f62      	cmp	r7, #98	@ 0x62
 802137e:	d80a      	bhi.n	8021396 <_printf_i+0x32>
 8021380:	2f00      	cmp	r7, #0
 8021382:	f000 80d1 	beq.w	8021528 <_printf_i+0x1c4>
 8021386:	2f58      	cmp	r7, #88	@ 0x58
 8021388:	f000 80b8 	beq.w	80214fc <_printf_i+0x198>
 802138c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021394:	e03a      	b.n	802140c <_printf_i+0xa8>
 8021396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802139a:	2b15      	cmp	r3, #21
 802139c:	d8f6      	bhi.n	802138c <_printf_i+0x28>
 802139e:	a101      	add	r1, pc, #4	@ (adr r1, 80213a4 <_printf_i+0x40>)
 80213a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80213a4:	080213fd 	.word	0x080213fd
 80213a8:	08021411 	.word	0x08021411
 80213ac:	0802138d 	.word	0x0802138d
 80213b0:	0802138d 	.word	0x0802138d
 80213b4:	0802138d 	.word	0x0802138d
 80213b8:	0802138d 	.word	0x0802138d
 80213bc:	08021411 	.word	0x08021411
 80213c0:	0802138d 	.word	0x0802138d
 80213c4:	0802138d 	.word	0x0802138d
 80213c8:	0802138d 	.word	0x0802138d
 80213cc:	0802138d 	.word	0x0802138d
 80213d0:	0802150f 	.word	0x0802150f
 80213d4:	0802143b 	.word	0x0802143b
 80213d8:	080214c9 	.word	0x080214c9
 80213dc:	0802138d 	.word	0x0802138d
 80213e0:	0802138d 	.word	0x0802138d
 80213e4:	08021531 	.word	0x08021531
 80213e8:	0802138d 	.word	0x0802138d
 80213ec:	0802143b 	.word	0x0802143b
 80213f0:	0802138d 	.word	0x0802138d
 80213f4:	0802138d 	.word	0x0802138d
 80213f8:	080214d1 	.word	0x080214d1
 80213fc:	6833      	ldr	r3, [r6, #0]
 80213fe:	1d1a      	adds	r2, r3, #4
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	6032      	str	r2, [r6, #0]
 8021404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802140c:	2301      	movs	r3, #1
 802140e:	e09c      	b.n	802154a <_printf_i+0x1e6>
 8021410:	6833      	ldr	r3, [r6, #0]
 8021412:	6820      	ldr	r0, [r4, #0]
 8021414:	1d19      	adds	r1, r3, #4
 8021416:	6031      	str	r1, [r6, #0]
 8021418:	0606      	lsls	r6, r0, #24
 802141a:	d501      	bpl.n	8021420 <_printf_i+0xbc>
 802141c:	681d      	ldr	r5, [r3, #0]
 802141e:	e003      	b.n	8021428 <_printf_i+0xc4>
 8021420:	0645      	lsls	r5, r0, #25
 8021422:	d5fb      	bpl.n	802141c <_printf_i+0xb8>
 8021424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021428:	2d00      	cmp	r5, #0
 802142a:	da03      	bge.n	8021434 <_printf_i+0xd0>
 802142c:	232d      	movs	r3, #45	@ 0x2d
 802142e:	426d      	negs	r5, r5
 8021430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021434:	230a      	movs	r3, #10
 8021436:	4858      	ldr	r0, [pc, #352]	@ (8021598 <_printf_i+0x234>)
 8021438:	e011      	b.n	802145e <_printf_i+0xfa>
 802143a:	6821      	ldr	r1, [r4, #0]
 802143c:	6833      	ldr	r3, [r6, #0]
 802143e:	0608      	lsls	r0, r1, #24
 8021440:	f853 5b04 	ldr.w	r5, [r3], #4
 8021444:	d402      	bmi.n	802144c <_printf_i+0xe8>
 8021446:	0649      	lsls	r1, r1, #25
 8021448:	bf48      	it	mi
 802144a:	b2ad      	uxthmi	r5, r5
 802144c:	2f6f      	cmp	r7, #111	@ 0x6f
 802144e:	6033      	str	r3, [r6, #0]
 8021450:	bf14      	ite	ne
 8021452:	230a      	movne	r3, #10
 8021454:	2308      	moveq	r3, #8
 8021456:	4850      	ldr	r0, [pc, #320]	@ (8021598 <_printf_i+0x234>)
 8021458:	2100      	movs	r1, #0
 802145a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802145e:	6866      	ldr	r6, [r4, #4]
 8021460:	2e00      	cmp	r6, #0
 8021462:	60a6      	str	r6, [r4, #8]
 8021464:	db05      	blt.n	8021472 <_printf_i+0x10e>
 8021466:	6821      	ldr	r1, [r4, #0]
 8021468:	432e      	orrs	r6, r5
 802146a:	f021 0104 	bic.w	r1, r1, #4
 802146e:	6021      	str	r1, [r4, #0]
 8021470:	d04b      	beq.n	802150a <_printf_i+0x1a6>
 8021472:	4616      	mov	r6, r2
 8021474:	fbb5 f1f3 	udiv	r1, r5, r3
 8021478:	fb03 5711 	mls	r7, r3, r1, r5
 802147c:	5dc7      	ldrb	r7, [r0, r7]
 802147e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021482:	462f      	mov	r7, r5
 8021484:	42bb      	cmp	r3, r7
 8021486:	460d      	mov	r5, r1
 8021488:	d9f4      	bls.n	8021474 <_printf_i+0x110>
 802148a:	2b08      	cmp	r3, #8
 802148c:	d10b      	bne.n	80214a6 <_printf_i+0x142>
 802148e:	6823      	ldr	r3, [r4, #0]
 8021490:	07df      	lsls	r7, r3, #31
 8021492:	d508      	bpl.n	80214a6 <_printf_i+0x142>
 8021494:	6923      	ldr	r3, [r4, #16]
 8021496:	6861      	ldr	r1, [r4, #4]
 8021498:	4299      	cmp	r1, r3
 802149a:	bfde      	ittt	le
 802149c:	2330      	movle	r3, #48	@ 0x30
 802149e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80214a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80214a6:	1b92      	subs	r2, r2, r6
 80214a8:	6122      	str	r2, [r4, #16]
 80214aa:	464b      	mov	r3, r9
 80214ac:	4621      	mov	r1, r4
 80214ae:	4640      	mov	r0, r8
 80214b0:	f8cd a000 	str.w	sl, [sp]
 80214b4:	aa03      	add	r2, sp, #12
 80214b6:	f7ff fee3 	bl	8021280 <_printf_common>
 80214ba:	3001      	adds	r0, #1
 80214bc:	d14a      	bne.n	8021554 <_printf_i+0x1f0>
 80214be:	f04f 30ff 	mov.w	r0, #4294967295
 80214c2:	b004      	add	sp, #16
 80214c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214c8:	6823      	ldr	r3, [r4, #0]
 80214ca:	f043 0320 	orr.w	r3, r3, #32
 80214ce:	6023      	str	r3, [r4, #0]
 80214d0:	2778      	movs	r7, #120	@ 0x78
 80214d2:	4832      	ldr	r0, [pc, #200]	@ (802159c <_printf_i+0x238>)
 80214d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80214d8:	6823      	ldr	r3, [r4, #0]
 80214da:	6831      	ldr	r1, [r6, #0]
 80214dc:	061f      	lsls	r7, r3, #24
 80214de:	f851 5b04 	ldr.w	r5, [r1], #4
 80214e2:	d402      	bmi.n	80214ea <_printf_i+0x186>
 80214e4:	065f      	lsls	r7, r3, #25
 80214e6:	bf48      	it	mi
 80214e8:	b2ad      	uxthmi	r5, r5
 80214ea:	6031      	str	r1, [r6, #0]
 80214ec:	07d9      	lsls	r1, r3, #31
 80214ee:	bf44      	itt	mi
 80214f0:	f043 0320 	orrmi.w	r3, r3, #32
 80214f4:	6023      	strmi	r3, [r4, #0]
 80214f6:	b11d      	cbz	r5, 8021500 <_printf_i+0x19c>
 80214f8:	2310      	movs	r3, #16
 80214fa:	e7ad      	b.n	8021458 <_printf_i+0xf4>
 80214fc:	4826      	ldr	r0, [pc, #152]	@ (8021598 <_printf_i+0x234>)
 80214fe:	e7e9      	b.n	80214d4 <_printf_i+0x170>
 8021500:	6823      	ldr	r3, [r4, #0]
 8021502:	f023 0320 	bic.w	r3, r3, #32
 8021506:	6023      	str	r3, [r4, #0]
 8021508:	e7f6      	b.n	80214f8 <_printf_i+0x194>
 802150a:	4616      	mov	r6, r2
 802150c:	e7bd      	b.n	802148a <_printf_i+0x126>
 802150e:	6833      	ldr	r3, [r6, #0]
 8021510:	6825      	ldr	r5, [r4, #0]
 8021512:	1d18      	adds	r0, r3, #4
 8021514:	6961      	ldr	r1, [r4, #20]
 8021516:	6030      	str	r0, [r6, #0]
 8021518:	062e      	lsls	r6, r5, #24
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	d501      	bpl.n	8021522 <_printf_i+0x1be>
 802151e:	6019      	str	r1, [r3, #0]
 8021520:	e002      	b.n	8021528 <_printf_i+0x1c4>
 8021522:	0668      	lsls	r0, r5, #25
 8021524:	d5fb      	bpl.n	802151e <_printf_i+0x1ba>
 8021526:	8019      	strh	r1, [r3, #0]
 8021528:	2300      	movs	r3, #0
 802152a:	4616      	mov	r6, r2
 802152c:	6123      	str	r3, [r4, #16]
 802152e:	e7bc      	b.n	80214aa <_printf_i+0x146>
 8021530:	6833      	ldr	r3, [r6, #0]
 8021532:	2100      	movs	r1, #0
 8021534:	1d1a      	adds	r2, r3, #4
 8021536:	6032      	str	r2, [r6, #0]
 8021538:	681e      	ldr	r6, [r3, #0]
 802153a:	6862      	ldr	r2, [r4, #4]
 802153c:	4630      	mov	r0, r6
 802153e:	f000 fb8e 	bl	8021c5e <memchr>
 8021542:	b108      	cbz	r0, 8021548 <_printf_i+0x1e4>
 8021544:	1b80      	subs	r0, r0, r6
 8021546:	6060      	str	r0, [r4, #4]
 8021548:	6863      	ldr	r3, [r4, #4]
 802154a:	6123      	str	r3, [r4, #16]
 802154c:	2300      	movs	r3, #0
 802154e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021552:	e7aa      	b.n	80214aa <_printf_i+0x146>
 8021554:	4632      	mov	r2, r6
 8021556:	4649      	mov	r1, r9
 8021558:	4640      	mov	r0, r8
 802155a:	6923      	ldr	r3, [r4, #16]
 802155c:	47d0      	blx	sl
 802155e:	3001      	adds	r0, #1
 8021560:	d0ad      	beq.n	80214be <_printf_i+0x15a>
 8021562:	6823      	ldr	r3, [r4, #0]
 8021564:	079b      	lsls	r3, r3, #30
 8021566:	d413      	bmi.n	8021590 <_printf_i+0x22c>
 8021568:	68e0      	ldr	r0, [r4, #12]
 802156a:	9b03      	ldr	r3, [sp, #12]
 802156c:	4298      	cmp	r0, r3
 802156e:	bfb8      	it	lt
 8021570:	4618      	movlt	r0, r3
 8021572:	e7a6      	b.n	80214c2 <_printf_i+0x15e>
 8021574:	2301      	movs	r3, #1
 8021576:	4632      	mov	r2, r6
 8021578:	4649      	mov	r1, r9
 802157a:	4640      	mov	r0, r8
 802157c:	47d0      	blx	sl
 802157e:	3001      	adds	r0, #1
 8021580:	d09d      	beq.n	80214be <_printf_i+0x15a>
 8021582:	3501      	adds	r5, #1
 8021584:	68e3      	ldr	r3, [r4, #12]
 8021586:	9903      	ldr	r1, [sp, #12]
 8021588:	1a5b      	subs	r3, r3, r1
 802158a:	42ab      	cmp	r3, r5
 802158c:	dcf2      	bgt.n	8021574 <_printf_i+0x210>
 802158e:	e7eb      	b.n	8021568 <_printf_i+0x204>
 8021590:	2500      	movs	r5, #0
 8021592:	f104 0619 	add.w	r6, r4, #25
 8021596:	e7f5      	b.n	8021584 <_printf_i+0x220>
 8021598:	080306e1 	.word	0x080306e1
 802159c:	080306f2 	.word	0x080306f2

080215a0 <std>:
 80215a0:	2300      	movs	r3, #0
 80215a2:	b510      	push	{r4, lr}
 80215a4:	4604      	mov	r4, r0
 80215a6:	e9c0 3300 	strd	r3, r3, [r0]
 80215aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80215ae:	6083      	str	r3, [r0, #8]
 80215b0:	8181      	strh	r1, [r0, #12]
 80215b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80215b4:	81c2      	strh	r2, [r0, #14]
 80215b6:	6183      	str	r3, [r0, #24]
 80215b8:	4619      	mov	r1, r3
 80215ba:	2208      	movs	r2, #8
 80215bc:	305c      	adds	r0, #92	@ 0x5c
 80215be:	f000 fa87 	bl	8021ad0 <memset>
 80215c2:	4b0d      	ldr	r3, [pc, #52]	@ (80215f8 <std+0x58>)
 80215c4:	6224      	str	r4, [r4, #32]
 80215c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80215c8:	4b0c      	ldr	r3, [pc, #48]	@ (80215fc <std+0x5c>)
 80215ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80215cc:	4b0c      	ldr	r3, [pc, #48]	@ (8021600 <std+0x60>)
 80215ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80215d0:	4b0c      	ldr	r3, [pc, #48]	@ (8021604 <std+0x64>)
 80215d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80215d4:	4b0c      	ldr	r3, [pc, #48]	@ (8021608 <std+0x68>)
 80215d6:	429c      	cmp	r4, r3
 80215d8:	d006      	beq.n	80215e8 <std+0x48>
 80215da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80215de:	4294      	cmp	r4, r2
 80215e0:	d002      	beq.n	80215e8 <std+0x48>
 80215e2:	33d0      	adds	r3, #208	@ 0xd0
 80215e4:	429c      	cmp	r4, r3
 80215e6:	d105      	bne.n	80215f4 <std+0x54>
 80215e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80215ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215f0:	f000 bb32 	b.w	8021c58 <__retarget_lock_init_recursive>
 80215f4:	bd10      	pop	{r4, pc}
 80215f6:	bf00      	nop
 80215f8:	080218c9 	.word	0x080218c9
 80215fc:	080218ef 	.word	0x080218ef
 8021600:	08021927 	.word	0x08021927
 8021604:	0802194b 	.word	0x0802194b
 8021608:	2000bf5c 	.word	0x2000bf5c

0802160c <stdio_exit_handler>:
 802160c:	4a02      	ldr	r2, [pc, #8]	@ (8021618 <stdio_exit_handler+0xc>)
 802160e:	4903      	ldr	r1, [pc, #12]	@ (802161c <stdio_exit_handler+0x10>)
 8021610:	4803      	ldr	r0, [pc, #12]	@ (8021620 <stdio_exit_handler+0x14>)
 8021612:	f000 b869 	b.w	80216e8 <_fwalk_sglue>
 8021616:	bf00      	nop
 8021618:	20000120 	.word	0x20000120
 802161c:	08023ee5 	.word	0x08023ee5
 8021620:	20000130 	.word	0x20000130

08021624 <cleanup_stdio>:
 8021624:	6841      	ldr	r1, [r0, #4]
 8021626:	4b0c      	ldr	r3, [pc, #48]	@ (8021658 <cleanup_stdio+0x34>)
 8021628:	b510      	push	{r4, lr}
 802162a:	4299      	cmp	r1, r3
 802162c:	4604      	mov	r4, r0
 802162e:	d001      	beq.n	8021634 <cleanup_stdio+0x10>
 8021630:	f002 fc58 	bl	8023ee4 <_fflush_r>
 8021634:	68a1      	ldr	r1, [r4, #8]
 8021636:	4b09      	ldr	r3, [pc, #36]	@ (802165c <cleanup_stdio+0x38>)
 8021638:	4299      	cmp	r1, r3
 802163a:	d002      	beq.n	8021642 <cleanup_stdio+0x1e>
 802163c:	4620      	mov	r0, r4
 802163e:	f002 fc51 	bl	8023ee4 <_fflush_r>
 8021642:	68e1      	ldr	r1, [r4, #12]
 8021644:	4b06      	ldr	r3, [pc, #24]	@ (8021660 <cleanup_stdio+0x3c>)
 8021646:	4299      	cmp	r1, r3
 8021648:	d004      	beq.n	8021654 <cleanup_stdio+0x30>
 802164a:	4620      	mov	r0, r4
 802164c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021650:	f002 bc48 	b.w	8023ee4 <_fflush_r>
 8021654:	bd10      	pop	{r4, pc}
 8021656:	bf00      	nop
 8021658:	2000bf5c 	.word	0x2000bf5c
 802165c:	2000bfc4 	.word	0x2000bfc4
 8021660:	2000c02c 	.word	0x2000c02c

08021664 <global_stdio_init.part.0>:
 8021664:	b510      	push	{r4, lr}
 8021666:	4b0b      	ldr	r3, [pc, #44]	@ (8021694 <global_stdio_init.part.0+0x30>)
 8021668:	4c0b      	ldr	r4, [pc, #44]	@ (8021698 <global_stdio_init.part.0+0x34>)
 802166a:	4a0c      	ldr	r2, [pc, #48]	@ (802169c <global_stdio_init.part.0+0x38>)
 802166c:	4620      	mov	r0, r4
 802166e:	601a      	str	r2, [r3, #0]
 8021670:	2104      	movs	r1, #4
 8021672:	2200      	movs	r2, #0
 8021674:	f7ff ff94 	bl	80215a0 <std>
 8021678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802167c:	2201      	movs	r2, #1
 802167e:	2109      	movs	r1, #9
 8021680:	f7ff ff8e 	bl	80215a0 <std>
 8021684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021688:	2202      	movs	r2, #2
 802168a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802168e:	2112      	movs	r1, #18
 8021690:	f7ff bf86 	b.w	80215a0 <std>
 8021694:	2000c094 	.word	0x2000c094
 8021698:	2000bf5c 	.word	0x2000bf5c
 802169c:	0802160d 	.word	0x0802160d

080216a0 <__sfp_lock_acquire>:
 80216a0:	4801      	ldr	r0, [pc, #4]	@ (80216a8 <__sfp_lock_acquire+0x8>)
 80216a2:	f000 bada 	b.w	8021c5a <__retarget_lock_acquire_recursive>
 80216a6:	bf00      	nop
 80216a8:	2000c09d 	.word	0x2000c09d

080216ac <__sfp_lock_release>:
 80216ac:	4801      	ldr	r0, [pc, #4]	@ (80216b4 <__sfp_lock_release+0x8>)
 80216ae:	f000 bad5 	b.w	8021c5c <__retarget_lock_release_recursive>
 80216b2:	bf00      	nop
 80216b4:	2000c09d 	.word	0x2000c09d

080216b8 <__sinit>:
 80216b8:	b510      	push	{r4, lr}
 80216ba:	4604      	mov	r4, r0
 80216bc:	f7ff fff0 	bl	80216a0 <__sfp_lock_acquire>
 80216c0:	6a23      	ldr	r3, [r4, #32]
 80216c2:	b11b      	cbz	r3, 80216cc <__sinit+0x14>
 80216c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216c8:	f7ff bff0 	b.w	80216ac <__sfp_lock_release>
 80216cc:	4b04      	ldr	r3, [pc, #16]	@ (80216e0 <__sinit+0x28>)
 80216ce:	6223      	str	r3, [r4, #32]
 80216d0:	4b04      	ldr	r3, [pc, #16]	@ (80216e4 <__sinit+0x2c>)
 80216d2:	681b      	ldr	r3, [r3, #0]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d1f5      	bne.n	80216c4 <__sinit+0xc>
 80216d8:	f7ff ffc4 	bl	8021664 <global_stdio_init.part.0>
 80216dc:	e7f2      	b.n	80216c4 <__sinit+0xc>
 80216de:	bf00      	nop
 80216e0:	08021625 	.word	0x08021625
 80216e4:	2000c094 	.word	0x2000c094

080216e8 <_fwalk_sglue>:
 80216e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80216ec:	4607      	mov	r7, r0
 80216ee:	4688      	mov	r8, r1
 80216f0:	4614      	mov	r4, r2
 80216f2:	2600      	movs	r6, #0
 80216f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80216f8:	f1b9 0901 	subs.w	r9, r9, #1
 80216fc:	d505      	bpl.n	802170a <_fwalk_sglue+0x22>
 80216fe:	6824      	ldr	r4, [r4, #0]
 8021700:	2c00      	cmp	r4, #0
 8021702:	d1f7      	bne.n	80216f4 <_fwalk_sglue+0xc>
 8021704:	4630      	mov	r0, r6
 8021706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802170a:	89ab      	ldrh	r3, [r5, #12]
 802170c:	2b01      	cmp	r3, #1
 802170e:	d907      	bls.n	8021720 <_fwalk_sglue+0x38>
 8021710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021714:	3301      	adds	r3, #1
 8021716:	d003      	beq.n	8021720 <_fwalk_sglue+0x38>
 8021718:	4629      	mov	r1, r5
 802171a:	4638      	mov	r0, r7
 802171c:	47c0      	blx	r8
 802171e:	4306      	orrs	r6, r0
 8021720:	3568      	adds	r5, #104	@ 0x68
 8021722:	e7e9      	b.n	80216f8 <_fwalk_sglue+0x10>

08021724 <iprintf>:
 8021724:	b40f      	push	{r0, r1, r2, r3}
 8021726:	b507      	push	{r0, r1, r2, lr}
 8021728:	4906      	ldr	r1, [pc, #24]	@ (8021744 <iprintf+0x20>)
 802172a:	ab04      	add	r3, sp, #16
 802172c:	6808      	ldr	r0, [r1, #0]
 802172e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021732:	6881      	ldr	r1, [r0, #8]
 8021734:	9301      	str	r3, [sp, #4]
 8021736:	f002 f8f1 	bl	802391c <_vfiprintf_r>
 802173a:	b003      	add	sp, #12
 802173c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021740:	b004      	add	sp, #16
 8021742:	4770      	bx	lr
 8021744:	2000012c 	.word	0x2000012c

08021748 <_puts_r>:
 8021748:	6a03      	ldr	r3, [r0, #32]
 802174a:	b570      	push	{r4, r5, r6, lr}
 802174c:	4605      	mov	r5, r0
 802174e:	460e      	mov	r6, r1
 8021750:	6884      	ldr	r4, [r0, #8]
 8021752:	b90b      	cbnz	r3, 8021758 <_puts_r+0x10>
 8021754:	f7ff ffb0 	bl	80216b8 <__sinit>
 8021758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802175a:	07db      	lsls	r3, r3, #31
 802175c:	d405      	bmi.n	802176a <_puts_r+0x22>
 802175e:	89a3      	ldrh	r3, [r4, #12]
 8021760:	0598      	lsls	r0, r3, #22
 8021762:	d402      	bmi.n	802176a <_puts_r+0x22>
 8021764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021766:	f000 fa78 	bl	8021c5a <__retarget_lock_acquire_recursive>
 802176a:	89a3      	ldrh	r3, [r4, #12]
 802176c:	0719      	lsls	r1, r3, #28
 802176e:	d502      	bpl.n	8021776 <_puts_r+0x2e>
 8021770:	6923      	ldr	r3, [r4, #16]
 8021772:	2b00      	cmp	r3, #0
 8021774:	d135      	bne.n	80217e2 <_puts_r+0x9a>
 8021776:	4621      	mov	r1, r4
 8021778:	4628      	mov	r0, r5
 802177a:	f000 f929 	bl	80219d0 <__swsetup_r>
 802177e:	b380      	cbz	r0, 80217e2 <_puts_r+0x9a>
 8021780:	f04f 35ff 	mov.w	r5, #4294967295
 8021784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021786:	07da      	lsls	r2, r3, #31
 8021788:	d405      	bmi.n	8021796 <_puts_r+0x4e>
 802178a:	89a3      	ldrh	r3, [r4, #12]
 802178c:	059b      	lsls	r3, r3, #22
 802178e:	d402      	bmi.n	8021796 <_puts_r+0x4e>
 8021790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021792:	f000 fa63 	bl	8021c5c <__retarget_lock_release_recursive>
 8021796:	4628      	mov	r0, r5
 8021798:	bd70      	pop	{r4, r5, r6, pc}
 802179a:	2b00      	cmp	r3, #0
 802179c:	da04      	bge.n	80217a8 <_puts_r+0x60>
 802179e:	69a2      	ldr	r2, [r4, #24]
 80217a0:	429a      	cmp	r2, r3
 80217a2:	dc17      	bgt.n	80217d4 <_puts_r+0x8c>
 80217a4:	290a      	cmp	r1, #10
 80217a6:	d015      	beq.n	80217d4 <_puts_r+0x8c>
 80217a8:	6823      	ldr	r3, [r4, #0]
 80217aa:	1c5a      	adds	r2, r3, #1
 80217ac:	6022      	str	r2, [r4, #0]
 80217ae:	7019      	strb	r1, [r3, #0]
 80217b0:	68a3      	ldr	r3, [r4, #8]
 80217b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80217b6:	3b01      	subs	r3, #1
 80217b8:	60a3      	str	r3, [r4, #8]
 80217ba:	2900      	cmp	r1, #0
 80217bc:	d1ed      	bne.n	802179a <_puts_r+0x52>
 80217be:	2b00      	cmp	r3, #0
 80217c0:	da11      	bge.n	80217e6 <_puts_r+0x9e>
 80217c2:	4622      	mov	r2, r4
 80217c4:	210a      	movs	r1, #10
 80217c6:	4628      	mov	r0, r5
 80217c8:	f000 f8c3 	bl	8021952 <__swbuf_r>
 80217cc:	3001      	adds	r0, #1
 80217ce:	d0d7      	beq.n	8021780 <_puts_r+0x38>
 80217d0:	250a      	movs	r5, #10
 80217d2:	e7d7      	b.n	8021784 <_puts_r+0x3c>
 80217d4:	4622      	mov	r2, r4
 80217d6:	4628      	mov	r0, r5
 80217d8:	f000 f8bb 	bl	8021952 <__swbuf_r>
 80217dc:	3001      	adds	r0, #1
 80217de:	d1e7      	bne.n	80217b0 <_puts_r+0x68>
 80217e0:	e7ce      	b.n	8021780 <_puts_r+0x38>
 80217e2:	3e01      	subs	r6, #1
 80217e4:	e7e4      	b.n	80217b0 <_puts_r+0x68>
 80217e6:	6823      	ldr	r3, [r4, #0]
 80217e8:	1c5a      	adds	r2, r3, #1
 80217ea:	6022      	str	r2, [r4, #0]
 80217ec:	220a      	movs	r2, #10
 80217ee:	701a      	strb	r2, [r3, #0]
 80217f0:	e7ee      	b.n	80217d0 <_puts_r+0x88>
	...

080217f4 <puts>:
 80217f4:	4b02      	ldr	r3, [pc, #8]	@ (8021800 <puts+0xc>)
 80217f6:	4601      	mov	r1, r0
 80217f8:	6818      	ldr	r0, [r3, #0]
 80217fa:	f7ff bfa5 	b.w	8021748 <_puts_r>
 80217fe:	bf00      	nop
 8021800:	2000012c 	.word	0x2000012c

08021804 <sniprintf>:
 8021804:	b40c      	push	{r2, r3}
 8021806:	b530      	push	{r4, r5, lr}
 8021808:	4b18      	ldr	r3, [pc, #96]	@ (802186c <sniprintf+0x68>)
 802180a:	1e0c      	subs	r4, r1, #0
 802180c:	681d      	ldr	r5, [r3, #0]
 802180e:	b09d      	sub	sp, #116	@ 0x74
 8021810:	da08      	bge.n	8021824 <sniprintf+0x20>
 8021812:	238b      	movs	r3, #139	@ 0x8b
 8021814:	f04f 30ff 	mov.w	r0, #4294967295
 8021818:	602b      	str	r3, [r5, #0]
 802181a:	b01d      	add	sp, #116	@ 0x74
 802181c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021820:	b002      	add	sp, #8
 8021822:	4770      	bx	lr
 8021824:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021828:	f8ad 3014 	strh.w	r3, [sp, #20]
 802182c:	f04f 0300 	mov.w	r3, #0
 8021830:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021832:	bf0c      	ite	eq
 8021834:	4623      	moveq	r3, r4
 8021836:	f104 33ff 	addne.w	r3, r4, #4294967295
 802183a:	9304      	str	r3, [sp, #16]
 802183c:	9307      	str	r3, [sp, #28]
 802183e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021842:	9002      	str	r0, [sp, #8]
 8021844:	9006      	str	r0, [sp, #24]
 8021846:	f8ad 3016 	strh.w	r3, [sp, #22]
 802184a:	4628      	mov	r0, r5
 802184c:	ab21      	add	r3, sp, #132	@ 0x84
 802184e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021850:	a902      	add	r1, sp, #8
 8021852:	9301      	str	r3, [sp, #4]
 8021854:	f001 fd70 	bl	8023338 <_svfiprintf_r>
 8021858:	1c43      	adds	r3, r0, #1
 802185a:	bfbc      	itt	lt
 802185c:	238b      	movlt	r3, #139	@ 0x8b
 802185e:	602b      	strlt	r3, [r5, #0]
 8021860:	2c00      	cmp	r4, #0
 8021862:	d0da      	beq.n	802181a <sniprintf+0x16>
 8021864:	2200      	movs	r2, #0
 8021866:	9b02      	ldr	r3, [sp, #8]
 8021868:	701a      	strb	r2, [r3, #0]
 802186a:	e7d6      	b.n	802181a <sniprintf+0x16>
 802186c:	2000012c 	.word	0x2000012c

08021870 <siscanf>:
 8021870:	b40e      	push	{r1, r2, r3}
 8021872:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8021876:	b570      	push	{r4, r5, r6, lr}
 8021878:	2500      	movs	r5, #0
 802187a:	b09d      	sub	sp, #116	@ 0x74
 802187c:	ac21      	add	r4, sp, #132	@ 0x84
 802187e:	f854 6b04 	ldr.w	r6, [r4], #4
 8021882:	f8ad 2014 	strh.w	r2, [sp, #20]
 8021886:	951b      	str	r5, [sp, #108]	@ 0x6c
 8021888:	9002      	str	r0, [sp, #8]
 802188a:	9006      	str	r0, [sp, #24]
 802188c:	f7de fca6 	bl	80001dc <strlen>
 8021890:	4b0b      	ldr	r3, [pc, #44]	@ (80218c0 <siscanf+0x50>)
 8021892:	9003      	str	r0, [sp, #12]
 8021894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021896:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802189a:	9007      	str	r0, [sp, #28]
 802189c:	4809      	ldr	r0, [pc, #36]	@ (80218c4 <siscanf+0x54>)
 802189e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80218a2:	4632      	mov	r2, r6
 80218a4:	4623      	mov	r3, r4
 80218a6:	a902      	add	r1, sp, #8
 80218a8:	6800      	ldr	r0, [r0, #0]
 80218aa:	950f      	str	r5, [sp, #60]	@ 0x3c
 80218ac:	9514      	str	r5, [sp, #80]	@ 0x50
 80218ae:	9401      	str	r4, [sp, #4]
 80218b0:	f001 fe98 	bl	80235e4 <__ssvfiscanf_r>
 80218b4:	b01d      	add	sp, #116	@ 0x74
 80218b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80218ba:	b003      	add	sp, #12
 80218bc:	4770      	bx	lr
 80218be:	bf00      	nop
 80218c0:	080218eb 	.word	0x080218eb
 80218c4:	2000012c 	.word	0x2000012c

080218c8 <__sread>:
 80218c8:	b510      	push	{r4, lr}
 80218ca:	460c      	mov	r4, r1
 80218cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218d0:	f000 f974 	bl	8021bbc <_read_r>
 80218d4:	2800      	cmp	r0, #0
 80218d6:	bfab      	itete	ge
 80218d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80218da:	89a3      	ldrhlt	r3, [r4, #12]
 80218dc:	181b      	addge	r3, r3, r0
 80218de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80218e2:	bfac      	ite	ge
 80218e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80218e6:	81a3      	strhlt	r3, [r4, #12]
 80218e8:	bd10      	pop	{r4, pc}

080218ea <__seofread>:
 80218ea:	2000      	movs	r0, #0
 80218ec:	4770      	bx	lr

080218ee <__swrite>:
 80218ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218f2:	461f      	mov	r7, r3
 80218f4:	898b      	ldrh	r3, [r1, #12]
 80218f6:	4605      	mov	r5, r0
 80218f8:	05db      	lsls	r3, r3, #23
 80218fa:	460c      	mov	r4, r1
 80218fc:	4616      	mov	r6, r2
 80218fe:	d505      	bpl.n	802190c <__swrite+0x1e>
 8021900:	2302      	movs	r3, #2
 8021902:	2200      	movs	r2, #0
 8021904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021908:	f000 f946 	bl	8021b98 <_lseek_r>
 802190c:	89a3      	ldrh	r3, [r4, #12]
 802190e:	4632      	mov	r2, r6
 8021910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021914:	81a3      	strh	r3, [r4, #12]
 8021916:	4628      	mov	r0, r5
 8021918:	463b      	mov	r3, r7
 802191a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802191e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021922:	f000 b95d 	b.w	8021be0 <_write_r>

08021926 <__sseek>:
 8021926:	b510      	push	{r4, lr}
 8021928:	460c      	mov	r4, r1
 802192a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802192e:	f000 f933 	bl	8021b98 <_lseek_r>
 8021932:	1c43      	adds	r3, r0, #1
 8021934:	89a3      	ldrh	r3, [r4, #12]
 8021936:	bf15      	itete	ne
 8021938:	6560      	strne	r0, [r4, #84]	@ 0x54
 802193a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802193e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021942:	81a3      	strheq	r3, [r4, #12]
 8021944:	bf18      	it	ne
 8021946:	81a3      	strhne	r3, [r4, #12]
 8021948:	bd10      	pop	{r4, pc}

0802194a <__sclose>:
 802194a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802194e:	f000 b913 	b.w	8021b78 <_close_r>

08021952 <__swbuf_r>:
 8021952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021954:	460e      	mov	r6, r1
 8021956:	4614      	mov	r4, r2
 8021958:	4605      	mov	r5, r0
 802195a:	b118      	cbz	r0, 8021964 <__swbuf_r+0x12>
 802195c:	6a03      	ldr	r3, [r0, #32]
 802195e:	b90b      	cbnz	r3, 8021964 <__swbuf_r+0x12>
 8021960:	f7ff feaa 	bl	80216b8 <__sinit>
 8021964:	69a3      	ldr	r3, [r4, #24]
 8021966:	60a3      	str	r3, [r4, #8]
 8021968:	89a3      	ldrh	r3, [r4, #12]
 802196a:	071a      	lsls	r2, r3, #28
 802196c:	d501      	bpl.n	8021972 <__swbuf_r+0x20>
 802196e:	6923      	ldr	r3, [r4, #16]
 8021970:	b943      	cbnz	r3, 8021984 <__swbuf_r+0x32>
 8021972:	4621      	mov	r1, r4
 8021974:	4628      	mov	r0, r5
 8021976:	f000 f82b 	bl	80219d0 <__swsetup_r>
 802197a:	b118      	cbz	r0, 8021984 <__swbuf_r+0x32>
 802197c:	f04f 37ff 	mov.w	r7, #4294967295
 8021980:	4638      	mov	r0, r7
 8021982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021984:	6823      	ldr	r3, [r4, #0]
 8021986:	6922      	ldr	r2, [r4, #16]
 8021988:	b2f6      	uxtb	r6, r6
 802198a:	1a98      	subs	r0, r3, r2
 802198c:	6963      	ldr	r3, [r4, #20]
 802198e:	4637      	mov	r7, r6
 8021990:	4283      	cmp	r3, r0
 8021992:	dc05      	bgt.n	80219a0 <__swbuf_r+0x4e>
 8021994:	4621      	mov	r1, r4
 8021996:	4628      	mov	r0, r5
 8021998:	f002 faa4 	bl	8023ee4 <_fflush_r>
 802199c:	2800      	cmp	r0, #0
 802199e:	d1ed      	bne.n	802197c <__swbuf_r+0x2a>
 80219a0:	68a3      	ldr	r3, [r4, #8]
 80219a2:	3b01      	subs	r3, #1
 80219a4:	60a3      	str	r3, [r4, #8]
 80219a6:	6823      	ldr	r3, [r4, #0]
 80219a8:	1c5a      	adds	r2, r3, #1
 80219aa:	6022      	str	r2, [r4, #0]
 80219ac:	701e      	strb	r6, [r3, #0]
 80219ae:	6962      	ldr	r2, [r4, #20]
 80219b0:	1c43      	adds	r3, r0, #1
 80219b2:	429a      	cmp	r2, r3
 80219b4:	d004      	beq.n	80219c0 <__swbuf_r+0x6e>
 80219b6:	89a3      	ldrh	r3, [r4, #12]
 80219b8:	07db      	lsls	r3, r3, #31
 80219ba:	d5e1      	bpl.n	8021980 <__swbuf_r+0x2e>
 80219bc:	2e0a      	cmp	r6, #10
 80219be:	d1df      	bne.n	8021980 <__swbuf_r+0x2e>
 80219c0:	4621      	mov	r1, r4
 80219c2:	4628      	mov	r0, r5
 80219c4:	f002 fa8e 	bl	8023ee4 <_fflush_r>
 80219c8:	2800      	cmp	r0, #0
 80219ca:	d0d9      	beq.n	8021980 <__swbuf_r+0x2e>
 80219cc:	e7d6      	b.n	802197c <__swbuf_r+0x2a>
	...

080219d0 <__swsetup_r>:
 80219d0:	b538      	push	{r3, r4, r5, lr}
 80219d2:	4b29      	ldr	r3, [pc, #164]	@ (8021a78 <__swsetup_r+0xa8>)
 80219d4:	4605      	mov	r5, r0
 80219d6:	6818      	ldr	r0, [r3, #0]
 80219d8:	460c      	mov	r4, r1
 80219da:	b118      	cbz	r0, 80219e4 <__swsetup_r+0x14>
 80219dc:	6a03      	ldr	r3, [r0, #32]
 80219de:	b90b      	cbnz	r3, 80219e4 <__swsetup_r+0x14>
 80219e0:	f7ff fe6a 	bl	80216b8 <__sinit>
 80219e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80219e8:	0719      	lsls	r1, r3, #28
 80219ea:	d422      	bmi.n	8021a32 <__swsetup_r+0x62>
 80219ec:	06da      	lsls	r2, r3, #27
 80219ee:	d407      	bmi.n	8021a00 <__swsetup_r+0x30>
 80219f0:	2209      	movs	r2, #9
 80219f2:	602a      	str	r2, [r5, #0]
 80219f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80219f8:	f04f 30ff 	mov.w	r0, #4294967295
 80219fc:	81a3      	strh	r3, [r4, #12]
 80219fe:	e033      	b.n	8021a68 <__swsetup_r+0x98>
 8021a00:	0758      	lsls	r0, r3, #29
 8021a02:	d512      	bpl.n	8021a2a <__swsetup_r+0x5a>
 8021a04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021a06:	b141      	cbz	r1, 8021a1a <__swsetup_r+0x4a>
 8021a08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021a0c:	4299      	cmp	r1, r3
 8021a0e:	d002      	beq.n	8021a16 <__swsetup_r+0x46>
 8021a10:	4628      	mov	r0, r5
 8021a12:	f000 ffbd 	bl	8022990 <_free_r>
 8021a16:	2300      	movs	r3, #0
 8021a18:	6363      	str	r3, [r4, #52]	@ 0x34
 8021a1a:	89a3      	ldrh	r3, [r4, #12]
 8021a1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021a20:	81a3      	strh	r3, [r4, #12]
 8021a22:	2300      	movs	r3, #0
 8021a24:	6063      	str	r3, [r4, #4]
 8021a26:	6923      	ldr	r3, [r4, #16]
 8021a28:	6023      	str	r3, [r4, #0]
 8021a2a:	89a3      	ldrh	r3, [r4, #12]
 8021a2c:	f043 0308 	orr.w	r3, r3, #8
 8021a30:	81a3      	strh	r3, [r4, #12]
 8021a32:	6923      	ldr	r3, [r4, #16]
 8021a34:	b94b      	cbnz	r3, 8021a4a <__swsetup_r+0x7a>
 8021a36:	89a3      	ldrh	r3, [r4, #12]
 8021a38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021a40:	d003      	beq.n	8021a4a <__swsetup_r+0x7a>
 8021a42:	4621      	mov	r1, r4
 8021a44:	4628      	mov	r0, r5
 8021a46:	f002 faac 	bl	8023fa2 <__smakebuf_r>
 8021a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a4e:	f013 0201 	ands.w	r2, r3, #1
 8021a52:	d00a      	beq.n	8021a6a <__swsetup_r+0x9a>
 8021a54:	2200      	movs	r2, #0
 8021a56:	60a2      	str	r2, [r4, #8]
 8021a58:	6962      	ldr	r2, [r4, #20]
 8021a5a:	4252      	negs	r2, r2
 8021a5c:	61a2      	str	r2, [r4, #24]
 8021a5e:	6922      	ldr	r2, [r4, #16]
 8021a60:	b942      	cbnz	r2, 8021a74 <__swsetup_r+0xa4>
 8021a62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021a66:	d1c5      	bne.n	80219f4 <__swsetup_r+0x24>
 8021a68:	bd38      	pop	{r3, r4, r5, pc}
 8021a6a:	0799      	lsls	r1, r3, #30
 8021a6c:	bf58      	it	pl
 8021a6e:	6962      	ldrpl	r2, [r4, #20]
 8021a70:	60a2      	str	r2, [r4, #8]
 8021a72:	e7f4      	b.n	8021a5e <__swsetup_r+0x8e>
 8021a74:	2000      	movs	r0, #0
 8021a76:	e7f7      	b.n	8021a68 <__swsetup_r+0x98>
 8021a78:	2000012c 	.word	0x2000012c

08021a7c <memcmp>:
 8021a7c:	b510      	push	{r4, lr}
 8021a7e:	3901      	subs	r1, #1
 8021a80:	4402      	add	r2, r0
 8021a82:	4290      	cmp	r0, r2
 8021a84:	d101      	bne.n	8021a8a <memcmp+0xe>
 8021a86:	2000      	movs	r0, #0
 8021a88:	e005      	b.n	8021a96 <memcmp+0x1a>
 8021a8a:	7803      	ldrb	r3, [r0, #0]
 8021a8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021a90:	42a3      	cmp	r3, r4
 8021a92:	d001      	beq.n	8021a98 <memcmp+0x1c>
 8021a94:	1b18      	subs	r0, r3, r4
 8021a96:	bd10      	pop	{r4, pc}
 8021a98:	3001      	adds	r0, #1
 8021a9a:	e7f2      	b.n	8021a82 <memcmp+0x6>

08021a9c <memmove>:
 8021a9c:	4288      	cmp	r0, r1
 8021a9e:	b510      	push	{r4, lr}
 8021aa0:	eb01 0402 	add.w	r4, r1, r2
 8021aa4:	d902      	bls.n	8021aac <memmove+0x10>
 8021aa6:	4284      	cmp	r4, r0
 8021aa8:	4623      	mov	r3, r4
 8021aaa:	d807      	bhi.n	8021abc <memmove+0x20>
 8021aac:	1e43      	subs	r3, r0, #1
 8021aae:	42a1      	cmp	r1, r4
 8021ab0:	d008      	beq.n	8021ac4 <memmove+0x28>
 8021ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021aba:	e7f8      	b.n	8021aae <memmove+0x12>
 8021abc:	4601      	mov	r1, r0
 8021abe:	4402      	add	r2, r0
 8021ac0:	428a      	cmp	r2, r1
 8021ac2:	d100      	bne.n	8021ac6 <memmove+0x2a>
 8021ac4:	bd10      	pop	{r4, pc}
 8021ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021ace:	e7f7      	b.n	8021ac0 <memmove+0x24>

08021ad0 <memset>:
 8021ad0:	4603      	mov	r3, r0
 8021ad2:	4402      	add	r2, r0
 8021ad4:	4293      	cmp	r3, r2
 8021ad6:	d100      	bne.n	8021ada <memset+0xa>
 8021ad8:	4770      	bx	lr
 8021ada:	f803 1b01 	strb.w	r1, [r3], #1
 8021ade:	e7f9      	b.n	8021ad4 <memset+0x4>

08021ae0 <strchr>:
 8021ae0:	4603      	mov	r3, r0
 8021ae2:	b2c9      	uxtb	r1, r1
 8021ae4:	4618      	mov	r0, r3
 8021ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021aea:	b112      	cbz	r2, 8021af2 <strchr+0x12>
 8021aec:	428a      	cmp	r2, r1
 8021aee:	d1f9      	bne.n	8021ae4 <strchr+0x4>
 8021af0:	4770      	bx	lr
 8021af2:	2900      	cmp	r1, #0
 8021af4:	bf18      	it	ne
 8021af6:	2000      	movne	r0, #0
 8021af8:	4770      	bx	lr

08021afa <strncmp>:
 8021afa:	b510      	push	{r4, lr}
 8021afc:	b16a      	cbz	r2, 8021b1a <strncmp+0x20>
 8021afe:	3901      	subs	r1, #1
 8021b00:	1884      	adds	r4, r0, r2
 8021b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021b0a:	429a      	cmp	r2, r3
 8021b0c:	d103      	bne.n	8021b16 <strncmp+0x1c>
 8021b0e:	42a0      	cmp	r0, r4
 8021b10:	d001      	beq.n	8021b16 <strncmp+0x1c>
 8021b12:	2a00      	cmp	r2, #0
 8021b14:	d1f5      	bne.n	8021b02 <strncmp+0x8>
 8021b16:	1ad0      	subs	r0, r2, r3
 8021b18:	bd10      	pop	{r4, pc}
 8021b1a:	4610      	mov	r0, r2
 8021b1c:	e7fc      	b.n	8021b18 <strncmp+0x1e>

08021b1e <strncpy>:
 8021b1e:	4603      	mov	r3, r0
 8021b20:	b510      	push	{r4, lr}
 8021b22:	3901      	subs	r1, #1
 8021b24:	b132      	cbz	r2, 8021b34 <strncpy+0x16>
 8021b26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021b2a:	3a01      	subs	r2, #1
 8021b2c:	f803 4b01 	strb.w	r4, [r3], #1
 8021b30:	2c00      	cmp	r4, #0
 8021b32:	d1f7      	bne.n	8021b24 <strncpy+0x6>
 8021b34:	2100      	movs	r1, #0
 8021b36:	441a      	add	r2, r3
 8021b38:	4293      	cmp	r3, r2
 8021b3a:	d100      	bne.n	8021b3e <strncpy+0x20>
 8021b3c:	bd10      	pop	{r4, pc}
 8021b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8021b42:	e7f9      	b.n	8021b38 <strncpy+0x1a>

08021b44 <strstr>:
 8021b44:	780a      	ldrb	r2, [r1, #0]
 8021b46:	b570      	push	{r4, r5, r6, lr}
 8021b48:	b96a      	cbnz	r2, 8021b66 <strstr+0x22>
 8021b4a:	bd70      	pop	{r4, r5, r6, pc}
 8021b4c:	429a      	cmp	r2, r3
 8021b4e:	d109      	bne.n	8021b64 <strstr+0x20>
 8021b50:	460c      	mov	r4, r1
 8021b52:	4605      	mov	r5, r0
 8021b54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8021b58:	2b00      	cmp	r3, #0
 8021b5a:	d0f6      	beq.n	8021b4a <strstr+0x6>
 8021b5c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021b60:	429e      	cmp	r6, r3
 8021b62:	d0f7      	beq.n	8021b54 <strstr+0x10>
 8021b64:	3001      	adds	r0, #1
 8021b66:	7803      	ldrb	r3, [r0, #0]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d1ef      	bne.n	8021b4c <strstr+0x8>
 8021b6c:	4618      	mov	r0, r3
 8021b6e:	e7ec      	b.n	8021b4a <strstr+0x6>

08021b70 <_localeconv_r>:
 8021b70:	4800      	ldr	r0, [pc, #0]	@ (8021b74 <_localeconv_r+0x4>)
 8021b72:	4770      	bx	lr
 8021b74:	2000026c 	.word	0x2000026c

08021b78 <_close_r>:
 8021b78:	b538      	push	{r3, r4, r5, lr}
 8021b7a:	2300      	movs	r3, #0
 8021b7c:	4d05      	ldr	r5, [pc, #20]	@ (8021b94 <_close_r+0x1c>)
 8021b7e:	4604      	mov	r4, r0
 8021b80:	4608      	mov	r0, r1
 8021b82:	602b      	str	r3, [r5, #0]
 8021b84:	f7e2 f998 	bl	8003eb8 <_close>
 8021b88:	1c43      	adds	r3, r0, #1
 8021b8a:	d102      	bne.n	8021b92 <_close_r+0x1a>
 8021b8c:	682b      	ldr	r3, [r5, #0]
 8021b8e:	b103      	cbz	r3, 8021b92 <_close_r+0x1a>
 8021b90:	6023      	str	r3, [r4, #0]
 8021b92:	bd38      	pop	{r3, r4, r5, pc}
 8021b94:	2000c098 	.word	0x2000c098

08021b98 <_lseek_r>:
 8021b98:	b538      	push	{r3, r4, r5, lr}
 8021b9a:	4604      	mov	r4, r0
 8021b9c:	4608      	mov	r0, r1
 8021b9e:	4611      	mov	r1, r2
 8021ba0:	2200      	movs	r2, #0
 8021ba2:	4d05      	ldr	r5, [pc, #20]	@ (8021bb8 <_lseek_r+0x20>)
 8021ba4:	602a      	str	r2, [r5, #0]
 8021ba6:	461a      	mov	r2, r3
 8021ba8:	f7e2 f9aa 	bl	8003f00 <_lseek>
 8021bac:	1c43      	adds	r3, r0, #1
 8021bae:	d102      	bne.n	8021bb6 <_lseek_r+0x1e>
 8021bb0:	682b      	ldr	r3, [r5, #0]
 8021bb2:	b103      	cbz	r3, 8021bb6 <_lseek_r+0x1e>
 8021bb4:	6023      	str	r3, [r4, #0]
 8021bb6:	bd38      	pop	{r3, r4, r5, pc}
 8021bb8:	2000c098 	.word	0x2000c098

08021bbc <_read_r>:
 8021bbc:	b538      	push	{r3, r4, r5, lr}
 8021bbe:	4604      	mov	r4, r0
 8021bc0:	4608      	mov	r0, r1
 8021bc2:	4611      	mov	r1, r2
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	4d05      	ldr	r5, [pc, #20]	@ (8021bdc <_read_r+0x20>)
 8021bc8:	602a      	str	r2, [r5, #0]
 8021bca:	461a      	mov	r2, r3
 8021bcc:	f7e2 f93b 	bl	8003e46 <_read>
 8021bd0:	1c43      	adds	r3, r0, #1
 8021bd2:	d102      	bne.n	8021bda <_read_r+0x1e>
 8021bd4:	682b      	ldr	r3, [r5, #0]
 8021bd6:	b103      	cbz	r3, 8021bda <_read_r+0x1e>
 8021bd8:	6023      	str	r3, [r4, #0]
 8021bda:	bd38      	pop	{r3, r4, r5, pc}
 8021bdc:	2000c098 	.word	0x2000c098

08021be0 <_write_r>:
 8021be0:	b538      	push	{r3, r4, r5, lr}
 8021be2:	4604      	mov	r4, r0
 8021be4:	4608      	mov	r0, r1
 8021be6:	4611      	mov	r1, r2
 8021be8:	2200      	movs	r2, #0
 8021bea:	4d05      	ldr	r5, [pc, #20]	@ (8021c00 <_write_r+0x20>)
 8021bec:	602a      	str	r2, [r5, #0]
 8021bee:	461a      	mov	r2, r3
 8021bf0:	f7e2 f946 	bl	8003e80 <_write>
 8021bf4:	1c43      	adds	r3, r0, #1
 8021bf6:	d102      	bne.n	8021bfe <_write_r+0x1e>
 8021bf8:	682b      	ldr	r3, [r5, #0]
 8021bfa:	b103      	cbz	r3, 8021bfe <_write_r+0x1e>
 8021bfc:	6023      	str	r3, [r4, #0]
 8021bfe:	bd38      	pop	{r3, r4, r5, pc}
 8021c00:	2000c098 	.word	0x2000c098

08021c04 <__errno>:
 8021c04:	4b01      	ldr	r3, [pc, #4]	@ (8021c0c <__errno+0x8>)
 8021c06:	6818      	ldr	r0, [r3, #0]
 8021c08:	4770      	bx	lr
 8021c0a:	bf00      	nop
 8021c0c:	2000012c 	.word	0x2000012c

08021c10 <__libc_init_array>:
 8021c10:	b570      	push	{r4, r5, r6, lr}
 8021c12:	2600      	movs	r6, #0
 8021c14:	4d0c      	ldr	r5, [pc, #48]	@ (8021c48 <__libc_init_array+0x38>)
 8021c16:	4c0d      	ldr	r4, [pc, #52]	@ (8021c4c <__libc_init_array+0x3c>)
 8021c18:	1b64      	subs	r4, r4, r5
 8021c1a:	10a4      	asrs	r4, r4, #2
 8021c1c:	42a6      	cmp	r6, r4
 8021c1e:	d109      	bne.n	8021c34 <__libc_init_array+0x24>
 8021c20:	f002 fc4e 	bl	80244c0 <_init>
 8021c24:	2600      	movs	r6, #0
 8021c26:	4d0a      	ldr	r5, [pc, #40]	@ (8021c50 <__libc_init_array+0x40>)
 8021c28:	4c0a      	ldr	r4, [pc, #40]	@ (8021c54 <__libc_init_array+0x44>)
 8021c2a:	1b64      	subs	r4, r4, r5
 8021c2c:	10a4      	asrs	r4, r4, #2
 8021c2e:	42a6      	cmp	r6, r4
 8021c30:	d105      	bne.n	8021c3e <__libc_init_array+0x2e>
 8021c32:	bd70      	pop	{r4, r5, r6, pc}
 8021c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8021c38:	4798      	blx	r3
 8021c3a:	3601      	adds	r6, #1
 8021c3c:	e7ee      	b.n	8021c1c <__libc_init_array+0xc>
 8021c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021c42:	4798      	blx	r3
 8021c44:	3601      	adds	r6, #1
 8021c46:	e7f2      	b.n	8021c2e <__libc_init_array+0x1e>
 8021c48:	08030a58 	.word	0x08030a58
 8021c4c:	08030a58 	.word	0x08030a58
 8021c50:	08030a58 	.word	0x08030a58
 8021c54:	08030a5c 	.word	0x08030a5c

08021c58 <__retarget_lock_init_recursive>:
 8021c58:	4770      	bx	lr

08021c5a <__retarget_lock_acquire_recursive>:
 8021c5a:	4770      	bx	lr

08021c5c <__retarget_lock_release_recursive>:
 8021c5c:	4770      	bx	lr

08021c5e <memchr>:
 8021c5e:	4603      	mov	r3, r0
 8021c60:	b510      	push	{r4, lr}
 8021c62:	b2c9      	uxtb	r1, r1
 8021c64:	4402      	add	r2, r0
 8021c66:	4293      	cmp	r3, r2
 8021c68:	4618      	mov	r0, r3
 8021c6a:	d101      	bne.n	8021c70 <memchr+0x12>
 8021c6c:	2000      	movs	r0, #0
 8021c6e:	e003      	b.n	8021c78 <memchr+0x1a>
 8021c70:	7804      	ldrb	r4, [r0, #0]
 8021c72:	3301      	adds	r3, #1
 8021c74:	428c      	cmp	r4, r1
 8021c76:	d1f6      	bne.n	8021c66 <memchr+0x8>
 8021c78:	bd10      	pop	{r4, pc}

08021c7a <memcpy>:
 8021c7a:	440a      	add	r2, r1
 8021c7c:	4291      	cmp	r1, r2
 8021c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8021c82:	d100      	bne.n	8021c86 <memcpy+0xc>
 8021c84:	4770      	bx	lr
 8021c86:	b510      	push	{r4, lr}
 8021c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021c8c:	4291      	cmp	r1, r2
 8021c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021c92:	d1f9      	bne.n	8021c88 <memcpy+0xe>
 8021c94:	bd10      	pop	{r4, pc}
	...

08021c98 <__assert_func>:
 8021c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021c9a:	4614      	mov	r4, r2
 8021c9c:	461a      	mov	r2, r3
 8021c9e:	4b09      	ldr	r3, [pc, #36]	@ (8021cc4 <__assert_func+0x2c>)
 8021ca0:	4605      	mov	r5, r0
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	68d8      	ldr	r0, [r3, #12]
 8021ca6:	b14c      	cbz	r4, 8021cbc <__assert_func+0x24>
 8021ca8:	4b07      	ldr	r3, [pc, #28]	@ (8021cc8 <__assert_func+0x30>)
 8021caa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021cae:	9100      	str	r1, [sp, #0]
 8021cb0:	462b      	mov	r3, r5
 8021cb2:	4906      	ldr	r1, [pc, #24]	@ (8021ccc <__assert_func+0x34>)
 8021cb4:	f002 f93e 	bl	8023f34 <fiprintf>
 8021cb8:	f002 fa52 	bl	8024160 <abort>
 8021cbc:	4b04      	ldr	r3, [pc, #16]	@ (8021cd0 <__assert_func+0x38>)
 8021cbe:	461c      	mov	r4, r3
 8021cc0:	e7f3      	b.n	8021caa <__assert_func+0x12>
 8021cc2:	bf00      	nop
 8021cc4:	2000012c 	.word	0x2000012c
 8021cc8:	08030703 	.word	0x08030703
 8021ccc:	08030710 	.word	0x08030710
 8021cd0:	0803073e 	.word	0x0803073e

08021cd4 <quorem>:
 8021cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cd8:	6903      	ldr	r3, [r0, #16]
 8021cda:	690c      	ldr	r4, [r1, #16]
 8021cdc:	4607      	mov	r7, r0
 8021cde:	42a3      	cmp	r3, r4
 8021ce0:	db7e      	blt.n	8021de0 <quorem+0x10c>
 8021ce2:	3c01      	subs	r4, #1
 8021ce4:	00a3      	lsls	r3, r4, #2
 8021ce6:	f100 0514 	add.w	r5, r0, #20
 8021cea:	f101 0814 	add.w	r8, r1, #20
 8021cee:	9300      	str	r3, [sp, #0]
 8021cf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021cf4:	9301      	str	r3, [sp, #4]
 8021cf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021cfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021cfe:	3301      	adds	r3, #1
 8021d00:	429a      	cmp	r2, r3
 8021d02:	fbb2 f6f3 	udiv	r6, r2, r3
 8021d06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021d0a:	d32e      	bcc.n	8021d6a <quorem+0x96>
 8021d0c:	f04f 0a00 	mov.w	sl, #0
 8021d10:	46c4      	mov	ip, r8
 8021d12:	46ae      	mov	lr, r5
 8021d14:	46d3      	mov	fp, sl
 8021d16:	f85c 3b04 	ldr.w	r3, [ip], #4
 8021d1a:	b298      	uxth	r0, r3
 8021d1c:	fb06 a000 	mla	r0, r6, r0, sl
 8021d20:	0c1b      	lsrs	r3, r3, #16
 8021d22:	0c02      	lsrs	r2, r0, #16
 8021d24:	fb06 2303 	mla	r3, r6, r3, r2
 8021d28:	f8de 2000 	ldr.w	r2, [lr]
 8021d2c:	b280      	uxth	r0, r0
 8021d2e:	b292      	uxth	r2, r2
 8021d30:	1a12      	subs	r2, r2, r0
 8021d32:	445a      	add	r2, fp
 8021d34:	f8de 0000 	ldr.w	r0, [lr]
 8021d38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021d3c:	b29b      	uxth	r3, r3
 8021d3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8021d42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8021d46:	b292      	uxth	r2, r2
 8021d48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8021d4c:	45e1      	cmp	r9, ip
 8021d4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8021d52:	f84e 2b04 	str.w	r2, [lr], #4
 8021d56:	d2de      	bcs.n	8021d16 <quorem+0x42>
 8021d58:	9b00      	ldr	r3, [sp, #0]
 8021d5a:	58eb      	ldr	r3, [r5, r3]
 8021d5c:	b92b      	cbnz	r3, 8021d6a <quorem+0x96>
 8021d5e:	9b01      	ldr	r3, [sp, #4]
 8021d60:	3b04      	subs	r3, #4
 8021d62:	429d      	cmp	r5, r3
 8021d64:	461a      	mov	r2, r3
 8021d66:	d32f      	bcc.n	8021dc8 <quorem+0xf4>
 8021d68:	613c      	str	r4, [r7, #16]
 8021d6a:	4638      	mov	r0, r7
 8021d6c:	f001 f980 	bl	8023070 <__mcmp>
 8021d70:	2800      	cmp	r0, #0
 8021d72:	db25      	blt.n	8021dc0 <quorem+0xec>
 8021d74:	4629      	mov	r1, r5
 8021d76:	2000      	movs	r0, #0
 8021d78:	f858 2b04 	ldr.w	r2, [r8], #4
 8021d7c:	f8d1 c000 	ldr.w	ip, [r1]
 8021d80:	fa1f fe82 	uxth.w	lr, r2
 8021d84:	fa1f f38c 	uxth.w	r3, ip
 8021d88:	eba3 030e 	sub.w	r3, r3, lr
 8021d8c:	4403      	add	r3, r0
 8021d8e:	0c12      	lsrs	r2, r2, #16
 8021d90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8021d94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8021d98:	b29b      	uxth	r3, r3
 8021d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021d9e:	45c1      	cmp	r9, r8
 8021da0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8021da4:	f841 3b04 	str.w	r3, [r1], #4
 8021da8:	d2e6      	bcs.n	8021d78 <quorem+0xa4>
 8021daa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021db2:	b922      	cbnz	r2, 8021dbe <quorem+0xea>
 8021db4:	3b04      	subs	r3, #4
 8021db6:	429d      	cmp	r5, r3
 8021db8:	461a      	mov	r2, r3
 8021dba:	d30b      	bcc.n	8021dd4 <quorem+0x100>
 8021dbc:	613c      	str	r4, [r7, #16]
 8021dbe:	3601      	adds	r6, #1
 8021dc0:	4630      	mov	r0, r6
 8021dc2:	b003      	add	sp, #12
 8021dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dc8:	6812      	ldr	r2, [r2, #0]
 8021dca:	3b04      	subs	r3, #4
 8021dcc:	2a00      	cmp	r2, #0
 8021dce:	d1cb      	bne.n	8021d68 <quorem+0x94>
 8021dd0:	3c01      	subs	r4, #1
 8021dd2:	e7c6      	b.n	8021d62 <quorem+0x8e>
 8021dd4:	6812      	ldr	r2, [r2, #0]
 8021dd6:	3b04      	subs	r3, #4
 8021dd8:	2a00      	cmp	r2, #0
 8021dda:	d1ef      	bne.n	8021dbc <quorem+0xe8>
 8021ddc:	3c01      	subs	r4, #1
 8021dde:	e7ea      	b.n	8021db6 <quorem+0xe2>
 8021de0:	2000      	movs	r0, #0
 8021de2:	e7ee      	b.n	8021dc2 <quorem+0xee>
 8021de4:	0000      	movs	r0, r0
	...

08021de8 <_dtoa_r>:
 8021de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dec:	4614      	mov	r4, r2
 8021dee:	461d      	mov	r5, r3
 8021df0:	69c7      	ldr	r7, [r0, #28]
 8021df2:	b097      	sub	sp, #92	@ 0x5c
 8021df4:	4681      	mov	r9, r0
 8021df6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8021dfa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8021dfc:	b97f      	cbnz	r7, 8021e1e <_dtoa_r+0x36>
 8021dfe:	2010      	movs	r0, #16
 8021e00:	f000 fe0e 	bl	8022a20 <malloc>
 8021e04:	4602      	mov	r2, r0
 8021e06:	f8c9 001c 	str.w	r0, [r9, #28]
 8021e0a:	b920      	cbnz	r0, 8021e16 <_dtoa_r+0x2e>
 8021e0c:	21ef      	movs	r1, #239	@ 0xef
 8021e0e:	4bac      	ldr	r3, [pc, #688]	@ (80220c0 <_dtoa_r+0x2d8>)
 8021e10:	48ac      	ldr	r0, [pc, #688]	@ (80220c4 <_dtoa_r+0x2dc>)
 8021e12:	f7ff ff41 	bl	8021c98 <__assert_func>
 8021e16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8021e1a:	6007      	str	r7, [r0, #0]
 8021e1c:	60c7      	str	r7, [r0, #12]
 8021e1e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8021e22:	6819      	ldr	r1, [r3, #0]
 8021e24:	b159      	cbz	r1, 8021e3e <_dtoa_r+0x56>
 8021e26:	685a      	ldr	r2, [r3, #4]
 8021e28:	2301      	movs	r3, #1
 8021e2a:	4093      	lsls	r3, r2
 8021e2c:	604a      	str	r2, [r1, #4]
 8021e2e:	608b      	str	r3, [r1, #8]
 8021e30:	4648      	mov	r0, r9
 8021e32:	f000 feeb 	bl	8022c0c <_Bfree>
 8021e36:	2200      	movs	r2, #0
 8021e38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8021e3c:	601a      	str	r2, [r3, #0]
 8021e3e:	1e2b      	subs	r3, r5, #0
 8021e40:	bfaf      	iteee	ge
 8021e42:	2300      	movge	r3, #0
 8021e44:	2201      	movlt	r2, #1
 8021e46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8021e4a:	9307      	strlt	r3, [sp, #28]
 8021e4c:	bfa8      	it	ge
 8021e4e:	6033      	strge	r3, [r6, #0]
 8021e50:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021e54:	4b9c      	ldr	r3, [pc, #624]	@ (80220c8 <_dtoa_r+0x2e0>)
 8021e56:	bfb8      	it	lt
 8021e58:	6032      	strlt	r2, [r6, #0]
 8021e5a:	ea33 0308 	bics.w	r3, r3, r8
 8021e5e:	d112      	bne.n	8021e86 <_dtoa_r+0x9e>
 8021e60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8021e64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021e66:	6013      	str	r3, [r2, #0]
 8021e68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8021e6c:	4323      	orrs	r3, r4
 8021e6e:	f000 855e 	beq.w	802292e <_dtoa_r+0xb46>
 8021e72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80220cc <_dtoa_r+0x2e4>
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	f000 8560 	beq.w	802293e <_dtoa_r+0xb56>
 8021e7e:	f10a 0303 	add.w	r3, sl, #3
 8021e82:	f000 bd5a 	b.w	802293a <_dtoa_r+0xb52>
 8021e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021e8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8021e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021e92:	2200      	movs	r2, #0
 8021e94:	2300      	movs	r3, #0
 8021e96:	f7de fdcd 	bl	8000a34 <__aeabi_dcmpeq>
 8021e9a:	4607      	mov	r7, r0
 8021e9c:	b158      	cbz	r0, 8021eb6 <_dtoa_r+0xce>
 8021e9e:	2301      	movs	r3, #1
 8021ea0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021ea2:	6013      	str	r3, [r2, #0]
 8021ea4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021ea6:	b113      	cbz	r3, 8021eae <_dtoa_r+0xc6>
 8021ea8:	4b89      	ldr	r3, [pc, #548]	@ (80220d0 <_dtoa_r+0x2e8>)
 8021eaa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8021eac:	6013      	str	r3, [r2, #0]
 8021eae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80220d4 <_dtoa_r+0x2ec>
 8021eb2:	f000 bd44 	b.w	802293e <_dtoa_r+0xb56>
 8021eb6:	ab14      	add	r3, sp, #80	@ 0x50
 8021eb8:	9301      	str	r3, [sp, #4]
 8021eba:	ab15      	add	r3, sp, #84	@ 0x54
 8021ebc:	9300      	str	r3, [sp, #0]
 8021ebe:	4648      	mov	r0, r9
 8021ec0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8021ec4:	f001 f984 	bl	80231d0 <__d2b>
 8021ec8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8021ecc:	9003      	str	r0, [sp, #12]
 8021ece:	2e00      	cmp	r6, #0
 8021ed0:	d078      	beq.n	8021fc4 <_dtoa_r+0x1dc>
 8021ed2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ed8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8021edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021ee0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8021ee4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8021ee8:	9712      	str	r7, [sp, #72]	@ 0x48
 8021eea:	4619      	mov	r1, r3
 8021eec:	2200      	movs	r2, #0
 8021eee:	4b7a      	ldr	r3, [pc, #488]	@ (80220d8 <_dtoa_r+0x2f0>)
 8021ef0:	f7de f980 	bl	80001f4 <__aeabi_dsub>
 8021ef4:	a36c      	add	r3, pc, #432	@ (adr r3, 80220a8 <_dtoa_r+0x2c0>)
 8021ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021efa:	f7de fb33 	bl	8000564 <__aeabi_dmul>
 8021efe:	a36c      	add	r3, pc, #432	@ (adr r3, 80220b0 <_dtoa_r+0x2c8>)
 8021f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f04:	f7de f978 	bl	80001f8 <__adddf3>
 8021f08:	4604      	mov	r4, r0
 8021f0a:	4630      	mov	r0, r6
 8021f0c:	460d      	mov	r5, r1
 8021f0e:	f7de fabf 	bl	8000490 <__aeabi_i2d>
 8021f12:	a369      	add	r3, pc, #420	@ (adr r3, 80220b8 <_dtoa_r+0x2d0>)
 8021f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f18:	f7de fb24 	bl	8000564 <__aeabi_dmul>
 8021f1c:	4602      	mov	r2, r0
 8021f1e:	460b      	mov	r3, r1
 8021f20:	4620      	mov	r0, r4
 8021f22:	4629      	mov	r1, r5
 8021f24:	f7de f968 	bl	80001f8 <__adddf3>
 8021f28:	4604      	mov	r4, r0
 8021f2a:	460d      	mov	r5, r1
 8021f2c:	f7de fdca 	bl	8000ac4 <__aeabi_d2iz>
 8021f30:	2200      	movs	r2, #0
 8021f32:	4607      	mov	r7, r0
 8021f34:	2300      	movs	r3, #0
 8021f36:	4620      	mov	r0, r4
 8021f38:	4629      	mov	r1, r5
 8021f3a:	f7de fd85 	bl	8000a48 <__aeabi_dcmplt>
 8021f3e:	b140      	cbz	r0, 8021f52 <_dtoa_r+0x16a>
 8021f40:	4638      	mov	r0, r7
 8021f42:	f7de faa5 	bl	8000490 <__aeabi_i2d>
 8021f46:	4622      	mov	r2, r4
 8021f48:	462b      	mov	r3, r5
 8021f4a:	f7de fd73 	bl	8000a34 <__aeabi_dcmpeq>
 8021f4e:	b900      	cbnz	r0, 8021f52 <_dtoa_r+0x16a>
 8021f50:	3f01      	subs	r7, #1
 8021f52:	2f16      	cmp	r7, #22
 8021f54:	d854      	bhi.n	8022000 <_dtoa_r+0x218>
 8021f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021f5a:	4b60      	ldr	r3, [pc, #384]	@ (80220dc <_dtoa_r+0x2f4>)
 8021f5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8021f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f64:	f7de fd70 	bl	8000a48 <__aeabi_dcmplt>
 8021f68:	2800      	cmp	r0, #0
 8021f6a:	d04b      	beq.n	8022004 <_dtoa_r+0x21c>
 8021f6c:	2300      	movs	r3, #0
 8021f6e:	3f01      	subs	r7, #1
 8021f70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021f72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021f74:	1b9b      	subs	r3, r3, r6
 8021f76:	1e5a      	subs	r2, r3, #1
 8021f78:	bf49      	itett	mi
 8021f7a:	f1c3 0301 	rsbmi	r3, r3, #1
 8021f7e:	2300      	movpl	r3, #0
 8021f80:	9304      	strmi	r3, [sp, #16]
 8021f82:	2300      	movmi	r3, #0
 8021f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8021f86:	bf54      	ite	pl
 8021f88:	9304      	strpl	r3, [sp, #16]
 8021f8a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8021f8c:	2f00      	cmp	r7, #0
 8021f8e:	db3b      	blt.n	8022008 <_dtoa_r+0x220>
 8021f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021f92:	970e      	str	r7, [sp, #56]	@ 0x38
 8021f94:	443b      	add	r3, r7
 8021f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f98:	2300      	movs	r3, #0
 8021f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8021f9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021f9e:	2b09      	cmp	r3, #9
 8021fa0:	d865      	bhi.n	802206e <_dtoa_r+0x286>
 8021fa2:	2b05      	cmp	r3, #5
 8021fa4:	bfc4      	itt	gt
 8021fa6:	3b04      	subgt	r3, #4
 8021fa8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8021faa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021fac:	bfc8      	it	gt
 8021fae:	2400      	movgt	r4, #0
 8021fb0:	f1a3 0302 	sub.w	r3, r3, #2
 8021fb4:	bfd8      	it	le
 8021fb6:	2401      	movle	r4, #1
 8021fb8:	2b03      	cmp	r3, #3
 8021fba:	d864      	bhi.n	8022086 <_dtoa_r+0x29e>
 8021fbc:	e8df f003 	tbb	[pc, r3]
 8021fc0:	2c385553 	.word	0x2c385553
 8021fc4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8021fc8:	441e      	add	r6, r3
 8021fca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8021fce:	2b20      	cmp	r3, #32
 8021fd0:	bfc1      	itttt	gt
 8021fd2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8021fd6:	fa08 f803 	lslgt.w	r8, r8, r3
 8021fda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8021fde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8021fe2:	bfd6      	itet	le
 8021fe4:	f1c3 0320 	rsble	r3, r3, #32
 8021fe8:	ea48 0003 	orrgt.w	r0, r8, r3
 8021fec:	fa04 f003 	lslle.w	r0, r4, r3
 8021ff0:	f7de fa3e 	bl	8000470 <__aeabi_ui2d>
 8021ff4:	2201      	movs	r2, #1
 8021ff6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8021ffa:	3e01      	subs	r6, #1
 8021ffc:	9212      	str	r2, [sp, #72]	@ 0x48
 8021ffe:	e774      	b.n	8021eea <_dtoa_r+0x102>
 8022000:	2301      	movs	r3, #1
 8022002:	e7b5      	b.n	8021f70 <_dtoa_r+0x188>
 8022004:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022006:	e7b4      	b.n	8021f72 <_dtoa_r+0x18a>
 8022008:	9b04      	ldr	r3, [sp, #16]
 802200a:	1bdb      	subs	r3, r3, r7
 802200c:	9304      	str	r3, [sp, #16]
 802200e:	427b      	negs	r3, r7
 8022010:	930a      	str	r3, [sp, #40]	@ 0x28
 8022012:	2300      	movs	r3, #0
 8022014:	930e      	str	r3, [sp, #56]	@ 0x38
 8022016:	e7c1      	b.n	8021f9c <_dtoa_r+0x1b4>
 8022018:	2301      	movs	r3, #1
 802201a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802201c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802201e:	eb07 0b03 	add.w	fp, r7, r3
 8022022:	f10b 0301 	add.w	r3, fp, #1
 8022026:	2b01      	cmp	r3, #1
 8022028:	9308      	str	r3, [sp, #32]
 802202a:	bfb8      	it	lt
 802202c:	2301      	movlt	r3, #1
 802202e:	e006      	b.n	802203e <_dtoa_r+0x256>
 8022030:	2301      	movs	r3, #1
 8022032:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022034:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022036:	2b00      	cmp	r3, #0
 8022038:	dd28      	ble.n	802208c <_dtoa_r+0x2a4>
 802203a:	469b      	mov	fp, r3
 802203c:	9308      	str	r3, [sp, #32]
 802203e:	2100      	movs	r1, #0
 8022040:	2204      	movs	r2, #4
 8022042:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8022046:	f102 0514 	add.w	r5, r2, #20
 802204a:	429d      	cmp	r5, r3
 802204c:	d926      	bls.n	802209c <_dtoa_r+0x2b4>
 802204e:	6041      	str	r1, [r0, #4]
 8022050:	4648      	mov	r0, r9
 8022052:	f000 fd9b 	bl	8022b8c <_Balloc>
 8022056:	4682      	mov	sl, r0
 8022058:	2800      	cmp	r0, #0
 802205a:	d143      	bne.n	80220e4 <_dtoa_r+0x2fc>
 802205c:	4602      	mov	r2, r0
 802205e:	f240 11af 	movw	r1, #431	@ 0x1af
 8022062:	4b1f      	ldr	r3, [pc, #124]	@ (80220e0 <_dtoa_r+0x2f8>)
 8022064:	e6d4      	b.n	8021e10 <_dtoa_r+0x28>
 8022066:	2300      	movs	r3, #0
 8022068:	e7e3      	b.n	8022032 <_dtoa_r+0x24a>
 802206a:	2300      	movs	r3, #0
 802206c:	e7d5      	b.n	802201a <_dtoa_r+0x232>
 802206e:	2401      	movs	r4, #1
 8022070:	2300      	movs	r3, #0
 8022072:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022074:	9320      	str	r3, [sp, #128]	@ 0x80
 8022076:	f04f 3bff 	mov.w	fp, #4294967295
 802207a:	2200      	movs	r2, #0
 802207c:	2312      	movs	r3, #18
 802207e:	f8cd b020 	str.w	fp, [sp, #32]
 8022082:	9221      	str	r2, [sp, #132]	@ 0x84
 8022084:	e7db      	b.n	802203e <_dtoa_r+0x256>
 8022086:	2301      	movs	r3, #1
 8022088:	930b      	str	r3, [sp, #44]	@ 0x2c
 802208a:	e7f4      	b.n	8022076 <_dtoa_r+0x28e>
 802208c:	f04f 0b01 	mov.w	fp, #1
 8022090:	465b      	mov	r3, fp
 8022092:	f8cd b020 	str.w	fp, [sp, #32]
 8022096:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 802209a:	e7d0      	b.n	802203e <_dtoa_r+0x256>
 802209c:	3101      	adds	r1, #1
 802209e:	0052      	lsls	r2, r2, #1
 80220a0:	e7d1      	b.n	8022046 <_dtoa_r+0x25e>
 80220a2:	bf00      	nop
 80220a4:	f3af 8000 	nop.w
 80220a8:	636f4361 	.word	0x636f4361
 80220ac:	3fd287a7 	.word	0x3fd287a7
 80220b0:	8b60c8b3 	.word	0x8b60c8b3
 80220b4:	3fc68a28 	.word	0x3fc68a28
 80220b8:	509f79fb 	.word	0x509f79fb
 80220bc:	3fd34413 	.word	0x3fd34413
 80220c0:	08030662 	.word	0x08030662
 80220c4:	0803074c 	.word	0x0803074c
 80220c8:	7ff00000 	.word	0x7ff00000
 80220cc:	08030748 	.word	0x08030748
 80220d0:	08030836 	.word	0x08030836
 80220d4:	08030835 	.word	0x08030835
 80220d8:	3ff80000 	.word	0x3ff80000
 80220dc:	08030980 	.word	0x08030980
 80220e0:	080307a4 	.word	0x080307a4
 80220e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80220e8:	6018      	str	r0, [r3, #0]
 80220ea:	9b08      	ldr	r3, [sp, #32]
 80220ec:	2b0e      	cmp	r3, #14
 80220ee:	f200 80a1 	bhi.w	8022234 <_dtoa_r+0x44c>
 80220f2:	2c00      	cmp	r4, #0
 80220f4:	f000 809e 	beq.w	8022234 <_dtoa_r+0x44c>
 80220f8:	2f00      	cmp	r7, #0
 80220fa:	dd33      	ble.n	8022164 <_dtoa_r+0x37c>
 80220fc:	4b9c      	ldr	r3, [pc, #624]	@ (8022370 <_dtoa_r+0x588>)
 80220fe:	f007 020f 	and.w	r2, r7, #15
 8022102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022106:	05f8      	lsls	r0, r7, #23
 8022108:	e9d3 3400 	ldrd	r3, r4, [r3]
 802210c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8022110:	ea4f 1427 	mov.w	r4, r7, asr #4
 8022114:	d516      	bpl.n	8022144 <_dtoa_r+0x35c>
 8022116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802211a:	4b96      	ldr	r3, [pc, #600]	@ (8022374 <_dtoa_r+0x58c>)
 802211c:	2603      	movs	r6, #3
 802211e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022122:	f7de fb49 	bl	80007b8 <__aeabi_ddiv>
 8022126:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802212a:	f004 040f 	and.w	r4, r4, #15
 802212e:	4d91      	ldr	r5, [pc, #580]	@ (8022374 <_dtoa_r+0x58c>)
 8022130:	b954      	cbnz	r4, 8022148 <_dtoa_r+0x360>
 8022132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802213a:	f7de fb3d 	bl	80007b8 <__aeabi_ddiv>
 802213e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022142:	e028      	b.n	8022196 <_dtoa_r+0x3ae>
 8022144:	2602      	movs	r6, #2
 8022146:	e7f2      	b.n	802212e <_dtoa_r+0x346>
 8022148:	07e1      	lsls	r1, r4, #31
 802214a:	d508      	bpl.n	802215e <_dtoa_r+0x376>
 802214c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022150:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022154:	f7de fa06 	bl	8000564 <__aeabi_dmul>
 8022158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802215c:	3601      	adds	r6, #1
 802215e:	1064      	asrs	r4, r4, #1
 8022160:	3508      	adds	r5, #8
 8022162:	e7e5      	b.n	8022130 <_dtoa_r+0x348>
 8022164:	f000 80af 	beq.w	80222c6 <_dtoa_r+0x4de>
 8022168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802216c:	427c      	negs	r4, r7
 802216e:	4b80      	ldr	r3, [pc, #512]	@ (8022370 <_dtoa_r+0x588>)
 8022170:	f004 020f 	and.w	r2, r4, #15
 8022174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802217c:	f7de f9f2 	bl	8000564 <__aeabi_dmul>
 8022180:	2602      	movs	r6, #2
 8022182:	2300      	movs	r3, #0
 8022184:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022188:	4d7a      	ldr	r5, [pc, #488]	@ (8022374 <_dtoa_r+0x58c>)
 802218a:	1124      	asrs	r4, r4, #4
 802218c:	2c00      	cmp	r4, #0
 802218e:	f040 808f 	bne.w	80222b0 <_dtoa_r+0x4c8>
 8022192:	2b00      	cmp	r3, #0
 8022194:	d1d3      	bne.n	802213e <_dtoa_r+0x356>
 8022196:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 802219a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802219c:	2b00      	cmp	r3, #0
 802219e:	f000 8094 	beq.w	80222ca <_dtoa_r+0x4e2>
 80221a2:	2200      	movs	r2, #0
 80221a4:	4620      	mov	r0, r4
 80221a6:	4629      	mov	r1, r5
 80221a8:	4b73      	ldr	r3, [pc, #460]	@ (8022378 <_dtoa_r+0x590>)
 80221aa:	f7de fc4d 	bl	8000a48 <__aeabi_dcmplt>
 80221ae:	2800      	cmp	r0, #0
 80221b0:	f000 808b 	beq.w	80222ca <_dtoa_r+0x4e2>
 80221b4:	9b08      	ldr	r3, [sp, #32]
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	f000 8087 	beq.w	80222ca <_dtoa_r+0x4e2>
 80221bc:	f1bb 0f00 	cmp.w	fp, #0
 80221c0:	dd34      	ble.n	802222c <_dtoa_r+0x444>
 80221c2:	4620      	mov	r0, r4
 80221c4:	2200      	movs	r2, #0
 80221c6:	4629      	mov	r1, r5
 80221c8:	4b6c      	ldr	r3, [pc, #432]	@ (802237c <_dtoa_r+0x594>)
 80221ca:	f7de f9cb 	bl	8000564 <__aeabi_dmul>
 80221ce:	465c      	mov	r4, fp
 80221d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80221d4:	f107 38ff 	add.w	r8, r7, #4294967295
 80221d8:	3601      	adds	r6, #1
 80221da:	4630      	mov	r0, r6
 80221dc:	f7de f958 	bl	8000490 <__aeabi_i2d>
 80221e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80221e4:	f7de f9be 	bl	8000564 <__aeabi_dmul>
 80221e8:	2200      	movs	r2, #0
 80221ea:	4b65      	ldr	r3, [pc, #404]	@ (8022380 <_dtoa_r+0x598>)
 80221ec:	f7de f804 	bl	80001f8 <__adddf3>
 80221f0:	4605      	mov	r5, r0
 80221f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80221f6:	2c00      	cmp	r4, #0
 80221f8:	d16a      	bne.n	80222d0 <_dtoa_r+0x4e8>
 80221fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80221fe:	2200      	movs	r2, #0
 8022200:	4b60      	ldr	r3, [pc, #384]	@ (8022384 <_dtoa_r+0x59c>)
 8022202:	f7dd fff7 	bl	80001f4 <__aeabi_dsub>
 8022206:	4602      	mov	r2, r0
 8022208:	460b      	mov	r3, r1
 802220a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802220e:	462a      	mov	r2, r5
 8022210:	4633      	mov	r3, r6
 8022212:	f7de fc37 	bl	8000a84 <__aeabi_dcmpgt>
 8022216:	2800      	cmp	r0, #0
 8022218:	f040 8298 	bne.w	802274c <_dtoa_r+0x964>
 802221c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022220:	462a      	mov	r2, r5
 8022222:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8022226:	f7de fc0f 	bl	8000a48 <__aeabi_dcmplt>
 802222a:	bb38      	cbnz	r0, 802227c <_dtoa_r+0x494>
 802222c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8022230:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8022234:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022236:	2b00      	cmp	r3, #0
 8022238:	f2c0 8157 	blt.w	80224ea <_dtoa_r+0x702>
 802223c:	2f0e      	cmp	r7, #14
 802223e:	f300 8154 	bgt.w	80224ea <_dtoa_r+0x702>
 8022242:	4b4b      	ldr	r3, [pc, #300]	@ (8022370 <_dtoa_r+0x588>)
 8022244:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022248:	e9d3 3400 	ldrd	r3, r4, [r3]
 802224c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8022250:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022252:	2b00      	cmp	r3, #0
 8022254:	f280 80e5 	bge.w	8022422 <_dtoa_r+0x63a>
 8022258:	9b08      	ldr	r3, [sp, #32]
 802225a:	2b00      	cmp	r3, #0
 802225c:	f300 80e1 	bgt.w	8022422 <_dtoa_r+0x63a>
 8022260:	d10c      	bne.n	802227c <_dtoa_r+0x494>
 8022262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022266:	2200      	movs	r2, #0
 8022268:	4b46      	ldr	r3, [pc, #280]	@ (8022384 <_dtoa_r+0x59c>)
 802226a:	f7de f97b 	bl	8000564 <__aeabi_dmul>
 802226e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022272:	f7de fbfd 	bl	8000a70 <__aeabi_dcmpge>
 8022276:	2800      	cmp	r0, #0
 8022278:	f000 8266 	beq.w	8022748 <_dtoa_r+0x960>
 802227c:	2400      	movs	r4, #0
 802227e:	4625      	mov	r5, r4
 8022280:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022282:	4656      	mov	r6, sl
 8022284:	ea6f 0803 	mvn.w	r8, r3
 8022288:	2700      	movs	r7, #0
 802228a:	4621      	mov	r1, r4
 802228c:	4648      	mov	r0, r9
 802228e:	f000 fcbd 	bl	8022c0c <_Bfree>
 8022292:	2d00      	cmp	r5, #0
 8022294:	f000 80bd 	beq.w	8022412 <_dtoa_r+0x62a>
 8022298:	b12f      	cbz	r7, 80222a6 <_dtoa_r+0x4be>
 802229a:	42af      	cmp	r7, r5
 802229c:	d003      	beq.n	80222a6 <_dtoa_r+0x4be>
 802229e:	4639      	mov	r1, r7
 80222a0:	4648      	mov	r0, r9
 80222a2:	f000 fcb3 	bl	8022c0c <_Bfree>
 80222a6:	4629      	mov	r1, r5
 80222a8:	4648      	mov	r0, r9
 80222aa:	f000 fcaf 	bl	8022c0c <_Bfree>
 80222ae:	e0b0      	b.n	8022412 <_dtoa_r+0x62a>
 80222b0:	07e2      	lsls	r2, r4, #31
 80222b2:	d505      	bpl.n	80222c0 <_dtoa_r+0x4d8>
 80222b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80222b8:	f7de f954 	bl	8000564 <__aeabi_dmul>
 80222bc:	2301      	movs	r3, #1
 80222be:	3601      	adds	r6, #1
 80222c0:	1064      	asrs	r4, r4, #1
 80222c2:	3508      	adds	r5, #8
 80222c4:	e762      	b.n	802218c <_dtoa_r+0x3a4>
 80222c6:	2602      	movs	r6, #2
 80222c8:	e765      	b.n	8022196 <_dtoa_r+0x3ae>
 80222ca:	46b8      	mov	r8, r7
 80222cc:	9c08      	ldr	r4, [sp, #32]
 80222ce:	e784      	b.n	80221da <_dtoa_r+0x3f2>
 80222d0:	4b27      	ldr	r3, [pc, #156]	@ (8022370 <_dtoa_r+0x588>)
 80222d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80222d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80222d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80222dc:	4454      	add	r4, sl
 80222de:	2900      	cmp	r1, #0
 80222e0:	d054      	beq.n	802238c <_dtoa_r+0x5a4>
 80222e2:	2000      	movs	r0, #0
 80222e4:	4928      	ldr	r1, [pc, #160]	@ (8022388 <_dtoa_r+0x5a0>)
 80222e6:	f7de fa67 	bl	80007b8 <__aeabi_ddiv>
 80222ea:	4633      	mov	r3, r6
 80222ec:	462a      	mov	r2, r5
 80222ee:	f7dd ff81 	bl	80001f4 <__aeabi_dsub>
 80222f2:	4656      	mov	r6, sl
 80222f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80222f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80222fc:	f7de fbe2 	bl	8000ac4 <__aeabi_d2iz>
 8022300:	4605      	mov	r5, r0
 8022302:	f7de f8c5 	bl	8000490 <__aeabi_i2d>
 8022306:	4602      	mov	r2, r0
 8022308:	460b      	mov	r3, r1
 802230a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802230e:	f7dd ff71 	bl	80001f4 <__aeabi_dsub>
 8022312:	4602      	mov	r2, r0
 8022314:	460b      	mov	r3, r1
 8022316:	3530      	adds	r5, #48	@ 0x30
 8022318:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802231c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022320:	f806 5b01 	strb.w	r5, [r6], #1
 8022324:	f7de fb90 	bl	8000a48 <__aeabi_dcmplt>
 8022328:	2800      	cmp	r0, #0
 802232a:	d172      	bne.n	8022412 <_dtoa_r+0x62a>
 802232c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022330:	2000      	movs	r0, #0
 8022332:	4911      	ldr	r1, [pc, #68]	@ (8022378 <_dtoa_r+0x590>)
 8022334:	f7dd ff5e 	bl	80001f4 <__aeabi_dsub>
 8022338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802233c:	f7de fb84 	bl	8000a48 <__aeabi_dcmplt>
 8022340:	2800      	cmp	r0, #0
 8022342:	f040 80b4 	bne.w	80224ae <_dtoa_r+0x6c6>
 8022346:	42a6      	cmp	r6, r4
 8022348:	f43f af70 	beq.w	802222c <_dtoa_r+0x444>
 802234c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022350:	2200      	movs	r2, #0
 8022352:	4b0a      	ldr	r3, [pc, #40]	@ (802237c <_dtoa_r+0x594>)
 8022354:	f7de f906 	bl	8000564 <__aeabi_dmul>
 8022358:	2200      	movs	r2, #0
 802235a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802235e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022362:	4b06      	ldr	r3, [pc, #24]	@ (802237c <_dtoa_r+0x594>)
 8022364:	f7de f8fe 	bl	8000564 <__aeabi_dmul>
 8022368:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802236c:	e7c4      	b.n	80222f8 <_dtoa_r+0x510>
 802236e:	bf00      	nop
 8022370:	08030980 	.word	0x08030980
 8022374:	08030958 	.word	0x08030958
 8022378:	3ff00000 	.word	0x3ff00000
 802237c:	40240000 	.word	0x40240000
 8022380:	401c0000 	.word	0x401c0000
 8022384:	40140000 	.word	0x40140000
 8022388:	3fe00000 	.word	0x3fe00000
 802238c:	4631      	mov	r1, r6
 802238e:	4628      	mov	r0, r5
 8022390:	f7de f8e8 	bl	8000564 <__aeabi_dmul>
 8022394:	4656      	mov	r6, sl
 8022396:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802239a:	9413      	str	r4, [sp, #76]	@ 0x4c
 802239c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80223a0:	f7de fb90 	bl	8000ac4 <__aeabi_d2iz>
 80223a4:	4605      	mov	r5, r0
 80223a6:	f7de f873 	bl	8000490 <__aeabi_i2d>
 80223aa:	4602      	mov	r2, r0
 80223ac:	460b      	mov	r3, r1
 80223ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80223b2:	f7dd ff1f 	bl	80001f4 <__aeabi_dsub>
 80223b6:	4602      	mov	r2, r0
 80223b8:	460b      	mov	r3, r1
 80223ba:	3530      	adds	r5, #48	@ 0x30
 80223bc:	f806 5b01 	strb.w	r5, [r6], #1
 80223c0:	42a6      	cmp	r6, r4
 80223c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80223c6:	f04f 0200 	mov.w	r2, #0
 80223ca:	d124      	bne.n	8022416 <_dtoa_r+0x62e>
 80223cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80223d0:	4bae      	ldr	r3, [pc, #696]	@ (802268c <_dtoa_r+0x8a4>)
 80223d2:	f7dd ff11 	bl	80001f8 <__adddf3>
 80223d6:	4602      	mov	r2, r0
 80223d8:	460b      	mov	r3, r1
 80223da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80223de:	f7de fb51 	bl	8000a84 <__aeabi_dcmpgt>
 80223e2:	2800      	cmp	r0, #0
 80223e4:	d163      	bne.n	80224ae <_dtoa_r+0x6c6>
 80223e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80223ea:	2000      	movs	r0, #0
 80223ec:	49a7      	ldr	r1, [pc, #668]	@ (802268c <_dtoa_r+0x8a4>)
 80223ee:	f7dd ff01 	bl	80001f4 <__aeabi_dsub>
 80223f2:	4602      	mov	r2, r0
 80223f4:	460b      	mov	r3, r1
 80223f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80223fa:	f7de fb25 	bl	8000a48 <__aeabi_dcmplt>
 80223fe:	2800      	cmp	r0, #0
 8022400:	f43f af14 	beq.w	802222c <_dtoa_r+0x444>
 8022404:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8022406:	1e73      	subs	r3, r6, #1
 8022408:	9313      	str	r3, [sp, #76]	@ 0x4c
 802240a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802240e:	2b30      	cmp	r3, #48	@ 0x30
 8022410:	d0f8      	beq.n	8022404 <_dtoa_r+0x61c>
 8022412:	4647      	mov	r7, r8
 8022414:	e03b      	b.n	802248e <_dtoa_r+0x6a6>
 8022416:	4b9e      	ldr	r3, [pc, #632]	@ (8022690 <_dtoa_r+0x8a8>)
 8022418:	f7de f8a4 	bl	8000564 <__aeabi_dmul>
 802241c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022420:	e7bc      	b.n	802239c <_dtoa_r+0x5b4>
 8022422:	4656      	mov	r6, sl
 8022424:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8022428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802242c:	4620      	mov	r0, r4
 802242e:	4629      	mov	r1, r5
 8022430:	f7de f9c2 	bl	80007b8 <__aeabi_ddiv>
 8022434:	f7de fb46 	bl	8000ac4 <__aeabi_d2iz>
 8022438:	4680      	mov	r8, r0
 802243a:	f7de f829 	bl	8000490 <__aeabi_i2d>
 802243e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022442:	f7de f88f 	bl	8000564 <__aeabi_dmul>
 8022446:	4602      	mov	r2, r0
 8022448:	460b      	mov	r3, r1
 802244a:	4620      	mov	r0, r4
 802244c:	4629      	mov	r1, r5
 802244e:	f7dd fed1 	bl	80001f4 <__aeabi_dsub>
 8022452:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8022456:	9d08      	ldr	r5, [sp, #32]
 8022458:	f806 4b01 	strb.w	r4, [r6], #1
 802245c:	eba6 040a 	sub.w	r4, r6, sl
 8022460:	42a5      	cmp	r5, r4
 8022462:	4602      	mov	r2, r0
 8022464:	460b      	mov	r3, r1
 8022466:	d133      	bne.n	80224d0 <_dtoa_r+0x6e8>
 8022468:	f7dd fec6 	bl	80001f8 <__adddf3>
 802246c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022470:	4604      	mov	r4, r0
 8022472:	460d      	mov	r5, r1
 8022474:	f7de fb06 	bl	8000a84 <__aeabi_dcmpgt>
 8022478:	b9c0      	cbnz	r0, 80224ac <_dtoa_r+0x6c4>
 802247a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802247e:	4620      	mov	r0, r4
 8022480:	4629      	mov	r1, r5
 8022482:	f7de fad7 	bl	8000a34 <__aeabi_dcmpeq>
 8022486:	b110      	cbz	r0, 802248e <_dtoa_r+0x6a6>
 8022488:	f018 0f01 	tst.w	r8, #1
 802248c:	d10e      	bne.n	80224ac <_dtoa_r+0x6c4>
 802248e:	4648      	mov	r0, r9
 8022490:	9903      	ldr	r1, [sp, #12]
 8022492:	f000 fbbb 	bl	8022c0c <_Bfree>
 8022496:	2300      	movs	r3, #0
 8022498:	7033      	strb	r3, [r6, #0]
 802249a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802249c:	3701      	adds	r7, #1
 802249e:	601f      	str	r7, [r3, #0]
 80224a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	f000 824b 	beq.w	802293e <_dtoa_r+0xb56>
 80224a8:	601e      	str	r6, [r3, #0]
 80224aa:	e248      	b.n	802293e <_dtoa_r+0xb56>
 80224ac:	46b8      	mov	r8, r7
 80224ae:	4633      	mov	r3, r6
 80224b0:	461e      	mov	r6, r3
 80224b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80224b6:	2a39      	cmp	r2, #57	@ 0x39
 80224b8:	d106      	bne.n	80224c8 <_dtoa_r+0x6e0>
 80224ba:	459a      	cmp	sl, r3
 80224bc:	d1f8      	bne.n	80224b0 <_dtoa_r+0x6c8>
 80224be:	2230      	movs	r2, #48	@ 0x30
 80224c0:	f108 0801 	add.w	r8, r8, #1
 80224c4:	f88a 2000 	strb.w	r2, [sl]
 80224c8:	781a      	ldrb	r2, [r3, #0]
 80224ca:	3201      	adds	r2, #1
 80224cc:	701a      	strb	r2, [r3, #0]
 80224ce:	e7a0      	b.n	8022412 <_dtoa_r+0x62a>
 80224d0:	2200      	movs	r2, #0
 80224d2:	4b6f      	ldr	r3, [pc, #444]	@ (8022690 <_dtoa_r+0x8a8>)
 80224d4:	f7de f846 	bl	8000564 <__aeabi_dmul>
 80224d8:	2200      	movs	r2, #0
 80224da:	2300      	movs	r3, #0
 80224dc:	4604      	mov	r4, r0
 80224de:	460d      	mov	r5, r1
 80224e0:	f7de faa8 	bl	8000a34 <__aeabi_dcmpeq>
 80224e4:	2800      	cmp	r0, #0
 80224e6:	d09f      	beq.n	8022428 <_dtoa_r+0x640>
 80224e8:	e7d1      	b.n	802248e <_dtoa_r+0x6a6>
 80224ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80224ec:	2a00      	cmp	r2, #0
 80224ee:	f000 80ea 	beq.w	80226c6 <_dtoa_r+0x8de>
 80224f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80224f4:	2a01      	cmp	r2, #1
 80224f6:	f300 80cd 	bgt.w	8022694 <_dtoa_r+0x8ac>
 80224fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80224fc:	2a00      	cmp	r2, #0
 80224fe:	f000 80c1 	beq.w	8022684 <_dtoa_r+0x89c>
 8022502:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8022506:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022508:	9e04      	ldr	r6, [sp, #16]
 802250a:	9a04      	ldr	r2, [sp, #16]
 802250c:	2101      	movs	r1, #1
 802250e:	441a      	add	r2, r3
 8022510:	9204      	str	r2, [sp, #16]
 8022512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022514:	4648      	mov	r0, r9
 8022516:	441a      	add	r2, r3
 8022518:	9209      	str	r2, [sp, #36]	@ 0x24
 802251a:	f000 fc2b 	bl	8022d74 <__i2b>
 802251e:	4605      	mov	r5, r0
 8022520:	b166      	cbz	r6, 802253c <_dtoa_r+0x754>
 8022522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022524:	2b00      	cmp	r3, #0
 8022526:	dd09      	ble.n	802253c <_dtoa_r+0x754>
 8022528:	42b3      	cmp	r3, r6
 802252a:	bfa8      	it	ge
 802252c:	4633      	movge	r3, r6
 802252e:	9a04      	ldr	r2, [sp, #16]
 8022530:	1af6      	subs	r6, r6, r3
 8022532:	1ad2      	subs	r2, r2, r3
 8022534:	9204      	str	r2, [sp, #16]
 8022536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022538:	1ad3      	subs	r3, r2, r3
 802253a:	9309      	str	r3, [sp, #36]	@ 0x24
 802253c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802253e:	b30b      	cbz	r3, 8022584 <_dtoa_r+0x79c>
 8022540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022542:	2b00      	cmp	r3, #0
 8022544:	f000 80c6 	beq.w	80226d4 <_dtoa_r+0x8ec>
 8022548:	2c00      	cmp	r4, #0
 802254a:	f000 80c0 	beq.w	80226ce <_dtoa_r+0x8e6>
 802254e:	4629      	mov	r1, r5
 8022550:	4622      	mov	r2, r4
 8022552:	4648      	mov	r0, r9
 8022554:	f000 fcc6 	bl	8022ee4 <__pow5mult>
 8022558:	9a03      	ldr	r2, [sp, #12]
 802255a:	4601      	mov	r1, r0
 802255c:	4605      	mov	r5, r0
 802255e:	4648      	mov	r0, r9
 8022560:	f000 fc1e 	bl	8022da0 <__multiply>
 8022564:	9903      	ldr	r1, [sp, #12]
 8022566:	4680      	mov	r8, r0
 8022568:	4648      	mov	r0, r9
 802256a:	f000 fb4f 	bl	8022c0c <_Bfree>
 802256e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022570:	1b1b      	subs	r3, r3, r4
 8022572:	930a      	str	r3, [sp, #40]	@ 0x28
 8022574:	f000 80b1 	beq.w	80226da <_dtoa_r+0x8f2>
 8022578:	4641      	mov	r1, r8
 802257a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802257c:	4648      	mov	r0, r9
 802257e:	f000 fcb1 	bl	8022ee4 <__pow5mult>
 8022582:	9003      	str	r0, [sp, #12]
 8022584:	2101      	movs	r1, #1
 8022586:	4648      	mov	r0, r9
 8022588:	f000 fbf4 	bl	8022d74 <__i2b>
 802258c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802258e:	4604      	mov	r4, r0
 8022590:	2b00      	cmp	r3, #0
 8022592:	f000 81d8 	beq.w	8022946 <_dtoa_r+0xb5e>
 8022596:	461a      	mov	r2, r3
 8022598:	4601      	mov	r1, r0
 802259a:	4648      	mov	r0, r9
 802259c:	f000 fca2 	bl	8022ee4 <__pow5mult>
 80225a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80225a2:	4604      	mov	r4, r0
 80225a4:	2b01      	cmp	r3, #1
 80225a6:	f300 809f 	bgt.w	80226e8 <_dtoa_r+0x900>
 80225aa:	9b06      	ldr	r3, [sp, #24]
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	f040 8097 	bne.w	80226e0 <_dtoa_r+0x8f8>
 80225b2:	9b07      	ldr	r3, [sp, #28]
 80225b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	f040 8093 	bne.w	80226e4 <_dtoa_r+0x8fc>
 80225be:	9b07      	ldr	r3, [sp, #28]
 80225c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80225c4:	0d1b      	lsrs	r3, r3, #20
 80225c6:	051b      	lsls	r3, r3, #20
 80225c8:	b133      	cbz	r3, 80225d8 <_dtoa_r+0x7f0>
 80225ca:	9b04      	ldr	r3, [sp, #16]
 80225cc:	3301      	adds	r3, #1
 80225ce:	9304      	str	r3, [sp, #16]
 80225d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225d2:	3301      	adds	r3, #1
 80225d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80225d6:	2301      	movs	r3, #1
 80225d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80225da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80225dc:	2b00      	cmp	r3, #0
 80225de:	f000 81b8 	beq.w	8022952 <_dtoa_r+0xb6a>
 80225e2:	6923      	ldr	r3, [r4, #16]
 80225e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80225e8:	6918      	ldr	r0, [r3, #16]
 80225ea:	f000 fb77 	bl	8022cdc <__hi0bits>
 80225ee:	f1c0 0020 	rsb	r0, r0, #32
 80225f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225f4:	4418      	add	r0, r3
 80225f6:	f010 001f 	ands.w	r0, r0, #31
 80225fa:	f000 8082 	beq.w	8022702 <_dtoa_r+0x91a>
 80225fe:	f1c0 0320 	rsb	r3, r0, #32
 8022602:	2b04      	cmp	r3, #4
 8022604:	dd73      	ble.n	80226ee <_dtoa_r+0x906>
 8022606:	9b04      	ldr	r3, [sp, #16]
 8022608:	f1c0 001c 	rsb	r0, r0, #28
 802260c:	4403      	add	r3, r0
 802260e:	9304      	str	r3, [sp, #16]
 8022610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022612:	4406      	add	r6, r0
 8022614:	4403      	add	r3, r0
 8022616:	9309      	str	r3, [sp, #36]	@ 0x24
 8022618:	9b04      	ldr	r3, [sp, #16]
 802261a:	2b00      	cmp	r3, #0
 802261c:	dd05      	ble.n	802262a <_dtoa_r+0x842>
 802261e:	461a      	mov	r2, r3
 8022620:	4648      	mov	r0, r9
 8022622:	9903      	ldr	r1, [sp, #12]
 8022624:	f000 fcb8 	bl	8022f98 <__lshift>
 8022628:	9003      	str	r0, [sp, #12]
 802262a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802262c:	2b00      	cmp	r3, #0
 802262e:	dd05      	ble.n	802263c <_dtoa_r+0x854>
 8022630:	4621      	mov	r1, r4
 8022632:	461a      	mov	r2, r3
 8022634:	4648      	mov	r0, r9
 8022636:	f000 fcaf 	bl	8022f98 <__lshift>
 802263a:	4604      	mov	r4, r0
 802263c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802263e:	2b00      	cmp	r3, #0
 8022640:	d061      	beq.n	8022706 <_dtoa_r+0x91e>
 8022642:	4621      	mov	r1, r4
 8022644:	9803      	ldr	r0, [sp, #12]
 8022646:	f000 fd13 	bl	8023070 <__mcmp>
 802264a:	2800      	cmp	r0, #0
 802264c:	da5b      	bge.n	8022706 <_dtoa_r+0x91e>
 802264e:	2300      	movs	r3, #0
 8022650:	220a      	movs	r2, #10
 8022652:	4648      	mov	r0, r9
 8022654:	9903      	ldr	r1, [sp, #12]
 8022656:	f000 fafb 	bl	8022c50 <__multadd>
 802265a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802265c:	f107 38ff 	add.w	r8, r7, #4294967295
 8022660:	9003      	str	r0, [sp, #12]
 8022662:	2b00      	cmp	r3, #0
 8022664:	f000 8177 	beq.w	8022956 <_dtoa_r+0xb6e>
 8022668:	4629      	mov	r1, r5
 802266a:	2300      	movs	r3, #0
 802266c:	220a      	movs	r2, #10
 802266e:	4648      	mov	r0, r9
 8022670:	f000 faee 	bl	8022c50 <__multadd>
 8022674:	f1bb 0f00 	cmp.w	fp, #0
 8022678:	4605      	mov	r5, r0
 802267a:	dc6f      	bgt.n	802275c <_dtoa_r+0x974>
 802267c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802267e:	2b02      	cmp	r3, #2
 8022680:	dc49      	bgt.n	8022716 <_dtoa_r+0x92e>
 8022682:	e06b      	b.n	802275c <_dtoa_r+0x974>
 8022684:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022686:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802268a:	e73c      	b.n	8022506 <_dtoa_r+0x71e>
 802268c:	3fe00000 	.word	0x3fe00000
 8022690:	40240000 	.word	0x40240000
 8022694:	9b08      	ldr	r3, [sp, #32]
 8022696:	1e5c      	subs	r4, r3, #1
 8022698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802269a:	42a3      	cmp	r3, r4
 802269c:	db09      	blt.n	80226b2 <_dtoa_r+0x8ca>
 802269e:	1b1c      	subs	r4, r3, r4
 80226a0:	9b08      	ldr	r3, [sp, #32]
 80226a2:	2b00      	cmp	r3, #0
 80226a4:	f6bf af30 	bge.w	8022508 <_dtoa_r+0x720>
 80226a8:	9b04      	ldr	r3, [sp, #16]
 80226aa:	9a08      	ldr	r2, [sp, #32]
 80226ac:	1a9e      	subs	r6, r3, r2
 80226ae:	2300      	movs	r3, #0
 80226b0:	e72b      	b.n	802250a <_dtoa_r+0x722>
 80226b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80226b6:	1ae3      	subs	r3, r4, r3
 80226b8:	441a      	add	r2, r3
 80226ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80226bc:	9e04      	ldr	r6, [sp, #16]
 80226be:	2400      	movs	r4, #0
 80226c0:	9b08      	ldr	r3, [sp, #32]
 80226c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80226c4:	e721      	b.n	802250a <_dtoa_r+0x722>
 80226c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80226c8:	9e04      	ldr	r6, [sp, #16]
 80226ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80226cc:	e728      	b.n	8022520 <_dtoa_r+0x738>
 80226ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80226d2:	e751      	b.n	8022578 <_dtoa_r+0x790>
 80226d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80226d6:	9903      	ldr	r1, [sp, #12]
 80226d8:	e750      	b.n	802257c <_dtoa_r+0x794>
 80226da:	f8cd 800c 	str.w	r8, [sp, #12]
 80226de:	e751      	b.n	8022584 <_dtoa_r+0x79c>
 80226e0:	2300      	movs	r3, #0
 80226e2:	e779      	b.n	80225d8 <_dtoa_r+0x7f0>
 80226e4:	9b06      	ldr	r3, [sp, #24]
 80226e6:	e777      	b.n	80225d8 <_dtoa_r+0x7f0>
 80226e8:	2300      	movs	r3, #0
 80226ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80226ec:	e779      	b.n	80225e2 <_dtoa_r+0x7fa>
 80226ee:	d093      	beq.n	8022618 <_dtoa_r+0x830>
 80226f0:	9a04      	ldr	r2, [sp, #16]
 80226f2:	331c      	adds	r3, #28
 80226f4:	441a      	add	r2, r3
 80226f6:	9204      	str	r2, [sp, #16]
 80226f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80226fa:	441e      	add	r6, r3
 80226fc:	441a      	add	r2, r3
 80226fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8022700:	e78a      	b.n	8022618 <_dtoa_r+0x830>
 8022702:	4603      	mov	r3, r0
 8022704:	e7f4      	b.n	80226f0 <_dtoa_r+0x908>
 8022706:	9b08      	ldr	r3, [sp, #32]
 8022708:	46b8      	mov	r8, r7
 802270a:	2b00      	cmp	r3, #0
 802270c:	dc20      	bgt.n	8022750 <_dtoa_r+0x968>
 802270e:	469b      	mov	fp, r3
 8022710:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022712:	2b02      	cmp	r3, #2
 8022714:	dd1e      	ble.n	8022754 <_dtoa_r+0x96c>
 8022716:	f1bb 0f00 	cmp.w	fp, #0
 802271a:	f47f adb1 	bne.w	8022280 <_dtoa_r+0x498>
 802271e:	4621      	mov	r1, r4
 8022720:	465b      	mov	r3, fp
 8022722:	2205      	movs	r2, #5
 8022724:	4648      	mov	r0, r9
 8022726:	f000 fa93 	bl	8022c50 <__multadd>
 802272a:	4601      	mov	r1, r0
 802272c:	4604      	mov	r4, r0
 802272e:	9803      	ldr	r0, [sp, #12]
 8022730:	f000 fc9e 	bl	8023070 <__mcmp>
 8022734:	2800      	cmp	r0, #0
 8022736:	f77f ada3 	ble.w	8022280 <_dtoa_r+0x498>
 802273a:	4656      	mov	r6, sl
 802273c:	2331      	movs	r3, #49	@ 0x31
 802273e:	f108 0801 	add.w	r8, r8, #1
 8022742:	f806 3b01 	strb.w	r3, [r6], #1
 8022746:	e59f      	b.n	8022288 <_dtoa_r+0x4a0>
 8022748:	46b8      	mov	r8, r7
 802274a:	9c08      	ldr	r4, [sp, #32]
 802274c:	4625      	mov	r5, r4
 802274e:	e7f4      	b.n	802273a <_dtoa_r+0x952>
 8022750:	f8dd b020 	ldr.w	fp, [sp, #32]
 8022754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022756:	2b00      	cmp	r3, #0
 8022758:	f000 8101 	beq.w	802295e <_dtoa_r+0xb76>
 802275c:	2e00      	cmp	r6, #0
 802275e:	dd05      	ble.n	802276c <_dtoa_r+0x984>
 8022760:	4629      	mov	r1, r5
 8022762:	4632      	mov	r2, r6
 8022764:	4648      	mov	r0, r9
 8022766:	f000 fc17 	bl	8022f98 <__lshift>
 802276a:	4605      	mov	r5, r0
 802276c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802276e:	2b00      	cmp	r3, #0
 8022770:	d05c      	beq.n	802282c <_dtoa_r+0xa44>
 8022772:	4648      	mov	r0, r9
 8022774:	6869      	ldr	r1, [r5, #4]
 8022776:	f000 fa09 	bl	8022b8c <_Balloc>
 802277a:	4606      	mov	r6, r0
 802277c:	b928      	cbnz	r0, 802278a <_dtoa_r+0x9a2>
 802277e:	4602      	mov	r2, r0
 8022780:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8022784:	4b80      	ldr	r3, [pc, #512]	@ (8022988 <_dtoa_r+0xba0>)
 8022786:	f7ff bb43 	b.w	8021e10 <_dtoa_r+0x28>
 802278a:	692a      	ldr	r2, [r5, #16]
 802278c:	f105 010c 	add.w	r1, r5, #12
 8022790:	3202      	adds	r2, #2
 8022792:	0092      	lsls	r2, r2, #2
 8022794:	300c      	adds	r0, #12
 8022796:	f7ff fa70 	bl	8021c7a <memcpy>
 802279a:	2201      	movs	r2, #1
 802279c:	4631      	mov	r1, r6
 802279e:	4648      	mov	r0, r9
 80227a0:	f000 fbfa 	bl	8022f98 <__lshift>
 80227a4:	462f      	mov	r7, r5
 80227a6:	4605      	mov	r5, r0
 80227a8:	f10a 0301 	add.w	r3, sl, #1
 80227ac:	9304      	str	r3, [sp, #16]
 80227ae:	eb0a 030b 	add.w	r3, sl, fp
 80227b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80227b4:	9b06      	ldr	r3, [sp, #24]
 80227b6:	f003 0301 	and.w	r3, r3, #1
 80227ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80227bc:	9b04      	ldr	r3, [sp, #16]
 80227be:	4621      	mov	r1, r4
 80227c0:	9803      	ldr	r0, [sp, #12]
 80227c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80227c6:	f7ff fa85 	bl	8021cd4 <quorem>
 80227ca:	4603      	mov	r3, r0
 80227cc:	4639      	mov	r1, r7
 80227ce:	3330      	adds	r3, #48	@ 0x30
 80227d0:	9006      	str	r0, [sp, #24]
 80227d2:	9803      	ldr	r0, [sp, #12]
 80227d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80227d6:	f000 fc4b 	bl	8023070 <__mcmp>
 80227da:	462a      	mov	r2, r5
 80227dc:	9008      	str	r0, [sp, #32]
 80227de:	4621      	mov	r1, r4
 80227e0:	4648      	mov	r0, r9
 80227e2:	f000 fc61 	bl	80230a8 <__mdiff>
 80227e6:	68c2      	ldr	r2, [r0, #12]
 80227e8:	4606      	mov	r6, r0
 80227ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227ec:	bb02      	cbnz	r2, 8022830 <_dtoa_r+0xa48>
 80227ee:	4601      	mov	r1, r0
 80227f0:	9803      	ldr	r0, [sp, #12]
 80227f2:	f000 fc3d 	bl	8023070 <__mcmp>
 80227f6:	4602      	mov	r2, r0
 80227f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227fa:	4631      	mov	r1, r6
 80227fc:	4648      	mov	r0, r9
 80227fe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8022802:	f000 fa03 	bl	8022c0c <_Bfree>
 8022806:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022808:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802280a:	9e04      	ldr	r6, [sp, #16]
 802280c:	ea42 0103 	orr.w	r1, r2, r3
 8022810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022812:	4319      	orrs	r1, r3
 8022814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022816:	d10d      	bne.n	8022834 <_dtoa_r+0xa4c>
 8022818:	2b39      	cmp	r3, #57	@ 0x39
 802281a:	d027      	beq.n	802286c <_dtoa_r+0xa84>
 802281c:	9a08      	ldr	r2, [sp, #32]
 802281e:	2a00      	cmp	r2, #0
 8022820:	dd01      	ble.n	8022826 <_dtoa_r+0xa3e>
 8022822:	9b06      	ldr	r3, [sp, #24]
 8022824:	3331      	adds	r3, #49	@ 0x31
 8022826:	f88b 3000 	strb.w	r3, [fp]
 802282a:	e52e      	b.n	802228a <_dtoa_r+0x4a2>
 802282c:	4628      	mov	r0, r5
 802282e:	e7b9      	b.n	80227a4 <_dtoa_r+0x9bc>
 8022830:	2201      	movs	r2, #1
 8022832:	e7e2      	b.n	80227fa <_dtoa_r+0xa12>
 8022834:	9908      	ldr	r1, [sp, #32]
 8022836:	2900      	cmp	r1, #0
 8022838:	db04      	blt.n	8022844 <_dtoa_r+0xa5c>
 802283a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 802283c:	4301      	orrs	r1, r0
 802283e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022840:	4301      	orrs	r1, r0
 8022842:	d120      	bne.n	8022886 <_dtoa_r+0xa9e>
 8022844:	2a00      	cmp	r2, #0
 8022846:	ddee      	ble.n	8022826 <_dtoa_r+0xa3e>
 8022848:	2201      	movs	r2, #1
 802284a:	9903      	ldr	r1, [sp, #12]
 802284c:	4648      	mov	r0, r9
 802284e:	9304      	str	r3, [sp, #16]
 8022850:	f000 fba2 	bl	8022f98 <__lshift>
 8022854:	4621      	mov	r1, r4
 8022856:	9003      	str	r0, [sp, #12]
 8022858:	f000 fc0a 	bl	8023070 <__mcmp>
 802285c:	2800      	cmp	r0, #0
 802285e:	9b04      	ldr	r3, [sp, #16]
 8022860:	dc02      	bgt.n	8022868 <_dtoa_r+0xa80>
 8022862:	d1e0      	bne.n	8022826 <_dtoa_r+0xa3e>
 8022864:	07da      	lsls	r2, r3, #31
 8022866:	d5de      	bpl.n	8022826 <_dtoa_r+0xa3e>
 8022868:	2b39      	cmp	r3, #57	@ 0x39
 802286a:	d1da      	bne.n	8022822 <_dtoa_r+0xa3a>
 802286c:	2339      	movs	r3, #57	@ 0x39
 802286e:	f88b 3000 	strb.w	r3, [fp]
 8022872:	4633      	mov	r3, r6
 8022874:	461e      	mov	r6, r3
 8022876:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802287a:	3b01      	subs	r3, #1
 802287c:	2a39      	cmp	r2, #57	@ 0x39
 802287e:	d04e      	beq.n	802291e <_dtoa_r+0xb36>
 8022880:	3201      	adds	r2, #1
 8022882:	701a      	strb	r2, [r3, #0]
 8022884:	e501      	b.n	802228a <_dtoa_r+0x4a2>
 8022886:	2a00      	cmp	r2, #0
 8022888:	dd03      	ble.n	8022892 <_dtoa_r+0xaaa>
 802288a:	2b39      	cmp	r3, #57	@ 0x39
 802288c:	d0ee      	beq.n	802286c <_dtoa_r+0xa84>
 802288e:	3301      	adds	r3, #1
 8022890:	e7c9      	b.n	8022826 <_dtoa_r+0xa3e>
 8022892:	9a04      	ldr	r2, [sp, #16]
 8022894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022896:	f802 3c01 	strb.w	r3, [r2, #-1]
 802289a:	428a      	cmp	r2, r1
 802289c:	d028      	beq.n	80228f0 <_dtoa_r+0xb08>
 802289e:	2300      	movs	r3, #0
 80228a0:	220a      	movs	r2, #10
 80228a2:	9903      	ldr	r1, [sp, #12]
 80228a4:	4648      	mov	r0, r9
 80228a6:	f000 f9d3 	bl	8022c50 <__multadd>
 80228aa:	42af      	cmp	r7, r5
 80228ac:	9003      	str	r0, [sp, #12]
 80228ae:	f04f 0300 	mov.w	r3, #0
 80228b2:	f04f 020a 	mov.w	r2, #10
 80228b6:	4639      	mov	r1, r7
 80228b8:	4648      	mov	r0, r9
 80228ba:	d107      	bne.n	80228cc <_dtoa_r+0xae4>
 80228bc:	f000 f9c8 	bl	8022c50 <__multadd>
 80228c0:	4607      	mov	r7, r0
 80228c2:	4605      	mov	r5, r0
 80228c4:	9b04      	ldr	r3, [sp, #16]
 80228c6:	3301      	adds	r3, #1
 80228c8:	9304      	str	r3, [sp, #16]
 80228ca:	e777      	b.n	80227bc <_dtoa_r+0x9d4>
 80228cc:	f000 f9c0 	bl	8022c50 <__multadd>
 80228d0:	4629      	mov	r1, r5
 80228d2:	4607      	mov	r7, r0
 80228d4:	2300      	movs	r3, #0
 80228d6:	220a      	movs	r2, #10
 80228d8:	4648      	mov	r0, r9
 80228da:	f000 f9b9 	bl	8022c50 <__multadd>
 80228de:	4605      	mov	r5, r0
 80228e0:	e7f0      	b.n	80228c4 <_dtoa_r+0xadc>
 80228e2:	f1bb 0f00 	cmp.w	fp, #0
 80228e6:	bfcc      	ite	gt
 80228e8:	465e      	movgt	r6, fp
 80228ea:	2601      	movle	r6, #1
 80228ec:	2700      	movs	r7, #0
 80228ee:	4456      	add	r6, sl
 80228f0:	2201      	movs	r2, #1
 80228f2:	9903      	ldr	r1, [sp, #12]
 80228f4:	4648      	mov	r0, r9
 80228f6:	9304      	str	r3, [sp, #16]
 80228f8:	f000 fb4e 	bl	8022f98 <__lshift>
 80228fc:	4621      	mov	r1, r4
 80228fe:	9003      	str	r0, [sp, #12]
 8022900:	f000 fbb6 	bl	8023070 <__mcmp>
 8022904:	2800      	cmp	r0, #0
 8022906:	dcb4      	bgt.n	8022872 <_dtoa_r+0xa8a>
 8022908:	d102      	bne.n	8022910 <_dtoa_r+0xb28>
 802290a:	9b04      	ldr	r3, [sp, #16]
 802290c:	07db      	lsls	r3, r3, #31
 802290e:	d4b0      	bmi.n	8022872 <_dtoa_r+0xa8a>
 8022910:	4633      	mov	r3, r6
 8022912:	461e      	mov	r6, r3
 8022914:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022918:	2a30      	cmp	r2, #48	@ 0x30
 802291a:	d0fa      	beq.n	8022912 <_dtoa_r+0xb2a>
 802291c:	e4b5      	b.n	802228a <_dtoa_r+0x4a2>
 802291e:	459a      	cmp	sl, r3
 8022920:	d1a8      	bne.n	8022874 <_dtoa_r+0xa8c>
 8022922:	2331      	movs	r3, #49	@ 0x31
 8022924:	f108 0801 	add.w	r8, r8, #1
 8022928:	f88a 3000 	strb.w	r3, [sl]
 802292c:	e4ad      	b.n	802228a <_dtoa_r+0x4a2>
 802292e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022930:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802298c <_dtoa_r+0xba4>
 8022934:	b11b      	cbz	r3, 802293e <_dtoa_r+0xb56>
 8022936:	f10a 0308 	add.w	r3, sl, #8
 802293a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802293c:	6013      	str	r3, [r2, #0]
 802293e:	4650      	mov	r0, sl
 8022940:	b017      	add	sp, #92	@ 0x5c
 8022942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022946:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022948:	2b01      	cmp	r3, #1
 802294a:	f77f ae2e 	ble.w	80225aa <_dtoa_r+0x7c2>
 802294e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022950:	930a      	str	r3, [sp, #40]	@ 0x28
 8022952:	2001      	movs	r0, #1
 8022954:	e64d      	b.n	80225f2 <_dtoa_r+0x80a>
 8022956:	f1bb 0f00 	cmp.w	fp, #0
 802295a:	f77f aed9 	ble.w	8022710 <_dtoa_r+0x928>
 802295e:	4656      	mov	r6, sl
 8022960:	4621      	mov	r1, r4
 8022962:	9803      	ldr	r0, [sp, #12]
 8022964:	f7ff f9b6 	bl	8021cd4 <quorem>
 8022968:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802296c:	f806 3b01 	strb.w	r3, [r6], #1
 8022970:	eba6 020a 	sub.w	r2, r6, sl
 8022974:	4593      	cmp	fp, r2
 8022976:	ddb4      	ble.n	80228e2 <_dtoa_r+0xafa>
 8022978:	2300      	movs	r3, #0
 802297a:	220a      	movs	r2, #10
 802297c:	4648      	mov	r0, r9
 802297e:	9903      	ldr	r1, [sp, #12]
 8022980:	f000 f966 	bl	8022c50 <__multadd>
 8022984:	9003      	str	r0, [sp, #12]
 8022986:	e7eb      	b.n	8022960 <_dtoa_r+0xb78>
 8022988:	080307a4 	.word	0x080307a4
 802298c:	0803073f 	.word	0x0803073f

08022990 <_free_r>:
 8022990:	b538      	push	{r3, r4, r5, lr}
 8022992:	4605      	mov	r5, r0
 8022994:	2900      	cmp	r1, #0
 8022996:	d040      	beq.n	8022a1a <_free_r+0x8a>
 8022998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802299c:	1f0c      	subs	r4, r1, #4
 802299e:	2b00      	cmp	r3, #0
 80229a0:	bfb8      	it	lt
 80229a2:	18e4      	addlt	r4, r4, r3
 80229a4:	f000 f8e6 	bl	8022b74 <__malloc_lock>
 80229a8:	4a1c      	ldr	r2, [pc, #112]	@ (8022a1c <_free_r+0x8c>)
 80229aa:	6813      	ldr	r3, [r2, #0]
 80229ac:	b933      	cbnz	r3, 80229bc <_free_r+0x2c>
 80229ae:	6063      	str	r3, [r4, #4]
 80229b0:	6014      	str	r4, [r2, #0]
 80229b2:	4628      	mov	r0, r5
 80229b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80229b8:	f000 b8e2 	b.w	8022b80 <__malloc_unlock>
 80229bc:	42a3      	cmp	r3, r4
 80229be:	d908      	bls.n	80229d2 <_free_r+0x42>
 80229c0:	6820      	ldr	r0, [r4, #0]
 80229c2:	1821      	adds	r1, r4, r0
 80229c4:	428b      	cmp	r3, r1
 80229c6:	bf01      	itttt	eq
 80229c8:	6819      	ldreq	r1, [r3, #0]
 80229ca:	685b      	ldreq	r3, [r3, #4]
 80229cc:	1809      	addeq	r1, r1, r0
 80229ce:	6021      	streq	r1, [r4, #0]
 80229d0:	e7ed      	b.n	80229ae <_free_r+0x1e>
 80229d2:	461a      	mov	r2, r3
 80229d4:	685b      	ldr	r3, [r3, #4]
 80229d6:	b10b      	cbz	r3, 80229dc <_free_r+0x4c>
 80229d8:	42a3      	cmp	r3, r4
 80229da:	d9fa      	bls.n	80229d2 <_free_r+0x42>
 80229dc:	6811      	ldr	r1, [r2, #0]
 80229de:	1850      	adds	r0, r2, r1
 80229e0:	42a0      	cmp	r0, r4
 80229e2:	d10b      	bne.n	80229fc <_free_r+0x6c>
 80229e4:	6820      	ldr	r0, [r4, #0]
 80229e6:	4401      	add	r1, r0
 80229e8:	1850      	adds	r0, r2, r1
 80229ea:	4283      	cmp	r3, r0
 80229ec:	6011      	str	r1, [r2, #0]
 80229ee:	d1e0      	bne.n	80229b2 <_free_r+0x22>
 80229f0:	6818      	ldr	r0, [r3, #0]
 80229f2:	685b      	ldr	r3, [r3, #4]
 80229f4:	4408      	add	r0, r1
 80229f6:	6010      	str	r0, [r2, #0]
 80229f8:	6053      	str	r3, [r2, #4]
 80229fa:	e7da      	b.n	80229b2 <_free_r+0x22>
 80229fc:	d902      	bls.n	8022a04 <_free_r+0x74>
 80229fe:	230c      	movs	r3, #12
 8022a00:	602b      	str	r3, [r5, #0]
 8022a02:	e7d6      	b.n	80229b2 <_free_r+0x22>
 8022a04:	6820      	ldr	r0, [r4, #0]
 8022a06:	1821      	adds	r1, r4, r0
 8022a08:	428b      	cmp	r3, r1
 8022a0a:	bf01      	itttt	eq
 8022a0c:	6819      	ldreq	r1, [r3, #0]
 8022a0e:	685b      	ldreq	r3, [r3, #4]
 8022a10:	1809      	addeq	r1, r1, r0
 8022a12:	6021      	streq	r1, [r4, #0]
 8022a14:	6063      	str	r3, [r4, #4]
 8022a16:	6054      	str	r4, [r2, #4]
 8022a18:	e7cb      	b.n	80229b2 <_free_r+0x22>
 8022a1a:	bd38      	pop	{r3, r4, r5, pc}
 8022a1c:	2000c0a4 	.word	0x2000c0a4

08022a20 <malloc>:
 8022a20:	4b02      	ldr	r3, [pc, #8]	@ (8022a2c <malloc+0xc>)
 8022a22:	4601      	mov	r1, r0
 8022a24:	6818      	ldr	r0, [r3, #0]
 8022a26:	f000 b825 	b.w	8022a74 <_malloc_r>
 8022a2a:	bf00      	nop
 8022a2c:	2000012c 	.word	0x2000012c

08022a30 <sbrk_aligned>:
 8022a30:	b570      	push	{r4, r5, r6, lr}
 8022a32:	4e0f      	ldr	r6, [pc, #60]	@ (8022a70 <sbrk_aligned+0x40>)
 8022a34:	460c      	mov	r4, r1
 8022a36:	6831      	ldr	r1, [r6, #0]
 8022a38:	4605      	mov	r5, r0
 8022a3a:	b911      	cbnz	r1, 8022a42 <sbrk_aligned+0x12>
 8022a3c:	f001 fb80 	bl	8024140 <_sbrk_r>
 8022a40:	6030      	str	r0, [r6, #0]
 8022a42:	4621      	mov	r1, r4
 8022a44:	4628      	mov	r0, r5
 8022a46:	f001 fb7b 	bl	8024140 <_sbrk_r>
 8022a4a:	1c43      	adds	r3, r0, #1
 8022a4c:	d103      	bne.n	8022a56 <sbrk_aligned+0x26>
 8022a4e:	f04f 34ff 	mov.w	r4, #4294967295
 8022a52:	4620      	mov	r0, r4
 8022a54:	bd70      	pop	{r4, r5, r6, pc}
 8022a56:	1cc4      	adds	r4, r0, #3
 8022a58:	f024 0403 	bic.w	r4, r4, #3
 8022a5c:	42a0      	cmp	r0, r4
 8022a5e:	d0f8      	beq.n	8022a52 <sbrk_aligned+0x22>
 8022a60:	1a21      	subs	r1, r4, r0
 8022a62:	4628      	mov	r0, r5
 8022a64:	f001 fb6c 	bl	8024140 <_sbrk_r>
 8022a68:	3001      	adds	r0, #1
 8022a6a:	d1f2      	bne.n	8022a52 <sbrk_aligned+0x22>
 8022a6c:	e7ef      	b.n	8022a4e <sbrk_aligned+0x1e>
 8022a6e:	bf00      	nop
 8022a70:	2000c0a0 	.word	0x2000c0a0

08022a74 <_malloc_r>:
 8022a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022a78:	1ccd      	adds	r5, r1, #3
 8022a7a:	f025 0503 	bic.w	r5, r5, #3
 8022a7e:	3508      	adds	r5, #8
 8022a80:	2d0c      	cmp	r5, #12
 8022a82:	bf38      	it	cc
 8022a84:	250c      	movcc	r5, #12
 8022a86:	2d00      	cmp	r5, #0
 8022a88:	4606      	mov	r6, r0
 8022a8a:	db01      	blt.n	8022a90 <_malloc_r+0x1c>
 8022a8c:	42a9      	cmp	r1, r5
 8022a8e:	d904      	bls.n	8022a9a <_malloc_r+0x26>
 8022a90:	230c      	movs	r3, #12
 8022a92:	6033      	str	r3, [r6, #0]
 8022a94:	2000      	movs	r0, #0
 8022a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022a9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022b70 <_malloc_r+0xfc>
 8022a9e:	f000 f869 	bl	8022b74 <__malloc_lock>
 8022aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8022aa6:	461c      	mov	r4, r3
 8022aa8:	bb44      	cbnz	r4, 8022afc <_malloc_r+0x88>
 8022aaa:	4629      	mov	r1, r5
 8022aac:	4630      	mov	r0, r6
 8022aae:	f7ff ffbf 	bl	8022a30 <sbrk_aligned>
 8022ab2:	1c43      	adds	r3, r0, #1
 8022ab4:	4604      	mov	r4, r0
 8022ab6:	d158      	bne.n	8022b6a <_malloc_r+0xf6>
 8022ab8:	f8d8 4000 	ldr.w	r4, [r8]
 8022abc:	4627      	mov	r7, r4
 8022abe:	2f00      	cmp	r7, #0
 8022ac0:	d143      	bne.n	8022b4a <_malloc_r+0xd6>
 8022ac2:	2c00      	cmp	r4, #0
 8022ac4:	d04b      	beq.n	8022b5e <_malloc_r+0xea>
 8022ac6:	6823      	ldr	r3, [r4, #0]
 8022ac8:	4639      	mov	r1, r7
 8022aca:	4630      	mov	r0, r6
 8022acc:	eb04 0903 	add.w	r9, r4, r3
 8022ad0:	f001 fb36 	bl	8024140 <_sbrk_r>
 8022ad4:	4581      	cmp	r9, r0
 8022ad6:	d142      	bne.n	8022b5e <_malloc_r+0xea>
 8022ad8:	6821      	ldr	r1, [r4, #0]
 8022ada:	4630      	mov	r0, r6
 8022adc:	1a6d      	subs	r5, r5, r1
 8022ade:	4629      	mov	r1, r5
 8022ae0:	f7ff ffa6 	bl	8022a30 <sbrk_aligned>
 8022ae4:	3001      	adds	r0, #1
 8022ae6:	d03a      	beq.n	8022b5e <_malloc_r+0xea>
 8022ae8:	6823      	ldr	r3, [r4, #0]
 8022aea:	442b      	add	r3, r5
 8022aec:	6023      	str	r3, [r4, #0]
 8022aee:	f8d8 3000 	ldr.w	r3, [r8]
 8022af2:	685a      	ldr	r2, [r3, #4]
 8022af4:	bb62      	cbnz	r2, 8022b50 <_malloc_r+0xdc>
 8022af6:	f8c8 7000 	str.w	r7, [r8]
 8022afa:	e00f      	b.n	8022b1c <_malloc_r+0xa8>
 8022afc:	6822      	ldr	r2, [r4, #0]
 8022afe:	1b52      	subs	r2, r2, r5
 8022b00:	d420      	bmi.n	8022b44 <_malloc_r+0xd0>
 8022b02:	2a0b      	cmp	r2, #11
 8022b04:	d917      	bls.n	8022b36 <_malloc_r+0xc2>
 8022b06:	1961      	adds	r1, r4, r5
 8022b08:	42a3      	cmp	r3, r4
 8022b0a:	6025      	str	r5, [r4, #0]
 8022b0c:	bf18      	it	ne
 8022b0e:	6059      	strne	r1, [r3, #4]
 8022b10:	6863      	ldr	r3, [r4, #4]
 8022b12:	bf08      	it	eq
 8022b14:	f8c8 1000 	streq.w	r1, [r8]
 8022b18:	5162      	str	r2, [r4, r5]
 8022b1a:	604b      	str	r3, [r1, #4]
 8022b1c:	4630      	mov	r0, r6
 8022b1e:	f000 f82f 	bl	8022b80 <__malloc_unlock>
 8022b22:	f104 000b 	add.w	r0, r4, #11
 8022b26:	1d23      	adds	r3, r4, #4
 8022b28:	f020 0007 	bic.w	r0, r0, #7
 8022b2c:	1ac2      	subs	r2, r0, r3
 8022b2e:	bf1c      	itt	ne
 8022b30:	1a1b      	subne	r3, r3, r0
 8022b32:	50a3      	strne	r3, [r4, r2]
 8022b34:	e7af      	b.n	8022a96 <_malloc_r+0x22>
 8022b36:	6862      	ldr	r2, [r4, #4]
 8022b38:	42a3      	cmp	r3, r4
 8022b3a:	bf0c      	ite	eq
 8022b3c:	f8c8 2000 	streq.w	r2, [r8]
 8022b40:	605a      	strne	r2, [r3, #4]
 8022b42:	e7eb      	b.n	8022b1c <_malloc_r+0xa8>
 8022b44:	4623      	mov	r3, r4
 8022b46:	6864      	ldr	r4, [r4, #4]
 8022b48:	e7ae      	b.n	8022aa8 <_malloc_r+0x34>
 8022b4a:	463c      	mov	r4, r7
 8022b4c:	687f      	ldr	r7, [r7, #4]
 8022b4e:	e7b6      	b.n	8022abe <_malloc_r+0x4a>
 8022b50:	461a      	mov	r2, r3
 8022b52:	685b      	ldr	r3, [r3, #4]
 8022b54:	42a3      	cmp	r3, r4
 8022b56:	d1fb      	bne.n	8022b50 <_malloc_r+0xdc>
 8022b58:	2300      	movs	r3, #0
 8022b5a:	6053      	str	r3, [r2, #4]
 8022b5c:	e7de      	b.n	8022b1c <_malloc_r+0xa8>
 8022b5e:	230c      	movs	r3, #12
 8022b60:	4630      	mov	r0, r6
 8022b62:	6033      	str	r3, [r6, #0]
 8022b64:	f000 f80c 	bl	8022b80 <__malloc_unlock>
 8022b68:	e794      	b.n	8022a94 <_malloc_r+0x20>
 8022b6a:	6005      	str	r5, [r0, #0]
 8022b6c:	e7d6      	b.n	8022b1c <_malloc_r+0xa8>
 8022b6e:	bf00      	nop
 8022b70:	2000c0a4 	.word	0x2000c0a4

08022b74 <__malloc_lock>:
 8022b74:	4801      	ldr	r0, [pc, #4]	@ (8022b7c <__malloc_lock+0x8>)
 8022b76:	f7ff b870 	b.w	8021c5a <__retarget_lock_acquire_recursive>
 8022b7a:	bf00      	nop
 8022b7c:	2000c09c 	.word	0x2000c09c

08022b80 <__malloc_unlock>:
 8022b80:	4801      	ldr	r0, [pc, #4]	@ (8022b88 <__malloc_unlock+0x8>)
 8022b82:	f7ff b86b 	b.w	8021c5c <__retarget_lock_release_recursive>
 8022b86:	bf00      	nop
 8022b88:	2000c09c 	.word	0x2000c09c

08022b8c <_Balloc>:
 8022b8c:	b570      	push	{r4, r5, r6, lr}
 8022b8e:	69c6      	ldr	r6, [r0, #28]
 8022b90:	4604      	mov	r4, r0
 8022b92:	460d      	mov	r5, r1
 8022b94:	b976      	cbnz	r6, 8022bb4 <_Balloc+0x28>
 8022b96:	2010      	movs	r0, #16
 8022b98:	f7ff ff42 	bl	8022a20 <malloc>
 8022b9c:	4602      	mov	r2, r0
 8022b9e:	61e0      	str	r0, [r4, #28]
 8022ba0:	b920      	cbnz	r0, 8022bac <_Balloc+0x20>
 8022ba2:	216b      	movs	r1, #107	@ 0x6b
 8022ba4:	4b17      	ldr	r3, [pc, #92]	@ (8022c04 <_Balloc+0x78>)
 8022ba6:	4818      	ldr	r0, [pc, #96]	@ (8022c08 <_Balloc+0x7c>)
 8022ba8:	f7ff f876 	bl	8021c98 <__assert_func>
 8022bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022bb0:	6006      	str	r6, [r0, #0]
 8022bb2:	60c6      	str	r6, [r0, #12]
 8022bb4:	69e6      	ldr	r6, [r4, #28]
 8022bb6:	68f3      	ldr	r3, [r6, #12]
 8022bb8:	b183      	cbz	r3, 8022bdc <_Balloc+0x50>
 8022bba:	69e3      	ldr	r3, [r4, #28]
 8022bbc:	68db      	ldr	r3, [r3, #12]
 8022bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022bc2:	b9b8      	cbnz	r0, 8022bf4 <_Balloc+0x68>
 8022bc4:	2101      	movs	r1, #1
 8022bc6:	fa01 f605 	lsl.w	r6, r1, r5
 8022bca:	1d72      	adds	r2, r6, #5
 8022bcc:	4620      	mov	r0, r4
 8022bce:	0092      	lsls	r2, r2, #2
 8022bd0:	f001 facd 	bl	802416e <_calloc_r>
 8022bd4:	b160      	cbz	r0, 8022bf0 <_Balloc+0x64>
 8022bd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8022bda:	e00e      	b.n	8022bfa <_Balloc+0x6e>
 8022bdc:	2221      	movs	r2, #33	@ 0x21
 8022bde:	2104      	movs	r1, #4
 8022be0:	4620      	mov	r0, r4
 8022be2:	f001 fac4 	bl	802416e <_calloc_r>
 8022be6:	69e3      	ldr	r3, [r4, #28]
 8022be8:	60f0      	str	r0, [r6, #12]
 8022bea:	68db      	ldr	r3, [r3, #12]
 8022bec:	2b00      	cmp	r3, #0
 8022bee:	d1e4      	bne.n	8022bba <_Balloc+0x2e>
 8022bf0:	2000      	movs	r0, #0
 8022bf2:	bd70      	pop	{r4, r5, r6, pc}
 8022bf4:	6802      	ldr	r2, [r0, #0]
 8022bf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022bfa:	2300      	movs	r3, #0
 8022bfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022c00:	e7f7      	b.n	8022bf2 <_Balloc+0x66>
 8022c02:	bf00      	nop
 8022c04:	08030662 	.word	0x08030662
 8022c08:	080307b5 	.word	0x080307b5

08022c0c <_Bfree>:
 8022c0c:	b570      	push	{r4, r5, r6, lr}
 8022c0e:	69c6      	ldr	r6, [r0, #28]
 8022c10:	4605      	mov	r5, r0
 8022c12:	460c      	mov	r4, r1
 8022c14:	b976      	cbnz	r6, 8022c34 <_Bfree+0x28>
 8022c16:	2010      	movs	r0, #16
 8022c18:	f7ff ff02 	bl	8022a20 <malloc>
 8022c1c:	4602      	mov	r2, r0
 8022c1e:	61e8      	str	r0, [r5, #28]
 8022c20:	b920      	cbnz	r0, 8022c2c <_Bfree+0x20>
 8022c22:	218f      	movs	r1, #143	@ 0x8f
 8022c24:	4b08      	ldr	r3, [pc, #32]	@ (8022c48 <_Bfree+0x3c>)
 8022c26:	4809      	ldr	r0, [pc, #36]	@ (8022c4c <_Bfree+0x40>)
 8022c28:	f7ff f836 	bl	8021c98 <__assert_func>
 8022c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022c30:	6006      	str	r6, [r0, #0]
 8022c32:	60c6      	str	r6, [r0, #12]
 8022c34:	b13c      	cbz	r4, 8022c46 <_Bfree+0x3a>
 8022c36:	69eb      	ldr	r3, [r5, #28]
 8022c38:	6862      	ldr	r2, [r4, #4]
 8022c3a:	68db      	ldr	r3, [r3, #12]
 8022c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022c40:	6021      	str	r1, [r4, #0]
 8022c42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022c46:	bd70      	pop	{r4, r5, r6, pc}
 8022c48:	08030662 	.word	0x08030662
 8022c4c:	080307b5 	.word	0x080307b5

08022c50 <__multadd>:
 8022c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c54:	4607      	mov	r7, r0
 8022c56:	460c      	mov	r4, r1
 8022c58:	461e      	mov	r6, r3
 8022c5a:	2000      	movs	r0, #0
 8022c5c:	690d      	ldr	r5, [r1, #16]
 8022c5e:	f101 0c14 	add.w	ip, r1, #20
 8022c62:	f8dc 3000 	ldr.w	r3, [ip]
 8022c66:	3001      	adds	r0, #1
 8022c68:	b299      	uxth	r1, r3
 8022c6a:	fb02 6101 	mla	r1, r2, r1, r6
 8022c6e:	0c1e      	lsrs	r6, r3, #16
 8022c70:	0c0b      	lsrs	r3, r1, #16
 8022c72:	fb02 3306 	mla	r3, r2, r6, r3
 8022c76:	b289      	uxth	r1, r1
 8022c78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022c7c:	4285      	cmp	r5, r0
 8022c7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8022c82:	f84c 1b04 	str.w	r1, [ip], #4
 8022c86:	dcec      	bgt.n	8022c62 <__multadd+0x12>
 8022c88:	b30e      	cbz	r6, 8022cce <__multadd+0x7e>
 8022c8a:	68a3      	ldr	r3, [r4, #8]
 8022c8c:	42ab      	cmp	r3, r5
 8022c8e:	dc19      	bgt.n	8022cc4 <__multadd+0x74>
 8022c90:	6861      	ldr	r1, [r4, #4]
 8022c92:	4638      	mov	r0, r7
 8022c94:	3101      	adds	r1, #1
 8022c96:	f7ff ff79 	bl	8022b8c <_Balloc>
 8022c9a:	4680      	mov	r8, r0
 8022c9c:	b928      	cbnz	r0, 8022caa <__multadd+0x5a>
 8022c9e:	4602      	mov	r2, r0
 8022ca0:	21ba      	movs	r1, #186	@ 0xba
 8022ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8022cd4 <__multadd+0x84>)
 8022ca4:	480c      	ldr	r0, [pc, #48]	@ (8022cd8 <__multadd+0x88>)
 8022ca6:	f7fe fff7 	bl	8021c98 <__assert_func>
 8022caa:	6922      	ldr	r2, [r4, #16]
 8022cac:	f104 010c 	add.w	r1, r4, #12
 8022cb0:	3202      	adds	r2, #2
 8022cb2:	0092      	lsls	r2, r2, #2
 8022cb4:	300c      	adds	r0, #12
 8022cb6:	f7fe ffe0 	bl	8021c7a <memcpy>
 8022cba:	4621      	mov	r1, r4
 8022cbc:	4638      	mov	r0, r7
 8022cbe:	f7ff ffa5 	bl	8022c0c <_Bfree>
 8022cc2:	4644      	mov	r4, r8
 8022cc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022cc8:	3501      	adds	r5, #1
 8022cca:	615e      	str	r6, [r3, #20]
 8022ccc:	6125      	str	r5, [r4, #16]
 8022cce:	4620      	mov	r0, r4
 8022cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022cd4:	080307a4 	.word	0x080307a4
 8022cd8:	080307b5 	.word	0x080307b5

08022cdc <__hi0bits>:
 8022cdc:	4603      	mov	r3, r0
 8022cde:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8022ce2:	bf3a      	itte	cc
 8022ce4:	0403      	lslcc	r3, r0, #16
 8022ce6:	2010      	movcc	r0, #16
 8022ce8:	2000      	movcs	r0, #0
 8022cea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8022cee:	bf3c      	itt	cc
 8022cf0:	021b      	lslcc	r3, r3, #8
 8022cf2:	3008      	addcc	r0, #8
 8022cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8022cf8:	bf3c      	itt	cc
 8022cfa:	011b      	lslcc	r3, r3, #4
 8022cfc:	3004      	addcc	r0, #4
 8022cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022d02:	bf3c      	itt	cc
 8022d04:	009b      	lslcc	r3, r3, #2
 8022d06:	3002      	addcc	r0, #2
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	db05      	blt.n	8022d18 <__hi0bits+0x3c>
 8022d0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8022d10:	f100 0001 	add.w	r0, r0, #1
 8022d14:	bf08      	it	eq
 8022d16:	2020      	moveq	r0, #32
 8022d18:	4770      	bx	lr

08022d1a <__lo0bits>:
 8022d1a:	6803      	ldr	r3, [r0, #0]
 8022d1c:	4602      	mov	r2, r0
 8022d1e:	f013 0007 	ands.w	r0, r3, #7
 8022d22:	d00b      	beq.n	8022d3c <__lo0bits+0x22>
 8022d24:	07d9      	lsls	r1, r3, #31
 8022d26:	d421      	bmi.n	8022d6c <__lo0bits+0x52>
 8022d28:	0798      	lsls	r0, r3, #30
 8022d2a:	bf49      	itett	mi
 8022d2c:	085b      	lsrmi	r3, r3, #1
 8022d2e:	089b      	lsrpl	r3, r3, #2
 8022d30:	2001      	movmi	r0, #1
 8022d32:	6013      	strmi	r3, [r2, #0]
 8022d34:	bf5c      	itt	pl
 8022d36:	2002      	movpl	r0, #2
 8022d38:	6013      	strpl	r3, [r2, #0]
 8022d3a:	4770      	bx	lr
 8022d3c:	b299      	uxth	r1, r3
 8022d3e:	b909      	cbnz	r1, 8022d44 <__lo0bits+0x2a>
 8022d40:	2010      	movs	r0, #16
 8022d42:	0c1b      	lsrs	r3, r3, #16
 8022d44:	b2d9      	uxtb	r1, r3
 8022d46:	b909      	cbnz	r1, 8022d4c <__lo0bits+0x32>
 8022d48:	3008      	adds	r0, #8
 8022d4a:	0a1b      	lsrs	r3, r3, #8
 8022d4c:	0719      	lsls	r1, r3, #28
 8022d4e:	bf04      	itt	eq
 8022d50:	091b      	lsreq	r3, r3, #4
 8022d52:	3004      	addeq	r0, #4
 8022d54:	0799      	lsls	r1, r3, #30
 8022d56:	bf04      	itt	eq
 8022d58:	089b      	lsreq	r3, r3, #2
 8022d5a:	3002      	addeq	r0, #2
 8022d5c:	07d9      	lsls	r1, r3, #31
 8022d5e:	d403      	bmi.n	8022d68 <__lo0bits+0x4e>
 8022d60:	085b      	lsrs	r3, r3, #1
 8022d62:	f100 0001 	add.w	r0, r0, #1
 8022d66:	d003      	beq.n	8022d70 <__lo0bits+0x56>
 8022d68:	6013      	str	r3, [r2, #0]
 8022d6a:	4770      	bx	lr
 8022d6c:	2000      	movs	r0, #0
 8022d6e:	4770      	bx	lr
 8022d70:	2020      	movs	r0, #32
 8022d72:	4770      	bx	lr

08022d74 <__i2b>:
 8022d74:	b510      	push	{r4, lr}
 8022d76:	460c      	mov	r4, r1
 8022d78:	2101      	movs	r1, #1
 8022d7a:	f7ff ff07 	bl	8022b8c <_Balloc>
 8022d7e:	4602      	mov	r2, r0
 8022d80:	b928      	cbnz	r0, 8022d8e <__i2b+0x1a>
 8022d82:	f240 1145 	movw	r1, #325	@ 0x145
 8022d86:	4b04      	ldr	r3, [pc, #16]	@ (8022d98 <__i2b+0x24>)
 8022d88:	4804      	ldr	r0, [pc, #16]	@ (8022d9c <__i2b+0x28>)
 8022d8a:	f7fe ff85 	bl	8021c98 <__assert_func>
 8022d8e:	2301      	movs	r3, #1
 8022d90:	6144      	str	r4, [r0, #20]
 8022d92:	6103      	str	r3, [r0, #16]
 8022d94:	bd10      	pop	{r4, pc}
 8022d96:	bf00      	nop
 8022d98:	080307a4 	.word	0x080307a4
 8022d9c:	080307b5 	.word	0x080307b5

08022da0 <__multiply>:
 8022da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022da4:	4617      	mov	r7, r2
 8022da6:	690a      	ldr	r2, [r1, #16]
 8022da8:	693b      	ldr	r3, [r7, #16]
 8022daa:	4689      	mov	r9, r1
 8022dac:	429a      	cmp	r2, r3
 8022dae:	bfa2      	ittt	ge
 8022db0:	463b      	movge	r3, r7
 8022db2:	460f      	movge	r7, r1
 8022db4:	4699      	movge	r9, r3
 8022db6:	693d      	ldr	r5, [r7, #16]
 8022db8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022dbc:	68bb      	ldr	r3, [r7, #8]
 8022dbe:	6879      	ldr	r1, [r7, #4]
 8022dc0:	eb05 060a 	add.w	r6, r5, sl
 8022dc4:	42b3      	cmp	r3, r6
 8022dc6:	b085      	sub	sp, #20
 8022dc8:	bfb8      	it	lt
 8022dca:	3101      	addlt	r1, #1
 8022dcc:	f7ff fede 	bl	8022b8c <_Balloc>
 8022dd0:	b930      	cbnz	r0, 8022de0 <__multiply+0x40>
 8022dd2:	4602      	mov	r2, r0
 8022dd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8022dd8:	4b40      	ldr	r3, [pc, #256]	@ (8022edc <__multiply+0x13c>)
 8022dda:	4841      	ldr	r0, [pc, #260]	@ (8022ee0 <__multiply+0x140>)
 8022ddc:	f7fe ff5c 	bl	8021c98 <__assert_func>
 8022de0:	f100 0414 	add.w	r4, r0, #20
 8022de4:	4623      	mov	r3, r4
 8022de6:	2200      	movs	r2, #0
 8022de8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8022dec:	4573      	cmp	r3, lr
 8022dee:	d320      	bcc.n	8022e32 <__multiply+0x92>
 8022df0:	f107 0814 	add.w	r8, r7, #20
 8022df4:	f109 0114 	add.w	r1, r9, #20
 8022df8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8022dfc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8022e00:	9302      	str	r3, [sp, #8]
 8022e02:	1beb      	subs	r3, r5, r7
 8022e04:	3b15      	subs	r3, #21
 8022e06:	f023 0303 	bic.w	r3, r3, #3
 8022e0a:	3304      	adds	r3, #4
 8022e0c:	3715      	adds	r7, #21
 8022e0e:	42bd      	cmp	r5, r7
 8022e10:	bf38      	it	cc
 8022e12:	2304      	movcc	r3, #4
 8022e14:	9301      	str	r3, [sp, #4]
 8022e16:	9b02      	ldr	r3, [sp, #8]
 8022e18:	9103      	str	r1, [sp, #12]
 8022e1a:	428b      	cmp	r3, r1
 8022e1c:	d80c      	bhi.n	8022e38 <__multiply+0x98>
 8022e1e:	2e00      	cmp	r6, #0
 8022e20:	dd03      	ble.n	8022e2a <__multiply+0x8a>
 8022e22:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8022e26:	2b00      	cmp	r3, #0
 8022e28:	d055      	beq.n	8022ed6 <__multiply+0x136>
 8022e2a:	6106      	str	r6, [r0, #16]
 8022e2c:	b005      	add	sp, #20
 8022e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e32:	f843 2b04 	str.w	r2, [r3], #4
 8022e36:	e7d9      	b.n	8022dec <__multiply+0x4c>
 8022e38:	f8b1 a000 	ldrh.w	sl, [r1]
 8022e3c:	f1ba 0f00 	cmp.w	sl, #0
 8022e40:	d01f      	beq.n	8022e82 <__multiply+0xe2>
 8022e42:	46c4      	mov	ip, r8
 8022e44:	46a1      	mov	r9, r4
 8022e46:	2700      	movs	r7, #0
 8022e48:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022e4c:	f8d9 3000 	ldr.w	r3, [r9]
 8022e50:	fa1f fb82 	uxth.w	fp, r2
 8022e54:	b29b      	uxth	r3, r3
 8022e56:	fb0a 330b 	mla	r3, sl, fp, r3
 8022e5a:	443b      	add	r3, r7
 8022e5c:	f8d9 7000 	ldr.w	r7, [r9]
 8022e60:	0c12      	lsrs	r2, r2, #16
 8022e62:	0c3f      	lsrs	r7, r7, #16
 8022e64:	fb0a 7202 	mla	r2, sl, r2, r7
 8022e68:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8022e6c:	b29b      	uxth	r3, r3
 8022e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022e72:	4565      	cmp	r5, ip
 8022e74:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8022e78:	f849 3b04 	str.w	r3, [r9], #4
 8022e7c:	d8e4      	bhi.n	8022e48 <__multiply+0xa8>
 8022e7e:	9b01      	ldr	r3, [sp, #4]
 8022e80:	50e7      	str	r7, [r4, r3]
 8022e82:	9b03      	ldr	r3, [sp, #12]
 8022e84:	3104      	adds	r1, #4
 8022e86:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8022e8a:	f1b9 0f00 	cmp.w	r9, #0
 8022e8e:	d020      	beq.n	8022ed2 <__multiply+0x132>
 8022e90:	4647      	mov	r7, r8
 8022e92:	46a4      	mov	ip, r4
 8022e94:	f04f 0a00 	mov.w	sl, #0
 8022e98:	6823      	ldr	r3, [r4, #0]
 8022e9a:	f8b7 b000 	ldrh.w	fp, [r7]
 8022e9e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8022ea2:	b29b      	uxth	r3, r3
 8022ea4:	fb09 220b 	mla	r2, r9, fp, r2
 8022ea8:	4452      	add	r2, sl
 8022eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022eae:	f84c 3b04 	str.w	r3, [ip], #4
 8022eb2:	f857 3b04 	ldr.w	r3, [r7], #4
 8022eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022eba:	f8bc 3000 	ldrh.w	r3, [ip]
 8022ebe:	42bd      	cmp	r5, r7
 8022ec0:	fb09 330a 	mla	r3, r9, sl, r3
 8022ec4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8022ec8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022ecc:	d8e5      	bhi.n	8022e9a <__multiply+0xfa>
 8022ece:	9a01      	ldr	r2, [sp, #4]
 8022ed0:	50a3      	str	r3, [r4, r2]
 8022ed2:	3404      	adds	r4, #4
 8022ed4:	e79f      	b.n	8022e16 <__multiply+0x76>
 8022ed6:	3e01      	subs	r6, #1
 8022ed8:	e7a1      	b.n	8022e1e <__multiply+0x7e>
 8022eda:	bf00      	nop
 8022edc:	080307a4 	.word	0x080307a4
 8022ee0:	080307b5 	.word	0x080307b5

08022ee4 <__pow5mult>:
 8022ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ee8:	4615      	mov	r5, r2
 8022eea:	f012 0203 	ands.w	r2, r2, #3
 8022eee:	4607      	mov	r7, r0
 8022ef0:	460e      	mov	r6, r1
 8022ef2:	d007      	beq.n	8022f04 <__pow5mult+0x20>
 8022ef4:	4c25      	ldr	r4, [pc, #148]	@ (8022f8c <__pow5mult+0xa8>)
 8022ef6:	3a01      	subs	r2, #1
 8022ef8:	2300      	movs	r3, #0
 8022efa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022efe:	f7ff fea7 	bl	8022c50 <__multadd>
 8022f02:	4606      	mov	r6, r0
 8022f04:	10ad      	asrs	r5, r5, #2
 8022f06:	d03d      	beq.n	8022f84 <__pow5mult+0xa0>
 8022f08:	69fc      	ldr	r4, [r7, #28]
 8022f0a:	b97c      	cbnz	r4, 8022f2c <__pow5mult+0x48>
 8022f0c:	2010      	movs	r0, #16
 8022f0e:	f7ff fd87 	bl	8022a20 <malloc>
 8022f12:	4602      	mov	r2, r0
 8022f14:	61f8      	str	r0, [r7, #28]
 8022f16:	b928      	cbnz	r0, 8022f24 <__pow5mult+0x40>
 8022f18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8022f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8022f90 <__pow5mult+0xac>)
 8022f1e:	481d      	ldr	r0, [pc, #116]	@ (8022f94 <__pow5mult+0xb0>)
 8022f20:	f7fe feba 	bl	8021c98 <__assert_func>
 8022f24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022f28:	6004      	str	r4, [r0, #0]
 8022f2a:	60c4      	str	r4, [r0, #12]
 8022f2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8022f30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022f34:	b94c      	cbnz	r4, 8022f4a <__pow5mult+0x66>
 8022f36:	f240 2171 	movw	r1, #625	@ 0x271
 8022f3a:	4638      	mov	r0, r7
 8022f3c:	f7ff ff1a 	bl	8022d74 <__i2b>
 8022f40:	2300      	movs	r3, #0
 8022f42:	4604      	mov	r4, r0
 8022f44:	f8c8 0008 	str.w	r0, [r8, #8]
 8022f48:	6003      	str	r3, [r0, #0]
 8022f4a:	f04f 0900 	mov.w	r9, #0
 8022f4e:	07eb      	lsls	r3, r5, #31
 8022f50:	d50a      	bpl.n	8022f68 <__pow5mult+0x84>
 8022f52:	4631      	mov	r1, r6
 8022f54:	4622      	mov	r2, r4
 8022f56:	4638      	mov	r0, r7
 8022f58:	f7ff ff22 	bl	8022da0 <__multiply>
 8022f5c:	4680      	mov	r8, r0
 8022f5e:	4631      	mov	r1, r6
 8022f60:	4638      	mov	r0, r7
 8022f62:	f7ff fe53 	bl	8022c0c <_Bfree>
 8022f66:	4646      	mov	r6, r8
 8022f68:	106d      	asrs	r5, r5, #1
 8022f6a:	d00b      	beq.n	8022f84 <__pow5mult+0xa0>
 8022f6c:	6820      	ldr	r0, [r4, #0]
 8022f6e:	b938      	cbnz	r0, 8022f80 <__pow5mult+0x9c>
 8022f70:	4622      	mov	r2, r4
 8022f72:	4621      	mov	r1, r4
 8022f74:	4638      	mov	r0, r7
 8022f76:	f7ff ff13 	bl	8022da0 <__multiply>
 8022f7a:	6020      	str	r0, [r4, #0]
 8022f7c:	f8c0 9000 	str.w	r9, [r0]
 8022f80:	4604      	mov	r4, r0
 8022f82:	e7e4      	b.n	8022f4e <__pow5mult+0x6a>
 8022f84:	4630      	mov	r0, r6
 8022f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022f8a:	bf00      	nop
 8022f8c:	08030948 	.word	0x08030948
 8022f90:	08030662 	.word	0x08030662
 8022f94:	080307b5 	.word	0x080307b5

08022f98 <__lshift>:
 8022f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f9c:	460c      	mov	r4, r1
 8022f9e:	4607      	mov	r7, r0
 8022fa0:	4691      	mov	r9, r2
 8022fa2:	6923      	ldr	r3, [r4, #16]
 8022fa4:	6849      	ldr	r1, [r1, #4]
 8022fa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022faa:	68a3      	ldr	r3, [r4, #8]
 8022fac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022fb0:	f108 0601 	add.w	r6, r8, #1
 8022fb4:	42b3      	cmp	r3, r6
 8022fb6:	db0b      	blt.n	8022fd0 <__lshift+0x38>
 8022fb8:	4638      	mov	r0, r7
 8022fba:	f7ff fde7 	bl	8022b8c <_Balloc>
 8022fbe:	4605      	mov	r5, r0
 8022fc0:	b948      	cbnz	r0, 8022fd6 <__lshift+0x3e>
 8022fc2:	4602      	mov	r2, r0
 8022fc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8022fc8:	4b27      	ldr	r3, [pc, #156]	@ (8023068 <__lshift+0xd0>)
 8022fca:	4828      	ldr	r0, [pc, #160]	@ (802306c <__lshift+0xd4>)
 8022fcc:	f7fe fe64 	bl	8021c98 <__assert_func>
 8022fd0:	3101      	adds	r1, #1
 8022fd2:	005b      	lsls	r3, r3, #1
 8022fd4:	e7ee      	b.n	8022fb4 <__lshift+0x1c>
 8022fd6:	2300      	movs	r3, #0
 8022fd8:	f100 0114 	add.w	r1, r0, #20
 8022fdc:	f100 0210 	add.w	r2, r0, #16
 8022fe0:	4618      	mov	r0, r3
 8022fe2:	4553      	cmp	r3, sl
 8022fe4:	db33      	blt.n	802304e <__lshift+0xb6>
 8022fe6:	6920      	ldr	r0, [r4, #16]
 8022fe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022fec:	f104 0314 	add.w	r3, r4, #20
 8022ff0:	f019 091f 	ands.w	r9, r9, #31
 8022ff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022ff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022ffc:	d02b      	beq.n	8023056 <__lshift+0xbe>
 8022ffe:	468a      	mov	sl, r1
 8023000:	2200      	movs	r2, #0
 8023002:	f1c9 0e20 	rsb	lr, r9, #32
 8023006:	6818      	ldr	r0, [r3, #0]
 8023008:	fa00 f009 	lsl.w	r0, r0, r9
 802300c:	4310      	orrs	r0, r2
 802300e:	f84a 0b04 	str.w	r0, [sl], #4
 8023012:	f853 2b04 	ldr.w	r2, [r3], #4
 8023016:	459c      	cmp	ip, r3
 8023018:	fa22 f20e 	lsr.w	r2, r2, lr
 802301c:	d8f3      	bhi.n	8023006 <__lshift+0x6e>
 802301e:	ebac 0304 	sub.w	r3, ip, r4
 8023022:	3b15      	subs	r3, #21
 8023024:	f023 0303 	bic.w	r3, r3, #3
 8023028:	3304      	adds	r3, #4
 802302a:	f104 0015 	add.w	r0, r4, #21
 802302e:	4560      	cmp	r0, ip
 8023030:	bf88      	it	hi
 8023032:	2304      	movhi	r3, #4
 8023034:	50ca      	str	r2, [r1, r3]
 8023036:	b10a      	cbz	r2, 802303c <__lshift+0xa4>
 8023038:	f108 0602 	add.w	r6, r8, #2
 802303c:	3e01      	subs	r6, #1
 802303e:	4638      	mov	r0, r7
 8023040:	4621      	mov	r1, r4
 8023042:	612e      	str	r6, [r5, #16]
 8023044:	f7ff fde2 	bl	8022c0c <_Bfree>
 8023048:	4628      	mov	r0, r5
 802304a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802304e:	f842 0f04 	str.w	r0, [r2, #4]!
 8023052:	3301      	adds	r3, #1
 8023054:	e7c5      	b.n	8022fe2 <__lshift+0x4a>
 8023056:	3904      	subs	r1, #4
 8023058:	f853 2b04 	ldr.w	r2, [r3], #4
 802305c:	459c      	cmp	ip, r3
 802305e:	f841 2f04 	str.w	r2, [r1, #4]!
 8023062:	d8f9      	bhi.n	8023058 <__lshift+0xc0>
 8023064:	e7ea      	b.n	802303c <__lshift+0xa4>
 8023066:	bf00      	nop
 8023068:	080307a4 	.word	0x080307a4
 802306c:	080307b5 	.word	0x080307b5

08023070 <__mcmp>:
 8023070:	4603      	mov	r3, r0
 8023072:	690a      	ldr	r2, [r1, #16]
 8023074:	6900      	ldr	r0, [r0, #16]
 8023076:	b530      	push	{r4, r5, lr}
 8023078:	1a80      	subs	r0, r0, r2
 802307a:	d10e      	bne.n	802309a <__mcmp+0x2a>
 802307c:	3314      	adds	r3, #20
 802307e:	3114      	adds	r1, #20
 8023080:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8023084:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8023088:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802308c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023090:	4295      	cmp	r5, r2
 8023092:	d003      	beq.n	802309c <__mcmp+0x2c>
 8023094:	d205      	bcs.n	80230a2 <__mcmp+0x32>
 8023096:	f04f 30ff 	mov.w	r0, #4294967295
 802309a:	bd30      	pop	{r4, r5, pc}
 802309c:	42a3      	cmp	r3, r4
 802309e:	d3f3      	bcc.n	8023088 <__mcmp+0x18>
 80230a0:	e7fb      	b.n	802309a <__mcmp+0x2a>
 80230a2:	2001      	movs	r0, #1
 80230a4:	e7f9      	b.n	802309a <__mcmp+0x2a>
	...

080230a8 <__mdiff>:
 80230a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230ac:	4689      	mov	r9, r1
 80230ae:	4606      	mov	r6, r0
 80230b0:	4611      	mov	r1, r2
 80230b2:	4648      	mov	r0, r9
 80230b4:	4614      	mov	r4, r2
 80230b6:	f7ff ffdb 	bl	8023070 <__mcmp>
 80230ba:	1e05      	subs	r5, r0, #0
 80230bc:	d112      	bne.n	80230e4 <__mdiff+0x3c>
 80230be:	4629      	mov	r1, r5
 80230c0:	4630      	mov	r0, r6
 80230c2:	f7ff fd63 	bl	8022b8c <_Balloc>
 80230c6:	4602      	mov	r2, r0
 80230c8:	b928      	cbnz	r0, 80230d6 <__mdiff+0x2e>
 80230ca:	f240 2137 	movw	r1, #567	@ 0x237
 80230ce:	4b3e      	ldr	r3, [pc, #248]	@ (80231c8 <__mdiff+0x120>)
 80230d0:	483e      	ldr	r0, [pc, #248]	@ (80231cc <__mdiff+0x124>)
 80230d2:	f7fe fde1 	bl	8021c98 <__assert_func>
 80230d6:	2301      	movs	r3, #1
 80230d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80230dc:	4610      	mov	r0, r2
 80230de:	b003      	add	sp, #12
 80230e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230e4:	bfbc      	itt	lt
 80230e6:	464b      	movlt	r3, r9
 80230e8:	46a1      	movlt	r9, r4
 80230ea:	4630      	mov	r0, r6
 80230ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80230f0:	bfba      	itte	lt
 80230f2:	461c      	movlt	r4, r3
 80230f4:	2501      	movlt	r5, #1
 80230f6:	2500      	movge	r5, #0
 80230f8:	f7ff fd48 	bl	8022b8c <_Balloc>
 80230fc:	4602      	mov	r2, r0
 80230fe:	b918      	cbnz	r0, 8023108 <__mdiff+0x60>
 8023100:	f240 2145 	movw	r1, #581	@ 0x245
 8023104:	4b30      	ldr	r3, [pc, #192]	@ (80231c8 <__mdiff+0x120>)
 8023106:	e7e3      	b.n	80230d0 <__mdiff+0x28>
 8023108:	f100 0b14 	add.w	fp, r0, #20
 802310c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023110:	f109 0310 	add.w	r3, r9, #16
 8023114:	60c5      	str	r5, [r0, #12]
 8023116:	f04f 0c00 	mov.w	ip, #0
 802311a:	f109 0514 	add.w	r5, r9, #20
 802311e:	46d9      	mov	r9, fp
 8023120:	6926      	ldr	r6, [r4, #16]
 8023122:	f104 0e14 	add.w	lr, r4, #20
 8023126:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802312a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802312e:	9301      	str	r3, [sp, #4]
 8023130:	9b01      	ldr	r3, [sp, #4]
 8023132:	f85e 0b04 	ldr.w	r0, [lr], #4
 8023136:	f853 af04 	ldr.w	sl, [r3, #4]!
 802313a:	b281      	uxth	r1, r0
 802313c:	9301      	str	r3, [sp, #4]
 802313e:	fa1f f38a 	uxth.w	r3, sl
 8023142:	1a5b      	subs	r3, r3, r1
 8023144:	0c00      	lsrs	r0, r0, #16
 8023146:	4463      	add	r3, ip
 8023148:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802314c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8023150:	b29b      	uxth	r3, r3
 8023152:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023156:	4576      	cmp	r6, lr
 8023158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802315c:	f849 3b04 	str.w	r3, [r9], #4
 8023160:	d8e6      	bhi.n	8023130 <__mdiff+0x88>
 8023162:	1b33      	subs	r3, r6, r4
 8023164:	3b15      	subs	r3, #21
 8023166:	f023 0303 	bic.w	r3, r3, #3
 802316a:	3415      	adds	r4, #21
 802316c:	3304      	adds	r3, #4
 802316e:	42a6      	cmp	r6, r4
 8023170:	bf38      	it	cc
 8023172:	2304      	movcc	r3, #4
 8023174:	441d      	add	r5, r3
 8023176:	445b      	add	r3, fp
 8023178:	461e      	mov	r6, r3
 802317a:	462c      	mov	r4, r5
 802317c:	4544      	cmp	r4, r8
 802317e:	d30e      	bcc.n	802319e <__mdiff+0xf6>
 8023180:	f108 0103 	add.w	r1, r8, #3
 8023184:	1b49      	subs	r1, r1, r5
 8023186:	f021 0103 	bic.w	r1, r1, #3
 802318a:	3d03      	subs	r5, #3
 802318c:	45a8      	cmp	r8, r5
 802318e:	bf38      	it	cc
 8023190:	2100      	movcc	r1, #0
 8023192:	440b      	add	r3, r1
 8023194:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023198:	b199      	cbz	r1, 80231c2 <__mdiff+0x11a>
 802319a:	6117      	str	r7, [r2, #16]
 802319c:	e79e      	b.n	80230dc <__mdiff+0x34>
 802319e:	46e6      	mov	lr, ip
 80231a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80231a4:	fa1f fc81 	uxth.w	ip, r1
 80231a8:	44f4      	add	ip, lr
 80231aa:	0c08      	lsrs	r0, r1, #16
 80231ac:	4471      	add	r1, lr
 80231ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80231b2:	b289      	uxth	r1, r1
 80231b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80231b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80231bc:	f846 1b04 	str.w	r1, [r6], #4
 80231c0:	e7dc      	b.n	802317c <__mdiff+0xd4>
 80231c2:	3f01      	subs	r7, #1
 80231c4:	e7e6      	b.n	8023194 <__mdiff+0xec>
 80231c6:	bf00      	nop
 80231c8:	080307a4 	.word	0x080307a4
 80231cc:	080307b5 	.word	0x080307b5

080231d0 <__d2b>:
 80231d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80231d4:	2101      	movs	r1, #1
 80231d6:	4690      	mov	r8, r2
 80231d8:	4699      	mov	r9, r3
 80231da:	9e08      	ldr	r6, [sp, #32]
 80231dc:	f7ff fcd6 	bl	8022b8c <_Balloc>
 80231e0:	4604      	mov	r4, r0
 80231e2:	b930      	cbnz	r0, 80231f2 <__d2b+0x22>
 80231e4:	4602      	mov	r2, r0
 80231e6:	f240 310f 	movw	r1, #783	@ 0x30f
 80231ea:	4b23      	ldr	r3, [pc, #140]	@ (8023278 <__d2b+0xa8>)
 80231ec:	4823      	ldr	r0, [pc, #140]	@ (802327c <__d2b+0xac>)
 80231ee:	f7fe fd53 	bl	8021c98 <__assert_func>
 80231f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80231f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80231fa:	b10d      	cbz	r5, 8023200 <__d2b+0x30>
 80231fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023200:	9301      	str	r3, [sp, #4]
 8023202:	f1b8 0300 	subs.w	r3, r8, #0
 8023206:	d024      	beq.n	8023252 <__d2b+0x82>
 8023208:	4668      	mov	r0, sp
 802320a:	9300      	str	r3, [sp, #0]
 802320c:	f7ff fd85 	bl	8022d1a <__lo0bits>
 8023210:	e9dd 1200 	ldrd	r1, r2, [sp]
 8023214:	b1d8      	cbz	r0, 802324e <__d2b+0x7e>
 8023216:	f1c0 0320 	rsb	r3, r0, #32
 802321a:	fa02 f303 	lsl.w	r3, r2, r3
 802321e:	430b      	orrs	r3, r1
 8023220:	40c2      	lsrs	r2, r0
 8023222:	6163      	str	r3, [r4, #20]
 8023224:	9201      	str	r2, [sp, #4]
 8023226:	9b01      	ldr	r3, [sp, #4]
 8023228:	2b00      	cmp	r3, #0
 802322a:	bf0c      	ite	eq
 802322c:	2201      	moveq	r2, #1
 802322e:	2202      	movne	r2, #2
 8023230:	61a3      	str	r3, [r4, #24]
 8023232:	6122      	str	r2, [r4, #16]
 8023234:	b1ad      	cbz	r5, 8023262 <__d2b+0x92>
 8023236:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802323a:	4405      	add	r5, r0
 802323c:	6035      	str	r5, [r6, #0]
 802323e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8023242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023244:	6018      	str	r0, [r3, #0]
 8023246:	4620      	mov	r0, r4
 8023248:	b002      	add	sp, #8
 802324a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 802324e:	6161      	str	r1, [r4, #20]
 8023250:	e7e9      	b.n	8023226 <__d2b+0x56>
 8023252:	a801      	add	r0, sp, #4
 8023254:	f7ff fd61 	bl	8022d1a <__lo0bits>
 8023258:	9b01      	ldr	r3, [sp, #4]
 802325a:	2201      	movs	r2, #1
 802325c:	6163      	str	r3, [r4, #20]
 802325e:	3020      	adds	r0, #32
 8023260:	e7e7      	b.n	8023232 <__d2b+0x62>
 8023262:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8023266:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802326a:	6030      	str	r0, [r6, #0]
 802326c:	6918      	ldr	r0, [r3, #16]
 802326e:	f7ff fd35 	bl	8022cdc <__hi0bits>
 8023272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023276:	e7e4      	b.n	8023242 <__d2b+0x72>
 8023278:	080307a4 	.word	0x080307a4
 802327c:	080307b5 	.word	0x080307b5

08023280 <__ssputs_r>:
 8023280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023284:	461f      	mov	r7, r3
 8023286:	688e      	ldr	r6, [r1, #8]
 8023288:	4682      	mov	sl, r0
 802328a:	42be      	cmp	r6, r7
 802328c:	460c      	mov	r4, r1
 802328e:	4690      	mov	r8, r2
 8023290:	680b      	ldr	r3, [r1, #0]
 8023292:	d82d      	bhi.n	80232f0 <__ssputs_r+0x70>
 8023294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023298:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802329c:	d026      	beq.n	80232ec <__ssputs_r+0x6c>
 802329e:	6965      	ldr	r5, [r4, #20]
 80232a0:	6909      	ldr	r1, [r1, #16]
 80232a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80232a6:	eba3 0901 	sub.w	r9, r3, r1
 80232aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80232ae:	1c7b      	adds	r3, r7, #1
 80232b0:	444b      	add	r3, r9
 80232b2:	106d      	asrs	r5, r5, #1
 80232b4:	429d      	cmp	r5, r3
 80232b6:	bf38      	it	cc
 80232b8:	461d      	movcc	r5, r3
 80232ba:	0553      	lsls	r3, r2, #21
 80232bc:	d527      	bpl.n	802330e <__ssputs_r+0x8e>
 80232be:	4629      	mov	r1, r5
 80232c0:	f7ff fbd8 	bl	8022a74 <_malloc_r>
 80232c4:	4606      	mov	r6, r0
 80232c6:	b360      	cbz	r0, 8023322 <__ssputs_r+0xa2>
 80232c8:	464a      	mov	r2, r9
 80232ca:	6921      	ldr	r1, [r4, #16]
 80232cc:	f7fe fcd5 	bl	8021c7a <memcpy>
 80232d0:	89a3      	ldrh	r3, [r4, #12]
 80232d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80232d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80232da:	81a3      	strh	r3, [r4, #12]
 80232dc:	6126      	str	r6, [r4, #16]
 80232de:	444e      	add	r6, r9
 80232e0:	6026      	str	r6, [r4, #0]
 80232e2:	463e      	mov	r6, r7
 80232e4:	6165      	str	r5, [r4, #20]
 80232e6:	eba5 0509 	sub.w	r5, r5, r9
 80232ea:	60a5      	str	r5, [r4, #8]
 80232ec:	42be      	cmp	r6, r7
 80232ee:	d900      	bls.n	80232f2 <__ssputs_r+0x72>
 80232f0:	463e      	mov	r6, r7
 80232f2:	4632      	mov	r2, r6
 80232f4:	4641      	mov	r1, r8
 80232f6:	6820      	ldr	r0, [r4, #0]
 80232f8:	f7fe fbd0 	bl	8021a9c <memmove>
 80232fc:	2000      	movs	r0, #0
 80232fe:	68a3      	ldr	r3, [r4, #8]
 8023300:	1b9b      	subs	r3, r3, r6
 8023302:	60a3      	str	r3, [r4, #8]
 8023304:	6823      	ldr	r3, [r4, #0]
 8023306:	4433      	add	r3, r6
 8023308:	6023      	str	r3, [r4, #0]
 802330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802330e:	462a      	mov	r2, r5
 8023310:	f000 ff53 	bl	80241ba <_realloc_r>
 8023314:	4606      	mov	r6, r0
 8023316:	2800      	cmp	r0, #0
 8023318:	d1e0      	bne.n	80232dc <__ssputs_r+0x5c>
 802331a:	4650      	mov	r0, sl
 802331c:	6921      	ldr	r1, [r4, #16]
 802331e:	f7ff fb37 	bl	8022990 <_free_r>
 8023322:	230c      	movs	r3, #12
 8023324:	f8ca 3000 	str.w	r3, [sl]
 8023328:	89a3      	ldrh	r3, [r4, #12]
 802332a:	f04f 30ff 	mov.w	r0, #4294967295
 802332e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023332:	81a3      	strh	r3, [r4, #12]
 8023334:	e7e9      	b.n	802330a <__ssputs_r+0x8a>
	...

08023338 <_svfiprintf_r>:
 8023338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802333c:	4698      	mov	r8, r3
 802333e:	898b      	ldrh	r3, [r1, #12]
 8023340:	4607      	mov	r7, r0
 8023342:	061b      	lsls	r3, r3, #24
 8023344:	460d      	mov	r5, r1
 8023346:	4614      	mov	r4, r2
 8023348:	b09d      	sub	sp, #116	@ 0x74
 802334a:	d510      	bpl.n	802336e <_svfiprintf_r+0x36>
 802334c:	690b      	ldr	r3, [r1, #16]
 802334e:	b973      	cbnz	r3, 802336e <_svfiprintf_r+0x36>
 8023350:	2140      	movs	r1, #64	@ 0x40
 8023352:	f7ff fb8f 	bl	8022a74 <_malloc_r>
 8023356:	6028      	str	r0, [r5, #0]
 8023358:	6128      	str	r0, [r5, #16]
 802335a:	b930      	cbnz	r0, 802336a <_svfiprintf_r+0x32>
 802335c:	230c      	movs	r3, #12
 802335e:	603b      	str	r3, [r7, #0]
 8023360:	f04f 30ff 	mov.w	r0, #4294967295
 8023364:	b01d      	add	sp, #116	@ 0x74
 8023366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802336a:	2340      	movs	r3, #64	@ 0x40
 802336c:	616b      	str	r3, [r5, #20]
 802336e:	2300      	movs	r3, #0
 8023370:	9309      	str	r3, [sp, #36]	@ 0x24
 8023372:	2320      	movs	r3, #32
 8023374:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023378:	2330      	movs	r3, #48	@ 0x30
 802337a:	f04f 0901 	mov.w	r9, #1
 802337e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023382:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 802351c <_svfiprintf_r+0x1e4>
 8023386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802338a:	4623      	mov	r3, r4
 802338c:	469a      	mov	sl, r3
 802338e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023392:	b10a      	cbz	r2, 8023398 <_svfiprintf_r+0x60>
 8023394:	2a25      	cmp	r2, #37	@ 0x25
 8023396:	d1f9      	bne.n	802338c <_svfiprintf_r+0x54>
 8023398:	ebba 0b04 	subs.w	fp, sl, r4
 802339c:	d00b      	beq.n	80233b6 <_svfiprintf_r+0x7e>
 802339e:	465b      	mov	r3, fp
 80233a0:	4622      	mov	r2, r4
 80233a2:	4629      	mov	r1, r5
 80233a4:	4638      	mov	r0, r7
 80233a6:	f7ff ff6b 	bl	8023280 <__ssputs_r>
 80233aa:	3001      	adds	r0, #1
 80233ac:	f000 80a7 	beq.w	80234fe <_svfiprintf_r+0x1c6>
 80233b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80233b2:	445a      	add	r2, fp
 80233b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80233b6:	f89a 3000 	ldrb.w	r3, [sl]
 80233ba:	2b00      	cmp	r3, #0
 80233bc:	f000 809f 	beq.w	80234fe <_svfiprintf_r+0x1c6>
 80233c0:	2300      	movs	r3, #0
 80233c2:	f04f 32ff 	mov.w	r2, #4294967295
 80233c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80233ca:	f10a 0a01 	add.w	sl, sl, #1
 80233ce:	9304      	str	r3, [sp, #16]
 80233d0:	9307      	str	r3, [sp, #28]
 80233d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80233d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80233d8:	4654      	mov	r4, sl
 80233da:	2205      	movs	r2, #5
 80233dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233e0:	484e      	ldr	r0, [pc, #312]	@ (802351c <_svfiprintf_r+0x1e4>)
 80233e2:	f7fe fc3c 	bl	8021c5e <memchr>
 80233e6:	9a04      	ldr	r2, [sp, #16]
 80233e8:	b9d8      	cbnz	r0, 8023422 <_svfiprintf_r+0xea>
 80233ea:	06d0      	lsls	r0, r2, #27
 80233ec:	bf44      	itt	mi
 80233ee:	2320      	movmi	r3, #32
 80233f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233f4:	0711      	lsls	r1, r2, #28
 80233f6:	bf44      	itt	mi
 80233f8:	232b      	movmi	r3, #43	@ 0x2b
 80233fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233fe:	f89a 3000 	ldrb.w	r3, [sl]
 8023402:	2b2a      	cmp	r3, #42	@ 0x2a
 8023404:	d015      	beq.n	8023432 <_svfiprintf_r+0xfa>
 8023406:	4654      	mov	r4, sl
 8023408:	2000      	movs	r0, #0
 802340a:	f04f 0c0a 	mov.w	ip, #10
 802340e:	9a07      	ldr	r2, [sp, #28]
 8023410:	4621      	mov	r1, r4
 8023412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023416:	3b30      	subs	r3, #48	@ 0x30
 8023418:	2b09      	cmp	r3, #9
 802341a:	d94b      	bls.n	80234b4 <_svfiprintf_r+0x17c>
 802341c:	b1b0      	cbz	r0, 802344c <_svfiprintf_r+0x114>
 802341e:	9207      	str	r2, [sp, #28]
 8023420:	e014      	b.n	802344c <_svfiprintf_r+0x114>
 8023422:	eba0 0308 	sub.w	r3, r0, r8
 8023426:	fa09 f303 	lsl.w	r3, r9, r3
 802342a:	4313      	orrs	r3, r2
 802342c:	46a2      	mov	sl, r4
 802342e:	9304      	str	r3, [sp, #16]
 8023430:	e7d2      	b.n	80233d8 <_svfiprintf_r+0xa0>
 8023432:	9b03      	ldr	r3, [sp, #12]
 8023434:	1d19      	adds	r1, r3, #4
 8023436:	681b      	ldr	r3, [r3, #0]
 8023438:	9103      	str	r1, [sp, #12]
 802343a:	2b00      	cmp	r3, #0
 802343c:	bfbb      	ittet	lt
 802343e:	425b      	neglt	r3, r3
 8023440:	f042 0202 	orrlt.w	r2, r2, #2
 8023444:	9307      	strge	r3, [sp, #28]
 8023446:	9307      	strlt	r3, [sp, #28]
 8023448:	bfb8      	it	lt
 802344a:	9204      	strlt	r2, [sp, #16]
 802344c:	7823      	ldrb	r3, [r4, #0]
 802344e:	2b2e      	cmp	r3, #46	@ 0x2e
 8023450:	d10a      	bne.n	8023468 <_svfiprintf_r+0x130>
 8023452:	7863      	ldrb	r3, [r4, #1]
 8023454:	2b2a      	cmp	r3, #42	@ 0x2a
 8023456:	d132      	bne.n	80234be <_svfiprintf_r+0x186>
 8023458:	9b03      	ldr	r3, [sp, #12]
 802345a:	3402      	adds	r4, #2
 802345c:	1d1a      	adds	r2, r3, #4
 802345e:	681b      	ldr	r3, [r3, #0]
 8023460:	9203      	str	r2, [sp, #12]
 8023462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023466:	9305      	str	r3, [sp, #20]
 8023468:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8023520 <_svfiprintf_r+0x1e8>
 802346c:	2203      	movs	r2, #3
 802346e:	4650      	mov	r0, sl
 8023470:	7821      	ldrb	r1, [r4, #0]
 8023472:	f7fe fbf4 	bl	8021c5e <memchr>
 8023476:	b138      	cbz	r0, 8023488 <_svfiprintf_r+0x150>
 8023478:	2240      	movs	r2, #64	@ 0x40
 802347a:	9b04      	ldr	r3, [sp, #16]
 802347c:	eba0 000a 	sub.w	r0, r0, sl
 8023480:	4082      	lsls	r2, r0
 8023482:	4313      	orrs	r3, r2
 8023484:	3401      	adds	r4, #1
 8023486:	9304      	str	r3, [sp, #16]
 8023488:	f814 1b01 	ldrb.w	r1, [r4], #1
 802348c:	2206      	movs	r2, #6
 802348e:	4825      	ldr	r0, [pc, #148]	@ (8023524 <_svfiprintf_r+0x1ec>)
 8023490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023494:	f7fe fbe3 	bl	8021c5e <memchr>
 8023498:	2800      	cmp	r0, #0
 802349a:	d036      	beq.n	802350a <_svfiprintf_r+0x1d2>
 802349c:	4b22      	ldr	r3, [pc, #136]	@ (8023528 <_svfiprintf_r+0x1f0>)
 802349e:	bb1b      	cbnz	r3, 80234e8 <_svfiprintf_r+0x1b0>
 80234a0:	9b03      	ldr	r3, [sp, #12]
 80234a2:	3307      	adds	r3, #7
 80234a4:	f023 0307 	bic.w	r3, r3, #7
 80234a8:	3308      	adds	r3, #8
 80234aa:	9303      	str	r3, [sp, #12]
 80234ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234ae:	4433      	add	r3, r6
 80234b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80234b2:	e76a      	b.n	802338a <_svfiprintf_r+0x52>
 80234b4:	460c      	mov	r4, r1
 80234b6:	2001      	movs	r0, #1
 80234b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80234bc:	e7a8      	b.n	8023410 <_svfiprintf_r+0xd8>
 80234be:	2300      	movs	r3, #0
 80234c0:	f04f 0c0a 	mov.w	ip, #10
 80234c4:	4619      	mov	r1, r3
 80234c6:	3401      	adds	r4, #1
 80234c8:	9305      	str	r3, [sp, #20]
 80234ca:	4620      	mov	r0, r4
 80234cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80234d0:	3a30      	subs	r2, #48	@ 0x30
 80234d2:	2a09      	cmp	r2, #9
 80234d4:	d903      	bls.n	80234de <_svfiprintf_r+0x1a6>
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	d0c6      	beq.n	8023468 <_svfiprintf_r+0x130>
 80234da:	9105      	str	r1, [sp, #20]
 80234dc:	e7c4      	b.n	8023468 <_svfiprintf_r+0x130>
 80234de:	4604      	mov	r4, r0
 80234e0:	2301      	movs	r3, #1
 80234e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80234e6:	e7f0      	b.n	80234ca <_svfiprintf_r+0x192>
 80234e8:	ab03      	add	r3, sp, #12
 80234ea:	9300      	str	r3, [sp, #0]
 80234ec:	462a      	mov	r2, r5
 80234ee:	4638      	mov	r0, r7
 80234f0:	4b0e      	ldr	r3, [pc, #56]	@ (802352c <_svfiprintf_r+0x1f4>)
 80234f2:	a904      	add	r1, sp, #16
 80234f4:	f7fd fc98 	bl	8020e28 <_printf_float>
 80234f8:	1c42      	adds	r2, r0, #1
 80234fa:	4606      	mov	r6, r0
 80234fc:	d1d6      	bne.n	80234ac <_svfiprintf_r+0x174>
 80234fe:	89ab      	ldrh	r3, [r5, #12]
 8023500:	065b      	lsls	r3, r3, #25
 8023502:	f53f af2d 	bmi.w	8023360 <_svfiprintf_r+0x28>
 8023506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023508:	e72c      	b.n	8023364 <_svfiprintf_r+0x2c>
 802350a:	ab03      	add	r3, sp, #12
 802350c:	9300      	str	r3, [sp, #0]
 802350e:	462a      	mov	r2, r5
 8023510:	4638      	mov	r0, r7
 8023512:	4b06      	ldr	r3, [pc, #24]	@ (802352c <_svfiprintf_r+0x1f4>)
 8023514:	a904      	add	r1, sp, #16
 8023516:	f7fd ff25 	bl	8021364 <_printf_i>
 802351a:	e7ed      	b.n	80234f8 <_svfiprintf_r+0x1c0>
 802351c:	0803080e 	.word	0x0803080e
 8023520:	08030814 	.word	0x08030814
 8023524:	08030818 	.word	0x08030818
 8023528:	08020e29 	.word	0x08020e29
 802352c:	08023281 	.word	0x08023281

08023530 <_sungetc_r>:
 8023530:	b538      	push	{r3, r4, r5, lr}
 8023532:	1c4b      	adds	r3, r1, #1
 8023534:	4614      	mov	r4, r2
 8023536:	d103      	bne.n	8023540 <_sungetc_r+0x10>
 8023538:	f04f 35ff 	mov.w	r5, #4294967295
 802353c:	4628      	mov	r0, r5
 802353e:	bd38      	pop	{r3, r4, r5, pc}
 8023540:	8993      	ldrh	r3, [r2, #12]
 8023542:	b2cd      	uxtb	r5, r1
 8023544:	f023 0320 	bic.w	r3, r3, #32
 8023548:	8193      	strh	r3, [r2, #12]
 802354a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802354c:	6852      	ldr	r2, [r2, #4]
 802354e:	b18b      	cbz	r3, 8023574 <_sungetc_r+0x44>
 8023550:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8023552:	4293      	cmp	r3, r2
 8023554:	dd08      	ble.n	8023568 <_sungetc_r+0x38>
 8023556:	6823      	ldr	r3, [r4, #0]
 8023558:	1e5a      	subs	r2, r3, #1
 802355a:	6022      	str	r2, [r4, #0]
 802355c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023560:	6863      	ldr	r3, [r4, #4]
 8023562:	3301      	adds	r3, #1
 8023564:	6063      	str	r3, [r4, #4]
 8023566:	e7e9      	b.n	802353c <_sungetc_r+0xc>
 8023568:	4621      	mov	r1, r4
 802356a:	f000 fd8f 	bl	802408c <__submore>
 802356e:	2800      	cmp	r0, #0
 8023570:	d0f1      	beq.n	8023556 <_sungetc_r+0x26>
 8023572:	e7e1      	b.n	8023538 <_sungetc_r+0x8>
 8023574:	6921      	ldr	r1, [r4, #16]
 8023576:	6823      	ldr	r3, [r4, #0]
 8023578:	b151      	cbz	r1, 8023590 <_sungetc_r+0x60>
 802357a:	4299      	cmp	r1, r3
 802357c:	d208      	bcs.n	8023590 <_sungetc_r+0x60>
 802357e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023582:	42a9      	cmp	r1, r5
 8023584:	d104      	bne.n	8023590 <_sungetc_r+0x60>
 8023586:	3b01      	subs	r3, #1
 8023588:	3201      	adds	r2, #1
 802358a:	6023      	str	r3, [r4, #0]
 802358c:	6062      	str	r2, [r4, #4]
 802358e:	e7d5      	b.n	802353c <_sungetc_r+0xc>
 8023590:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8023594:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023598:	6363      	str	r3, [r4, #52]	@ 0x34
 802359a:	2303      	movs	r3, #3
 802359c:	63a3      	str	r3, [r4, #56]	@ 0x38
 802359e:	4623      	mov	r3, r4
 80235a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80235a4:	6023      	str	r3, [r4, #0]
 80235a6:	2301      	movs	r3, #1
 80235a8:	e7dc      	b.n	8023564 <_sungetc_r+0x34>

080235aa <__ssrefill_r>:
 80235aa:	b510      	push	{r4, lr}
 80235ac:	460c      	mov	r4, r1
 80235ae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80235b0:	b169      	cbz	r1, 80235ce <__ssrefill_r+0x24>
 80235b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80235b6:	4299      	cmp	r1, r3
 80235b8:	d001      	beq.n	80235be <__ssrefill_r+0x14>
 80235ba:	f7ff f9e9 	bl	8022990 <_free_r>
 80235be:	2000      	movs	r0, #0
 80235c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80235c2:	6360      	str	r0, [r4, #52]	@ 0x34
 80235c4:	6063      	str	r3, [r4, #4]
 80235c6:	b113      	cbz	r3, 80235ce <__ssrefill_r+0x24>
 80235c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80235ca:	6023      	str	r3, [r4, #0]
 80235cc:	bd10      	pop	{r4, pc}
 80235ce:	6923      	ldr	r3, [r4, #16]
 80235d0:	f04f 30ff 	mov.w	r0, #4294967295
 80235d4:	6023      	str	r3, [r4, #0]
 80235d6:	2300      	movs	r3, #0
 80235d8:	6063      	str	r3, [r4, #4]
 80235da:	89a3      	ldrh	r3, [r4, #12]
 80235dc:	f043 0320 	orr.w	r3, r3, #32
 80235e0:	81a3      	strh	r3, [r4, #12]
 80235e2:	e7f3      	b.n	80235cc <__ssrefill_r+0x22>

080235e4 <__ssvfiscanf_r>:
 80235e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235e8:	460c      	mov	r4, r1
 80235ea:	2100      	movs	r1, #0
 80235ec:	4606      	mov	r6, r0
 80235ee:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80235f2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80235f6:	49ab      	ldr	r1, [pc, #684]	@ (80238a4 <__ssvfiscanf_r+0x2c0>)
 80235f8:	f10d 0804 	add.w	r8, sp, #4
 80235fc:	91a0      	str	r1, [sp, #640]	@ 0x280
 80235fe:	49aa      	ldr	r1, [pc, #680]	@ (80238a8 <__ssvfiscanf_r+0x2c4>)
 8023600:	4faa      	ldr	r7, [pc, #680]	@ (80238ac <__ssvfiscanf_r+0x2c8>)
 8023602:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8023606:	91a1      	str	r1, [sp, #644]	@ 0x284
 8023608:	9300      	str	r3, [sp, #0]
 802360a:	f892 9000 	ldrb.w	r9, [r2]
 802360e:	f1b9 0f00 	cmp.w	r9, #0
 8023612:	f000 8159 	beq.w	80238c8 <__ssvfiscanf_r+0x2e4>
 8023616:	f817 3009 	ldrb.w	r3, [r7, r9]
 802361a:	1c55      	adds	r5, r2, #1
 802361c:	f013 0308 	ands.w	r3, r3, #8
 8023620:	d019      	beq.n	8023656 <__ssvfiscanf_r+0x72>
 8023622:	6863      	ldr	r3, [r4, #4]
 8023624:	2b00      	cmp	r3, #0
 8023626:	dd0f      	ble.n	8023648 <__ssvfiscanf_r+0x64>
 8023628:	6823      	ldr	r3, [r4, #0]
 802362a:	781a      	ldrb	r2, [r3, #0]
 802362c:	5cba      	ldrb	r2, [r7, r2]
 802362e:	0712      	lsls	r2, r2, #28
 8023630:	d401      	bmi.n	8023636 <__ssvfiscanf_r+0x52>
 8023632:	462a      	mov	r2, r5
 8023634:	e7e9      	b.n	802360a <__ssvfiscanf_r+0x26>
 8023636:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8023638:	3301      	adds	r3, #1
 802363a:	3201      	adds	r2, #1
 802363c:	9245      	str	r2, [sp, #276]	@ 0x114
 802363e:	6862      	ldr	r2, [r4, #4]
 8023640:	6023      	str	r3, [r4, #0]
 8023642:	3a01      	subs	r2, #1
 8023644:	6062      	str	r2, [r4, #4]
 8023646:	e7ec      	b.n	8023622 <__ssvfiscanf_r+0x3e>
 8023648:	4621      	mov	r1, r4
 802364a:	4630      	mov	r0, r6
 802364c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802364e:	4798      	blx	r3
 8023650:	2800      	cmp	r0, #0
 8023652:	d0e9      	beq.n	8023628 <__ssvfiscanf_r+0x44>
 8023654:	e7ed      	b.n	8023632 <__ssvfiscanf_r+0x4e>
 8023656:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 802365a:	f040 8086 	bne.w	802376a <__ssvfiscanf_r+0x186>
 802365e:	9341      	str	r3, [sp, #260]	@ 0x104
 8023660:	9343      	str	r3, [sp, #268]	@ 0x10c
 8023662:	7853      	ldrb	r3, [r2, #1]
 8023664:	2b2a      	cmp	r3, #42	@ 0x2a
 8023666:	bf04      	itt	eq
 8023668:	2310      	moveq	r3, #16
 802366a:	1c95      	addeq	r5, r2, #2
 802366c:	f04f 020a 	mov.w	r2, #10
 8023670:	bf08      	it	eq
 8023672:	9341      	streq	r3, [sp, #260]	@ 0x104
 8023674:	46aa      	mov	sl, r5
 8023676:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802367a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 802367e:	2b09      	cmp	r3, #9
 8023680:	d91e      	bls.n	80236c0 <__ssvfiscanf_r+0xdc>
 8023682:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 80238b0 <__ssvfiscanf_r+0x2cc>
 8023686:	2203      	movs	r2, #3
 8023688:	4658      	mov	r0, fp
 802368a:	f7fe fae8 	bl	8021c5e <memchr>
 802368e:	b138      	cbz	r0, 80236a0 <__ssvfiscanf_r+0xbc>
 8023690:	2301      	movs	r3, #1
 8023692:	4655      	mov	r5, sl
 8023694:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8023696:	eba0 000b 	sub.w	r0, r0, fp
 802369a:	4083      	lsls	r3, r0
 802369c:	4313      	orrs	r3, r2
 802369e:	9341      	str	r3, [sp, #260]	@ 0x104
 80236a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80236a4:	2b78      	cmp	r3, #120	@ 0x78
 80236a6:	d806      	bhi.n	80236b6 <__ssvfiscanf_r+0xd2>
 80236a8:	2b57      	cmp	r3, #87	@ 0x57
 80236aa:	d810      	bhi.n	80236ce <__ssvfiscanf_r+0xea>
 80236ac:	2b25      	cmp	r3, #37	@ 0x25
 80236ae:	d05c      	beq.n	802376a <__ssvfiscanf_r+0x186>
 80236b0:	d856      	bhi.n	8023760 <__ssvfiscanf_r+0x17c>
 80236b2:	2b00      	cmp	r3, #0
 80236b4:	d074      	beq.n	80237a0 <__ssvfiscanf_r+0x1bc>
 80236b6:	2303      	movs	r3, #3
 80236b8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80236ba:	230a      	movs	r3, #10
 80236bc:	9342      	str	r3, [sp, #264]	@ 0x108
 80236be:	e087      	b.n	80237d0 <__ssvfiscanf_r+0x1ec>
 80236c0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80236c2:	4655      	mov	r5, sl
 80236c4:	fb02 1103 	mla	r1, r2, r3, r1
 80236c8:	3930      	subs	r1, #48	@ 0x30
 80236ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 80236cc:	e7d2      	b.n	8023674 <__ssvfiscanf_r+0x90>
 80236ce:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80236d2:	2a20      	cmp	r2, #32
 80236d4:	d8ef      	bhi.n	80236b6 <__ssvfiscanf_r+0xd2>
 80236d6:	a101      	add	r1, pc, #4	@ (adr r1, 80236dc <__ssvfiscanf_r+0xf8>)
 80236d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80236dc:	080237af 	.word	0x080237af
 80236e0:	080236b7 	.word	0x080236b7
 80236e4:	080236b7 	.word	0x080236b7
 80236e8:	08023809 	.word	0x08023809
 80236ec:	080236b7 	.word	0x080236b7
 80236f0:	080236b7 	.word	0x080236b7
 80236f4:	080236b7 	.word	0x080236b7
 80236f8:	080236b7 	.word	0x080236b7
 80236fc:	080236b7 	.word	0x080236b7
 8023700:	080236b7 	.word	0x080236b7
 8023704:	080236b7 	.word	0x080236b7
 8023708:	0802381f 	.word	0x0802381f
 802370c:	08023805 	.word	0x08023805
 8023710:	08023767 	.word	0x08023767
 8023714:	08023767 	.word	0x08023767
 8023718:	08023767 	.word	0x08023767
 802371c:	080236b7 	.word	0x080236b7
 8023720:	080237c1 	.word	0x080237c1
 8023724:	080236b7 	.word	0x080236b7
 8023728:	080236b7 	.word	0x080236b7
 802372c:	080236b7 	.word	0x080236b7
 8023730:	080236b7 	.word	0x080236b7
 8023734:	0802382f 	.word	0x0802382f
 8023738:	080237c9 	.word	0x080237c9
 802373c:	080237a7 	.word	0x080237a7
 8023740:	080236b7 	.word	0x080236b7
 8023744:	080236b7 	.word	0x080236b7
 8023748:	0802382b 	.word	0x0802382b
 802374c:	080236b7 	.word	0x080236b7
 8023750:	08023805 	.word	0x08023805
 8023754:	080236b7 	.word	0x080236b7
 8023758:	080236b7 	.word	0x080236b7
 802375c:	080237af 	.word	0x080237af
 8023760:	3b45      	subs	r3, #69	@ 0x45
 8023762:	2b02      	cmp	r3, #2
 8023764:	d8a7      	bhi.n	80236b6 <__ssvfiscanf_r+0xd2>
 8023766:	2305      	movs	r3, #5
 8023768:	e031      	b.n	80237ce <__ssvfiscanf_r+0x1ea>
 802376a:	6863      	ldr	r3, [r4, #4]
 802376c:	2b00      	cmp	r3, #0
 802376e:	dd0d      	ble.n	802378c <__ssvfiscanf_r+0x1a8>
 8023770:	6823      	ldr	r3, [r4, #0]
 8023772:	781a      	ldrb	r2, [r3, #0]
 8023774:	454a      	cmp	r2, r9
 8023776:	f040 80a7 	bne.w	80238c8 <__ssvfiscanf_r+0x2e4>
 802377a:	3301      	adds	r3, #1
 802377c:	6862      	ldr	r2, [r4, #4]
 802377e:	6023      	str	r3, [r4, #0]
 8023780:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8023782:	3a01      	subs	r2, #1
 8023784:	3301      	adds	r3, #1
 8023786:	6062      	str	r2, [r4, #4]
 8023788:	9345      	str	r3, [sp, #276]	@ 0x114
 802378a:	e752      	b.n	8023632 <__ssvfiscanf_r+0x4e>
 802378c:	4621      	mov	r1, r4
 802378e:	4630      	mov	r0, r6
 8023790:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8023792:	4798      	blx	r3
 8023794:	2800      	cmp	r0, #0
 8023796:	d0eb      	beq.n	8023770 <__ssvfiscanf_r+0x18c>
 8023798:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802379a:	2800      	cmp	r0, #0
 802379c:	f040 808c 	bne.w	80238b8 <__ssvfiscanf_r+0x2d4>
 80237a0:	f04f 30ff 	mov.w	r0, #4294967295
 80237a4:	e08c      	b.n	80238c0 <__ssvfiscanf_r+0x2dc>
 80237a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80237a8:	f042 0220 	orr.w	r2, r2, #32
 80237ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80237ae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80237b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80237b4:	9241      	str	r2, [sp, #260]	@ 0x104
 80237b6:	2210      	movs	r2, #16
 80237b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80237ba:	9242      	str	r2, [sp, #264]	@ 0x108
 80237bc:	d902      	bls.n	80237c4 <__ssvfiscanf_r+0x1e0>
 80237be:	e005      	b.n	80237cc <__ssvfiscanf_r+0x1e8>
 80237c0:	2300      	movs	r3, #0
 80237c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80237c4:	2303      	movs	r3, #3
 80237c6:	e002      	b.n	80237ce <__ssvfiscanf_r+0x1ea>
 80237c8:	2308      	movs	r3, #8
 80237ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80237cc:	2304      	movs	r3, #4
 80237ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80237d0:	6863      	ldr	r3, [r4, #4]
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	dd39      	ble.n	802384a <__ssvfiscanf_r+0x266>
 80237d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80237d8:	0659      	lsls	r1, r3, #25
 80237da:	d404      	bmi.n	80237e6 <__ssvfiscanf_r+0x202>
 80237dc:	6823      	ldr	r3, [r4, #0]
 80237de:	781a      	ldrb	r2, [r3, #0]
 80237e0:	5cba      	ldrb	r2, [r7, r2]
 80237e2:	0712      	lsls	r2, r2, #28
 80237e4:	d438      	bmi.n	8023858 <__ssvfiscanf_r+0x274>
 80237e6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80237e8:	2b02      	cmp	r3, #2
 80237ea:	dc47      	bgt.n	802387c <__ssvfiscanf_r+0x298>
 80237ec:	466b      	mov	r3, sp
 80237ee:	4622      	mov	r2, r4
 80237f0:	4630      	mov	r0, r6
 80237f2:	a941      	add	r1, sp, #260	@ 0x104
 80237f4:	f000 f9aa 	bl	8023b4c <_scanf_chars>
 80237f8:	2801      	cmp	r0, #1
 80237fa:	d065      	beq.n	80238c8 <__ssvfiscanf_r+0x2e4>
 80237fc:	2802      	cmp	r0, #2
 80237fe:	f47f af18 	bne.w	8023632 <__ssvfiscanf_r+0x4e>
 8023802:	e7c9      	b.n	8023798 <__ssvfiscanf_r+0x1b4>
 8023804:	220a      	movs	r2, #10
 8023806:	e7d7      	b.n	80237b8 <__ssvfiscanf_r+0x1d4>
 8023808:	4629      	mov	r1, r5
 802380a:	4640      	mov	r0, r8
 802380c:	f000 fc05 	bl	802401a <__sccl>
 8023810:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023812:	4605      	mov	r5, r0
 8023814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023818:	9341      	str	r3, [sp, #260]	@ 0x104
 802381a:	2301      	movs	r3, #1
 802381c:	e7d7      	b.n	80237ce <__ssvfiscanf_r+0x1ea>
 802381e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023824:	9341      	str	r3, [sp, #260]	@ 0x104
 8023826:	2300      	movs	r3, #0
 8023828:	e7d1      	b.n	80237ce <__ssvfiscanf_r+0x1ea>
 802382a:	2302      	movs	r3, #2
 802382c:	e7cf      	b.n	80237ce <__ssvfiscanf_r+0x1ea>
 802382e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8023830:	06c3      	lsls	r3, r0, #27
 8023832:	f53f aefe 	bmi.w	8023632 <__ssvfiscanf_r+0x4e>
 8023836:	9b00      	ldr	r3, [sp, #0]
 8023838:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802383a:	1d19      	adds	r1, r3, #4
 802383c:	9100      	str	r1, [sp, #0]
 802383e:	681b      	ldr	r3, [r3, #0]
 8023840:	07c0      	lsls	r0, r0, #31
 8023842:	bf4c      	ite	mi
 8023844:	801a      	strhmi	r2, [r3, #0]
 8023846:	601a      	strpl	r2, [r3, #0]
 8023848:	e6f3      	b.n	8023632 <__ssvfiscanf_r+0x4e>
 802384a:	4621      	mov	r1, r4
 802384c:	4630      	mov	r0, r6
 802384e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8023850:	4798      	blx	r3
 8023852:	2800      	cmp	r0, #0
 8023854:	d0bf      	beq.n	80237d6 <__ssvfiscanf_r+0x1f2>
 8023856:	e79f      	b.n	8023798 <__ssvfiscanf_r+0x1b4>
 8023858:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802385a:	3201      	adds	r2, #1
 802385c:	9245      	str	r2, [sp, #276]	@ 0x114
 802385e:	6862      	ldr	r2, [r4, #4]
 8023860:	3a01      	subs	r2, #1
 8023862:	2a00      	cmp	r2, #0
 8023864:	6062      	str	r2, [r4, #4]
 8023866:	dd02      	ble.n	802386e <__ssvfiscanf_r+0x28a>
 8023868:	3301      	adds	r3, #1
 802386a:	6023      	str	r3, [r4, #0]
 802386c:	e7b6      	b.n	80237dc <__ssvfiscanf_r+0x1f8>
 802386e:	4621      	mov	r1, r4
 8023870:	4630      	mov	r0, r6
 8023872:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8023874:	4798      	blx	r3
 8023876:	2800      	cmp	r0, #0
 8023878:	d0b0      	beq.n	80237dc <__ssvfiscanf_r+0x1f8>
 802387a:	e78d      	b.n	8023798 <__ssvfiscanf_r+0x1b4>
 802387c:	2b04      	cmp	r3, #4
 802387e:	dc06      	bgt.n	802388e <__ssvfiscanf_r+0x2aa>
 8023880:	466b      	mov	r3, sp
 8023882:	4622      	mov	r2, r4
 8023884:	4630      	mov	r0, r6
 8023886:	a941      	add	r1, sp, #260	@ 0x104
 8023888:	f000 f9ba 	bl	8023c00 <_scanf_i>
 802388c:	e7b4      	b.n	80237f8 <__ssvfiscanf_r+0x214>
 802388e:	4b09      	ldr	r3, [pc, #36]	@ (80238b4 <__ssvfiscanf_r+0x2d0>)
 8023890:	2b00      	cmp	r3, #0
 8023892:	f43f aece 	beq.w	8023632 <__ssvfiscanf_r+0x4e>
 8023896:	466b      	mov	r3, sp
 8023898:	4622      	mov	r2, r4
 802389a:	4630      	mov	r0, r6
 802389c:	a941      	add	r1, sp, #260	@ 0x104
 802389e:	f3af 8000 	nop.w
 80238a2:	e7a9      	b.n	80237f8 <__ssvfiscanf_r+0x214>
 80238a4:	08023531 	.word	0x08023531
 80238a8:	080235ab 	.word	0x080235ab
 80238ac:	08030845 	.word	0x08030845
 80238b0:	08030814 	.word	0x08030814
 80238b4:	00000000 	.word	0x00000000
 80238b8:	89a3      	ldrh	r3, [r4, #12]
 80238ba:	065b      	lsls	r3, r3, #25
 80238bc:	f53f af70 	bmi.w	80237a0 <__ssvfiscanf_r+0x1bc>
 80238c0:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80238c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238c8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80238ca:	e7f9      	b.n	80238c0 <__ssvfiscanf_r+0x2dc>

080238cc <__sfputc_r>:
 80238cc:	6893      	ldr	r3, [r2, #8]
 80238ce:	b410      	push	{r4}
 80238d0:	3b01      	subs	r3, #1
 80238d2:	2b00      	cmp	r3, #0
 80238d4:	6093      	str	r3, [r2, #8]
 80238d6:	da07      	bge.n	80238e8 <__sfputc_r+0x1c>
 80238d8:	6994      	ldr	r4, [r2, #24]
 80238da:	42a3      	cmp	r3, r4
 80238dc:	db01      	blt.n	80238e2 <__sfputc_r+0x16>
 80238de:	290a      	cmp	r1, #10
 80238e0:	d102      	bne.n	80238e8 <__sfputc_r+0x1c>
 80238e2:	bc10      	pop	{r4}
 80238e4:	f7fe b835 	b.w	8021952 <__swbuf_r>
 80238e8:	6813      	ldr	r3, [r2, #0]
 80238ea:	1c58      	adds	r0, r3, #1
 80238ec:	6010      	str	r0, [r2, #0]
 80238ee:	7019      	strb	r1, [r3, #0]
 80238f0:	4608      	mov	r0, r1
 80238f2:	bc10      	pop	{r4}
 80238f4:	4770      	bx	lr

080238f6 <__sfputs_r>:
 80238f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238f8:	4606      	mov	r6, r0
 80238fa:	460f      	mov	r7, r1
 80238fc:	4614      	mov	r4, r2
 80238fe:	18d5      	adds	r5, r2, r3
 8023900:	42ac      	cmp	r4, r5
 8023902:	d101      	bne.n	8023908 <__sfputs_r+0x12>
 8023904:	2000      	movs	r0, #0
 8023906:	e007      	b.n	8023918 <__sfputs_r+0x22>
 8023908:	463a      	mov	r2, r7
 802390a:	4630      	mov	r0, r6
 802390c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023910:	f7ff ffdc 	bl	80238cc <__sfputc_r>
 8023914:	1c43      	adds	r3, r0, #1
 8023916:	d1f3      	bne.n	8023900 <__sfputs_r+0xa>
 8023918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802391c <_vfiprintf_r>:
 802391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023920:	460d      	mov	r5, r1
 8023922:	4614      	mov	r4, r2
 8023924:	4698      	mov	r8, r3
 8023926:	4606      	mov	r6, r0
 8023928:	b09d      	sub	sp, #116	@ 0x74
 802392a:	b118      	cbz	r0, 8023934 <_vfiprintf_r+0x18>
 802392c:	6a03      	ldr	r3, [r0, #32]
 802392e:	b90b      	cbnz	r3, 8023934 <_vfiprintf_r+0x18>
 8023930:	f7fd fec2 	bl	80216b8 <__sinit>
 8023934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023936:	07d9      	lsls	r1, r3, #31
 8023938:	d405      	bmi.n	8023946 <_vfiprintf_r+0x2a>
 802393a:	89ab      	ldrh	r3, [r5, #12]
 802393c:	059a      	lsls	r2, r3, #22
 802393e:	d402      	bmi.n	8023946 <_vfiprintf_r+0x2a>
 8023940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023942:	f7fe f98a 	bl	8021c5a <__retarget_lock_acquire_recursive>
 8023946:	89ab      	ldrh	r3, [r5, #12]
 8023948:	071b      	lsls	r3, r3, #28
 802394a:	d501      	bpl.n	8023950 <_vfiprintf_r+0x34>
 802394c:	692b      	ldr	r3, [r5, #16]
 802394e:	b99b      	cbnz	r3, 8023978 <_vfiprintf_r+0x5c>
 8023950:	4629      	mov	r1, r5
 8023952:	4630      	mov	r0, r6
 8023954:	f7fe f83c 	bl	80219d0 <__swsetup_r>
 8023958:	b170      	cbz	r0, 8023978 <_vfiprintf_r+0x5c>
 802395a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802395c:	07dc      	lsls	r4, r3, #31
 802395e:	d504      	bpl.n	802396a <_vfiprintf_r+0x4e>
 8023960:	f04f 30ff 	mov.w	r0, #4294967295
 8023964:	b01d      	add	sp, #116	@ 0x74
 8023966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802396a:	89ab      	ldrh	r3, [r5, #12]
 802396c:	0598      	lsls	r0, r3, #22
 802396e:	d4f7      	bmi.n	8023960 <_vfiprintf_r+0x44>
 8023970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023972:	f7fe f973 	bl	8021c5c <__retarget_lock_release_recursive>
 8023976:	e7f3      	b.n	8023960 <_vfiprintf_r+0x44>
 8023978:	2300      	movs	r3, #0
 802397a:	9309      	str	r3, [sp, #36]	@ 0x24
 802397c:	2320      	movs	r3, #32
 802397e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023982:	2330      	movs	r3, #48	@ 0x30
 8023984:	f04f 0901 	mov.w	r9, #1
 8023988:	f8cd 800c 	str.w	r8, [sp, #12]
 802398c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8023b38 <_vfiprintf_r+0x21c>
 8023990:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023994:	4623      	mov	r3, r4
 8023996:	469a      	mov	sl, r3
 8023998:	f813 2b01 	ldrb.w	r2, [r3], #1
 802399c:	b10a      	cbz	r2, 80239a2 <_vfiprintf_r+0x86>
 802399e:	2a25      	cmp	r2, #37	@ 0x25
 80239a0:	d1f9      	bne.n	8023996 <_vfiprintf_r+0x7a>
 80239a2:	ebba 0b04 	subs.w	fp, sl, r4
 80239a6:	d00b      	beq.n	80239c0 <_vfiprintf_r+0xa4>
 80239a8:	465b      	mov	r3, fp
 80239aa:	4622      	mov	r2, r4
 80239ac:	4629      	mov	r1, r5
 80239ae:	4630      	mov	r0, r6
 80239b0:	f7ff ffa1 	bl	80238f6 <__sfputs_r>
 80239b4:	3001      	adds	r0, #1
 80239b6:	f000 80a7 	beq.w	8023b08 <_vfiprintf_r+0x1ec>
 80239ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80239bc:	445a      	add	r2, fp
 80239be:	9209      	str	r2, [sp, #36]	@ 0x24
 80239c0:	f89a 3000 	ldrb.w	r3, [sl]
 80239c4:	2b00      	cmp	r3, #0
 80239c6:	f000 809f 	beq.w	8023b08 <_vfiprintf_r+0x1ec>
 80239ca:	2300      	movs	r3, #0
 80239cc:	f04f 32ff 	mov.w	r2, #4294967295
 80239d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80239d4:	f10a 0a01 	add.w	sl, sl, #1
 80239d8:	9304      	str	r3, [sp, #16]
 80239da:	9307      	str	r3, [sp, #28]
 80239dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80239e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80239e2:	4654      	mov	r4, sl
 80239e4:	2205      	movs	r2, #5
 80239e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239ea:	4853      	ldr	r0, [pc, #332]	@ (8023b38 <_vfiprintf_r+0x21c>)
 80239ec:	f7fe f937 	bl	8021c5e <memchr>
 80239f0:	9a04      	ldr	r2, [sp, #16]
 80239f2:	b9d8      	cbnz	r0, 8023a2c <_vfiprintf_r+0x110>
 80239f4:	06d1      	lsls	r1, r2, #27
 80239f6:	bf44      	itt	mi
 80239f8:	2320      	movmi	r3, #32
 80239fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80239fe:	0713      	lsls	r3, r2, #28
 8023a00:	bf44      	itt	mi
 8023a02:	232b      	movmi	r3, #43	@ 0x2b
 8023a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023a08:	f89a 3000 	ldrb.w	r3, [sl]
 8023a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8023a0e:	d015      	beq.n	8023a3c <_vfiprintf_r+0x120>
 8023a10:	4654      	mov	r4, sl
 8023a12:	2000      	movs	r0, #0
 8023a14:	f04f 0c0a 	mov.w	ip, #10
 8023a18:	9a07      	ldr	r2, [sp, #28]
 8023a1a:	4621      	mov	r1, r4
 8023a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023a20:	3b30      	subs	r3, #48	@ 0x30
 8023a22:	2b09      	cmp	r3, #9
 8023a24:	d94b      	bls.n	8023abe <_vfiprintf_r+0x1a2>
 8023a26:	b1b0      	cbz	r0, 8023a56 <_vfiprintf_r+0x13a>
 8023a28:	9207      	str	r2, [sp, #28]
 8023a2a:	e014      	b.n	8023a56 <_vfiprintf_r+0x13a>
 8023a2c:	eba0 0308 	sub.w	r3, r0, r8
 8023a30:	fa09 f303 	lsl.w	r3, r9, r3
 8023a34:	4313      	orrs	r3, r2
 8023a36:	46a2      	mov	sl, r4
 8023a38:	9304      	str	r3, [sp, #16]
 8023a3a:	e7d2      	b.n	80239e2 <_vfiprintf_r+0xc6>
 8023a3c:	9b03      	ldr	r3, [sp, #12]
 8023a3e:	1d19      	adds	r1, r3, #4
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	9103      	str	r1, [sp, #12]
 8023a44:	2b00      	cmp	r3, #0
 8023a46:	bfbb      	ittet	lt
 8023a48:	425b      	neglt	r3, r3
 8023a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8023a4e:	9307      	strge	r3, [sp, #28]
 8023a50:	9307      	strlt	r3, [sp, #28]
 8023a52:	bfb8      	it	lt
 8023a54:	9204      	strlt	r2, [sp, #16]
 8023a56:	7823      	ldrb	r3, [r4, #0]
 8023a58:	2b2e      	cmp	r3, #46	@ 0x2e
 8023a5a:	d10a      	bne.n	8023a72 <_vfiprintf_r+0x156>
 8023a5c:	7863      	ldrb	r3, [r4, #1]
 8023a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023a60:	d132      	bne.n	8023ac8 <_vfiprintf_r+0x1ac>
 8023a62:	9b03      	ldr	r3, [sp, #12]
 8023a64:	3402      	adds	r4, #2
 8023a66:	1d1a      	adds	r2, r3, #4
 8023a68:	681b      	ldr	r3, [r3, #0]
 8023a6a:	9203      	str	r2, [sp, #12]
 8023a6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023a70:	9305      	str	r3, [sp, #20]
 8023a72:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8023b3c <_vfiprintf_r+0x220>
 8023a76:	2203      	movs	r2, #3
 8023a78:	4650      	mov	r0, sl
 8023a7a:	7821      	ldrb	r1, [r4, #0]
 8023a7c:	f7fe f8ef 	bl	8021c5e <memchr>
 8023a80:	b138      	cbz	r0, 8023a92 <_vfiprintf_r+0x176>
 8023a82:	2240      	movs	r2, #64	@ 0x40
 8023a84:	9b04      	ldr	r3, [sp, #16]
 8023a86:	eba0 000a 	sub.w	r0, r0, sl
 8023a8a:	4082      	lsls	r2, r0
 8023a8c:	4313      	orrs	r3, r2
 8023a8e:	3401      	adds	r4, #1
 8023a90:	9304      	str	r3, [sp, #16]
 8023a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a96:	2206      	movs	r2, #6
 8023a98:	4829      	ldr	r0, [pc, #164]	@ (8023b40 <_vfiprintf_r+0x224>)
 8023a9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023a9e:	f7fe f8de 	bl	8021c5e <memchr>
 8023aa2:	2800      	cmp	r0, #0
 8023aa4:	d03f      	beq.n	8023b26 <_vfiprintf_r+0x20a>
 8023aa6:	4b27      	ldr	r3, [pc, #156]	@ (8023b44 <_vfiprintf_r+0x228>)
 8023aa8:	bb1b      	cbnz	r3, 8023af2 <_vfiprintf_r+0x1d6>
 8023aaa:	9b03      	ldr	r3, [sp, #12]
 8023aac:	3307      	adds	r3, #7
 8023aae:	f023 0307 	bic.w	r3, r3, #7
 8023ab2:	3308      	adds	r3, #8
 8023ab4:	9303      	str	r3, [sp, #12]
 8023ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ab8:	443b      	add	r3, r7
 8023aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8023abc:	e76a      	b.n	8023994 <_vfiprintf_r+0x78>
 8023abe:	460c      	mov	r4, r1
 8023ac0:	2001      	movs	r0, #1
 8023ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8023ac6:	e7a8      	b.n	8023a1a <_vfiprintf_r+0xfe>
 8023ac8:	2300      	movs	r3, #0
 8023aca:	f04f 0c0a 	mov.w	ip, #10
 8023ace:	4619      	mov	r1, r3
 8023ad0:	3401      	adds	r4, #1
 8023ad2:	9305      	str	r3, [sp, #20]
 8023ad4:	4620      	mov	r0, r4
 8023ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023ada:	3a30      	subs	r2, #48	@ 0x30
 8023adc:	2a09      	cmp	r2, #9
 8023ade:	d903      	bls.n	8023ae8 <_vfiprintf_r+0x1cc>
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	d0c6      	beq.n	8023a72 <_vfiprintf_r+0x156>
 8023ae4:	9105      	str	r1, [sp, #20]
 8023ae6:	e7c4      	b.n	8023a72 <_vfiprintf_r+0x156>
 8023ae8:	4604      	mov	r4, r0
 8023aea:	2301      	movs	r3, #1
 8023aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8023af0:	e7f0      	b.n	8023ad4 <_vfiprintf_r+0x1b8>
 8023af2:	ab03      	add	r3, sp, #12
 8023af4:	9300      	str	r3, [sp, #0]
 8023af6:	462a      	mov	r2, r5
 8023af8:	4630      	mov	r0, r6
 8023afa:	4b13      	ldr	r3, [pc, #76]	@ (8023b48 <_vfiprintf_r+0x22c>)
 8023afc:	a904      	add	r1, sp, #16
 8023afe:	f7fd f993 	bl	8020e28 <_printf_float>
 8023b02:	4607      	mov	r7, r0
 8023b04:	1c78      	adds	r0, r7, #1
 8023b06:	d1d6      	bne.n	8023ab6 <_vfiprintf_r+0x19a>
 8023b08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023b0a:	07d9      	lsls	r1, r3, #31
 8023b0c:	d405      	bmi.n	8023b1a <_vfiprintf_r+0x1fe>
 8023b0e:	89ab      	ldrh	r3, [r5, #12]
 8023b10:	059a      	lsls	r2, r3, #22
 8023b12:	d402      	bmi.n	8023b1a <_vfiprintf_r+0x1fe>
 8023b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023b16:	f7fe f8a1 	bl	8021c5c <__retarget_lock_release_recursive>
 8023b1a:	89ab      	ldrh	r3, [r5, #12]
 8023b1c:	065b      	lsls	r3, r3, #25
 8023b1e:	f53f af1f 	bmi.w	8023960 <_vfiprintf_r+0x44>
 8023b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023b24:	e71e      	b.n	8023964 <_vfiprintf_r+0x48>
 8023b26:	ab03      	add	r3, sp, #12
 8023b28:	9300      	str	r3, [sp, #0]
 8023b2a:	462a      	mov	r2, r5
 8023b2c:	4630      	mov	r0, r6
 8023b2e:	4b06      	ldr	r3, [pc, #24]	@ (8023b48 <_vfiprintf_r+0x22c>)
 8023b30:	a904      	add	r1, sp, #16
 8023b32:	f7fd fc17 	bl	8021364 <_printf_i>
 8023b36:	e7e4      	b.n	8023b02 <_vfiprintf_r+0x1e6>
 8023b38:	0803080e 	.word	0x0803080e
 8023b3c:	08030814 	.word	0x08030814
 8023b40:	08030818 	.word	0x08030818
 8023b44:	08020e29 	.word	0x08020e29
 8023b48:	080238f7 	.word	0x080238f7

08023b4c <_scanf_chars>:
 8023b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023b50:	4615      	mov	r5, r2
 8023b52:	688a      	ldr	r2, [r1, #8]
 8023b54:	4680      	mov	r8, r0
 8023b56:	460c      	mov	r4, r1
 8023b58:	b932      	cbnz	r2, 8023b68 <_scanf_chars+0x1c>
 8023b5a:	698a      	ldr	r2, [r1, #24]
 8023b5c:	2a00      	cmp	r2, #0
 8023b5e:	bf14      	ite	ne
 8023b60:	f04f 32ff 	movne.w	r2, #4294967295
 8023b64:	2201      	moveq	r2, #1
 8023b66:	608a      	str	r2, [r1, #8]
 8023b68:	2700      	movs	r7, #0
 8023b6a:	6822      	ldr	r2, [r4, #0]
 8023b6c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8023bfc <_scanf_chars+0xb0>
 8023b70:	06d1      	lsls	r1, r2, #27
 8023b72:	bf5f      	itttt	pl
 8023b74:	681a      	ldrpl	r2, [r3, #0]
 8023b76:	1d11      	addpl	r1, r2, #4
 8023b78:	6019      	strpl	r1, [r3, #0]
 8023b7a:	6816      	ldrpl	r6, [r2, #0]
 8023b7c:	69a0      	ldr	r0, [r4, #24]
 8023b7e:	b188      	cbz	r0, 8023ba4 <_scanf_chars+0x58>
 8023b80:	2801      	cmp	r0, #1
 8023b82:	d107      	bne.n	8023b94 <_scanf_chars+0x48>
 8023b84:	682b      	ldr	r3, [r5, #0]
 8023b86:	781a      	ldrb	r2, [r3, #0]
 8023b88:	6963      	ldr	r3, [r4, #20]
 8023b8a:	5c9b      	ldrb	r3, [r3, r2]
 8023b8c:	b953      	cbnz	r3, 8023ba4 <_scanf_chars+0x58>
 8023b8e:	2f00      	cmp	r7, #0
 8023b90:	d031      	beq.n	8023bf6 <_scanf_chars+0xaa>
 8023b92:	e022      	b.n	8023bda <_scanf_chars+0x8e>
 8023b94:	2802      	cmp	r0, #2
 8023b96:	d120      	bne.n	8023bda <_scanf_chars+0x8e>
 8023b98:	682b      	ldr	r3, [r5, #0]
 8023b9a:	781b      	ldrb	r3, [r3, #0]
 8023b9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023ba0:	071b      	lsls	r3, r3, #28
 8023ba2:	d41a      	bmi.n	8023bda <_scanf_chars+0x8e>
 8023ba4:	6823      	ldr	r3, [r4, #0]
 8023ba6:	3701      	adds	r7, #1
 8023ba8:	06da      	lsls	r2, r3, #27
 8023baa:	bf5e      	ittt	pl
 8023bac:	682b      	ldrpl	r3, [r5, #0]
 8023bae:	781b      	ldrbpl	r3, [r3, #0]
 8023bb0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8023bb4:	682a      	ldr	r2, [r5, #0]
 8023bb6:	686b      	ldr	r3, [r5, #4]
 8023bb8:	3201      	adds	r2, #1
 8023bba:	602a      	str	r2, [r5, #0]
 8023bbc:	68a2      	ldr	r2, [r4, #8]
 8023bbe:	3b01      	subs	r3, #1
 8023bc0:	3a01      	subs	r2, #1
 8023bc2:	606b      	str	r3, [r5, #4]
 8023bc4:	60a2      	str	r2, [r4, #8]
 8023bc6:	b142      	cbz	r2, 8023bda <_scanf_chars+0x8e>
 8023bc8:	2b00      	cmp	r3, #0
 8023bca:	dcd7      	bgt.n	8023b7c <_scanf_chars+0x30>
 8023bcc:	4629      	mov	r1, r5
 8023bce:	4640      	mov	r0, r8
 8023bd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8023bd4:	4798      	blx	r3
 8023bd6:	2800      	cmp	r0, #0
 8023bd8:	d0d0      	beq.n	8023b7c <_scanf_chars+0x30>
 8023bda:	6823      	ldr	r3, [r4, #0]
 8023bdc:	f013 0310 	ands.w	r3, r3, #16
 8023be0:	d105      	bne.n	8023bee <_scanf_chars+0xa2>
 8023be2:	68e2      	ldr	r2, [r4, #12]
 8023be4:	3201      	adds	r2, #1
 8023be6:	60e2      	str	r2, [r4, #12]
 8023be8:	69a2      	ldr	r2, [r4, #24]
 8023bea:	b102      	cbz	r2, 8023bee <_scanf_chars+0xa2>
 8023bec:	7033      	strb	r3, [r6, #0]
 8023bee:	2000      	movs	r0, #0
 8023bf0:	6923      	ldr	r3, [r4, #16]
 8023bf2:	443b      	add	r3, r7
 8023bf4:	6123      	str	r3, [r4, #16]
 8023bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023bfa:	bf00      	nop
 8023bfc:	08030845 	.word	0x08030845

08023c00 <_scanf_i>:
 8023c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c04:	460c      	mov	r4, r1
 8023c06:	4698      	mov	r8, r3
 8023c08:	4b72      	ldr	r3, [pc, #456]	@ (8023dd4 <_scanf_i+0x1d4>)
 8023c0a:	b087      	sub	sp, #28
 8023c0c:	4682      	mov	sl, r0
 8023c0e:	4616      	mov	r6, r2
 8023c10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023c14:	ab03      	add	r3, sp, #12
 8023c16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8023dd8 <_scanf_i+0x1d8>)
 8023c1c:	69a1      	ldr	r1, [r4, #24]
 8023c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8023ddc <_scanf_i+0x1dc>)
 8023c20:	4627      	mov	r7, r4
 8023c22:	2903      	cmp	r1, #3
 8023c24:	bf08      	it	eq
 8023c26:	461a      	moveq	r2, r3
 8023c28:	68a3      	ldr	r3, [r4, #8]
 8023c2a:	9201      	str	r2, [sp, #4]
 8023c2c:	1e5a      	subs	r2, r3, #1
 8023c2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8023c32:	bf81      	itttt	hi
 8023c34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8023c38:	eb03 0905 	addhi.w	r9, r3, r5
 8023c3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8023c40:	60a3      	strhi	r3, [r4, #8]
 8023c42:	f857 3b1c 	ldr.w	r3, [r7], #28
 8023c46:	bf98      	it	ls
 8023c48:	f04f 0900 	movls.w	r9, #0
 8023c4c:	463d      	mov	r5, r7
 8023c4e:	f04f 0b00 	mov.w	fp, #0
 8023c52:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8023c56:	6023      	str	r3, [r4, #0]
 8023c58:	6831      	ldr	r1, [r6, #0]
 8023c5a:	ab03      	add	r3, sp, #12
 8023c5c:	2202      	movs	r2, #2
 8023c5e:	7809      	ldrb	r1, [r1, #0]
 8023c60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8023c64:	f7fd fffb 	bl	8021c5e <memchr>
 8023c68:	b328      	cbz	r0, 8023cb6 <_scanf_i+0xb6>
 8023c6a:	f1bb 0f01 	cmp.w	fp, #1
 8023c6e:	d159      	bne.n	8023d24 <_scanf_i+0x124>
 8023c70:	6862      	ldr	r2, [r4, #4]
 8023c72:	b92a      	cbnz	r2, 8023c80 <_scanf_i+0x80>
 8023c74:	2108      	movs	r1, #8
 8023c76:	6822      	ldr	r2, [r4, #0]
 8023c78:	6061      	str	r1, [r4, #4]
 8023c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8023c7e:	6022      	str	r2, [r4, #0]
 8023c80:	6822      	ldr	r2, [r4, #0]
 8023c82:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8023c86:	6022      	str	r2, [r4, #0]
 8023c88:	68a2      	ldr	r2, [r4, #8]
 8023c8a:	1e51      	subs	r1, r2, #1
 8023c8c:	60a1      	str	r1, [r4, #8]
 8023c8e:	b192      	cbz	r2, 8023cb6 <_scanf_i+0xb6>
 8023c90:	6832      	ldr	r2, [r6, #0]
 8023c92:	1c51      	adds	r1, r2, #1
 8023c94:	6031      	str	r1, [r6, #0]
 8023c96:	7812      	ldrb	r2, [r2, #0]
 8023c98:	f805 2b01 	strb.w	r2, [r5], #1
 8023c9c:	6872      	ldr	r2, [r6, #4]
 8023c9e:	3a01      	subs	r2, #1
 8023ca0:	2a00      	cmp	r2, #0
 8023ca2:	6072      	str	r2, [r6, #4]
 8023ca4:	dc07      	bgt.n	8023cb6 <_scanf_i+0xb6>
 8023ca6:	4631      	mov	r1, r6
 8023ca8:	4650      	mov	r0, sl
 8023caa:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8023cae:	4790      	blx	r2
 8023cb0:	2800      	cmp	r0, #0
 8023cb2:	f040 8085 	bne.w	8023dc0 <_scanf_i+0x1c0>
 8023cb6:	f10b 0b01 	add.w	fp, fp, #1
 8023cba:	f1bb 0f03 	cmp.w	fp, #3
 8023cbe:	d1cb      	bne.n	8023c58 <_scanf_i+0x58>
 8023cc0:	6863      	ldr	r3, [r4, #4]
 8023cc2:	b90b      	cbnz	r3, 8023cc8 <_scanf_i+0xc8>
 8023cc4:	230a      	movs	r3, #10
 8023cc6:	6063      	str	r3, [r4, #4]
 8023cc8:	6863      	ldr	r3, [r4, #4]
 8023cca:	4945      	ldr	r1, [pc, #276]	@ (8023de0 <_scanf_i+0x1e0>)
 8023ccc:	6960      	ldr	r0, [r4, #20]
 8023cce:	1ac9      	subs	r1, r1, r3
 8023cd0:	f000 f9a3 	bl	802401a <__sccl>
 8023cd4:	f04f 0b00 	mov.w	fp, #0
 8023cd8:	68a3      	ldr	r3, [r4, #8]
 8023cda:	6822      	ldr	r2, [r4, #0]
 8023cdc:	2b00      	cmp	r3, #0
 8023cde:	d03d      	beq.n	8023d5c <_scanf_i+0x15c>
 8023ce0:	6831      	ldr	r1, [r6, #0]
 8023ce2:	6960      	ldr	r0, [r4, #20]
 8023ce4:	f891 c000 	ldrb.w	ip, [r1]
 8023ce8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8023cec:	2800      	cmp	r0, #0
 8023cee:	d035      	beq.n	8023d5c <_scanf_i+0x15c>
 8023cf0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8023cf4:	d124      	bne.n	8023d40 <_scanf_i+0x140>
 8023cf6:	0510      	lsls	r0, r2, #20
 8023cf8:	d522      	bpl.n	8023d40 <_scanf_i+0x140>
 8023cfa:	f10b 0b01 	add.w	fp, fp, #1
 8023cfe:	f1b9 0f00 	cmp.w	r9, #0
 8023d02:	d003      	beq.n	8023d0c <_scanf_i+0x10c>
 8023d04:	3301      	adds	r3, #1
 8023d06:	f109 39ff 	add.w	r9, r9, #4294967295
 8023d0a:	60a3      	str	r3, [r4, #8]
 8023d0c:	6873      	ldr	r3, [r6, #4]
 8023d0e:	3b01      	subs	r3, #1
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	6073      	str	r3, [r6, #4]
 8023d14:	dd1b      	ble.n	8023d4e <_scanf_i+0x14e>
 8023d16:	6833      	ldr	r3, [r6, #0]
 8023d18:	3301      	adds	r3, #1
 8023d1a:	6033      	str	r3, [r6, #0]
 8023d1c:	68a3      	ldr	r3, [r4, #8]
 8023d1e:	3b01      	subs	r3, #1
 8023d20:	60a3      	str	r3, [r4, #8]
 8023d22:	e7d9      	b.n	8023cd8 <_scanf_i+0xd8>
 8023d24:	f1bb 0f02 	cmp.w	fp, #2
 8023d28:	d1ae      	bne.n	8023c88 <_scanf_i+0x88>
 8023d2a:	6822      	ldr	r2, [r4, #0]
 8023d2c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8023d30:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8023d34:	d1c4      	bne.n	8023cc0 <_scanf_i+0xc0>
 8023d36:	2110      	movs	r1, #16
 8023d38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8023d3c:	6061      	str	r1, [r4, #4]
 8023d3e:	e7a2      	b.n	8023c86 <_scanf_i+0x86>
 8023d40:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8023d44:	6022      	str	r2, [r4, #0]
 8023d46:	780b      	ldrb	r3, [r1, #0]
 8023d48:	f805 3b01 	strb.w	r3, [r5], #1
 8023d4c:	e7de      	b.n	8023d0c <_scanf_i+0x10c>
 8023d4e:	4631      	mov	r1, r6
 8023d50:	4650      	mov	r0, sl
 8023d52:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8023d56:	4798      	blx	r3
 8023d58:	2800      	cmp	r0, #0
 8023d5a:	d0df      	beq.n	8023d1c <_scanf_i+0x11c>
 8023d5c:	6823      	ldr	r3, [r4, #0]
 8023d5e:	05d9      	lsls	r1, r3, #23
 8023d60:	d50d      	bpl.n	8023d7e <_scanf_i+0x17e>
 8023d62:	42bd      	cmp	r5, r7
 8023d64:	d909      	bls.n	8023d7a <_scanf_i+0x17a>
 8023d66:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023d6a:	4632      	mov	r2, r6
 8023d6c:	4650      	mov	r0, sl
 8023d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023d72:	f105 39ff 	add.w	r9, r5, #4294967295
 8023d76:	4798      	blx	r3
 8023d78:	464d      	mov	r5, r9
 8023d7a:	42bd      	cmp	r5, r7
 8023d7c:	d028      	beq.n	8023dd0 <_scanf_i+0x1d0>
 8023d7e:	6822      	ldr	r2, [r4, #0]
 8023d80:	f012 0210 	ands.w	r2, r2, #16
 8023d84:	d113      	bne.n	8023dae <_scanf_i+0x1ae>
 8023d86:	702a      	strb	r2, [r5, #0]
 8023d88:	4639      	mov	r1, r7
 8023d8a:	6863      	ldr	r3, [r4, #4]
 8023d8c:	4650      	mov	r0, sl
 8023d8e:	9e01      	ldr	r6, [sp, #4]
 8023d90:	47b0      	blx	r6
 8023d92:	f8d8 3000 	ldr.w	r3, [r8]
 8023d96:	6821      	ldr	r1, [r4, #0]
 8023d98:	1d1a      	adds	r2, r3, #4
 8023d9a:	f8c8 2000 	str.w	r2, [r8]
 8023d9e:	f011 0f20 	tst.w	r1, #32
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	d00f      	beq.n	8023dc6 <_scanf_i+0x1c6>
 8023da6:	6018      	str	r0, [r3, #0]
 8023da8:	68e3      	ldr	r3, [r4, #12]
 8023daa:	3301      	adds	r3, #1
 8023dac:	60e3      	str	r3, [r4, #12]
 8023dae:	2000      	movs	r0, #0
 8023db0:	6923      	ldr	r3, [r4, #16]
 8023db2:	1bed      	subs	r5, r5, r7
 8023db4:	445d      	add	r5, fp
 8023db6:	442b      	add	r3, r5
 8023db8:	6123      	str	r3, [r4, #16]
 8023dba:	b007      	add	sp, #28
 8023dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dc0:	f04f 0b00 	mov.w	fp, #0
 8023dc4:	e7ca      	b.n	8023d5c <_scanf_i+0x15c>
 8023dc6:	07ca      	lsls	r2, r1, #31
 8023dc8:	bf4c      	ite	mi
 8023dca:	8018      	strhmi	r0, [r3, #0]
 8023dcc:	6018      	strpl	r0, [r3, #0]
 8023dce:	e7eb      	b.n	8023da8 <_scanf_i+0x1a8>
 8023dd0:	2001      	movs	r0, #1
 8023dd2:	e7f2      	b.n	8023dba <_scanf_i+0x1ba>
 8023dd4:	08027330 	.word	0x08027330
 8023dd8:	08020cc5 	.word	0x08020cc5
 8023ddc:	080242f5 	.word	0x080242f5
 8023de0:	0803082f 	.word	0x0803082f

08023de4 <__sflush_r>:
 8023de4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023dea:	0716      	lsls	r6, r2, #28
 8023dec:	4605      	mov	r5, r0
 8023dee:	460c      	mov	r4, r1
 8023df0:	d454      	bmi.n	8023e9c <__sflush_r+0xb8>
 8023df2:	684b      	ldr	r3, [r1, #4]
 8023df4:	2b00      	cmp	r3, #0
 8023df6:	dc02      	bgt.n	8023dfe <__sflush_r+0x1a>
 8023df8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	dd48      	ble.n	8023e90 <__sflush_r+0xac>
 8023dfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023e00:	2e00      	cmp	r6, #0
 8023e02:	d045      	beq.n	8023e90 <__sflush_r+0xac>
 8023e04:	2300      	movs	r3, #0
 8023e06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023e0a:	682f      	ldr	r7, [r5, #0]
 8023e0c:	6a21      	ldr	r1, [r4, #32]
 8023e0e:	602b      	str	r3, [r5, #0]
 8023e10:	d030      	beq.n	8023e74 <__sflush_r+0x90>
 8023e12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023e14:	89a3      	ldrh	r3, [r4, #12]
 8023e16:	0759      	lsls	r1, r3, #29
 8023e18:	d505      	bpl.n	8023e26 <__sflush_r+0x42>
 8023e1a:	6863      	ldr	r3, [r4, #4]
 8023e1c:	1ad2      	subs	r2, r2, r3
 8023e1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023e20:	b10b      	cbz	r3, 8023e26 <__sflush_r+0x42>
 8023e22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023e24:	1ad2      	subs	r2, r2, r3
 8023e26:	2300      	movs	r3, #0
 8023e28:	4628      	mov	r0, r5
 8023e2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023e2c:	6a21      	ldr	r1, [r4, #32]
 8023e2e:	47b0      	blx	r6
 8023e30:	1c43      	adds	r3, r0, #1
 8023e32:	89a3      	ldrh	r3, [r4, #12]
 8023e34:	d106      	bne.n	8023e44 <__sflush_r+0x60>
 8023e36:	6829      	ldr	r1, [r5, #0]
 8023e38:	291d      	cmp	r1, #29
 8023e3a:	d82b      	bhi.n	8023e94 <__sflush_r+0xb0>
 8023e3c:	4a28      	ldr	r2, [pc, #160]	@ (8023ee0 <__sflush_r+0xfc>)
 8023e3e:	40ca      	lsrs	r2, r1
 8023e40:	07d6      	lsls	r6, r2, #31
 8023e42:	d527      	bpl.n	8023e94 <__sflush_r+0xb0>
 8023e44:	2200      	movs	r2, #0
 8023e46:	6062      	str	r2, [r4, #4]
 8023e48:	6922      	ldr	r2, [r4, #16]
 8023e4a:	04d9      	lsls	r1, r3, #19
 8023e4c:	6022      	str	r2, [r4, #0]
 8023e4e:	d504      	bpl.n	8023e5a <__sflush_r+0x76>
 8023e50:	1c42      	adds	r2, r0, #1
 8023e52:	d101      	bne.n	8023e58 <__sflush_r+0x74>
 8023e54:	682b      	ldr	r3, [r5, #0]
 8023e56:	b903      	cbnz	r3, 8023e5a <__sflush_r+0x76>
 8023e58:	6560      	str	r0, [r4, #84]	@ 0x54
 8023e5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023e5c:	602f      	str	r7, [r5, #0]
 8023e5e:	b1b9      	cbz	r1, 8023e90 <__sflush_r+0xac>
 8023e60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023e64:	4299      	cmp	r1, r3
 8023e66:	d002      	beq.n	8023e6e <__sflush_r+0x8a>
 8023e68:	4628      	mov	r0, r5
 8023e6a:	f7fe fd91 	bl	8022990 <_free_r>
 8023e6e:	2300      	movs	r3, #0
 8023e70:	6363      	str	r3, [r4, #52]	@ 0x34
 8023e72:	e00d      	b.n	8023e90 <__sflush_r+0xac>
 8023e74:	2301      	movs	r3, #1
 8023e76:	4628      	mov	r0, r5
 8023e78:	47b0      	blx	r6
 8023e7a:	4602      	mov	r2, r0
 8023e7c:	1c50      	adds	r0, r2, #1
 8023e7e:	d1c9      	bne.n	8023e14 <__sflush_r+0x30>
 8023e80:	682b      	ldr	r3, [r5, #0]
 8023e82:	2b00      	cmp	r3, #0
 8023e84:	d0c6      	beq.n	8023e14 <__sflush_r+0x30>
 8023e86:	2b1d      	cmp	r3, #29
 8023e88:	d001      	beq.n	8023e8e <__sflush_r+0xaa>
 8023e8a:	2b16      	cmp	r3, #22
 8023e8c:	d11d      	bne.n	8023eca <__sflush_r+0xe6>
 8023e8e:	602f      	str	r7, [r5, #0]
 8023e90:	2000      	movs	r0, #0
 8023e92:	e021      	b.n	8023ed8 <__sflush_r+0xf4>
 8023e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e98:	b21b      	sxth	r3, r3
 8023e9a:	e01a      	b.n	8023ed2 <__sflush_r+0xee>
 8023e9c:	690f      	ldr	r7, [r1, #16]
 8023e9e:	2f00      	cmp	r7, #0
 8023ea0:	d0f6      	beq.n	8023e90 <__sflush_r+0xac>
 8023ea2:	0793      	lsls	r3, r2, #30
 8023ea4:	bf18      	it	ne
 8023ea6:	2300      	movne	r3, #0
 8023ea8:	680e      	ldr	r6, [r1, #0]
 8023eaa:	bf08      	it	eq
 8023eac:	694b      	ldreq	r3, [r1, #20]
 8023eae:	1bf6      	subs	r6, r6, r7
 8023eb0:	600f      	str	r7, [r1, #0]
 8023eb2:	608b      	str	r3, [r1, #8]
 8023eb4:	2e00      	cmp	r6, #0
 8023eb6:	ddeb      	ble.n	8023e90 <__sflush_r+0xac>
 8023eb8:	4633      	mov	r3, r6
 8023eba:	463a      	mov	r2, r7
 8023ebc:	4628      	mov	r0, r5
 8023ebe:	6a21      	ldr	r1, [r4, #32]
 8023ec0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8023ec4:	47e0      	blx	ip
 8023ec6:	2800      	cmp	r0, #0
 8023ec8:	dc07      	bgt.n	8023eda <__sflush_r+0xf6>
 8023eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8023ed6:	81a3      	strh	r3, [r4, #12]
 8023ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023eda:	4407      	add	r7, r0
 8023edc:	1a36      	subs	r6, r6, r0
 8023ede:	e7e9      	b.n	8023eb4 <__sflush_r+0xd0>
 8023ee0:	20400001 	.word	0x20400001

08023ee4 <_fflush_r>:
 8023ee4:	b538      	push	{r3, r4, r5, lr}
 8023ee6:	690b      	ldr	r3, [r1, #16]
 8023ee8:	4605      	mov	r5, r0
 8023eea:	460c      	mov	r4, r1
 8023eec:	b913      	cbnz	r3, 8023ef4 <_fflush_r+0x10>
 8023eee:	2500      	movs	r5, #0
 8023ef0:	4628      	mov	r0, r5
 8023ef2:	bd38      	pop	{r3, r4, r5, pc}
 8023ef4:	b118      	cbz	r0, 8023efe <_fflush_r+0x1a>
 8023ef6:	6a03      	ldr	r3, [r0, #32]
 8023ef8:	b90b      	cbnz	r3, 8023efe <_fflush_r+0x1a>
 8023efa:	f7fd fbdd 	bl	80216b8 <__sinit>
 8023efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d0f3      	beq.n	8023eee <_fflush_r+0xa>
 8023f06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023f08:	07d0      	lsls	r0, r2, #31
 8023f0a:	d404      	bmi.n	8023f16 <_fflush_r+0x32>
 8023f0c:	0599      	lsls	r1, r3, #22
 8023f0e:	d402      	bmi.n	8023f16 <_fflush_r+0x32>
 8023f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023f12:	f7fd fea2 	bl	8021c5a <__retarget_lock_acquire_recursive>
 8023f16:	4628      	mov	r0, r5
 8023f18:	4621      	mov	r1, r4
 8023f1a:	f7ff ff63 	bl	8023de4 <__sflush_r>
 8023f1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023f20:	4605      	mov	r5, r0
 8023f22:	07da      	lsls	r2, r3, #31
 8023f24:	d4e4      	bmi.n	8023ef0 <_fflush_r+0xc>
 8023f26:	89a3      	ldrh	r3, [r4, #12]
 8023f28:	059b      	lsls	r3, r3, #22
 8023f2a:	d4e1      	bmi.n	8023ef0 <_fflush_r+0xc>
 8023f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023f2e:	f7fd fe95 	bl	8021c5c <__retarget_lock_release_recursive>
 8023f32:	e7dd      	b.n	8023ef0 <_fflush_r+0xc>

08023f34 <fiprintf>:
 8023f34:	b40e      	push	{r1, r2, r3}
 8023f36:	b503      	push	{r0, r1, lr}
 8023f38:	4601      	mov	r1, r0
 8023f3a:	ab03      	add	r3, sp, #12
 8023f3c:	4805      	ldr	r0, [pc, #20]	@ (8023f54 <fiprintf+0x20>)
 8023f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f42:	6800      	ldr	r0, [r0, #0]
 8023f44:	9301      	str	r3, [sp, #4]
 8023f46:	f7ff fce9 	bl	802391c <_vfiprintf_r>
 8023f4a:	b002      	add	sp, #8
 8023f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023f50:	b003      	add	sp, #12
 8023f52:	4770      	bx	lr
 8023f54:	2000012c 	.word	0x2000012c

08023f58 <__swhatbuf_r>:
 8023f58:	b570      	push	{r4, r5, r6, lr}
 8023f5a:	460c      	mov	r4, r1
 8023f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f60:	4615      	mov	r5, r2
 8023f62:	2900      	cmp	r1, #0
 8023f64:	461e      	mov	r6, r3
 8023f66:	b096      	sub	sp, #88	@ 0x58
 8023f68:	da0c      	bge.n	8023f84 <__swhatbuf_r+0x2c>
 8023f6a:	89a3      	ldrh	r3, [r4, #12]
 8023f6c:	2100      	movs	r1, #0
 8023f6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023f72:	bf14      	ite	ne
 8023f74:	2340      	movne	r3, #64	@ 0x40
 8023f76:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023f7a:	2000      	movs	r0, #0
 8023f7c:	6031      	str	r1, [r6, #0]
 8023f7e:	602b      	str	r3, [r5, #0]
 8023f80:	b016      	add	sp, #88	@ 0x58
 8023f82:	bd70      	pop	{r4, r5, r6, pc}
 8023f84:	466a      	mov	r2, sp
 8023f86:	f000 f8b9 	bl	80240fc <_fstat_r>
 8023f8a:	2800      	cmp	r0, #0
 8023f8c:	dbed      	blt.n	8023f6a <__swhatbuf_r+0x12>
 8023f8e:	9901      	ldr	r1, [sp, #4]
 8023f90:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023f94:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023f98:	4259      	negs	r1, r3
 8023f9a:	4159      	adcs	r1, r3
 8023f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023fa0:	e7eb      	b.n	8023f7a <__swhatbuf_r+0x22>

08023fa2 <__smakebuf_r>:
 8023fa2:	898b      	ldrh	r3, [r1, #12]
 8023fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023fa6:	079d      	lsls	r5, r3, #30
 8023fa8:	4606      	mov	r6, r0
 8023faa:	460c      	mov	r4, r1
 8023fac:	d507      	bpl.n	8023fbe <__smakebuf_r+0x1c>
 8023fae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023fb2:	6023      	str	r3, [r4, #0]
 8023fb4:	6123      	str	r3, [r4, #16]
 8023fb6:	2301      	movs	r3, #1
 8023fb8:	6163      	str	r3, [r4, #20]
 8023fba:	b003      	add	sp, #12
 8023fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023fbe:	466a      	mov	r2, sp
 8023fc0:	ab01      	add	r3, sp, #4
 8023fc2:	f7ff ffc9 	bl	8023f58 <__swhatbuf_r>
 8023fc6:	9f00      	ldr	r7, [sp, #0]
 8023fc8:	4605      	mov	r5, r0
 8023fca:	4639      	mov	r1, r7
 8023fcc:	4630      	mov	r0, r6
 8023fce:	f7fe fd51 	bl	8022a74 <_malloc_r>
 8023fd2:	b948      	cbnz	r0, 8023fe8 <__smakebuf_r+0x46>
 8023fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023fd8:	059a      	lsls	r2, r3, #22
 8023fda:	d4ee      	bmi.n	8023fba <__smakebuf_r+0x18>
 8023fdc:	f023 0303 	bic.w	r3, r3, #3
 8023fe0:	f043 0302 	orr.w	r3, r3, #2
 8023fe4:	81a3      	strh	r3, [r4, #12]
 8023fe6:	e7e2      	b.n	8023fae <__smakebuf_r+0xc>
 8023fe8:	89a3      	ldrh	r3, [r4, #12]
 8023fea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023ff2:	81a3      	strh	r3, [r4, #12]
 8023ff4:	9b01      	ldr	r3, [sp, #4]
 8023ff6:	6020      	str	r0, [r4, #0]
 8023ff8:	b15b      	cbz	r3, 8024012 <__smakebuf_r+0x70>
 8023ffa:	4630      	mov	r0, r6
 8023ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024000:	f000 f88e 	bl	8024120 <_isatty_r>
 8024004:	b128      	cbz	r0, 8024012 <__smakebuf_r+0x70>
 8024006:	89a3      	ldrh	r3, [r4, #12]
 8024008:	f023 0303 	bic.w	r3, r3, #3
 802400c:	f043 0301 	orr.w	r3, r3, #1
 8024010:	81a3      	strh	r3, [r4, #12]
 8024012:	89a3      	ldrh	r3, [r4, #12]
 8024014:	431d      	orrs	r5, r3
 8024016:	81a5      	strh	r5, [r4, #12]
 8024018:	e7cf      	b.n	8023fba <__smakebuf_r+0x18>

0802401a <__sccl>:
 802401a:	b570      	push	{r4, r5, r6, lr}
 802401c:	780b      	ldrb	r3, [r1, #0]
 802401e:	4604      	mov	r4, r0
 8024020:	2b5e      	cmp	r3, #94	@ 0x5e
 8024022:	bf0b      	itete	eq
 8024024:	784b      	ldrbeq	r3, [r1, #1]
 8024026:	1c4a      	addne	r2, r1, #1
 8024028:	1c8a      	addeq	r2, r1, #2
 802402a:	2100      	movne	r1, #0
 802402c:	bf08      	it	eq
 802402e:	2101      	moveq	r1, #1
 8024030:	3801      	subs	r0, #1
 8024032:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8024036:	f800 1f01 	strb.w	r1, [r0, #1]!
 802403a:	42a8      	cmp	r0, r5
 802403c:	d1fb      	bne.n	8024036 <__sccl+0x1c>
 802403e:	b90b      	cbnz	r3, 8024044 <__sccl+0x2a>
 8024040:	1e50      	subs	r0, r2, #1
 8024042:	bd70      	pop	{r4, r5, r6, pc}
 8024044:	f081 0101 	eor.w	r1, r1, #1
 8024048:	4610      	mov	r0, r2
 802404a:	54e1      	strb	r1, [r4, r3]
 802404c:	4602      	mov	r2, r0
 802404e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024052:	2d2d      	cmp	r5, #45	@ 0x2d
 8024054:	d005      	beq.n	8024062 <__sccl+0x48>
 8024056:	2d5d      	cmp	r5, #93	@ 0x5d
 8024058:	d016      	beq.n	8024088 <__sccl+0x6e>
 802405a:	2d00      	cmp	r5, #0
 802405c:	d0f1      	beq.n	8024042 <__sccl+0x28>
 802405e:	462b      	mov	r3, r5
 8024060:	e7f2      	b.n	8024048 <__sccl+0x2e>
 8024062:	7846      	ldrb	r6, [r0, #1]
 8024064:	2e5d      	cmp	r6, #93	@ 0x5d
 8024066:	d0fa      	beq.n	802405e <__sccl+0x44>
 8024068:	42b3      	cmp	r3, r6
 802406a:	dcf8      	bgt.n	802405e <__sccl+0x44>
 802406c:	461a      	mov	r2, r3
 802406e:	3002      	adds	r0, #2
 8024070:	3201      	adds	r2, #1
 8024072:	4296      	cmp	r6, r2
 8024074:	54a1      	strb	r1, [r4, r2]
 8024076:	dcfb      	bgt.n	8024070 <__sccl+0x56>
 8024078:	1af2      	subs	r2, r6, r3
 802407a:	3a01      	subs	r2, #1
 802407c:	42b3      	cmp	r3, r6
 802407e:	bfa8      	it	ge
 8024080:	2200      	movge	r2, #0
 8024082:	1c5d      	adds	r5, r3, #1
 8024084:	18ab      	adds	r3, r5, r2
 8024086:	e7e1      	b.n	802404c <__sccl+0x32>
 8024088:	4610      	mov	r0, r2
 802408a:	e7da      	b.n	8024042 <__sccl+0x28>

0802408c <__submore>:
 802408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024090:	460c      	mov	r4, r1
 8024092:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024098:	4299      	cmp	r1, r3
 802409a:	d11b      	bne.n	80240d4 <__submore+0x48>
 802409c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80240a0:	f7fe fce8 	bl	8022a74 <_malloc_r>
 80240a4:	b918      	cbnz	r0, 80240ae <__submore+0x22>
 80240a6:	f04f 30ff 	mov.w	r0, #4294967295
 80240aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80240ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80240b2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80240b4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80240b8:	6360      	str	r0, [r4, #52]	@ 0x34
 80240ba:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80240be:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80240c2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80240c6:	7043      	strb	r3, [r0, #1]
 80240c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80240cc:	7003      	strb	r3, [r0, #0]
 80240ce:	6020      	str	r0, [r4, #0]
 80240d0:	2000      	movs	r0, #0
 80240d2:	e7ea      	b.n	80240aa <__submore+0x1e>
 80240d4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80240d6:	0077      	lsls	r7, r6, #1
 80240d8:	463a      	mov	r2, r7
 80240da:	f000 f86e 	bl	80241ba <_realloc_r>
 80240de:	4605      	mov	r5, r0
 80240e0:	2800      	cmp	r0, #0
 80240e2:	d0e0      	beq.n	80240a6 <__submore+0x1a>
 80240e4:	eb00 0806 	add.w	r8, r0, r6
 80240e8:	4601      	mov	r1, r0
 80240ea:	4632      	mov	r2, r6
 80240ec:	4640      	mov	r0, r8
 80240ee:	f7fd fdc4 	bl	8021c7a <memcpy>
 80240f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80240f6:	f8c4 8000 	str.w	r8, [r4]
 80240fa:	e7e9      	b.n	80240d0 <__submore+0x44>

080240fc <_fstat_r>:
 80240fc:	b538      	push	{r3, r4, r5, lr}
 80240fe:	2300      	movs	r3, #0
 8024100:	4d06      	ldr	r5, [pc, #24]	@ (802411c <_fstat_r+0x20>)
 8024102:	4604      	mov	r4, r0
 8024104:	4608      	mov	r0, r1
 8024106:	4611      	mov	r1, r2
 8024108:	602b      	str	r3, [r5, #0]
 802410a:	f7df fee0 	bl	8003ece <_fstat>
 802410e:	1c43      	adds	r3, r0, #1
 8024110:	d102      	bne.n	8024118 <_fstat_r+0x1c>
 8024112:	682b      	ldr	r3, [r5, #0]
 8024114:	b103      	cbz	r3, 8024118 <_fstat_r+0x1c>
 8024116:	6023      	str	r3, [r4, #0]
 8024118:	bd38      	pop	{r3, r4, r5, pc}
 802411a:	bf00      	nop
 802411c:	2000c098 	.word	0x2000c098

08024120 <_isatty_r>:
 8024120:	b538      	push	{r3, r4, r5, lr}
 8024122:	2300      	movs	r3, #0
 8024124:	4d05      	ldr	r5, [pc, #20]	@ (802413c <_isatty_r+0x1c>)
 8024126:	4604      	mov	r4, r0
 8024128:	4608      	mov	r0, r1
 802412a:	602b      	str	r3, [r5, #0]
 802412c:	f7df fede 	bl	8003eec <_isatty>
 8024130:	1c43      	adds	r3, r0, #1
 8024132:	d102      	bne.n	802413a <_isatty_r+0x1a>
 8024134:	682b      	ldr	r3, [r5, #0]
 8024136:	b103      	cbz	r3, 802413a <_isatty_r+0x1a>
 8024138:	6023      	str	r3, [r4, #0]
 802413a:	bd38      	pop	{r3, r4, r5, pc}
 802413c:	2000c098 	.word	0x2000c098

08024140 <_sbrk_r>:
 8024140:	b538      	push	{r3, r4, r5, lr}
 8024142:	2300      	movs	r3, #0
 8024144:	4d05      	ldr	r5, [pc, #20]	@ (802415c <_sbrk_r+0x1c>)
 8024146:	4604      	mov	r4, r0
 8024148:	4608      	mov	r0, r1
 802414a:	602b      	str	r3, [r5, #0]
 802414c:	f7df fee4 	bl	8003f18 <_sbrk>
 8024150:	1c43      	adds	r3, r0, #1
 8024152:	d102      	bne.n	802415a <_sbrk_r+0x1a>
 8024154:	682b      	ldr	r3, [r5, #0]
 8024156:	b103      	cbz	r3, 802415a <_sbrk_r+0x1a>
 8024158:	6023      	str	r3, [r4, #0]
 802415a:	bd38      	pop	{r3, r4, r5, pc}
 802415c:	2000c098 	.word	0x2000c098

08024160 <abort>:
 8024160:	2006      	movs	r0, #6
 8024162:	b508      	push	{r3, lr}
 8024164:	f000 f8fe 	bl	8024364 <raise>
 8024168:	2001      	movs	r0, #1
 802416a:	f7df fe61 	bl	8003e30 <_exit>

0802416e <_calloc_r>:
 802416e:	b570      	push	{r4, r5, r6, lr}
 8024170:	fba1 5402 	umull	r5, r4, r1, r2
 8024174:	b934      	cbnz	r4, 8024184 <_calloc_r+0x16>
 8024176:	4629      	mov	r1, r5
 8024178:	f7fe fc7c 	bl	8022a74 <_malloc_r>
 802417c:	4606      	mov	r6, r0
 802417e:	b928      	cbnz	r0, 802418c <_calloc_r+0x1e>
 8024180:	4630      	mov	r0, r6
 8024182:	bd70      	pop	{r4, r5, r6, pc}
 8024184:	220c      	movs	r2, #12
 8024186:	2600      	movs	r6, #0
 8024188:	6002      	str	r2, [r0, #0]
 802418a:	e7f9      	b.n	8024180 <_calloc_r+0x12>
 802418c:	462a      	mov	r2, r5
 802418e:	4621      	mov	r1, r4
 8024190:	f7fd fc9e 	bl	8021ad0 <memset>
 8024194:	e7f4      	b.n	8024180 <_calloc_r+0x12>

08024196 <__ascii_mbtowc>:
 8024196:	b082      	sub	sp, #8
 8024198:	b901      	cbnz	r1, 802419c <__ascii_mbtowc+0x6>
 802419a:	a901      	add	r1, sp, #4
 802419c:	b142      	cbz	r2, 80241b0 <__ascii_mbtowc+0x1a>
 802419e:	b14b      	cbz	r3, 80241b4 <__ascii_mbtowc+0x1e>
 80241a0:	7813      	ldrb	r3, [r2, #0]
 80241a2:	600b      	str	r3, [r1, #0]
 80241a4:	7812      	ldrb	r2, [r2, #0]
 80241a6:	1e10      	subs	r0, r2, #0
 80241a8:	bf18      	it	ne
 80241aa:	2001      	movne	r0, #1
 80241ac:	b002      	add	sp, #8
 80241ae:	4770      	bx	lr
 80241b0:	4610      	mov	r0, r2
 80241b2:	e7fb      	b.n	80241ac <__ascii_mbtowc+0x16>
 80241b4:	f06f 0001 	mvn.w	r0, #1
 80241b8:	e7f8      	b.n	80241ac <__ascii_mbtowc+0x16>

080241ba <_realloc_r>:
 80241ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241be:	4607      	mov	r7, r0
 80241c0:	4614      	mov	r4, r2
 80241c2:	460d      	mov	r5, r1
 80241c4:	b921      	cbnz	r1, 80241d0 <_realloc_r+0x16>
 80241c6:	4611      	mov	r1, r2
 80241c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80241cc:	f7fe bc52 	b.w	8022a74 <_malloc_r>
 80241d0:	b92a      	cbnz	r2, 80241de <_realloc_r+0x24>
 80241d2:	f7fe fbdd 	bl	8022990 <_free_r>
 80241d6:	4625      	mov	r5, r4
 80241d8:	4628      	mov	r0, r5
 80241da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241de:	f000 f8dd 	bl	802439c <_malloc_usable_size_r>
 80241e2:	4284      	cmp	r4, r0
 80241e4:	4606      	mov	r6, r0
 80241e6:	d802      	bhi.n	80241ee <_realloc_r+0x34>
 80241e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80241ec:	d8f4      	bhi.n	80241d8 <_realloc_r+0x1e>
 80241ee:	4621      	mov	r1, r4
 80241f0:	4638      	mov	r0, r7
 80241f2:	f7fe fc3f 	bl	8022a74 <_malloc_r>
 80241f6:	4680      	mov	r8, r0
 80241f8:	b908      	cbnz	r0, 80241fe <_realloc_r+0x44>
 80241fa:	4645      	mov	r5, r8
 80241fc:	e7ec      	b.n	80241d8 <_realloc_r+0x1e>
 80241fe:	42b4      	cmp	r4, r6
 8024200:	4622      	mov	r2, r4
 8024202:	4629      	mov	r1, r5
 8024204:	bf28      	it	cs
 8024206:	4632      	movcs	r2, r6
 8024208:	f7fd fd37 	bl	8021c7a <memcpy>
 802420c:	4629      	mov	r1, r5
 802420e:	4638      	mov	r0, r7
 8024210:	f7fe fbbe 	bl	8022990 <_free_r>
 8024214:	e7f1      	b.n	80241fa <_realloc_r+0x40>
	...

08024218 <_strtoul_l.isra.0>:
 8024218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802421c:	4686      	mov	lr, r0
 802421e:	460d      	mov	r5, r1
 8024220:	4e33      	ldr	r6, [pc, #204]	@ (80242f0 <_strtoul_l.isra.0+0xd8>)
 8024222:	4628      	mov	r0, r5
 8024224:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024228:	5d37      	ldrb	r7, [r6, r4]
 802422a:	f017 0708 	ands.w	r7, r7, #8
 802422e:	d1f8      	bne.n	8024222 <_strtoul_l.isra.0+0xa>
 8024230:	2c2d      	cmp	r4, #45	@ 0x2d
 8024232:	d110      	bne.n	8024256 <_strtoul_l.isra.0+0x3e>
 8024234:	2701      	movs	r7, #1
 8024236:	782c      	ldrb	r4, [r5, #0]
 8024238:	1c85      	adds	r5, r0, #2
 802423a:	f033 0010 	bics.w	r0, r3, #16
 802423e:	d115      	bne.n	802426c <_strtoul_l.isra.0+0x54>
 8024240:	2c30      	cmp	r4, #48	@ 0x30
 8024242:	d10d      	bne.n	8024260 <_strtoul_l.isra.0+0x48>
 8024244:	7828      	ldrb	r0, [r5, #0]
 8024246:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802424a:	2858      	cmp	r0, #88	@ 0x58
 802424c:	d108      	bne.n	8024260 <_strtoul_l.isra.0+0x48>
 802424e:	786c      	ldrb	r4, [r5, #1]
 8024250:	3502      	adds	r5, #2
 8024252:	2310      	movs	r3, #16
 8024254:	e00a      	b.n	802426c <_strtoul_l.isra.0+0x54>
 8024256:	2c2b      	cmp	r4, #43	@ 0x2b
 8024258:	bf04      	itt	eq
 802425a:	782c      	ldrbeq	r4, [r5, #0]
 802425c:	1c85      	addeq	r5, r0, #2
 802425e:	e7ec      	b.n	802423a <_strtoul_l.isra.0+0x22>
 8024260:	2b00      	cmp	r3, #0
 8024262:	d1f6      	bne.n	8024252 <_strtoul_l.isra.0+0x3a>
 8024264:	2c30      	cmp	r4, #48	@ 0x30
 8024266:	bf14      	ite	ne
 8024268:	230a      	movne	r3, #10
 802426a:	2308      	moveq	r3, #8
 802426c:	f04f 38ff 	mov.w	r8, #4294967295
 8024270:	fbb8 f8f3 	udiv	r8, r8, r3
 8024274:	2600      	movs	r6, #0
 8024276:	fb03 f908 	mul.w	r9, r3, r8
 802427a:	4630      	mov	r0, r6
 802427c:	ea6f 0909 	mvn.w	r9, r9
 8024280:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8024284:	f1bc 0f09 	cmp.w	ip, #9
 8024288:	d810      	bhi.n	80242ac <_strtoul_l.isra.0+0x94>
 802428a:	4664      	mov	r4, ip
 802428c:	42a3      	cmp	r3, r4
 802428e:	dd1e      	ble.n	80242ce <_strtoul_l.isra.0+0xb6>
 8024290:	f1b6 3fff 	cmp.w	r6, #4294967295
 8024294:	d007      	beq.n	80242a6 <_strtoul_l.isra.0+0x8e>
 8024296:	4580      	cmp	r8, r0
 8024298:	d316      	bcc.n	80242c8 <_strtoul_l.isra.0+0xb0>
 802429a:	d101      	bne.n	80242a0 <_strtoul_l.isra.0+0x88>
 802429c:	45a1      	cmp	r9, r4
 802429e:	db13      	blt.n	80242c8 <_strtoul_l.isra.0+0xb0>
 80242a0:	2601      	movs	r6, #1
 80242a2:	fb00 4003 	mla	r0, r0, r3, r4
 80242a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80242aa:	e7e9      	b.n	8024280 <_strtoul_l.isra.0+0x68>
 80242ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80242b0:	f1bc 0f19 	cmp.w	ip, #25
 80242b4:	d801      	bhi.n	80242ba <_strtoul_l.isra.0+0xa2>
 80242b6:	3c37      	subs	r4, #55	@ 0x37
 80242b8:	e7e8      	b.n	802428c <_strtoul_l.isra.0+0x74>
 80242ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80242be:	f1bc 0f19 	cmp.w	ip, #25
 80242c2:	d804      	bhi.n	80242ce <_strtoul_l.isra.0+0xb6>
 80242c4:	3c57      	subs	r4, #87	@ 0x57
 80242c6:	e7e1      	b.n	802428c <_strtoul_l.isra.0+0x74>
 80242c8:	f04f 36ff 	mov.w	r6, #4294967295
 80242cc:	e7eb      	b.n	80242a6 <_strtoul_l.isra.0+0x8e>
 80242ce:	1c73      	adds	r3, r6, #1
 80242d0:	d106      	bne.n	80242e0 <_strtoul_l.isra.0+0xc8>
 80242d2:	2322      	movs	r3, #34	@ 0x22
 80242d4:	4630      	mov	r0, r6
 80242d6:	f8ce 3000 	str.w	r3, [lr]
 80242da:	b932      	cbnz	r2, 80242ea <_strtoul_l.isra.0+0xd2>
 80242dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80242e0:	b107      	cbz	r7, 80242e4 <_strtoul_l.isra.0+0xcc>
 80242e2:	4240      	negs	r0, r0
 80242e4:	2a00      	cmp	r2, #0
 80242e6:	d0f9      	beq.n	80242dc <_strtoul_l.isra.0+0xc4>
 80242e8:	b106      	cbz	r6, 80242ec <_strtoul_l.isra.0+0xd4>
 80242ea:	1e69      	subs	r1, r5, #1
 80242ec:	6011      	str	r1, [r2, #0]
 80242ee:	e7f5      	b.n	80242dc <_strtoul_l.isra.0+0xc4>
 80242f0:	08030845 	.word	0x08030845

080242f4 <_strtoul_r>:
 80242f4:	f7ff bf90 	b.w	8024218 <_strtoul_l.isra.0>

080242f8 <__ascii_wctomb>:
 80242f8:	4603      	mov	r3, r0
 80242fa:	4608      	mov	r0, r1
 80242fc:	b141      	cbz	r1, 8024310 <__ascii_wctomb+0x18>
 80242fe:	2aff      	cmp	r2, #255	@ 0xff
 8024300:	d904      	bls.n	802430c <__ascii_wctomb+0x14>
 8024302:	228a      	movs	r2, #138	@ 0x8a
 8024304:	f04f 30ff 	mov.w	r0, #4294967295
 8024308:	601a      	str	r2, [r3, #0]
 802430a:	4770      	bx	lr
 802430c:	2001      	movs	r0, #1
 802430e:	700a      	strb	r2, [r1, #0]
 8024310:	4770      	bx	lr

08024312 <_raise_r>:
 8024312:	291f      	cmp	r1, #31
 8024314:	b538      	push	{r3, r4, r5, lr}
 8024316:	4605      	mov	r5, r0
 8024318:	460c      	mov	r4, r1
 802431a:	d904      	bls.n	8024326 <_raise_r+0x14>
 802431c:	2316      	movs	r3, #22
 802431e:	6003      	str	r3, [r0, #0]
 8024320:	f04f 30ff 	mov.w	r0, #4294967295
 8024324:	bd38      	pop	{r3, r4, r5, pc}
 8024326:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024328:	b112      	cbz	r2, 8024330 <_raise_r+0x1e>
 802432a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802432e:	b94b      	cbnz	r3, 8024344 <_raise_r+0x32>
 8024330:	4628      	mov	r0, r5
 8024332:	f000 f831 	bl	8024398 <_getpid_r>
 8024336:	4622      	mov	r2, r4
 8024338:	4601      	mov	r1, r0
 802433a:	4628      	mov	r0, r5
 802433c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024340:	f000 b818 	b.w	8024374 <_kill_r>
 8024344:	2b01      	cmp	r3, #1
 8024346:	d00a      	beq.n	802435e <_raise_r+0x4c>
 8024348:	1c59      	adds	r1, r3, #1
 802434a:	d103      	bne.n	8024354 <_raise_r+0x42>
 802434c:	2316      	movs	r3, #22
 802434e:	6003      	str	r3, [r0, #0]
 8024350:	2001      	movs	r0, #1
 8024352:	e7e7      	b.n	8024324 <_raise_r+0x12>
 8024354:	2100      	movs	r1, #0
 8024356:	4620      	mov	r0, r4
 8024358:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802435c:	4798      	blx	r3
 802435e:	2000      	movs	r0, #0
 8024360:	e7e0      	b.n	8024324 <_raise_r+0x12>
	...

08024364 <raise>:
 8024364:	4b02      	ldr	r3, [pc, #8]	@ (8024370 <raise+0xc>)
 8024366:	4601      	mov	r1, r0
 8024368:	6818      	ldr	r0, [r3, #0]
 802436a:	f7ff bfd2 	b.w	8024312 <_raise_r>
 802436e:	bf00      	nop
 8024370:	2000012c 	.word	0x2000012c

08024374 <_kill_r>:
 8024374:	b538      	push	{r3, r4, r5, lr}
 8024376:	2300      	movs	r3, #0
 8024378:	4d06      	ldr	r5, [pc, #24]	@ (8024394 <_kill_r+0x20>)
 802437a:	4604      	mov	r4, r0
 802437c:	4608      	mov	r0, r1
 802437e:	4611      	mov	r1, r2
 8024380:	602b      	str	r3, [r5, #0]
 8024382:	f7df fd43 	bl	8003e0c <_kill>
 8024386:	1c43      	adds	r3, r0, #1
 8024388:	d102      	bne.n	8024390 <_kill_r+0x1c>
 802438a:	682b      	ldr	r3, [r5, #0]
 802438c:	b103      	cbz	r3, 8024390 <_kill_r+0x1c>
 802438e:	6023      	str	r3, [r4, #0]
 8024390:	bd38      	pop	{r3, r4, r5, pc}
 8024392:	bf00      	nop
 8024394:	2000c098 	.word	0x2000c098

08024398 <_getpid_r>:
 8024398:	f7df bd30 	b.w	8003dfc <_getpid>

0802439c <_malloc_usable_size_r>:
 802439c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80243a0:	1f18      	subs	r0, r3, #4
 80243a2:	2b00      	cmp	r3, #0
 80243a4:	bfbc      	itt	lt
 80243a6:	580b      	ldrlt	r3, [r1, r0]
 80243a8:	18c0      	addlt	r0, r0, r3
 80243aa:	4770      	bx	lr

080243ac <sqrtf>:
 80243ac:	b538      	push	{r3, r4, r5, lr}
 80243ae:	4605      	mov	r5, r0
 80243b0:	f000 f816 	bl	80243e0 <__ieee754_sqrtf>
 80243b4:	4629      	mov	r1, r5
 80243b6:	4604      	mov	r4, r0
 80243b8:	4628      	mov	r0, r5
 80243ba:	f7dc fecf 	bl	800115c <__aeabi_fcmpun>
 80243be:	b968      	cbnz	r0, 80243dc <sqrtf+0x30>
 80243c0:	2100      	movs	r1, #0
 80243c2:	4628      	mov	r0, r5
 80243c4:	f7dc fea2 	bl	800110c <__aeabi_fcmplt>
 80243c8:	b140      	cbz	r0, 80243dc <sqrtf+0x30>
 80243ca:	f7fd fc1b 	bl	8021c04 <__errno>
 80243ce:	2321      	movs	r3, #33	@ 0x21
 80243d0:	2100      	movs	r1, #0
 80243d2:	6003      	str	r3, [r0, #0]
 80243d4:	4608      	mov	r0, r1
 80243d6:	f7dc fdaf 	bl	8000f38 <__aeabi_fdiv>
 80243da:	4604      	mov	r4, r0
 80243dc:	4620      	mov	r0, r4
 80243de:	bd38      	pop	{r3, r4, r5, pc}

080243e0 <__ieee754_sqrtf>:
 80243e0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80243e4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80243e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80243ec:	4603      	mov	r3, r0
 80243ee:	4604      	mov	r4, r0
 80243f0:	d30a      	bcc.n	8024408 <__ieee754_sqrtf+0x28>
 80243f2:	4601      	mov	r1, r0
 80243f4:	f7dc fcec 	bl	8000dd0 <__aeabi_fmul>
 80243f8:	4601      	mov	r1, r0
 80243fa:	4620      	mov	r0, r4
 80243fc:	f7dc fbe0 	bl	8000bc0 <__addsf3>
 8024400:	4604      	mov	r4, r0
 8024402:	4620      	mov	r0, r4
 8024404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024408:	2a00      	cmp	r2, #0
 802440a:	d0fa      	beq.n	8024402 <__ieee754_sqrtf+0x22>
 802440c:	2800      	cmp	r0, #0
 802440e:	da06      	bge.n	802441e <__ieee754_sqrtf+0x3e>
 8024410:	4601      	mov	r1, r0
 8024412:	f7dc fbd3 	bl	8000bbc <__aeabi_fsub>
 8024416:	4601      	mov	r1, r0
 8024418:	f7dc fd8e 	bl	8000f38 <__aeabi_fdiv>
 802441c:	e7f0      	b.n	8024400 <__ieee754_sqrtf+0x20>
 802441e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8024422:	d03c      	beq.n	802449e <__ieee754_sqrtf+0xbe>
 8024424:	15c2      	asrs	r2, r0, #23
 8024426:	2400      	movs	r4, #0
 8024428:	2019      	movs	r0, #25
 802442a:	4626      	mov	r6, r4
 802442c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8024430:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024434:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8024438:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802443c:	07d2      	lsls	r2, r2, #31
 802443e:	bf58      	it	pl
 8024440:	005b      	lslpl	r3, r3, #1
 8024442:	106d      	asrs	r5, r5, #1
 8024444:	005b      	lsls	r3, r3, #1
 8024446:	1872      	adds	r2, r6, r1
 8024448:	429a      	cmp	r2, r3
 802444a:	bfcf      	iteee	gt
 802444c:	461a      	movgt	r2, r3
 802444e:	1856      	addle	r6, r2, r1
 8024450:	1864      	addle	r4, r4, r1
 8024452:	1a9a      	suble	r2, r3, r2
 8024454:	3801      	subs	r0, #1
 8024456:	ea4f 0342 	mov.w	r3, r2, lsl #1
 802445a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802445e:	d1f2      	bne.n	8024446 <__ieee754_sqrtf+0x66>
 8024460:	b1ba      	cbz	r2, 8024492 <__ieee754_sqrtf+0xb2>
 8024462:	4e15      	ldr	r6, [pc, #84]	@ (80244b8 <__ieee754_sqrtf+0xd8>)
 8024464:	4f15      	ldr	r7, [pc, #84]	@ (80244bc <__ieee754_sqrtf+0xdc>)
 8024466:	6830      	ldr	r0, [r6, #0]
 8024468:	6839      	ldr	r1, [r7, #0]
 802446a:	f7dc fba7 	bl	8000bbc <__aeabi_fsub>
 802446e:	f8d6 8000 	ldr.w	r8, [r6]
 8024472:	4601      	mov	r1, r0
 8024474:	4640      	mov	r0, r8
 8024476:	f7dc fe53 	bl	8001120 <__aeabi_fcmple>
 802447a:	b150      	cbz	r0, 8024492 <__ieee754_sqrtf+0xb2>
 802447c:	6830      	ldr	r0, [r6, #0]
 802447e:	6839      	ldr	r1, [r7, #0]
 8024480:	f7dc fb9e 	bl	8000bc0 <__addsf3>
 8024484:	6836      	ldr	r6, [r6, #0]
 8024486:	4601      	mov	r1, r0
 8024488:	4630      	mov	r0, r6
 802448a:	f7dc fe3f 	bl	800110c <__aeabi_fcmplt>
 802448e:	b170      	cbz	r0, 80244ae <__ieee754_sqrtf+0xce>
 8024490:	3402      	adds	r4, #2
 8024492:	1064      	asrs	r4, r4, #1
 8024494:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8024498:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 802449c:	e7b1      	b.n	8024402 <__ieee754_sqrtf+0x22>
 802449e:	005b      	lsls	r3, r3, #1
 80244a0:	0218      	lsls	r0, r3, #8
 80244a2:	460a      	mov	r2, r1
 80244a4:	f101 0101 	add.w	r1, r1, #1
 80244a8:	d5f9      	bpl.n	802449e <__ieee754_sqrtf+0xbe>
 80244aa:	4252      	negs	r2, r2
 80244ac:	e7bb      	b.n	8024426 <__ieee754_sqrtf+0x46>
 80244ae:	3401      	adds	r4, #1
 80244b0:	f024 0401 	bic.w	r4, r4, #1
 80244b4:	e7ed      	b.n	8024492 <__ieee754_sqrtf+0xb2>
 80244b6:	bf00      	nop
 80244b8:	08030a4c 	.word	0x08030a4c
 80244bc:	08030a48 	.word	0x08030a48

080244c0 <_init>:
 80244c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244c2:	bf00      	nop
 80244c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80244c6:	bc08      	pop	{r3}
 80244c8:	469e      	mov	lr, r3
 80244ca:	4770      	bx	lr

080244cc <_fini>:
 80244cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244ce:	bf00      	nop
 80244d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80244d2:	bc08      	pop	{r3}
 80244d4:	469e      	mov	lr, r3
 80244d6:	4770      	bx	lr
